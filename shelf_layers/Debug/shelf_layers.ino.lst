
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\shelf_layers\teensy31\Debug/shelf_layers.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 5d 44 00 00 15 44 00 00     ... ....]D...D..
      10:	15 44 00 00 15 44 00 00 15 44 00 00 15 44 00 00     .D...D...D...D..
      20:	15 44 00 00 15 44 00 00 15 44 00 00 5d 44 00 00     .D...D...D..]D..
      30:	5d 44 00 00 15 44 00 00 89 58 00 00 8d 59 00 00     ]D...D...X...Y..
      40:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
      50:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
      60:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
      70:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
      80:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
      90:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
      a0:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
      b0:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
      c0:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
      d0:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
      e0:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
      f0:	5d 44 00 00 81 5b 00 00 5d 44 00 00 ad 5c 00 00     ]D...[..]D...\..
     100:	5d 44 00 00 d9 5d 00 00 5d 44 00 00 5d 44 00 00     ]D...]..]D..]D..
     110:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
     120:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
     130:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
     140:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
     150:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
     160:	5d 44 00 00 a5 48 00 00 5d 44 00 00 5d 44 00 00     ]D...H..]D..]D..
     170:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
     180:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
     190:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
     1a0:	5d 44 00 00 5d 44 00 00 5d 44 00 00 5d 44 00 00     ]D..]D..]D..]D..
     1b0:	5d 44 00 00 5d 44 00 00 5d 44 00 00                 ]D..]D..]D..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f004 f948 	bl	4464 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f004 f99c 	bl	4610 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f004 f90d 	bl	4500 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f004 f8fe 	bl	4500 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f005 fe1a 	bl	5f40 <__libc_init_array>

	startup_late_hook();
     30c:	f004 f8b0 	bl	4470 <startup_late_hook>
	main();
     310:	f005 fb44 	bl	599c <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8818 	.word	0x1fff8818
     33c:	00007f64 	.word	0x00007f64
     340:	1fff871c 	.word	0x1fff871c
     344:	1fff8818 	.word	0x1fff8818
     348:	1fff911c 	.word	0x1fff911c
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e161275 	.word	0x5e161275
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8818 	.word	0x1fff8818
     42c:	00000000 	.word	0x00000000
     430:	00007f68 	.word	0x00007f68

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff881c 	.word	0x1fff881c
     460:	00007f68 	.word	0x00007f68
     464:	1fff8818 	.word	0x1fff8818
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     474:	6842      	ldr	r2, [r0, #4]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()>:

// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     490:	b508      	push	{r3, lr}
		cooling = random8(50, 120);
     492:	2101      	movs	r1, #1
     494:	2007      	movs	r0, #7
     496:	f004 f845 	bl	4524 <pinMode>

// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     49a:	2101      	movs	r1, #1
		cooling = random8(50, 120);
     49c:	200e      	movs	r0, #14
     49e:	f004 f841 	bl	4524 <pinMode>

// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     4a2:	4a0b      	ldr	r2, [pc, #44]	; (4d0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x40>)
		cooling = random8(50, 120);
     4a4:	6813      	ldr	r3, [r2, #0]
     4a6:	04d9      	lsls	r1, r3, #19

// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     4a8:	d405      	bmi.n	4b6 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x26>
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     4aa:	490a      	ldr	r1, [pc, #40]	; (4d4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x44>)
     4ac:	480a      	ldr	r0, [pc, #40]	; (4d8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x48>)
     4ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     4b2:	6013      	str	r3, [r2, #0]
		cooling = random8(50, 120);
		use_palette = 1;
		this_dir = random8(2);
     4b4:	60c8      	str	r0, [r1, #12]
     4b6:	4a07      	ldr	r2, [pc, #28]	; (4d4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x44>)
		this_delay = 15;
		use_all_shelves = random8(2);
     4b8:	6813      	ldr	r3, [r2, #0]
     4ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 1;
		this_dir = random8(2);
		this_delay = 15;
     4be:	6013      	str	r3, [r2, #0]
		use_all_shelves = random8(2);
     4c0:	6813      	ldr	r3, [r2, #0]
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 1;
		this_dir = random8(2);
     4c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
		this_delay = 15;
     4c6:	f023 0301 	bic.w	r3, r3, #1
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 1;
     4ca:	6013      	str	r3, [r2, #0]
		this_dir = random8(2);
		this_delay = 15;
     4cc:	bd08      	pop	{r3, pc}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     4ce:	bf00      	nop


// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
     4d0:	4004803c 	.word	0x4004803c
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     4d4:	4002c000 	.word	0x4002c000
     4d8:	38010001 	.word	0x38010001

000004dc <CLEDController::clearLeds(int)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4de:	b08b      	sub	sp, #44	; 0x2c
     4e0:	2300      	movs	r3, #0
     4e2:	6805      	ldr	r5, [r0, #0]
     4e4:	f88d 3004 	strb.w	r3, [sp, #4]
     4e8:	f88d 3005 	strb.w	r3, [sp, #5]
     4ec:	f88d 3006 	strb.w	r3, [sp, #6]
     4f0:	682e      	ldr	r6, [r5, #0]
     4f2:	4a37      	ldr	r2, [pc, #220]	; (5d0 <CLEDController::clearLeds(int)+0xf4>)
     4f4:	f88d 3008 	strb.w	r3, [sp, #8]
     4f8:	4296      	cmp	r6, r2
     4fa:	f88d 3009 	strb.w	r3, [sp, #9]
     4fe:	f88d 300a 	strb.w	r3, [sp, #10]
     502:	d15f      	bne.n	5c4 <CLEDController::clearLeds(int)+0xe8>
     504:	7c82      	ldrb	r2, [r0, #18]
     506:	9104      	str	r1, [sp, #16]
     508:	4604      	mov	r4, r0
     50a:	2a01      	cmp	r2, #1
     50c:	a801      	add	r0, sp, #4
     50e:	9105      	str	r1, [sp, #20]
     510:	f88d 301e 	strb.w	r3, [sp, #30]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     514:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     518:	f88d 3020 	strb.w	r3, [sp, #32]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     51c:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     51e:	d015      	beq.n	54c <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     520:	f88d 301d 	strb.w	r3, [sp, #29]
     524:	f88d 301c 	strb.w	r3, [sp, #28]
     528:	f88d 301b 	strb.w	r3, [sp, #27]
     52c:	f88d 301a 	strb.w	r3, [sp, #26]
     530:	f88d 3019 	strb.w	r3, [sp, #25]
     534:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     538:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     53a:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     53c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     540:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     542:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     544:	a903      	add	r1, sp, #12
     546:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     548:	b00b      	add	sp, #44	; 0x2c
     54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     54c:	4a21      	ldr	r2, [pc, #132]	; (5d4 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     54e:	7813      	ldrb	r3, [r2, #0]
     550:	3301      	adds	r3, #1
     552:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     556:	f013 0f01 	tst.w	r3, #1
     55a:	bf14      	ite	ne
     55c:	2180      	movne	r1, #128	; 0x80
     55e:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     560:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     562:	079a      	lsls	r2, r3, #30
     564:	bf44      	itt	mi
     566:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     56a:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     56c:	075b      	lsls	r3, r3, #29
     56e:	bf48      	it	mi
     570:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     574:	3110      	adds	r1, #16
     576:	2200      	movs	r2, #0
     578:	b2c9      	uxtb	r1, r1
     57a:	f10d 031b 	add.w	r3, sp, #27
     57e:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     582:	f44f 7e80 	mov.w	lr, #256	; 0x100
     586:	b1aa      	cbz	r2, 5b4 <CLEDController::clearLeds(int)+0xd8>
     588:	fb9e f2f2 	sdiv	r2, lr, r2
     58c:	b2d2      	uxtb	r2, r2
     58e:	1c50      	adds	r0, r2, #1
     590:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     592:	fb00 1501 	mla	r5, r0, r1, r1
     596:	122d      	asrs	r5, r5, #8
     598:	7018      	strb	r0, [r3, #0]
     59a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     59c:	b105      	cbz	r5, 5a0 <CLEDController::clearLeds(int)+0xc4>
     59e:	3e01      	subs	r6, #1
     5a0:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     5a4:	b100      	cbz	r0, 5a8 <CLEDController::clearLeds(int)+0xcc>
     5a6:	701a      	strb	r2, [r3, #0]
     5a8:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     5aa:	429f      	cmp	r7, r3
     5ac:	d008      	beq.n	5c0 <CLEDController::clearLeds(int)+0xe4>
     5ae:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5b0:	2a00      	cmp	r2, #0
     5b2:	d1e9      	bne.n	588 <CLEDController::clearLeds(int)+0xac>
     5b4:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     5b6:	f803 2c03 	strb.w	r2, [r3, #-3]
     5ba:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     5bc:	429f      	cmp	r7, r3
     5be:	d1f6      	bne.n	5ae <CLEDController::clearLeds(int)+0xd2>
     5c0:	6825      	ldr	r5, [r4, #0]
     5c2:	e7b9      	b.n	538 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     5c4:	460a      	mov	r2, r1
     5c6:	ab02      	add	r3, sp, #8
     5c8:	a901      	add	r1, sp, #4
     5ca:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     5cc:	b00b      	add	sp, #44	; 0x2c
     5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5d0:	000017c1 	.word	0x000017c1
     5d4:	1fff8834 	.word	0x1fff8834

000005d8 <rainbow_march()>:
 * this_dir
 */


void rainbow_march() {
	if (mode_change) {
     5d8:	4841      	ldr	r0, [pc, #260]	; (6e0 <rainbow_march()+0x108>)
     5da:	7803      	ldrb	r3, [r0, #0]
 * this_rot
 * this_dir
 */


void rainbow_march() {
     5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mode_change) {
     5e0:	2b00      	cmp	r3, #0
     5e2:	d137      	bne.n	654 <rainbow_march()+0x7c>
     5e4:	4d3f      	ldr	r5, [pc, #252]	; (6e4 <rainbow_march()+0x10c>)
     5e6:	4c40      	ldr	r4, [pc, #256]	; (6e8 <rainbow_march()+0x110>)
     5e8:	4f40      	ldr	r7, [pc, #256]	; (6ec <rainbow_march()+0x114>)
     5ea:	f8df 8124 	ldr.w	r8, [pc, #292]	; 710 <rainbow_march()+0x138>
		this_diff = random8(1, 9);
		this_delay = 10;
		use_all_shelves = 1;//random8(2);
		Serial.println("rainbow_march");
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
     5ee:	782b      	ldrb	r3, [r5, #0]
     5f0:	4e3f      	ldr	r6, [pc, #252]	; (6f0 <rainbow_march()+0x118>)
     5f2:	b9fb      	cbnz	r3, 634 <rainbow_march()+0x5c>
     5f4:	7823      	ldrb	r3, [r4, #0]
     5f6:	7832      	ldrb	r2, [r6, #0]
     5f8:	441a      	add	r2, r3
	if (!use_all_shelves) {
     5fa:	f898 3000 	ldrb.w	r3, [r8]
		this_diff = random8(1, 9);
		this_delay = 10;
		use_all_shelves = 1;//random8(2);
		Serial.println("rainbow_march");
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
     5fe:	b2d2      	uxtb	r2, r2
     600:	7032      	strb	r2, [r6, #0]
	if (!use_all_shelves) {
     602:	b303      	cbz	r3, 646 <rainbow_march()+0x6e>
     604:	4d3b      	ldr	r5, [pc, #236]	; (6f4 <rainbow_march()+0x11c>)
     606:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 6f8 <rainbow_march()+0x120>
     60a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 714 <rainbow_march()+0x13c>
     60e:	2400      	movs	r4, #0
		fill_rainbow(leds, NUM_LEDS, this_index, this_diff);
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			fill_rainbow(&(leds[shelf[s][0]]), shelf_num_leds[s], this_index, this_diff);
     610:	f818 0004 	ldrb.w	r0, [r8, r4]
     614:	783b      	ldrb	r3, [r7, #0]
     616:	f815 1b01 	ldrb.w	r1, [r5], #1
     61a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     61e:	4448      	add	r0, r9
     620:	3441      	adds	r4, #65	; 0x41
     622:	f003 f841 	bl	36a8 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
	if (!use_all_shelves) {
		fill_rainbow(leds, NUM_LEDS, this_index, this_diff);
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
     626:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
     62a:	d001      	beq.n	630 <rainbow_march()+0x58>
     62c:	7832      	ldrb	r2, [r6, #0]
     62e:	e7ef      	b.n	610 <rainbow_march()+0x38>
     630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		this_diff = random8(1, 9);
		this_delay = 10;
		use_all_shelves = 1;//random8(2);
		Serial.println("rainbow_march");
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
     634:	7833      	ldrb	r3, [r6, #0]
     636:	7822      	ldrb	r2, [r4, #0]
     638:	1a9a      	subs	r2, r3, r2
	if (!use_all_shelves) {
     63a:	f898 3000 	ldrb.w	r3, [r8]
		this_diff = random8(1, 9);
		this_delay = 10;
		use_all_shelves = 1;//random8(2);
		Serial.println("rainbow_march");
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
     63e:	b2d2      	uxtb	r2, r2
     640:	7032      	strb	r2, [r6, #0]
	if (!use_all_shelves) {
     642:	2b00      	cmp	r3, #0
     644:	d1de      	bne.n	604 <rainbow_march()+0x2c>
		fill_rainbow(leds, NUM_LEDS, this_index, this_diff);
     646:	783b      	ldrb	r3, [r7, #0]
     648:	482b      	ldr	r0, [pc, #172]	; (6f8 <rainbow_march()+0x120>)
     64a:	21bc      	movs	r1, #188	; 0xbc
	else {
		for (uint8_t s = 0; s < 4; s++) {
			fill_rainbow(&(leds[shelf[s][0]]), shelf_num_leds[s], this_index, this_diff);
		}
	}
}
     64c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		use_all_shelves = 1;//random8(2);
		Serial.println("rainbow_march");
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
	if (!use_all_shelves) {
		fill_rainbow(leds, NUM_LEDS, this_index, this_diff);
     650:	f003 b82a 	b.w	36a8 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
     654:	4e29      	ldr	r6, [pc, #164]	; (6fc <rainbow_march()+0x124>)

void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
     656:	4d23      	ldr	r5, [pc, #140]	; (6e4 <rainbow_march()+0x10c>)
     658:	8833      	ldrh	r3, [r6, #0]
		this_rot = random8(1, 5);
     65a:	4c23      	ldr	r4, [pc, #140]	; (6e8 <rainbow_march()+0x110>)
		this_diff = random8(1, 9);
     65c:	4f23      	ldr	r7, [pc, #140]	; (6ec <rainbow_march()+0x114>)
		this_delay = 10;
		use_all_shelves = 1;//random8(2);
     65e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 710 <rainbow_march()+0x138>
     662:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     666:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     66a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     66e:	3319      	adds	r3, #25
     670:	b29b      	uxth	r3, r3
     672:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     676:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     67a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
     67e:	3219      	adds	r2, #25
     680:	b292      	uxth	r2, r2
     682:	eb02 2142 	add.w	r1, r2, r2, lsl #9
     686:	eb02 0181 	add.w	r1, r2, r1, lsl #2
     68a:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
     68e:	3119      	adds	r1, #25
     690:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     692:	eb02 2212 	add.w	r2, r2, r2, lsr #8
     696:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     69a:	8031      	strh	r1, [r6, #0]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     69c:	eb01 2e11 	add.w	lr, r1, r1, lsr #8

void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
     6a0:	f3c3 13c0 	ubfx	r3, r3, #7, #1


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
     6a4:	4916      	ldr	r1, [pc, #88]	; (700 <rainbow_march()+0x128>)
		this_dir = random8(2);
     6a6:	702b      	strb	r3, [r5, #0]
		this_rot = random8(1, 5);
     6a8:	f3c2 1281 	ubfx	r2, r2, #6, #2
 */


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
     6ac:	2300      	movs	r3, #0
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
     6ae:	3201      	adds	r2, #1
		this_diff = random8(1, 9);
		this_delay = 10;
     6b0:	4e14      	ldr	r6, [pc, #80]	; (704 <rainbow_march()+0x12c>)
void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
     6b2:	7022      	strb	r2, [r4, #0]
		this_diff = random8(1, 9);
     6b4:	f3ce 1e42 	ubfx	lr, lr, #5, #3
     6b8:	f10e 0e01 	add.w	lr, lr, #1


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
     6bc:	700b      	strb	r3, [r1, #0]
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 9);
		this_delay = 10;
     6be:	220a      	movs	r2, #10
 */


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
     6c0:	7003      	strb	r3, [r0, #0]
     6c2:	210d      	movs	r1, #13
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 9);
		this_delay = 10;
		use_all_shelves = 1;//random8(2);
     6c4:	2301      	movs	r3, #1
     6c6:	4810      	ldr	r0, [pc, #64]	; (708 <rainbow_march()+0x130>)
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 9);
     6c8:	f887 e000 	strb.w	lr, [r7]
		this_delay = 10;
     6cc:	6032      	str	r2, [r6, #0]
		use_all_shelves = 1;//random8(2);
     6ce:	f888 3000 	strb.w	r3, [r8]
     6d2:	f004 ff67 	bl	55a4 <usb_serial_write>
     6d6:	480d      	ldr	r0, [pc, #52]	; (70c <rainbow_march()+0x134>)
     6d8:	f005 f968 	bl	59ac <Print::println()>
     6dc:	e787      	b.n	5ee <rainbow_march()+0x16>
     6de:	bf00      	nop
     6e0:	1fff8724 	.word	0x1fff8724
     6e4:	1fff8b70 	.word	0x1fff8b70
     6e8:	1fff8729 	.word	0x1fff8729
     6ec:	1fff871d 	.word	0x1fff871d
     6f0:	1fff8b5c 	.word	0x1fff8b5c
     6f4:	1fff8758 	.word	0x1fff8758
     6f8:	1fff8884 	.word	0x1fff8884
     6fc:	1fff875c 	.word	0x1fff875c
     700:	1fff871e 	.word	0x1fff871e
     704:	1fff8720 	.word	0x1fff8720
     708:	000061b0 	.word	0x000061b0
     70c:	1fff8764 	.word	0x1fff8764
     710:	1fff8881 	.word	0x1fff8881
     714:	1fff8cb0 	.word	0x1fff8cb0

00000718 <confetti()>:
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti()
{
     718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
     71c:	4e62      	ldr	r6, [pc, #392]	; (8a8 <confetti()+0x190>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     71e:	4d63      	ldr	r5, [pc, #396]	; (8ac <confetti()+0x194>)
     720:	7833      	ldrb	r3, [r6, #0]
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(10, 48);
     722:	4f63      	ldr	r7, [pc, #396]	; (8b0 <confetti()+0x198>)
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti()
{
     724:	b085      	sub	sp, #20
	if (mode_change) {
     726:	2b00      	cmp	r3, #0
     728:	f040 8095 	bne.w	856 <confetti()+0x13e>
     72c:	4c61      	ldr	r4, [pc, #388]	; (8b4 <confetti()+0x19c>)
		this_delay = 20;
		use_all_shelves = 1;//random8(2);
		Serial.println("confetti");
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
     72e:	4e62      	ldr	r6, [pc, #392]	; (8b8 <confetti()+0x1a0>)
     730:	783a      	ldrb	r2, [r7, #0]
     732:	4630      	mov	r0, r6
     734:	21bc      	movs	r1, #188	; 0xbc
     736:	f003 f869 	bl	380c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	if (!use_all_shelves) {
     73a:	7823      	ldrb	r3, [r4, #0]
     73c:	2b00      	cmp	r3, #0
     73e:	d04d      	beq.n	7dc <confetti()+0xc4>
     740:	882b      	ldrh	r3, [r5, #0]
		this_index = random8();
		leds[pos] += ColorFromPalette(current_palette, this_index);
	}
	else {
		uint8_t pos = random8();
		this_index = random8();
     742:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8c4 <confetti()+0x1ac>
     746:	4f5d      	ldr	r7, [pc, #372]	; (8bc <confetti()+0x1a4>)
     748:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8d8 <confetti()+0x1c0>
     74c:	eb03 2443 	add.w	r4, r3, r3, lsl #9
     750:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     754:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
     758:	3419      	adds	r4, #25
     75a:	b2a4      	uxth	r4, r4
     75c:	eb04 2344 	add.w	r3, r4, r4, lsl #9
     760:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     764:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     768:	3319      	adds	r3, #25
     76a:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     76c:	eb03 2213 	add.w	r2, r3, r3, lsr #8
     770:	b2d2      	uxtb	r2, r2
     772:	eb04 2414 	add.w	r4, r4, r4, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     776:	802b      	strh	r3, [r5, #0]
     778:	b2e4      	uxtb	r4, r4
     77a:	f889 2000 	strb.w	r2, [r9]
     77e:	2500      	movs	r5, #0
		for (uint8_t s = 0; s < 4; s++)	{
			uint8_t scale_pos = scale8(pos, shelf_num_leds[s]);
			leds[shelf[s][scale_pos]] += ColorFromPalette(current_palette, this_index);
     780:	f04f 0801 	mov.w	r8, #1
	}
	else {
		uint8_t pos = random8();
		this_index = random8();
		for (uint8_t s = 0; s < 4; s++)	{
			uint8_t scale_pos = scale8(pos, shelf_num_leds[s]);
     784:	f817 3b01 	ldrb.w	r3, [r7], #1
			leds[shelf[s][scale_pos]] += ColorFromPalette(current_palette, this_index);
     788:	f8cd 8000 	str.w	r8, [sp]
     78c:	fb03 4304 	mla	r3, r3, r4, r4
     790:	eb0a 2323 	add.w	r3, sl, r3, asr #8
     794:	eb05 1185 	add.w	r1, r5, r5, lsl #6
     798:	a803      	add	r0, sp, #12
     79a:	f813 b001 	ldrb.w	fp, [r3, r1]
     79e:	4948      	ldr	r1, [pc, #288]	; (8c0 <confetti()+0x1a8>)
     7a0:	23ff      	movs	r3, #255	; 0xff
     7a2:	f003 f885 	bl	38b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     7a6:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
     7aa:	18f1      	adds	r1, r6, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     7ac:	5cf2      	ldrb	r2, [r6, r3]
     7ae:	f89d 000c 	ldrb.w	r0, [sp, #12]
     7b2:	fa82 f250 	uqadd8	r2, r2, r0
     7b6:	54f2      	strb	r2, [r6, r3]
     7b8:	f89d 300d 	ldrb.w	r3, [sp, #13]
     7bc:	784a      	ldrb	r2, [r1, #1]
     7be:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
     7c2:	704a      	strb	r2, [r1, #1]
     7c4:	788b      	ldrb	r3, [r1, #2]
     7c6:	f89d 200e 	ldrb.w	r2, [sp, #14]
     7ca:	fa83 f352 	uqadd8	r3, r3, r2
     7ce:	3501      	adds	r5, #1
		leds[pos] += ColorFromPalette(current_palette, this_index);
	}
	else {
		uint8_t pos = random8();
		this_index = random8();
		for (uint8_t s = 0; s < 4; s++)	{
     7d0:	2d04      	cmp	r5, #4
        b = qadd8( b, rhs.b);
     7d2:	708b      	strb	r3, [r1, #2]
     7d4:	d03c      	beq.n	850 <confetti()+0x138>
     7d6:	f899 2000 	ldrb.w	r2, [r9]
     7da:	e7d3      	b.n	784 <confetti()+0x6c>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     7dc:	882b      	ldrh	r3, [r5, #0]
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = random16(NUM_LEDS);
		this_index = random8();
     7de:	4c39      	ldr	r4, [pc, #228]	; (8c4 <confetti()+0x1ac>)
		leds[pos] += ColorFromPalette(current_palette, this_index);
     7e0:	4937      	ldr	r1, [pc, #220]	; (8c0 <confetti()+0x1a8>)
     7e2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     7e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     7ea:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     7ee:	3319      	adds	r3, #25
     7f0:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     7f2:	eb03 2043 	add.w	r0, r3, r3, lsl #9
     7f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     7fa:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
     7fe:	3019      	adds	r0, #25
     800:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     802:	eb00 2e10 	add.w	lr, r0, r0, lsr #8
		Serial.println("confetti");
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = random16(NUM_LEDS);
     806:	27bc      	movs	r7, #188	; 0xbc
     808:	fa5f fe8e 	uxtb.w	lr, lr
     80c:	fb07 f303 	mul.w	r3, r7, r3
		this_index = random8();
		leds[pos] += ColorFromPalette(current_palette, this_index);
     810:	2201      	movs	r2, #1
     812:	9200      	str	r2, [sp, #0]
		Serial.println("confetti");
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = random16(NUM_LEDS);
     814:	0c1f      	lsrs	r7, r3, #16
		this_index = random8();
		leds[pos] += ColorFromPalette(current_palette, this_index);
     816:	4672      	mov	r2, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     818:	8028      	strh	r0, [r5, #0]
     81a:	23ff      	movs	r3, #255	; 0xff
     81c:	a803      	add	r0, sp, #12
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = random16(NUM_LEDS);
		this_index = random8();
     81e:	f884 e000 	strb.w	lr, [r4]
		leds[pos] += ColorFromPalette(current_palette, this_index);
     822:	f003 f845 	bl	38b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     826:	eb07 0347 	add.w	r3, r7, r7, lsl #1
     82a:	18f1      	adds	r1, r6, r3
     82c:	5cf2      	ldrb	r2, [r6, r3]
     82e:	f89d 000c 	ldrb.w	r0, [sp, #12]
     832:	fa82 f250 	uqadd8	r2, r2, r0
     836:	54f2      	strb	r2, [r6, r3]
     838:	f89d 300d 	ldrb.w	r3, [sp, #13]
     83c:	784a      	ldrb	r2, [r1, #1]
     83e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
     842:	704a      	strb	r2, [r1, #1]
     844:	788b      	ldrb	r3, [r1, #2]
     846:	f89d 200e 	ldrb.w	r2, [sp, #14]
     84a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
     84e:	708b      	strb	r3, [r1, #2]
		for (uint8_t s = 0; s < 4; s++)	{
			uint8_t scale_pos = scale8(pos, shelf_num_leds[s]);
			leds[shelf[s][scale_pos]] += ColorFromPalette(current_palette, this_index);
		}
	}
}
     850:	b005      	add	sp, #20
     852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     856:	882b      	ldrh	r3, [r5, #0]

void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
     858:	491b      	ldr	r1, [pc, #108]	; (8c8 <confetti()+0x1b0>)
		this_fade = random8(10, 48);
		this_delay = 20;
     85a:	481c      	ldr	r0, [pc, #112]	; (8cc <confetti()+0x1b4>)
		use_all_shelves = 1;//random8(2);
     85c:	4c15      	ldr	r4, [pc, #84]	; (8b4 <confetti()+0x19c>)
     85e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     862:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     866:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     86a:	3319      	adds	r3, #25
     86c:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     86e:	eb03 2213 	add.w	r2, r3, r3, lsr #8
void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(10, 48);
     872:	b2d2      	uxtb	r2, r2
     874:	eb02 0ec2 	add.w	lr, r2, r2, lsl #3
     878:	eb02 024e 	add.w	r2, r2, lr, lsl #1
     87c:	11d2      	asrs	r2, r2, #7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     87e:	802b      	strh	r3, [r5, #0]
		this_delay = 20;
     880:	f04f 0e14 	mov.w	lr, #20

void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
     884:	2301      	movs	r3, #1
		this_fade = random8(10, 48);
     886:	320a      	adds	r2, #10
     888:	703a      	strb	r2, [r7, #0]

void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
     88a:	700b      	strb	r3, [r1, #0]
#define CONFETTI_H

void confetti()
{
	if (mode_change) {
		mode_change = 0;
     88c:	2200      	movs	r2, #0
		use_palette = 1;
		this_fade = random8(10, 48);
		this_delay = 20;
     88e:	f8c0 e000 	str.w	lr, [r0]
     892:	2108      	movs	r1, #8
     894:	480e      	ldr	r0, [pc, #56]	; (8d0 <confetti()+0x1b8>)
		use_all_shelves = 1;//random8(2);
     896:	7023      	strb	r3, [r4, #0]
#define CONFETTI_H

void confetti()
{
	if (mode_change) {
		mode_change = 0;
     898:	7032      	strb	r2, [r6, #0]
     89a:	f004 fe83 	bl	55a4 <usb_serial_write>
     89e:	480d      	ldr	r0, [pc, #52]	; (8d4 <confetti()+0x1bc>)
     8a0:	f005 f884 	bl	59ac <Print::println()>
     8a4:	e743      	b.n	72e <confetti()+0x16>
     8a6:	bf00      	nop
     8a8:	1fff8724 	.word	0x1fff8724
     8ac:	1fff875c 	.word	0x1fff875c
     8b0:	1fff871c 	.word	0x1fff871c
     8b4:	1fff8881 	.word	0x1fff8881
     8b8:	1fff8884 	.word	0x1fff8884
     8bc:	1fff8758 	.word	0x1fff8758
     8c0:	1fff8b18 	.word	0x1fff8b18
     8c4:	1fff8b5c 	.word	0x1fff8b5c
     8c8:	1fff871e 	.word	0x1fff871e
     8cc:	1fff8720 	.word	0x1fff8720
     8d0:	000061c0 	.word	0x000061c0
     8d4:	1fff8764 	.word	0x1fff8764
     8d8:	1fff8cb0 	.word	0x1fff8cb0

000008dc <fire()>:
#ifndef FIRE_H
#define FIRE_H



void fire() {
     8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
     8e0:	4a8a      	ldr	r2, [pc, #552]	; (b0c <fire()+0x230>)
     8e2:	4c8b      	ldr	r4, [pc, #556]	; (b10 <fire()+0x234>)
     8e4:	7813      	ldrb	r3, [r2, #0]
#ifndef FIRE_H
#define FIRE_H



void fire() {
     8e6:	b085      	sub	sp, #20
	if (mode_change) {
     8e8:	2b00      	cmp	r3, #0
     8ea:	f040 80d3 	bne.w	a94 <fire()+0x1b8>
     8ee:	4b89      	ldr	r3, [pc, #548]	; (b14 <fire()+0x238>)
     8f0:	4d89      	ldr	r5, [pc, #548]	; (b18 <fire()+0x23c>)
     8f2:	4e8a      	ldr	r6, [pc, #552]	; (b1c <fire()+0x240>)
     8f4:	9301      	str	r3, [sp, #4]
     8f6:	7832      	ldrb	r2, [r6, #0]
     8f8:	4e89      	ldr	r6, [pc, #548]	; (b20 <fire()+0x244>)
     8fa:	488a      	ldr	r0, [pc, #552]	; (b24 <fire()+0x248>)
     8fc:	8823      	ldrh	r3, [r4, #0]
     8fe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     902:	0052      	lsls	r2, r2, #1
     904:	fb86 1602 	smull	r1, r6, r6, r2
     908:	4416      	add	r6, r2
     90a:	17d2      	asrs	r2, r2, #31
     90c:	ebc2 16e6 	rsb	r6, r2, r6, asr #7
     910:	3602      	adds	r6, #2
     912:	b2f6      	uxtb	r6, r6
     914:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
     918:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     91c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     920:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     924:	3319      	adds	r3, #25
     926:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     928:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     92c:	f810 1f01 	ldrb.w	r1, [r0, #1]!
     930:	b2d2      	uxtb	r2, r2
     932:	fb12 f206 	smulbb	r2, r2, r6
     936:	eba1 2212 	sub.w	r2, r1, r2, lsr #8
		// Array of temperature readings at each simulation cell
		static byte heat[NUM_LEDS];

		// Step 1.  Cool down every cell a little
		for (int i = 0; i < NUM_LEDS; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
     93a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	}
		// Array of temperature readings at each simulation cell
		static byte heat[NUM_LEDS];

		// Step 1.  Cool down every cell a little
		for (int i = 0; i < NUM_LEDS; i++) {
     93e:	4287      	cmp	r7, r0
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
     940:	7002      	strb	r2, [r0, #0]
	}
		// Array of temperature readings at each simulation cell
		static byte heat[NUM_LEDS];

		// Step 1.  Cool down every cell a little
		for (int i = 0; i < NUM_LEDS; i++) {
     942:	d1e9      	bne.n	918 <fire()+0x3c>
     944:	4f78      	ldr	r7, [pc, #480]	; (b28 <fire()+0x24c>)
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
		}

		// Step 2.  Heat from each cell drifts 'up' and diffuses a little
		for (int k = NUM_LEDS - 3; k >= 2; k--) {
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     946:	f8df c1f8 	ldr.w	ip, [pc, #504]	; b40 <fire()+0x264>
     94a:	f1a7 00b8 	sub.w	r0, r7, #184	; 0xb8
     94e:	4606      	mov	r6, r0
     950:	f107 0e02 	add.w	lr, r7, #2
     954:	783a      	ldrb	r2, [r7, #0]
     956:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
     95a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
     95e:	fb8c 8102 	smull	r8, r1, ip, r2
     962:	eba1 72e2 	sub.w	r2, r1, r2, asr #31
		for (int i = 0; i < NUM_LEDS; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
		}

		// Step 2.  Heat from each cell drifts 'up' and diffuses a little
		for (int k = NUM_LEDS - 3; k >= 2; k--) {
     966:	42be      	cmp	r6, r7
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
     968:	f80e 2d01 	strb.w	r2, [lr, #-1]!
		for (int i = 0; i < NUM_LEDS; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
		}

		// Step 2.  Heat from each cell drifts 'up' and diffuses a little
		for (int k = NUM_LEDS - 3; k >= 2; k--) {
     96c:	d1f2      	bne.n	954 <fire()+0x78>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     96e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     972:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     976:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     97a:	3319      	adds	r3, #25
     97c:	b29b      	uxth	r3, r3
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
		}

		// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
		if (random8() < sparking) {
     97e:	782d      	ldrb	r5, [r5, #0]
     980:	8023      	strh	r3, [r4, #0]
     982:	eb03 2213 	add.w	r2, r3, r3, lsr #8
     986:	b2d2      	uxtb	r2, r2
     988:	4295      	cmp	r5, r2
     98a:	4961      	ldr	r1, [pc, #388]	; (b10 <fire()+0x234>)
     98c:	d924      	bls.n	9d8 <fire()+0xfc>
     98e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     992:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     996:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     99a:	3319      	adds	r3, #25
     99c:	b29b      	uxth	r3, r3
     99e:	eb03 2443 	add.w	r4, r3, r3, lsl #9
     9a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     9a6:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
     9aa:	3419      	adds	r4, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     9ac:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     9b0:	b2a4      	uxth	r4, r4
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     9b2:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     9b4:	eb04 2214 	add.w	r2, r4, r4, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     9b8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     9bc:	b2d2      	uxtb	r2, r2
     9be:	121b      	asrs	r3, r3, #8
     9c0:	eb02 0542 	add.w	r5, r2, r2, lsl #1
     9c4:	ebc2 1245 	rsb	r2, r2, r5, lsl #5
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
     9c8:	5cc5      	ldrb	r5, [r0, r3]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     9ca:	800c      	strh	r4, [r1, #0]
     9cc:	1212      	asrs	r2, r2, #8
     9ce:	3a60      	subs	r2, #96	; 0x60
     9d0:	4629      	mov	r1, r5
     9d2:	fa81 f152 	uqadd8	r1, r1, r2
     9d6:	54c1      	strb	r1, [r0, r3]
     9d8:	f8df a168 	ldr.w	sl, [pc, #360]	; b44 <fire()+0x268>
#ifndef FIRE_H
#define FIRE_H



void fire() {
     9dc:	2700      	movs	r7, #0
     9de:	46d1      	mov	r9, sl
			heat[y] = qadd8(heat[y], random8(160, 255));
		}

		// Step 4.  Map from heat cells to LED colors
		for (int j = 0; j < NUM_LEDS; j++) {
			if (!use_all_shelves) {
     9e0:	9b01      	ldr	r3, [sp, #4]
     9e2:	781b      	ldrb	r3, [r3, #0]
     9e4:	2b00      	cmp	r3, #0
     9e6:	d03d      	beq.n	a64 <fire()+0x188>
     9e8:	f8df b15c 	ldr.w	fp, [pc, #348]	; b48 <fire()+0x26c>
     9ec:	b2fc      	uxtb	r4, r7
     9ee:	f04f 0800 	mov.w	r8, #0
				leds[j] = HeatColor(heat[j]);
			}
			else {
				for (int s = 0; s < 4; s++) {
					uint8_t pos = j * (shelf_num_leds[s] / NUM_LEDS);
     9f2:	f81b 3b01 	ldrb.w	r3, [fp], #1
					leds[shelf[s][pos]] += HeatColor(heat[j]);
     9f6:	4a4a      	ldr	r2, [pc, #296]	; (b20 <fire()+0x244>)
     9f8:	7831      	ldrb	r1, [r6, #0]
     9fa:	fba2 2303 	umull	r2, r3, r2, r3
     9fe:	09db      	lsrs	r3, r3, #7
     a00:	4a4a      	ldr	r2, [pc, #296]	; (b2c <fire()+0x250>)
     a02:	fb13 f304 	smulbb	r3, r3, r4
     a06:	fa52 f383 	uxtab	r3, r2, r3
     a0a:	eb08 1288 	add.w	r2, r8, r8, lsl #6
     a0e:	a803      	add	r0, sp, #12
     a10:	5c9d      	ldrb	r5, [r3, r2]
     a12:	f002 ff2b 	bl	386c <HeatColor(unsigned char)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     a16:	eb05 0345 	add.w	r3, r5, r5, lsl #1
     a1a:	eb0a 0103 	add.w	r1, sl, r3
     a1e:	f81a 2003 	ldrb.w	r2, [sl, r3]
     a22:	f89d 000c 	ldrb.w	r0, [sp, #12]
     a26:	fa82 f250 	uqadd8	r2, r2, r0
     a2a:	f80a 2003 	strb.w	r2, [sl, r3]
     a2e:	f89d 300d 	ldrb.w	r3, [sp, #13]
     a32:	784a      	ldrb	r2, [r1, #1]
     a34:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
     a38:	704a      	strb	r2, [r1, #1]
     a3a:	788b      	ldrb	r3, [r1, #2]
     a3c:	f89d 200e 	ldrb.w	r2, [sp, #14]
     a40:	fa83 f352 	uqadd8	r3, r3, r2
		for (int j = 0; j < NUM_LEDS; j++) {
			if (!use_all_shelves) {
				leds[j] = HeatColor(heat[j]);
			}
			else {
				for (int s = 0; s < 4; s++) {
     a44:	f108 0801 	add.w	r8, r8, #1
     a48:	f1b8 0f04 	cmp.w	r8, #4
        b = qadd8( b, rhs.b);
     a4c:	708b      	strb	r3, [r1, #2]
     a4e:	d1d0      	bne.n	9f2 <fire()+0x116>
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}

		// Step 4.  Map from heat cells to LED colors
		for (int j = 0; j < NUM_LEDS; j++) {
     a50:	3701      	adds	r7, #1
     a52:	2fbc      	cmp	r7, #188	; 0xbc
     a54:	f106 0601 	add.w	r6, r6, #1
     a58:	f109 0903 	add.w	r9, r9, #3
     a5c:	d1c0      	bne.n	9e0 <fire()+0x104>
					uint8_t pos = j * (shelf_num_leds[s] / NUM_LEDS);
					leds[shelf[s][pos]] += HeatColor(heat[j]);
				}
			}
		}
}
     a5e:	b005      	add	sp, #20
     a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}

		// Step 4.  Map from heat cells to LED colors
		for (int j = 0; j < NUM_LEDS; j++) {
			if (!use_all_shelves) {
				leds[j] = HeatColor(heat[j]);
     a64:	7831      	ldrb	r1, [r6, #0]
     a66:	a803      	add	r0, sp, #12
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}

		// Step 4.  Map from heat cells to LED colors
		for (int j = 0; j < NUM_LEDS; j++) {
     a68:	3701      	adds	r7, #1
			if (!use_all_shelves) {
				leds[j] = HeatColor(heat[j]);
     a6a:	f002 feff 	bl	386c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a6e:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
     a72:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
     a76:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a7a:	f889 1000 	strb.w	r1, [r9]
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}

		// Step 4.  Map from heat cells to LED colors
		for (int j = 0; j < NUM_LEDS; j++) {
     a7e:	2fbc      	cmp	r7, #188	; 0xbc
        g = rhs.g;
     a80:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
     a84:	f889 3002 	strb.w	r3, [r9, #2]
     a88:	f106 0601 	add.w	r6, r6, #1
     a8c:	f109 0903 	add.w	r9, r9, #3
     a90:	d1a6      	bne.n	9e0 <fire()+0x104>
     a92:	e7e4      	b.n	a5e <fire()+0x182>
     a94:	8823      	ldrh	r3, [r4, #0]


void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(60, 90);
     a96:	4d20      	ldr	r5, [pc, #128]	; (b18 <fire()+0x23c>)
		cooling = random8(80, 120);
		use_palette = 0;
		this_delay = 15;
     a98:	4825      	ldr	r0, [pc, #148]	; (b30 <fire()+0x254>)
void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(60, 90);
		cooling = random8(80, 120);
		use_palette = 0;
     a9a:	4926      	ldr	r1, [pc, #152]	; (b34 <fire()+0x258>)

void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(60, 90);
		cooling = random8(80, 120);
     a9c:	4e1f      	ldr	r6, [pc, #124]	; (b1c <fire()+0x240>)
     a9e:	eb03 2743 	add.w	r7, r3, r3, lsl #9
     aa2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
     aa6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     aaa:	3319      	adds	r3, #25
     aac:	b29b      	uxth	r3, r3
     aae:	eb03 2743 	add.w	r7, r3, r3, lsl #9
     ab2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
     ab6:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
     aba:	3719      	adds	r7, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     abc:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     ac0:	b2bf      	uxth	r7, r7


void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(60, 90);
     ac2:	b2db      	uxtb	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     ac4:	eb07 2e17 	add.w	lr, r7, r7, lsr #8
     ac8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     acc:	8027      	strh	r7, [r4, #0]
		cooling = random8(80, 120);
     ace:	fa5f fe8e 	uxtb.w	lr, lr
		use_palette = 0;
		this_delay = 15;
		use_all_shelves = 1;//random8(2);
     ad2:	4f10      	ldr	r7, [pc, #64]	; (b14 <fire()+0x238>)
     ad4:	9701      	str	r7, [sp, #4]


void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(60, 90);
     ad6:	11db      	asrs	r3, r3, #7
     ad8:	333c      	adds	r3, #60	; 0x3c
		cooling = random8(80, 120);
		use_palette = 0;
		this_delay = 15;
     ada:	270f      	movs	r7, #15

void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(60, 90);
		cooling = random8(80, 120);
     adc:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2


void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(60, 90);
     ae0:	702b      	strb	r3, [r5, #0]
		cooling = random8(80, 120);
		use_palette = 0;
		this_delay = 15;
     ae2:	6007      	str	r7, [r0, #0]



void fire() {
	if (mode_change) {
		mode_change = 0;
     ae4:	2300      	movs	r3, #0
		sparking = random8(60, 90);
		cooling = random8(80, 120);
		use_palette = 0;
		this_delay = 15;
		use_all_shelves = 1;//random8(2);
     ae6:	4f0b      	ldr	r7, [pc, #44]	; (b14 <fire()+0x238>)
void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(60, 90);
		cooling = random8(80, 120);
		use_palette = 0;
     ae8:	700b      	strb	r3, [r1, #0]

void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(60, 90);
		cooling = random8(80, 120);
     aea:	ea4f 1e6e 	mov.w	lr, lr, asr #5
     aee:	f10e 0e50 	add.w	lr, lr, #80	; 0x50



void fire() {
	if (mode_change) {
		mode_change = 0;
     af2:	7013      	strb	r3, [r2, #0]
     af4:	2104      	movs	r1, #4
		sparking = random8(60, 90);
		cooling = random8(80, 120);
		use_palette = 0;
		this_delay = 15;
		use_all_shelves = 1;//random8(2);
     af6:	2301      	movs	r3, #1
     af8:	480f      	ldr	r0, [pc, #60]	; (b38 <fire()+0x25c>)

void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(60, 90);
		cooling = random8(80, 120);
     afa:	f886 e000 	strb.w	lr, [r6]
		use_palette = 0;
		this_delay = 15;
		use_all_shelves = 1;//random8(2);
     afe:	703b      	strb	r3, [r7, #0]
     b00:	f004 fd50 	bl	55a4 <usb_serial_write>
     b04:	480d      	ldr	r0, [pc, #52]	; (b3c <fire()+0x260>)
     b06:	f004 ff51 	bl	59ac <Print::println()>
     b0a:	e6f4      	b.n	8f6 <fire()+0x1a>
     b0c:	1fff8724 	.word	0x1fff8724
     b10:	1fff875c 	.word	0x1fff875c
     b14:	1fff8881 	.word	0x1fff8881
     b18:	1fff8728 	.word	0x1fff8728
     b1c:	1fff8725 	.word	0x1fff8725
     b20:	ae4c415d 	.word	0xae4c415d
     b24:	1fff8bef 	.word	0x1fff8bef
     b28:	1fff8ca8 	.word	0x1fff8ca8
     b2c:	1fff8cb0 	.word	0x1fff8cb0
     b30:	1fff8720 	.word	0x1fff8720
     b34:	1fff871e 	.word	0x1fff871e
     b38:	000061cc 	.word	0x000061cc
     b3c:	1fff8764 	.word	0x1fff8764
     b40:	55555556 	.word	0x55555556
     b44:	1fff8884 	.word	0x1fff8884
     b48:	1fff8758 	.word	0x1fff8758

00000b4c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		update_ctars(ctar0,ctar1);
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
     b4c:	4b7d      	ldr	r3, [pc, #500]	; (d44 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
		gState.pins[2] = CORE_PIN13_CONFIG;
		gState.pins[3] = CORE_PIN14_CONFIG;
     b4e:	4a7e      	ldr	r2, [pc, #504]	; (d48 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1fc>)
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
     b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		update_ctars(ctar0,ctar1);
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
     b54:	68df      	ldr	r7, [r3, #12]
     b56:	61c7      	str	r7, [r0, #28]
		gState._ctar1 = SPIX.CTAR1;
     b58:	691b      	ldr	r3, [r3, #16]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
     b5a:	4e7c      	ldr	r6, [pc, #496]	; (d4c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;
     b5c:	6203      	str	r3, [r0, #32]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
     b5e:	6833      	ldr	r3, [r6, #0]
		gState.pins[1] = CORE_PIN11_CONFIG;
     b60:	4d7b      	ldr	r5, [pc, #492]	; (d50 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x204>)
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
     b62:	6243      	str	r3, [r0, #36]	; 0x24
		gState.pins[1] = CORE_PIN11_CONFIG;
     b64:	682b      	ldr	r3, [r5, #0]
		gState.pins[2] = CORE_PIN13_CONFIG;
     b66:	4c7b      	ldr	r4, [pc, #492]	; (d54 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x208>)
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
     b68:	6283      	str	r3, [r0, #40]	; 0x28
		gState.pins[2] = CORE_PIN13_CONFIG;
     b6a:	6823      	ldr	r3, [r4, #0]
     b6c:	62c3      	str	r3, [r0, #44]	; 0x2c
     b6e:	4680      	mov	r8, r0
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
     b70:	6980      	ldr	r0, [r0, #24]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
		gState.pins[2] = CORE_PIN13_CONFIG;
		gState.pins[3] = CORE_PIN14_CONFIG;
     b72:	6813      	ldr	r3, [r2, #0]
     b74:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
     b78:	b083      	sub	sp, #12
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
     b7a:	b150      	cbz	r0, b92 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x46>
     b7c:	6803      	ldr	r3, [r0, #0]
     b7e:	4a76      	ldr	r2, [pc, #472]	; (d58 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x20c>)
     b80:	681b      	ldr	r3, [r3, #0]
     b82:	4293      	cmp	r3, r2
     b84:	f040 8153 	bne.w	e2e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2e2>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     b88:	6842      	ldr	r2, [r0, #4]
     b8a:	7b00      	ldrb	r0, [r0, #12]
     b8c:	7813      	ldrb	r3, [r2, #0]
     b8e:	4303      	orrs	r3, r0
     b90:	7013      	strb	r3, [r2, #0]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     b92:	4b6c      	ldr	r3, [pc, #432]	; (d44 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     b94:	68da      	ldr	r2, [r3, #12]
     b96:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
     b9a:	f000 812b 	beq.w	df4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2a8>
		uint32_t mcr = SPIX.MCR;
     b9e:	4b69      	ldr	r3, [pc, #420]	; (d44 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     ba0:	681a      	ldr	r2, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
     ba2:	0455      	lsls	r5, r2, #17
     ba4:	f100 8130 	bmi.w	e08 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2bc>
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
     ba8:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
     bac:	f040 0001 	orr.w	r0, r0, #1
			SPIX.CTAR0 = ctar0;
     bb0:	f04f 5560 	mov.w	r5, #939524096	; 0x38000000
			SPIX.CTAR1 = ctar1;
     bb4:	f04f 44f0 	mov.w	r4, #2013265920	; 0x78000000
		uint32_t mcr = SPIX.MCR;
		if(mcr & SPI_MCR_MDIS) {
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
     bb8:	6018      	str	r0, [r3, #0]
			SPIX.CTAR0 = ctar0;
     bba:	60dd      	str	r5, [r3, #12]
			SPIX.CTAR1 = ctar1;
     bbc:	611c      	str	r4, [r3, #16]
			SPIX.MCR = mcr;
     bbe:	601a      	str	r2, [r3, #0]
	// and likewise enabling pin 14 disables pin 13 (and vice versa)
	inline void enable_pins(void) __attribute__((always_inline)) {
		//serial_print("enable_pins\n");
		switch(_DATA_PIN) {
			case 7:
				CORE_PIN7_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
     bc0:	4b62      	ldr	r3, [pc, #392]	; (d4c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)
			case 13:
				CORE_PIN13_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
				CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
				break;
			case 14:
				CORE_PIN14_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
     bc2:	4d61      	ldr	r5, [pc, #388]	; (d48 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1fc>)
				CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     bc4:	4c63      	ldr	r4, [pc, #396]	; (d54 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x208>)
	inline void enable_pins(void) __attribute__((always_inline)) {
		//serial_print("enable_pins\n");
		switch(_DATA_PIN) {
			case 7:
				CORE_PIN7_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
				CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     bc6:	4e62      	ldr	r6, [pc, #392]	; (d50 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x204>)
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     bc8:	485e      	ldr	r0, [pc, #376]	; (d44 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
	// and likewise enabling pin 14 disables pin 13 (and vice versa)
	inline void enable_pins(void) __attribute__((always_inline)) {
		//serial_print("enable_pins\n");
		switch(_DATA_PIN) {
			case 7:
				CORE_PIN7_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
     bca:	f44f 7210 	mov.w	r2, #576	; 0x240
     bce:	601a      	str	r2, [r3, #0]
				CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     bd0:	f44f 73a2 	mov.w	r3, #324	; 0x144
     bd4:	6033      	str	r3, [r6, #0]
			case 13:
				CORE_PIN13_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
				CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
				break;
			case 14:
				CORE_PIN14_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
     bd6:	602a      	str	r2, [r5, #0]
				CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     bd8:	6023      	str	r3, [r4, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     bda:	7d0c      	ldrb	r4, [r1, #20]
     bdc:	7ccd      	ldrb	r5, [r1, #19]
     bde:	f891 b012 	ldrb.w	fp, [r1, #18]
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     be2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
     be4:	4b57      	ldr	r3, [pc, #348]	; (d44 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     be6:	0457      	lsls	r7, r2, #17
     be8:	d4fb      	bmi.n	be2 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x96>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     bea:	b672      	cpsid	i
     bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     bf0:	635a      	str	r2, [r3, #52]	; 0x34
     bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     bf4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
     bf8:	62da      	str	r2, [r3, #44]	; 0x2c
     bfa:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     bfe:	4851      	ldr	r0, [pc, #324]	; (d44 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     c00:	0456      	lsls	r6, r2, #17
     c02:	d4fb      	bmi.n	bfc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xb0>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     c04:	b672      	cpsid	i
     c06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     c0a:	6343      	str	r3, [r0, #52]	; 0x34
     c0c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     c0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     c12:	62c3      	str	r3, [r0, #44]	; 0x2c
     c14:	b662      	cpsie	i
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
     c16:	688b      	ldr	r3, [r1, #8]
     c18:	2b00      	cmp	r3, #0
     c1a:	dd5a      	ble.n	cd2 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x186>
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     c1c:	4603      	mov	r3, r0
     c1e:	1c68      	adds	r0, r5, #1
     c20:	4607      	mov	r7, r0
     c22:	1c60      	adds	r0, r4, #1
     c24:	4604      	mov	r4, r0
     c26:	680a      	ldr	r2, [r1, #0]
     c28:	f8cd 8004 	str.w	r8, [sp, #4]
     c2c:	f10b 0b01 	add.w	fp, fp, #1
     c30:	4618      	mov	r0, r3
     c32:	46a2      	mov	sl, r4
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     c34:	698c      	ldr	r4, [r1, #24]
     c36:	1915      	adds	r5, r2, r4
     c38:	5d14      	ldrb	r4, [r2, r4]
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
     c3a:	78ae      	ldrb	r6, [r5, #2]
     c3c:	786a      	ldrb	r2, [r5, #1]
     c3e:	fb0a f606 	mul.w	r6, sl, r6
     c42:	fb0b f404 	mul.w	r4, fp, r4
     c46:	f3c6 2607 	ubfx	r6, r6, #8, #8
     c4a:	fb07 f202 	mul.w	r2, r7, r2
     c4e:	1224      	asrs	r4, r4, #8
     c50:	f446 467f 	orr.w	r6, r6, #65280	; 0xff00
     c54:	1215      	asrs	r5, r2, #8
     c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     c58:	0452      	lsls	r2, r2, #17
     c5a:	d4fc      	bmi.n	c56 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x10a>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     c5c:	b672      	cpsid	i
     c5e:	f046 5280 	orr.w	r2, r6, #268435456	; 0x10000000
     c62:	6342      	str	r2, [r0, #52]	; 0x34
     c64:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
     c66:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
     c6a:	62c2      	str	r2, [r0, #44]	; 0x2c
     c6c:	b662      	cpsie	i
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
     c6e:	022a      	lsls	r2, r5, #8
     c70:	b292      	uxth	r2, r2
		w |= b2;
     c72:	4322      	orrs	r2, r4
     c74:	b294      	uxth	r4, r2
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     c78:	0452      	lsls	r2, r2, #17
     c7a:	d4fc      	bmi.n	c76 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x12a>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     c7c:	b672      	cpsid	i
     c7e:	f044 5280 	orr.w	r2, r4, #268435456	; 0x10000000
     c82:	6342      	str	r2, [r0, #52]	; 0x34
     c84:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
     c86:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
     c8a:	62c2      	str	r2, [r0, #44]	; 0x2c
     c8c:	b662      	cpsie	i

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     c8e:	688c      	ldr	r4, [r1, #8]
     c90:	9400      	str	r4, [sp, #0]
     c92:	f991 2015 	ldrsb.w	r2, [r1, #21]
     c96:	680c      	ldr	r4, [r1, #0]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     c98:	f891 900c 	ldrb.w	r9, [r1, #12]
                d[1] = e[1] - d[1];
     c9c:	7b4e      	ldrb	r6, [r1, #13]
                d[2] = e[2] - d[2];
     c9e:	7b8d      	ldrb	r5, [r1, #14]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     ca0:	f891 e00f 	ldrb.w	lr, [r1, #15]
                d[1] = e[1] - d[1];
     ca4:	f891 8010 	ldrb.w	r8, [r1, #16]
                d[2] = e[2] - d[2];
     ca8:	f891 c011 	ldrb.w	ip, [r1, #17]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     cac:	4422      	add	r2, r4
     cae:	9c00      	ldr	r4, [sp, #0]
     cb0:	600a      	str	r2, [r1, #0]
     cb2:	3c01      	subs	r4, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     cb4:	ebc9 0e0e 	rsb	lr, r9, lr
                d[1] = e[1] - d[1];
     cb8:	ebc6 0608 	rsb	r6, r6, r8
                d[2] = e[2] - d[2];
     cbc:	ebc5 050c 	rsb	r5, r5, ip
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
     cc0:	2c00      	cmp	r4, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     cc2:	f881 e00c 	strb.w	lr, [r1, #12]
                d[1] = e[1] - d[1];
     cc6:	734e      	strb	r6, [r1, #13]
                d[2] = e[2] - d[2];
     cc8:	738d      	strb	r5, [r1, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     cca:	608c      	str	r4, [r1, #8]
     ccc:	dcb2      	bgt.n	c34 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe8>
     cce:	f8dd 8004 	ldr.w	r8, [sp, #4]
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
     cd2:	6848      	ldr	r0, [r1, #4]
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     cd4:	4a1b      	ldr	r2, [pc, #108]	; (d44 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     cd6:	2800      	cmp	r0, #0
     cd8:	bfb8      	it	lt
     cda:	301f      	addlt	r0, #31
     cdc:	1140      	asrs	r0, r0, #5
     cde:	4611      	mov	r1, r2
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     ce0:	24ff      	movs	r4, #255	; 0xff
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     ce2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     ce4:	045e      	lsls	r6, r3, #17
     ce6:	d4fc      	bmi.n	ce2 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x196>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     ce8:	b672      	cpsid	i
     cea:	634c      	str	r4, [r1, #52]	; 0x34
     cec:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     cee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     cf2:	62cb      	str	r3, [r1, #44]	; 0x2c
     cf4:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     cf6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     cf8:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
     cfc:	d1fb      	bne.n	cf6 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1aa>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     cfe:	b672      	cpsid	i
     d00:	634b      	str	r3, [r1, #52]	; 0x34
     d02:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     d04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     d08:	62cb      	str	r3, [r1, #44]	; 0x2c
     d0a:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     d0c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     d0e:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
     d12:	d1fb      	bne.n	d0c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1c0>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     d14:	b672      	cpsid	i
     d16:	634b      	str	r3, [r1, #52]	; 0x34
     d18:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     d1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     d1e:	62cb      	str	r3, [r1, #44]	; 0x2c
     d20:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     d22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     d24:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
     d28:	d1fb      	bne.n	d22 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1d6>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     d2a:	b672      	cpsid	i
     d2c:	634b      	str	r3, [r1, #52]	; 0x34
     d2e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     d34:	62cb      	str	r3, [r1, #44]	; 0x2c
     d36:	b662      	cpsie	i
     d38:	f110 30ff 	adds.w	r0, r0, #4294967295
     d3c:	d2d1      	bcs.n	ce2 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x196>
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
			cli();
			if ((SPIX.SR & 0xF000) > 0) {
     d3e:	4a01      	ldr	r2, [pc, #4]	; (d44 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     d40:	e013      	b.n	d6a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x21e>
     d42:	bf00      	nop
     d44:	4002c000 	.word	0x4002c000
     d48:	4004c004 	.word	0x4004c004
     d4c:	4004c008 	.word	0x4004c008
     d50:	4004b018 	.word	0x4004b018
     d54:	4004b014 	.word	0x4004b014
     d58:	00000475 	.word	0x00000475
				// reset the TCF flag
				SPIX.SR |= SPI_SR_TCF;
     d5c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     d5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     d62:	62d3      	str	r3, [r2, #44]	; 0x2c
     d64:	2300      	movs	r3, #0
			} else {
				empty = true;
			}
			sei();
     d66:	b662      	cpsie	i

	static void waitFully() __attribute__((always_inline)) {
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
     d68:	b943      	cbnz	r3, d7c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x230>
			cli();
     d6a:	b672      	cpsid	i
			if ((SPIX.SR & 0xF000) > 0) {
     d6c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     d6e:	f413 4f70 	tst.w	r3, #61440	; 0xf000
     d72:	d1f3      	bne.n	d5c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x210>
				// reset the TCF flag
				SPIX.SR |= SPI_SR_TCF;
			} else {
				empty = true;
     d74:	2301      	movs	r3, #1
			}
			sei();
     d76:	b662      	cpsie	i

	static void waitFully() __attribute__((always_inline)) {
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
     d78:	2b00      	cmp	r3, #0
     d7a:	d0f6      	beq.n	d6a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x21e>
			}
			sei();
		} while (!empty);

		// wait for the TCF flag to get set
		while (!(SPIX.SR & SPI_SR_TCF));
     d7c:	492f      	ldr	r1, [pc, #188]	; (e3c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
     d7e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     d80:	4a2e      	ldr	r2, [pc, #184]	; (e3c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
     d82:	2b00      	cmp	r3, #0
     d84:	dafb      	bge.n	d7e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x232>
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
     d86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
     d88:	4e2d      	ldr	r6, [pc, #180]	; (e40 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f4>)
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
     d8a:	f8d8 0018 	ldr.w	r0, [r8, #24]
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
     d8e:	4d2d      	ldr	r5, [pc, #180]	; (e44 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f8>)
			case 11: CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN7_CONFIG = gState.pins[0]; break;
		}

		switch(_CLOCK_PIN) {
			case 13: CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN14_CONFIG = gState.pins[3]; break;
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
     d90:	4c2d      	ldr	r4, [pc, #180]	; (e48 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2fc>)
     d92:	492e      	ldr	r1, [pc, #184]	; (e4c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x300>)
			sei();
		} while (!empty);

		// wait for the TCF flag to get set
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
     d94:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
     d98:	62d3      	str	r3, [r2, #44]	; 0x2c
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
     d9a:	f44f 73a2 	mov.w	r3, #324	; 0x144
     d9e:	6033      	str	r3, [r6, #0]
     da0:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
     da4:	602a      	str	r2, [r5, #0]
			case 11: CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN7_CONFIG = gState.pins[0]; break;
		}

		switch(_CLOCK_PIN) {
			case 13: CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN14_CONFIG = gState.pins[3]; break;
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
     da6:	6023      	str	r3, [r4, #0]
     da8:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
     dac:	600b      	str	r3, [r1, #0]
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
     dae:	b150      	cbz	r0, dc6 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x27a>
     db0:	6803      	ldr	r3, [r0, #0]
     db2:	4a27      	ldr	r2, [pc, #156]	; (e50 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x304>)
     db4:	685b      	ldr	r3, [r3, #4]
     db6:	4293      	cmp	r3, r2
     db8:	d13d      	bne.n	e36 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2ea>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     dba:	6842      	ldr	r2, [r0, #4]
     dbc:	7b01      	ldrb	r1, [r0, #12]
     dbe:	7813      	ldrb	r3, [r2, #0]
     dc0:	ea23 0301 	bic.w	r3, r3, r1
     dc4:	7013      	strb	r3, [r2, #0]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     dc6:	4b1d      	ldr	r3, [pc, #116]	; (e3c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
		gState.pins[3] = CORE_PIN14_CONFIG;
	}

	void inline restore_spi_state() __attribute__ ((always_inline)) {
		// restore ctar data
		update_ctars(gState._ctar0,gState._ctar1);
     dc8:	f8d8 201c 	ldr.w	r2, [r8, #28]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     dcc:	68d9      	ldr	r1, [r3, #12]
		gState.pins[3] = CORE_PIN14_CONFIG;
	}

	void inline restore_spi_state() __attribute__ ((always_inline)) {
		// restore ctar data
		update_ctars(gState._ctar0,gState._ctar1);
     dce:	f8d8 0020 	ldr.w	r0, [r8, #32]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     dd2:	428a      	cmp	r2, r1
     dd4:	d01f      	beq.n	e16 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2ca>
		uint32_t mcr = SPIX.MCR;
     dd6:	4b19      	ldr	r3, [pc, #100]	; (e3c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
     dd8:	6819      	ldr	r1, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
     dda:	044c      	lsls	r4, r1, #17
     ddc:	d422      	bmi.n	e24 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2d8>
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
     dde:	f441 4480 	orr.w	r4, r1, #16384	; 0x4000
     de2:	f044 0401 	orr.w	r4, r4, #1
     de6:	601c      	str	r4, [r3, #0]
			SPIX.CTAR0 = ctar0;
     de8:	60da      	str	r2, [r3, #12]
			SPIX.CTAR1 = ctar1;
     dea:	6118      	str	r0, [r3, #16]
			SPIX.MCR = mcr;
     dec:	6019      	str	r1, [r3, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
     dee:	b003      	add	sp, #12
     df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     df4:	691b      	ldr	r3, [r3, #16]
     df6:	f1b3 4ff0 	cmp.w	r3, #2013265920	; 0x78000000
     dfa:	f43f aee1 	beq.w	bc0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x74>
		uint32_t mcr = SPIX.MCR;
     dfe:	4b0f      	ldr	r3, [pc, #60]	; (e3c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
     e00:	681a      	ldr	r2, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
     e02:	0455      	lsls	r5, r2, #17
     e04:	f57f aed0 	bpl.w	ba8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x5c>
			SPIX.CTAR0 = ctar0;
     e08:	f04f 5060 	mov.w	r0, #939524096	; 0x38000000
			SPIX.CTAR1 = ctar1;
     e0c:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
		uint32_t mcr = SPIX.MCR;
		if(mcr & SPI_MCR_MDIS) {
			SPIX.CTAR0 = ctar0;
     e10:	60d8      	str	r0, [r3, #12]
			SPIX.CTAR1 = ctar1;
     e12:	611a      	str	r2, [r3, #16]
     e14:	e6d4      	b.n	bc0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x74>
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     e16:	691b      	ldr	r3, [r3, #16]
     e18:	4298      	cmp	r0, r3
     e1a:	d0e8      	beq.n	dee <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2a2>
		uint32_t mcr = SPIX.MCR;
     e1c:	4b07      	ldr	r3, [pc, #28]	; (e3c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
     e1e:	6819      	ldr	r1, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
     e20:	044c      	lsls	r4, r1, #17
     e22:	d5dc      	bpl.n	dde <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x292>
			SPIX.CTAR0 = ctar0;
     e24:	60da      	str	r2, [r3, #12]
			SPIX.CTAR1 = ctar1;
     e26:	6118      	str	r0, [r3, #16]
     e28:	b003      	add	sp, #12
     e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e2e:	9100      	str	r1, [sp, #0]
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
     e30:	4798      	blx	r3
     e32:	9900      	ldr	r1, [sp, #0]
     e34:	e6ad      	b.n	b92 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x46>
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
     e36:	4798      	blx	r3
     e38:	e7c5      	b.n	dc6 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x27a>
     e3a:	bf00      	nop
     e3c:	4002c000 	.word	0x4002c000
     e40:	4004c008 	.word	0x4004c008
     e44:	4004b018 	.word	0x4004b018
     e48:	4004c004 	.word	0x4004c004
     e4c:	4004b014 	.word	0x4004b014
     e50:	00000481 	.word	0x00000481

00000e54 <juggle_pal_onedir()>:

} // juggle_pal()



void juggle_pal_onedir() {
     e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
     e58:	4878      	ldr	r0, [pc, #480]	; (103c <juggle_pal_onedir()+0x1e8>)
     e5a:	7803      	ldrb	r3, [r0, #0]

} // juggle_pal()



void juggle_pal_onedir() {
     e5c:	b08f      	sub	sp, #60	; 0x3c
	if (mode_change) {
     e5e:	2b00      	cmp	r3, #0
     e60:	f040 819e 	bne.w	11a0 <juggle_pal_onedir()+0x34c>
     e64:	f8df b210 	ldr.w	fp, [pc, #528]	; 1078 <juggle_pal_onedir()+0x224>
     e68:	4d75      	ldr	r5, [pc, #468]	; (1040 <juggle_pal_onedir()+0x1ec>)
     e6a:	4e76      	ldr	r6, [pc, #472]	; (1044 <juggle_pal_onedir()+0x1f0>)
     e6c:	4c76      	ldr	r4, [pc, #472]	; (1048 <juggle_pal_onedir()+0x1f4>)
		this_delay =10; 
		use_all_shelves = 1;//random8(2);
		Serial.println("juggle_pal_ondeir");
	}

	if (reset_juggle_index) {
     e6e:	782b      	ldrb	r3, [r5, #0]
     e70:	b113      	cbz	r3, e78 <juggle_pal_onedir()+0x24>
		this_index = 0;
     e72:	4b76      	ldr	r3, [pc, #472]	; (104c <juggle_pal_onedir()+0x1f8>)
     e74:	2200      	movs	r2, #0
     e76:	701a      	strb	r2, [r3, #0]
	}

	fadeToBlackBy(leds, NUM_LEDS, this_fade);
     e78:	7832      	ldrb	r2, [r6, #0]
     e7a:	4875      	ldr	r0, [pc, #468]	; (1050 <juggle_pal_onedir()+0x1fc>)
     e7c:	21bc      	movs	r1, #188	; 0xbc
     e7e:	f002 fcc5 	bl	380c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	if (!use_all_shelves) {
     e82:	7825      	ldrb	r5, [r4, #0]
     e84:	2d00      	cmp	r5, #0
     e86:	f040 80b7 	bne.w	ff8 <juggle_pal_onedir()+0x1a4>
		for (int i = 0; i < numdots; i++) {
     e8a:	f89b 3000 	ldrb.w	r3, [fp]
     e8e:	2b00      	cmp	r3, #0
     e90:	f000 80af 	beq.w	ff2 <juggle_pal_onedir()+0x19e>
     e94:	496f      	ldr	r1, [pc, #444]	; (1054 <juggle_pal_onedir()+0x200>)
     e96:	9106      	str	r1, [sp, #24]
     e98:	496f      	ldr	r1, [pc, #444]	; (1058 <juggle_pal_onedir()+0x204>)
     e9a:	9107      	str	r1, [sp, #28]
     e9c:	496f      	ldr	r1, [pc, #444]	; (105c <juggle_pal_onedir()+0x208>)
     e9e:	4f6b      	ldr	r7, [pc, #428]	; (104c <juggle_pal_onedir()+0x1f8>)
     ea0:	9103      	str	r1, [sp, #12]
     ea2:	496f      	ldr	r1, [pc, #444]	; (1060 <juggle_pal_onedir()+0x20c>)
     ea4:	9104      	str	r1, [sp, #16]
     ea6:	496f      	ldr	r1, [pc, #444]	; (1064 <juggle_pal_onedir()+0x210>)
     ea8:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 1070 <juggle_pal_onedir()+0x21c>
     eac:	783a      	ldrb	r2, [r7, #0]
     eae:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 1074 <juggle_pal_onedir()+0x220>
     eb2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 107c <juggle_pal_onedir()+0x228>
     eb6:	9105      	str	r1, [sp, #20]
     eb8:	4e65      	ldr	r6, [pc, #404]	; (1050 <juggle_pal_onedir()+0x1fc>)
     eba:	e05e      	b.n	f7a <juggle_pal_onedir()+0x126>
			if (!this_dir) {
				leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
     ebc:	f89a 1000 	ldrb.w	r1, [sl]
     ec0:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ec2:	9906      	ldr	r1, [sp, #24]
     ec4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
     ec8:	6809      	ldr	r1, [r1, #0]
     eca:	910a      	str	r1, [sp, #40]	; 0x28
     ecc:	b29b      	uxth	r3, r3

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     ece:	2bff      	cmp	r3, #255	; 0xff
	return ret;
     ed0:	990a      	ldr	r1, [sp, #40]	; 0x28
     ed2:	bf98      	it	ls
     ed4:	021b      	lslls	r3, r3, #8


LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     ed6:	f44f 708c 	mov.w	r0, #280	; 0x118
     eda:	bf98      	it	ls
     edc:	b29b      	uxthls	r3, r3
     ede:	fb00 f101 	mul.w	r1, r0, r1
     ee2:	fb03 f101 	mul.w	r1, r3, r1
     ee6:	f3c1 410e 	ubfx	r1, r1, #16, #15
     eea:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     eee:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     ef0:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     ef4:	d503      	bpl.n	efe <juggle_pal_onedir()+0xaa>
     ef6:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     efa:	3307      	adds	r3, #7
     efc:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     efe:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     f00:	f3c3 0e46 	ubfx	lr, r3, #1, #7
     f04:	9c07      	ldr	r4, [sp, #28]
     f06:	9b03      	ldr	r3, [sp, #12]
     f08:	5c24      	ldrb	r4, [r4, r0]
     f0a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]

    if( theta & 0x8000 ) y = -y;
     f0e:	040b      	lsls	r3, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     f10:	fb04 040e 	mla	r4, r4, lr, r0
     f14:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
     f16:	d463      	bmi.n	fe0 <juggle_pal_onedir()+0x18c>
			}
			else {
				leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
     f18:	9905      	ldr	r1, [sp, #20]
     f1a:	9b04      	ldr	r3, [sp, #16]
     f1c:	7809      	ldrb	r1, [r1, #0]
     f1e:	781b      	ldrb	r3, [r3, #0]
     f20:	9100      	str	r1, [sp, #0]
     f22:	b224      	sxth	r4, r4
     f24:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     f28:	21bc      	movs	r1, #188	; 0xbc
     f2a:	b2a4      	uxth	r4, r4
     f2c:	fb01 f404 	mul.w	r4, r1, r4
     f30:	0c24      	lsrs	r4, r4, #16


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     f32:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     f36:	494c      	ldr	r1, [pc, #304]	; (1068 <juggle_pal_onedir()+0x214>)
     f38:	a80d      	add	r0, sp, #52	; 0x34
     f3a:	f002 fcb9 	bl	38b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
     f3e:	1931      	adds	r1, r6, r4
     f40:	5d33      	ldrb	r3, [r6, r4]
     f42:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
     f46:	fa83 f352 	uqadd8	r3, r3, r2
     f4a:	5533      	strb	r3, [r6, r4]
     f4c:	784a      	ldrb	r2, [r1, #1]
     f4e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
     f52:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
     f56:	704a      	strb	r2, [r1, #1]
     f58:	788b      	ldrb	r3, [r1, #2]
     f5a:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
     f5e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
     f62:	708b      	strb	r3, [r1, #2]
			}
			this_index += this_diff;
     f64:	7839      	ldrb	r1, [r7, #0]
     f66:	f899 2000 	ldrb.w	r2, [r9]
	}

	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
		for (int i = 0; i < numdots; i++) {
     f6a:	f89b 3000 	ldrb.w	r3, [fp]
				leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
			}
			else {
				leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
			}
			this_index += this_diff;
     f6e:	440a      	add	r2, r1
	}

	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
		for (int i = 0; i < numdots; i++) {
     f70:	3501      	adds	r5, #1
				leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
			}
			else {
				leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
			}
			this_index += this_diff;
     f72:	b2d2      	uxtb	r2, r2
	}

	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
		for (int i = 0; i < numdots; i++) {
     f74:	42ab      	cmp	r3, r5
				leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
			}
			else {
				leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
			}
			this_index += this_diff;
     f76:	703a      	strb	r2, [r7, #0]
	}

	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
		for (int i = 0; i < numdots; i++) {
     f78:	dd3b      	ble.n	ff2 <juggle_pal_onedir()+0x19e>
			if (!this_dir) {
     f7a:	f898 1000 	ldrb.w	r1, [r8]
     f7e:	2900      	cmp	r1, #0
     f80:	d09c      	beq.n	ebc <juggle_pal_onedir()+0x68>
				leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
			}
			else {
				leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
     f82:	f89a 1000 	ldrb.w	r1, [sl]
     f86:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f88:	9906      	ldr	r1, [sp, #24]
     f8a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
     f8e:	6809      	ldr	r1, [r1, #0]
     f90:	910b      	str	r1, [sp, #44]	; 0x2c
     f92:	b29b      	uxth	r3, r3
     f94:	2bff      	cmp	r3, #255	; 0xff
	return ret;
     f96:	990b      	ldr	r1, [sp, #44]	; 0x2c
     f98:	bf98      	it	ls
     f9a:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     f9c:	f44f 708c 	mov.w	r0, #280	; 0x118
     fa0:	fb00 f101 	mul.w	r1, r0, r1
     fa4:	bf98      	it	ls
     fa6:	b29b      	uxthls	r3, r3
     fa8:	fb03 f301 	mul.w	r3, r3, r1
     fac:	f3c3 430e 	ubfx	r3, r3, #16, #15
     fb0:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     fb4:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     fb6:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     fb8:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     fbc:	d503      	bpl.n	fc6 <juggle_pal_onedir()+0x172>
     fbe:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
     fc2:	3107      	adds	r1, #7
     fc4:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     fc6:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     fc8:	f3c1 0e46 	ubfx	lr, r1, #1, #7
     fcc:	9c07      	ldr	r4, [sp, #28]
     fce:	9903      	ldr	r1, [sp, #12]
     fd0:	5c24      	ldrb	r4, [r4, r0]
     fd2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]

    if( theta & 0x8000 ) y = -y;
     fd6:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     fd8:	fb04 040e 	mla	r4, r4, lr, r0
     fdc:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
     fde:	d59b      	bpl.n	f18 <juggle_pal_onedir()+0xc4>
     fe0:	4264      	negs	r4, r4
     fe2:	e799      	b.n	f18 <juggle_pal_onedir()+0xc4>
     fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fe6:	3301      	adds	r3, #1
			}
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
     fe8:	2b04      	cmp	r3, #4
     fea:	9309      	str	r3, [sp, #36]	; 0x24
     fec:	f109 0901 	add.w	r9, r9, #1
     ff0:	d108      	bne.n	1004 <juggle_pal_onedir()+0x1b0>
				}
				this_index += this_diff;
			}
		}
	}
} // 
     ff2:	b00f      	add	sp, #60	; 0x3c
     ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		this_index = 0;
	}

	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
     ff8:	2300      	movs	r3, #0
     ffa:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1080 <juggle_pal_onedir()+0x22c>
     ffe:	f8df 804c 	ldr.w	r8, [pc, #76]	; 104c <juggle_pal_onedir()+0x1f8>
    1002:	9309      	str	r3, [sp, #36]	; 0x24
			}
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (int i = 0; i < numdots; i++) {
    1004:	f89b 3000 	ldrb.w	r3, [fp]
    1008:	2b00      	cmp	r3, #0
    100a:	d0eb      	beq.n	fe4 <juggle_pal_onedir()+0x190>
    100c:	4911      	ldr	r1, [pc, #68]	; (1054 <juggle_pal_onedir()+0x200>)
    100e:	9107      	str	r1, [sp, #28]
    1010:	4911      	ldr	r1, [pc, #68]	; (1058 <juggle_pal_onedir()+0x204>)
    1012:	9106      	str	r1, [sp, #24]
    1014:	4911      	ldr	r1, [pc, #68]	; (105c <juggle_pal_onedir()+0x208>)
    1016:	9105      	str	r1, [sp, #20]
    1018:	4911      	ldr	r1, [pc, #68]	; (1060 <juggle_pal_onedir()+0x20c>)
    101a:	9104      	str	r1, [sp, #16]
    101c:	4911      	ldr	r1, [pc, #68]	; (1064 <juggle_pal_onedir()+0x210>)
    101e:	9103      	str	r1, [sp, #12]
				if (!this_dir) {
					leds[shelf[s][beatsin16_halfdown(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
				}
				else {
					leds[shelf[s][beatsin16_halfup(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
    1020:	9909      	ldr	r1, [sp, #36]	; 0x24
    1022:	4f12      	ldr	r7, [pc, #72]	; (106c <juggle_pal_onedir()+0x218>)
    1024:	f898 2000 	ldrb.w	r2, [r8]
    1028:	f8df a050 	ldr.w	sl, [pc, #80]	; 107c <juggle_pal_onedir()+0x228>
    102c:	4e08      	ldr	r6, [pc, #32]	; (1050 <juggle_pal_onedir()+0x1fc>)
    102e:	eb01 1181 	add.w	r1, r1, r1, lsl #6
    1032:	440f      	add	r7, r1
			}
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (int i = 0; i < numdots; i++) {
    1034:	2400      	movs	r4, #0
    1036:	9708      	str	r7, [sp, #32]
    1038:	e08c      	b.n	1154 <juggle_pal_onedir()+0x300>
    103a:	bf00      	nop
    103c:	1fff8724 	.word	0x1fff8724
    1040:	1fff8b78 	.word	0x1fff8b78
    1044:	1fff871c 	.word	0x1fff871c
    1048:	1fff8881 	.word	0x1fff8881
    104c:	1fff8b5c 	.word	0x1fff8b5c
    1050:	1fff8884 	.word	0x1fff8884
    1054:	1fff8e5c 	.word	0x1fff8e5c
    1058:	00006e54 	.word	0x00006e54
    105c:	00007008 	.word	0x00007008
    1060:	1fff8726 	.word	0x1fff8726
    1064:	1fff8b6c 	.word	0x1fff8b6c
    1068:	1fff8b18 	.word	0x1fff8b18
    106c:	1fff8cb0 	.word	0x1fff8cb0
    1070:	1fff872b 	.word	0x1fff872b
    1074:	1fff871d 	.word	0x1fff871d
    1078:	1fff872a 	.word	0x1fff872a
    107c:	1fff8b70 	.word	0x1fff8b70
    1080:	1fff8758 	.word	0x1fff8758
				if (!this_dir) {
					leds[shelf[s][beatsin16_halfdown(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
    1084:	4982      	ldr	r1, [pc, #520]	; (1290 <juggle_pal_onedir()+0x43c>)
    1086:	7808      	ldrb	r0, [r1, #0]
    1088:	f899 1000 	ldrb.w	r1, [r9]
    108c:	4403      	add	r3, r0
    108e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    1092:	b298      	uxth	r0, r3
    1094:	28ff      	cmp	r0, #255	; 0xff
    1096:	bf9c      	itt	ls
    1098:	0203      	lslls	r3, r0, #8
    109a:	b298      	uxthls	r0, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    109c:	9b07      	ldr	r3, [sp, #28]
    109e:	681b      	ldr	r3, [r3, #0]
    10a0:	930c      	str	r3, [sp, #48]	; 0x30
	return ret;
    10a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30


LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    10a4:	f44f 738c 	mov.w	r3, #280	; 0x118
    10a8:	fb03 f305 	mul.w	r3, r3, r5
    10ac:	fb00 f303 	mul.w	r3, r0, r3
    10b0:	f3c3 430e 	ubfx	r3, r3, #16, #15
    10b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    10b8:	3901      	subs	r1, #1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    10ba:	045f      	lsls	r7, r3, #17
    10bc:	b289      	uxth	r1, r1
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    10be:	f3c3 00ca 	ubfx	r0, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    10c2:	d503      	bpl.n	10cc <juggle_pal_onedir()+0x278>
    10c4:	f5c0 60ff 	rsb	r0, r0, #2040	; 0x7f8
    10c8:	3007      	adds	r0, #7
    10ca:	b280      	uxth	r0, r0
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    10cc:	9f06      	ldr	r7, [sp, #24]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    10ce:	0a05      	lsrs	r5, r0, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    10d0:	f3c0 0046 	ubfx	r0, r0, #1, #7
    10d4:	f817 e005 	ldrb.w	lr, [r7, r5]
    10d8:	9f05      	ldr	r7, [sp, #20]
    10da:	f837 5015 	ldrh.w	r5, [r7, r5, lsl #1]
    10de:	fb0e 5000 	mla	r0, lr, r0, r5

    if( theta & 0x8000 ) y = -y;
    10e2:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    10e4:	b280      	uxth	r0, r0

    if( theta & 0x8000 ) y = -y;
    10e6:	bf48      	it	mi
    10e8:	4240      	negmi	r0, r0
    10ea:	b200      	sxth	r0, r0
				}
				else {
					leds[shelf[s][beatsin16_halfup(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
    10ec:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
    10f0:	b283      	uxth	r3, r0
    10f2:	fb01 3303 	mla	r3, r1, r3, r3
    10f6:	9808      	ldr	r0, [sp, #32]
    10f8:	0c19      	lsrs	r1, r3, #16
    10fa:	9b04      	ldr	r3, [sp, #16]
    10fc:	5c45      	ldrb	r5, [r0, r1]
    10fe:	9903      	ldr	r1, [sp, #12]
    1100:	781b      	ldrb	r3, [r3, #0]
    1102:	7809      	ldrb	r1, [r1, #0]
    1104:	9100      	str	r1, [sp, #0]


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1106:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    110a:	4962      	ldr	r1, [pc, #392]	; (1294 <juggle_pal_onedir()+0x440>)
    110c:	a80b      	add	r0, sp, #44	; 0x2c
    110e:	f002 fbcf 	bl	38b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1112:	1971      	adds	r1, r6, r5
    1114:	5d73      	ldrb	r3, [r6, r5]
    1116:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    111a:	fa83 f352 	uqadd8	r3, r3, r2
    111e:	5573      	strb	r3, [r6, r5]
    1120:	784a      	ldrb	r2, [r1, #1]
    1122:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    1126:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    112a:	704a      	strb	r2, [r1, #1]
    112c:	788b      	ldrb	r3, [r1, #2]
    112e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    1132:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    1136:	708b      	strb	r3, [r1, #2]
				}
				this_index += this_diff;
    1138:	4b57      	ldr	r3, [pc, #348]	; (1298 <juggle_pal_onedir()+0x444>)
    113a:	f898 1000 	ldrb.w	r1, [r8]
    113e:	781a      	ldrb	r2, [r3, #0]
			}
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (int i = 0; i < numdots; i++) {
    1140:	f89b 3000 	ldrb.w	r3, [fp]
					leds[shelf[s][beatsin16_halfdown(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
				}
				else {
					leds[shelf[s][beatsin16_halfup(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
				}
				this_index += this_diff;
    1144:	440a      	add	r2, r1
			}
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (int i = 0; i < numdots; i++) {
    1146:	3401      	adds	r4, #1
					leds[shelf[s][beatsin16_halfdown(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
				}
				else {
					leds[shelf[s][beatsin16_halfup(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
				}
				this_index += this_diff;
    1148:	b2d2      	uxtb	r2, r2
			}
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (int i = 0; i < numdots; i++) {
    114a:	42a3      	cmp	r3, r4
					leds[shelf[s][beatsin16_halfdown(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
				}
				else {
					leds[shelf[s][beatsin16_halfup(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
				}
				this_index += this_diff;
    114c:	f888 2000 	strb.w	r2, [r8]
			}
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (int i = 0; i < numdots; i++) {
    1150:	f77f af48 	ble.w	fe4 <juggle_pal_onedir()+0x190>
				if (!this_dir) {
    1154:	f89a 1000 	ldrb.w	r1, [sl]
    1158:	2900      	cmp	r1, #0
    115a:	d093      	beq.n	1084 <juggle_pal_onedir()+0x230>
					leds[shelf[s][beatsin16_halfdown(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
				}
				else {
					leds[shelf[s][beatsin16_halfup(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
    115c:	494c      	ldr	r1, [pc, #304]	; (1290 <juggle_pal_onedir()+0x43c>)
    115e:	7808      	ldrb	r0, [r1, #0]
    1160:	f899 1000 	ldrb.w	r1, [r9]
    1164:	4403      	add	r3, r0
    1166:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    116a:	b298      	uxth	r0, r3
    116c:	28ff      	cmp	r0, #255	; 0xff
    116e:	bf9c      	itt	ls
    1170:	0203      	lslls	r3, r0, #8
    1172:	b298      	uxthls	r0, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1174:	9b07      	ldr	r3, [sp, #28]
    1176:	681b      	ldr	r3, [r3, #0]
    1178:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
    117a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    117c:	f44f 738c 	mov.w	r3, #280	; 0x118
    1180:	fb03 f305 	mul.w	r3, r3, r5
    1184:	fb00 f303 	mul.w	r3, r0, r3
    1188:	f3c3 430e 	ubfx	r3, r3, #16, #15
    118c:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1190:	b29b      	uxth	r3, r3
    1192:	3901      	subs	r1, #1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1194:	045d      	lsls	r5, r3, #17
    1196:	b289      	uxth	r1, r1
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1198:	f3c3 00ca 	ubfx	r0, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    119c:	d596      	bpl.n	10cc <juggle_pal_onedir()+0x278>
    119e:	e791      	b.n	10c4 <juggle_pal_onedir()+0x270>
    11a0:	4c3e      	ldr	r4, [pc, #248]	; (129c <juggle_pal_onedir()+0x448>)
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255 / numdots);
		this_dir = random8(2);
    11a2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 12b8 <juggle_pal_onedir()+0x464>
    11a6:	8823      	ldrh	r3, [r4, #0]
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    11a8:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1290 <juggle_pal_onedir()+0x43c>
		this_diff = random8(0, 255 / numdots);
    11ac:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 1298 <juggle_pal_onedir()+0x444>
		this_dir = random8(2);
		this_delay =10; 
    11b0:	f8df e108 	ldr.w	lr, [pc, #264]	; 12bc <juggle_pal_onedir()+0x468>


void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
    11b4:	f8df b108 	ldr.w	fp, [pc, #264]	; 12c0 <juggle_pal_onedir()+0x46c>
    11b8:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    11bc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    11c0:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    11c4:	3519      	adds	r5, #25
    11c6:	b2ad      	uxth	r5, r5
    11c8:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    11cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    11d0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    11d4:	3319      	adds	r3, #25
    11d6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    11da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    11de:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    11e2:	3319      	adds	r3, #25
    11e4:	b29b      	uxth	r3, r3
    11e6:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    11ea:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    11ee:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    11f2:	3619      	adds	r6, #25
    11f4:	b2b6      	uxth	r6, r6
    11f6:	eb06 2146 	add.w	r1, r6, r6, lsl #9
    11fa:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    11fe:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    1202:	3119      	adds	r1, #25
    1204:	b289      	uxth	r1, r1
    1206:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    120a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    120e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1212:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1216:	eb05 2515 	add.w	r5, r5, r5, lsr #8
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    121a:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    121c:	3219      	adds	r2, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    121e:	f3c5 1781 	ubfx	r7, r5, #6, #2
    1222:	eb03 0543 	add.w	r5, r3, r3, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1226:	b293      	uxth	r3, r2
    1228:	8023      	strh	r3, [r4, #0]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    122a:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    122e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    1232:	112a      	asrs	r2, r5, #4
		this_beat = random8(4, 20);
		this_diff = random8(0, 255 / numdots);
		this_dir = random8(2);
    1234:	f3c3 13c0 	ubfx	r3, r3, #7, #1
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1238:	f3c6 1503 	ubfx	r5, r6, #4, #4
		this_diff = random8(0, 255 / numdots);
    123c:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    1240:	4e17      	ldr	r6, [pc, #92]	; (12a0 <juggle_pal_onedir()+0x44c>)
		this_beat = random8(4, 20);
		this_diff = random8(0, 255 / numdots);
		this_dir = random8(2);
    1242:	f888 3000 	strb.w	r3, [r8]
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    1246:	3210      	adds	r2, #16

void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    1248:	4b16      	ldr	r3, [pc, #88]	; (12a4 <juggle_pal_onedir()+0x450>)
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    124a:	7032      	strb	r2, [r6, #0]
		this_beat = random8(4, 20);
		this_diff = random8(0, 255 / numdots);
    124c:	b2c9      	uxtb	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    124e:	3702      	adds	r7, #2

void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    1250:	2201      	movs	r2, #1
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1252:	3504      	adds	r5, #4
		this_diff = random8(0, 255 / numdots);
    1254:	24ff      	movs	r4, #255	; 0xff
    1256:	fb94 f4f7 	sdiv	r4, r4, r7
    125a:	fb04 f101 	mul.w	r1, r4, r1
		this_dir = random8(2);
		this_delay =10; 
		use_all_shelves = 1;//random8(2);
    125e:	4c12      	ldr	r4, [pc, #72]	; (12a8 <juggle_pal_onedir()+0x454>)
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1260:	f88a 5000 	strb.w	r5, [sl]

void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    1264:	701a      	strb	r2, [r3, #0]
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255 / numdots);
    1266:	1209      	asrs	r1, r1, #8



void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
    1268:	2300      	movs	r3, #0
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
    126a:	4d10      	ldr	r5, [pc, #64]	; (12ac <juggle_pal_onedir()+0x458>)
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255 / numdots);
    126c:	f889 1000 	strb.w	r1, [r9]
		this_dir = random8(2);
		this_delay =10; 
		use_all_shelves = 1;//random8(2);
    1270:	7022      	strb	r2, [r4, #0]



void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
    1272:	7003      	strb	r3, [r0, #0]
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255 / numdots);
		this_dir = random8(2);
		this_delay =10; 
    1274:	220a      	movs	r2, #10
    1276:	2111      	movs	r1, #17
    1278:	480d      	ldr	r0, [pc, #52]	; (12b0 <juggle_pal_onedir()+0x45c>)


void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
    127a:	f88b 7000 	strb.w	r7, [fp]
		use_palette = 1;
		reset_juggle_index = random8(1);
    127e:	702b      	strb	r3, [r5, #0]
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255 / numdots);
		this_dir = random8(2);
		this_delay =10; 
    1280:	f8ce 2000 	str.w	r2, [lr]
    1284:	f004 f98e 	bl	55a4 <usb_serial_write>
    1288:	480a      	ldr	r0, [pc, #40]	; (12b4 <juggle_pal_onedir()+0x460>)
    128a:	f004 fb8f 	bl	59ac <Print::println()>
    128e:	e5ee      	b.n	e6e <juggle_pal_onedir()+0x1a>
    1290:	1fff872b 	.word	0x1fff872b
    1294:	1fff8b18 	.word	0x1fff8b18
    1298:	1fff871d 	.word	0x1fff871d
    129c:	1fff875c 	.word	0x1fff875c
    12a0:	1fff871c 	.word	0x1fff871c
    12a4:	1fff871e 	.word	0x1fff871e
    12a8:	1fff8881 	.word	0x1fff8881
    12ac:	1fff8b78 	.word	0x1fff8b78
    12b0:	000061d4 	.word	0x000061d4
    12b4:	1fff8764 	.word	0x1fff8764
    12b8:	1fff8b70 	.word	0x1fff8b70
    12bc:	1fff8720 	.word	0x1fff8720
    12c0:	1fff872a 	.word	0x1fff872a

000012c4 <fire_mirror()>:
}



// fire mirrored from ends or center
void fire_mirror() {
    12c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    12c8:	4a8a      	ldr	r2, [pc, #552]	; (14f4 <fire_mirror()+0x230>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    12ca:	4c8b      	ldr	r4, [pc, #556]	; (14f8 <fire_mirror()+0x234>)
    12cc:	7813      	ldrb	r3, [r2, #0]
		mode_change = 0;
		sparking = random8(50, 110);
    12ce:	4e8b      	ldr	r6, [pc, #556]	; (14fc <fire_mirror()+0x238>)
}



// fire mirrored from ends or center
void fire_mirror() {
    12d0:	b089      	sub	sp, #36	; 0x24
	if (mode_change) {
    12d2:	2b00      	cmp	r3, #0
    12d4:	f040 81b1 	bne.w	163a <fire_mirror()+0x376>
    12d8:	4b89      	ldr	r3, [pc, #548]	; (1500 <fire_mirror()+0x23c>)
    12da:	4f8a      	ldr	r7, [pc, #552]	; (1504 <fire_mirror()+0x240>)
    12dc:	4d8a      	ldr	r5, [pc, #552]	; (1508 <fire_mirror()+0x244>)
    12de:	9305      	str	r3, [sp, #20]
    12e0:	783a      	ldrb	r2, [r7, #0]
    12e2:	4f8a      	ldr	r7, [pc, #552]	; (150c <fire_mirror()+0x248>)
    12e4:	488a      	ldr	r0, [pc, #552]	; (1510 <fire_mirror()+0x24c>)
    12e6:	8823      	ldrh	r3, [r4, #0]
    12e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    12ec:	0052      	lsls	r2, r2, #1
    12ee:	fb87 1702 	smull	r1, r7, r7, r2
    12f2:	4417      	add	r7, r2
    12f4:	17d2      	asrs	r2, r2, #31
    12f6:	ebc2 17a7 	rsb	r7, r2, r7, asr #6
    12fa:	3702      	adds	r7, #2
    12fc:	b2ff      	uxtb	r7, r7
    12fe:	f100 0e5e 	add.w	lr, r0, #94	; 0x5e
    1302:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1306:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    130a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    130e:	3319      	adds	r3, #25
    1310:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1312:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    1316:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    131a:	b2d2      	uxtb	r2, r2
    131c:	fb12 f207 	smulbb	r2, r2, r7
    1320:	eba1 2212 	sub.w	r2, r1, r2, lsr #8
		use_all_shelves = 1;// random8(2);
		Serial.println("fire_mirror");
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
    1324:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		this_delay = 15;
		use_all_shelves = 1;// random8(2);
		Serial.println("fire_mirror");
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
    1328:	4586      	cmp	lr, r0
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
    132a:	7002      	strb	r2, [r0, #0]
		this_delay = 15;
		use_all_shelves = 1;// random8(2);
		Serial.println("fire_mirror");
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
    132c:	d1e9      	bne.n	1302 <fire_mirror()+0x3e>
    132e:	4879      	ldr	r0, [pc, #484]	; (1514 <fire_mirror()+0x250>)
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
		}
		for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
    1330:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 1524 <fire_mirror()+0x260>
    1334:	f1a0 085c 	sub.w	r8, r0, #92	; 0x5c
    1338:	4647      	mov	r7, r8
    133a:	f100 0e02 	add.w	lr, r0, #2
    133e:	7802      	ldrb	r2, [r0, #0]
    1340:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
    1344:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    1348:	fb8c 9102 	smull	r9, r1, ip, r2
    134c:	eba1 72e2 	sub.w	r2, r1, r2, asr #31
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
		}
		for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
    1350:	42b8      	cmp	r0, r7
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
    1352:	f80e 2d01 	strb.w	r2, [lr, #-1]!
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
		}
		for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
    1356:	d1f2      	bne.n	133e <fire_mirror()+0x7a>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1358:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    135c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1360:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1364:	3319      	adds	r3, #25
    1366:	b29b      	uxth	r3, r3
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
		}
		if (random8() < sparking) {
    1368:	7830      	ldrb	r0, [r6, #0]
    136a:	8023      	strh	r3, [r4, #0]
    136c:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    1370:	b2d2      	uxtb	r2, r2
    1372:	4290      	cmp	r0, r2
    1374:	4960      	ldr	r1, [pc, #384]	; (14f8 <fire_mirror()+0x234>)
    1376:	d925      	bls.n	13c4 <fire_mirror()+0x100>
    1378:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    137c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1380:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1384:	3319      	adds	r3, #25
    1386:	b29b      	uxth	r3, r3
    1388:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    138c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1390:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    1394:	3019      	adds	r0, #25
    1396:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1398:	eb00 2210 	add.w	r2, r0, r0, lsr #8
    139c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    13a0:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    13a2:	b2db      	uxtb	r3, r3
    13a4:	eb02 0442 	add.w	r4, r2, r2, lsl #1
    13a8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    13ac:	121b      	asrs	r3, r3, #8
    13ae:	ebc2 1244 	rsb	r2, r2, r4, lsl #5
    13b2:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    13b4:	8008      	strh	r0, [r1, #0]
    13b6:	3a60      	subs	r2, #96	; 0x60
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
    13b8:	f818 1003 	ldrb.w	r1, [r8, r3]
    13bc:	fa81 f152 	uqadd8	r1, r1, r2
    13c0:	f808 1003 	strb.w	r1, [r8, r3]
		}
		if (this_dir) {
    13c4:	782b      	ldrb	r3, [r5, #0]
    13c6:	2b00      	cmp	r3, #0
    13c8:	f000 80ae 	beq.w	1528 <fire_mirror()+0x264>
    13cc:	4b52      	ldr	r3, [pc, #328]	; (1518 <fire_mirror()+0x254>)
    13ce:	9302      	str	r3, [sp, #8]
    13d0:	461d      	mov	r5, r3
    13d2:	9303      	str	r3, [sp, #12]
    13d4:	f04f 0b00 	mov.w	fp, #0
    13d8:	f10d 0a1c 	add.w	sl, sp, #28
			for (int j = 0; j < NUM_LEDS / 2; j++) {
				if (!use_all_shelves) {
    13dc:	9b05      	ldr	r3, [sp, #20]
    13de:	781b      	ldrb	r3, [r3, #0]
    13e0:	2b00      	cmp	r3, #0
    13e2:	d066      	beq.n	14b2 <fire_mirror()+0x1ee>
    13e4:	4b4d      	ldr	r3, [pc, #308]	; (151c <fire_mirror()+0x258>)
    13e6:	f8cd b004 	str.w	fp, [sp, #4]
    13ea:	f04f 0800 	mov.w	r8, #0
    13ee:	461e      	mov	r6, r3
    13f0:	46b3      	mov	fp, r6
					leds[j] = HeatColor(heat[j]);
					leds[NUM_LEDS - 1 - j] = HeatColor(heat[j]);
				}
				else {
					for (uint8_t s = 0; s < 4; s++) {
						int pos = j * (shelf_num_leds[s] / (NUM_LEDS / 2));
    13f2:	4b46      	ldr	r3, [pc, #280]	; (150c <fire_mirror()+0x248>)
    13f4:	f816 4b01 	ldrb.w	r4, [r6], #1
						leds[shelf[s][pos]] += HeatColor(heat[j]);
    13f8:	7839      	ldrb	r1, [r7, #0]
					leds[j] = HeatColor(heat[j]);
					leds[NUM_LEDS - 1 - j] = HeatColor(heat[j]);
				}
				else {
					for (uint8_t s = 0; s < 4; s++) {
						int pos = j * (shelf_num_leds[s] / (NUM_LEDS / 2));
    13fa:	fba3 3404 	umull	r3, r4, r3, r4
    13fe:	9b01      	ldr	r3, [sp, #4]
    1400:	09a4      	lsrs	r4, r4, #6
    1402:	fb03 f404 	mul.w	r4, r3, r4
						leds[shelf[s][pos]] += HeatColor(heat[j]);
    1406:	4b46      	ldr	r3, [pc, #280]	; (1520 <fire_mirror()+0x25c>)
    1408:	eb08 1988 	add.w	r9, r8, r8, lsl #6
    140c:	4499      	add	r9, r3
    140e:	4650      	mov	r0, sl
    1410:	f819 2004 	ldrb.w	r2, [r9, r4]
    1414:	9200      	str	r2, [sp, #0]
    1416:	f002 fa29 	bl	386c <HeatColor(unsigned char)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    141a:	9a00      	ldr	r2, [sp, #0]
    141c:	f89d e01c 	ldrb.w	lr, [sp, #28]
    1420:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1424:	18a8      	adds	r0, r5, r2
    1426:	5ca9      	ldrb	r1, [r5, r2]
    1428:	fa81 f15e 	uqadd8	r1, r1, lr
    142c:	54a9      	strb	r1, [r5, r2]
    142e:	f89d 201d 	ldrb.w	r2, [sp, #29]
    1432:	7841      	ldrb	r1, [r0, #1]
    1434:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    1438:	7041      	strb	r1, [r0, #1]
    143a:	7882      	ldrb	r2, [r0, #2]
    143c:	f89d 101e 	ldrb.w	r1, [sp, #30]
    1440:	fa82 f251 	uqadd8	r2, r2, r1
						leds[shelf[s][shelf_num_leds[s] - 1 - pos]] += HeatColor(heat[j]);
    1444:	f89b 3000 	ldrb.w	r3, [fp]
    1448:	7839      	ldrb	r1, [r7, #0]
        b = qadd8( b, rhs.b);
    144a:	7082      	strb	r2, [r0, #2]
    144c:	3b01      	subs	r3, #1
    144e:	1b1c      	subs	r4, r3, r4
    1450:	4650      	mov	r0, sl
    1452:	f819 4004 	ldrb.w	r4, [r9, r4]
    1456:	f002 fa09 	bl	386c <HeatColor(unsigned char)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    145a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    145e:	18a9      	adds	r1, r5, r2
    1460:	5cab      	ldrb	r3, [r5, r2]
    1462:	f89d 001c 	ldrb.w	r0, [sp, #28]
    1466:	fa83 f350 	uqadd8	r3, r3, r0
    146a:	54ab      	strb	r3, [r5, r2]
    146c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    1470:	784a      	ldrb	r2, [r1, #1]
    1472:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1476:	704a      	strb	r2, [r1, #1]
    1478:	788b      	ldrb	r3, [r1, #2]
    147a:	f89d 201e 	ldrb.w	r2, [sp, #30]
    147e:	fa83 f352 	uqadd8	r3, r3, r2
    1482:	f108 0801 	add.w	r8, r8, #1
				if (!use_all_shelves) {
					leds[j] = HeatColor(heat[j]);
					leds[NUM_LEDS - 1 - j] = HeatColor(heat[j]);
				}
				else {
					for (uint8_t s = 0; s < 4; s++) {
    1486:	f1b8 0f04 	cmp.w	r8, #4
        b = qadd8( b, rhs.b);
    148a:	708b      	strb	r3, [r1, #2]
    148c:	d1b0      	bne.n	13f0 <fire_mirror()+0x12c>
    148e:	f8dd b004 	ldr.w	fp, [sp, #4]
    1492:	9b02      	ldr	r3, [sp, #8]
    1494:	3303      	adds	r3, #3
    1496:	9302      	str	r3, [sp, #8]
    1498:	9b03      	ldr	r3, [sp, #12]
		if (random8() < sparking) {
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}
		if (this_dir) {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
    149a:	f10b 0b01 	add.w	fp, fp, #1
    149e:	3b03      	subs	r3, #3
    14a0:	f1bb 0f5e 	cmp.w	fp, #94	; 0x5e
    14a4:	f107 0701 	add.w	r7, r7, #1
    14a8:	9303      	str	r3, [sp, #12]
    14aa:	d197      	bne.n	13dc <fire_mirror()+0x118>
						leds[shelf[s][(shelf_num_leds[s] / 2) + pos]] = HeatColor(heat[j]);
					}
				}
			}
		}
}
    14ac:	b009      	add	sp, #36	; 0x24
    14ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			heat[y] = qadd8(heat[y], random8(160, 255));
		}
		if (this_dir) {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
				if (!use_all_shelves) {
					leds[j] = HeatColor(heat[j]);
    14b2:	7839      	ldrb	r1, [r7, #0]
    14b4:	4650      	mov	r0, sl
    14b6:	f002 f9d9 	bl	386c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14ba:	9e02      	ldr	r6, [sp, #8]
    14bc:	f89d 001c 	ldrb.w	r0, [sp, #28]
        g = rhs.g;
    14c0:	f89d 201d 	ldrb.w	r2, [sp, #29]
        b = rhs.b;
    14c4:	f89d 301e 	ldrb.w	r3, [sp, #30]
					leds[NUM_LEDS - 1 - j] = HeatColor(heat[j]);
    14c8:	7839      	ldrb	r1, [r7, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14ca:	7030      	strb	r0, [r6, #0]
        g = rhs.g;
    14cc:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    14ce:	70b3      	strb	r3, [r6, #2]
    14d0:	4650      	mov	r0, sl
    14d2:	f002 f9cb 	bl	386c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14d6:	9c03      	ldr	r4, [sp, #12]
    14d8:	f89d 101c 	ldrb.w	r1, [sp, #28]
        g = rhs.g;
    14dc:	f89d 201d 	ldrb.w	r2, [sp, #29]
        b = rhs.b;
    14e0:	f89d 301e 	ldrb.w	r3, [sp, #30]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14e4:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231
        g = rhs.g;
    14e8:	f884 2232 	strb.w	r2, [r4, #562]	; 0x232
        b = rhs.b;
    14ec:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
    14f0:	e7cf      	b.n	1492 <fire_mirror()+0x1ce>
    14f2:	bf00      	nop
    14f4:	1fff8724 	.word	0x1fff8724
    14f8:	1fff875c 	.word	0x1fff875c
    14fc:	1fff8728 	.word	0x1fff8728
    1500:	1fff8881 	.word	0x1fff8881
    1504:	1fff8725 	.word	0x1fff8725
    1508:	1fff8b70 	.word	0x1fff8b70
    150c:	ae4c415d 	.word	0xae4c415d
    1510:	1fff8b83 	.word	0x1fff8b83
    1514:	1fff8be0 	.word	0x1fff8be0
    1518:	1fff8884 	.word	0x1fff8884
    151c:	1fff8758 	.word	0x1fff8758
    1520:	1fff8cb0 	.word	0x1fff8cb0
    1524:	55555556 	.word	0x55555556
		}
		if (random8() < sparking) {
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}
		if (this_dir) {
    1528:	9302      	str	r3, [sp, #8]
				}
			}
		}
		else {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
				if (!use_all_shelves) {
    152a:	9b05      	ldr	r3, [sp, #20]
    152c:	4a68      	ldr	r2, [pc, #416]	; (16d0 <fire_mirror()+0x40c>)
    152e:	781b      	ldrb	r3, [r3, #0]
    1530:	9203      	str	r2, [sp, #12]
		}
		if (random8() < sparking) {
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}
		if (this_dir) {
    1532:	4615      	mov	r5, r2
    1534:	9204      	str	r2, [sp, #16]
    1536:	f10d 0a1c 	add.w	sl, sp, #28
				}
			}
		}
		else {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
				if (!use_all_shelves) {
    153a:	2b00      	cmp	r3, #0
    153c:	d05a      	beq.n	15f4 <fire_mirror()+0x330>
    153e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1542:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 16f8 <fire_mirror()+0x434>
    1546:	9301      	str	r3, [sp, #4]
    1548:	f04f 0800 	mov.w	r8, #0
    154c:	f8cd b000 	str.w	fp, [sp]
					leds[(NUM_LEDS / 2) + j] = HeatColor(heat[j]);
				}
				else {
					for (uint8_t s = 0; s < 4; s++) {
						uint8_t pos = j * ((shelf_num_leds[s]/2) / (NUM_LEDS / 2));
						leds[shelf[s][(shelf_num_leds[s] / 2) - 1 - pos]] = HeatColor(heat[j]);
    1550:	4b60      	ldr	r3, [pc, #384]	; (16d4 <fire_mirror()+0x410>)
					leds[(NUM_LEDS / 2) - 1 - j] = HeatColor(heat[j]);
					leds[(NUM_LEDS / 2) + j] = HeatColor(heat[j]);
				}
				else {
					for (uint8_t s = 0; s < 4; s++) {
						uint8_t pos = j * ((shelf_num_leds[s]/2) / (NUM_LEDS / 2));
    1552:	f81b 6b01 	ldrb.w	r6, [fp], #1
						leds[shelf[s][(shelf_num_leds[s] / 2) - 1 - pos]] = HeatColor(heat[j]);
    1556:	7839      	ldrb	r1, [r7, #0]
    1558:	fba3 3406 	umull	r3, r4, r3, r6
    155c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    1560:	09e4      	lsrs	r4, r4, #7
    1562:	fb14 f403 	smulbb	r4, r4, r3
    1566:	b2e4      	uxtb	r4, r4
    1568:	4b5b      	ldr	r3, [pc, #364]	; (16d8 <fire_mirror()+0x414>)
    156a:	43e0      	mvns	r0, r4
    156c:	eb08 1988 	add.w	r9, r8, r8, lsl #6
    1570:	4499      	add	r9, r3
    1572:	eb00 0656 	add.w	r6, r0, r6, lsr #1
    1576:	4650      	mov	r0, sl
    1578:	f819 6006 	ldrb.w	r6, [r9, r6]
    157c:	f002 f976 	bl	386c <HeatColor(unsigned char)>
						leds[shelf[s][(shelf_num_leds[s] / 2) + pos]] = HeatColor(heat[j]);
    1580:	9a00      	ldr	r2, [sp, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1582:	f89d 001c 	ldrb.w	r0, [sp, #28]
    1586:	7811      	ldrb	r1, [r2, #0]
        g = rhs.g;
    1588:	f89d e01d 	ldrb.w	lr, [sp, #29]
        b = rhs.b;
    158c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    1590:	eb04 0451 	add.w	r4, r4, r1, lsr #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1594:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    1598:	f814 4009 	ldrb.w	r4, [r4, r9]
    159c:	55a8      	strb	r0, [r5, r6]
    159e:	442e      	add	r6, r5
    15a0:	7839      	ldrb	r1, [r7, #0]
        g = rhs.g;
        b = rhs.b;
    15a2:	70b2      	strb	r2, [r6, #2]
    15a4:	4650      	mov	r0, sl

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    15a6:	f886 e001 	strb.w	lr, [r6, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    15ae:	f002 f95d 	bl	386c <HeatColor(unsigned char)>
    15b2:	f108 0801 	add.w	r8, r8, #1
    15b6:	192a      	adds	r2, r5, r4
    15b8:	f89d 601c 	ldrb.w	r6, [sp, #28]
        g = rhs.g;
    15bc:	f89d 001d 	ldrb.w	r0, [sp, #29]
        b = rhs.b;
    15c0:	f89d 101e 	ldrb.w	r1, [sp, #30]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15c4:	552e      	strb	r6, [r5, r4]
				if (!use_all_shelves) {
					leds[(NUM_LEDS / 2) - 1 - j] = HeatColor(heat[j]);
					leds[(NUM_LEDS / 2) + j] = HeatColor(heat[j]);
				}
				else {
					for (uint8_t s = 0; s < 4; s++) {
    15c6:	f1b8 0f04 	cmp.w	r8, #4
        g = rhs.g;
    15ca:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    15cc:	7091      	strb	r1, [r2, #2]
    15ce:	d1bd      	bne.n	154c <fire_mirror()+0x288>
    15d0:	9a03      	ldr	r2, [sp, #12]
					}
				}
			}
		}
		else {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
    15d2:	9b02      	ldr	r3, [sp, #8]
    15d4:	3a03      	subs	r2, #3
    15d6:	9203      	str	r2, [sp, #12]
    15d8:	9a04      	ldr	r2, [sp, #16]
    15da:	3301      	adds	r3, #1
    15dc:	3203      	adds	r2, #3
    15de:	2b5e      	cmp	r3, #94	; 0x5e
    15e0:	9302      	str	r3, [sp, #8]
    15e2:	f107 0701 	add.w	r7, r7, #1
    15e6:	9204      	str	r2, [sp, #16]
    15e8:	f43f af60 	beq.w	14ac <fire_mirror()+0x1e8>
				if (!use_all_shelves) {
    15ec:	9b05      	ldr	r3, [sp, #20]
    15ee:	781b      	ldrb	r3, [r3, #0]
    15f0:	2b00      	cmp	r3, #0
    15f2:	d1a4      	bne.n	153e <fire_mirror()+0x27a>
					leds[(NUM_LEDS / 2) - 1 - j] = HeatColor(heat[j]);
    15f4:	7839      	ldrb	r1, [r7, #0]
    15f6:	4650      	mov	r0, sl
    15f8:	f002 f938 	bl	386c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15fc:	9e03      	ldr	r6, [sp, #12]
    15fe:	f89d 001c 	ldrb.w	r0, [sp, #28]
        g = rhs.g;
    1602:	f89d 201d 	ldrb.w	r2, [sp, #29]
        b = rhs.b;
    1606:	f89d 301e 	ldrb.w	r3, [sp, #30]
					leds[(NUM_LEDS / 2) + j] = HeatColor(heat[j]);
    160a:	7839      	ldrb	r1, [r7, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    160c:	f886 0117 	strb.w	r0, [r6, #279]	; 0x117
        g = rhs.g;
    1610:	f886 2118 	strb.w	r2, [r6, #280]	; 0x118
        b = rhs.b;
    1614:	f886 3119 	strb.w	r3, [r6, #281]	; 0x119
    1618:	4650      	mov	r0, sl
    161a:	f002 f927 	bl	386c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    161e:	9c04      	ldr	r4, [sp, #16]
    1620:	f89d 101c 	ldrb.w	r1, [sp, #28]
        g = rhs.g;
    1624:	f89d 201d 	ldrb.w	r2, [sp, #29]
        b = rhs.b;
    1628:	f89d 301e 	ldrb.w	r3, [sp, #30]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    162c:	f884 111a 	strb.w	r1, [r4, #282]	; 0x11a
        g = rhs.g;
    1630:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
        b = rhs.b;
    1634:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
    1638:	e7ca      	b.n	15d0 <fire_mirror()+0x30c>
    163a:	8823      	ldrh	r3, [r4, #0]
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
		this_dir = random8(2);
    163c:	4d27      	ldr	r5, [pc, #156]	; (16dc <fire_mirror()+0x418>)
// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
    163e:	4f28      	ldr	r7, [pc, #160]	; (16e0 <fire_mirror()+0x41c>)
		use_palette = 0;
    1640:	4928      	ldr	r1, [pc, #160]	; (16e4 <fire_mirror()+0x420>)
    1642:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    1646:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    164a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    164e:	3019      	adds	r0, #25
    1650:	b280      	uxth	r0, r0
    1652:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    1656:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    165a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    165e:	3319      	adds	r3, #25
    1660:	b29b      	uxth	r3, r3
    1662:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    1666:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    166a:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    166e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1672:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
    1676:	b2db      	uxtb	r3, r3

// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
    1678:	b2c0      	uxtb	r0, r0
    167a:	f10e 0e19 	add.w	lr, lr, #25
		cooling = random8(50, 120);
    167e:	eb03 0383 	add.w	r3, r3, r3, lsl #2

// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
    1682:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    1686:	fa1f fe8e 	uxth.w	lr, lr
		cooling = random8(50, 120);
    168a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3

// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
    168e:	1180      	asrs	r0, r0, #6
    1690:	f8a4 e000 	strh.w	lr, [r4]
    1694:	3032      	adds	r0, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1696:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
		cooling = random8(50, 120);
    169a:	11db      	asrs	r3, r3, #7

// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
    169c:	7030      	strb	r0, [r6, #0]
		cooling = random8(50, 120);
    169e:	3332      	adds	r3, #50	; 0x32
		use_palette = 0;
		this_dir = random8(2);
    16a0:	f3ce 10c0 	ubfx	r0, lr, #7, #1
    16a4:	7028      	strb	r0, [r5, #0]
// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
    16a6:	703b      	strb	r3, [r7, #0]
		use_palette = 0;
		this_dir = random8(2);
		this_delay = 15;
    16a8:	480f      	ldr	r0, [pc, #60]	; (16e8 <fire_mirror()+0x424>)


// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
    16aa:	2300      	movs	r3, #0
    16ac:	7013      	strb	r3, [r2, #0]
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
		this_dir = random8(2);
		this_delay = 15;
    16ae:	220f      	movs	r2, #15
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
    16b0:	700b      	strb	r3, [r1, #0]
		this_dir = random8(2);
		this_delay = 15;
    16b2:	6002      	str	r2, [r0, #0]
		use_all_shelves = 1;// random8(2);
    16b4:	490d      	ldr	r1, [pc, #52]	; (16ec <fire_mirror()+0x428>)
    16b6:	4a0d      	ldr	r2, [pc, #52]	; (16ec <fire_mirror()+0x428>)
    16b8:	9105      	str	r1, [sp, #20]
    16ba:	2301      	movs	r3, #1
    16bc:	210b      	movs	r1, #11
    16be:	480c      	ldr	r0, [pc, #48]	; (16f0 <fire_mirror()+0x42c>)
    16c0:	7013      	strb	r3, [r2, #0]
    16c2:	f003 ff6f 	bl	55a4 <usb_serial_write>
    16c6:	480b      	ldr	r0, [pc, #44]	; (16f4 <fire_mirror()+0x430>)
    16c8:	f004 f970 	bl	59ac <Print::println()>
    16cc:	e608      	b.n	12e0 <fire_mirror()+0x1c>
    16ce:	bf00      	nop
    16d0:	1fff8884 	.word	0x1fff8884
    16d4:	ae4c415d 	.word	0xae4c415d
    16d8:	1fff8cb0 	.word	0x1fff8cb0
    16dc:	1fff8b70 	.word	0x1fff8b70
    16e0:	1fff8725 	.word	0x1fff8725
    16e4:	1fff871e 	.word	0x1fff871e
    16e8:	1fff8720 	.word	0x1fff8720
    16ec:	1fff8881 	.word	0x1fff8881
    16f0:	000061e8 	.word	0x000061e8
    16f4:	1fff8764 	.word	0x1fff8764
    16f8:	1fff8758 	.word	0x1fff8758

000016fc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    16fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16fe:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1700:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    1702:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
    1704:	789b      	ldrb	r3, [r3, #2]
    1706:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    1708:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
    170a:	9101      	str	r1, [sp, #4]
    170c:	9202      	str	r2, [sp, #8]
    170e:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1710:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
    1714:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
    1718:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    171c:	d017      	beq.n	174e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    171e:	2300      	movs	r3, #0
    1720:	f88d 3015 	strb.w	r3, [sp, #21]
    1724:	f88d 3014 	strb.w	r3, [sp, #20]
    1728:	f88d 3013 	strb.w	r3, [sp, #19]
    172c:	f88d 3012 	strb.w	r3, [sp, #18]
    1730:	f88d 3011 	strb.w	r3, [sp, #17]
    1734:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1738:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    173a:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    173c:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    173e:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    1740:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    1744:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1746:	a901      	add	r1, sp, #4
    1748:	4798      	blx	r3
  }
    174a:	b009      	add	sp, #36	; 0x24
    174c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    174e:	4a1b      	ldr	r2, [pc, #108]	; (17bc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1750:	7813      	ldrb	r3, [r2, #0]
    1752:	3301      	adds	r3, #1
    1754:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1758:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    175c:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    175e:	bf14      	ite	ne
    1760:	2280      	movne	r2, #128	; 0x80
    1762:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    1764:	0799      	lsls	r1, r3, #30
    1766:	bf44      	itt	mi
    1768:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
    176c:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
    176e:	075b      	lsls	r3, r3, #29
    1770:	bf48      	it	mi
    1772:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    1776:	3210      	adds	r2, #16
    1778:	b2d2      	uxtb	r2, r2
    177a:	f10d 0313 	add.w	r3, sp, #19
    177e:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    1782:	f44f 7e80 	mov.w	lr, #256	; 0x100
    1786:	b1ac      	cbz	r4, 17b4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
    1788:	fb9e f4f4 	sdiv	r4, lr, r4
    178c:	b2e4      	uxtb	r4, r4
    178e:	1c61      	adds	r1, r4, #1
    1790:	b2c9      	uxtb	r1, r1
    1792:	fb01 2502 	mla	r5, r1, r2, r2
    1796:	122d      	asrs	r5, r5, #8
    1798:	7019      	strb	r1, [r3, #0]
    179a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    179c:	b105      	cbz	r5, 17a0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
    179e:	3e01      	subs	r6, #1
    17a0:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    17a4:	b101      	cbz	r1, 17a8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
    17a6:	701c      	strb	r4, [r3, #0]
    17a8:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    17aa:	42bb      	cmp	r3, r7
    17ac:	d0c4      	beq.n	1738 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
    17ae:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    17b0:	2c00      	cmp	r4, #0
    17b2:	d1e9      	bne.n	1788 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
    17b4:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
    17b6:	f803 4c03 	strb.w	r4, [r3, #-3]
    17ba:	e7f5      	b.n	17a8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
    17bc:	1fff8834 	.word	0x1fff8834

000017c0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    17c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17c2:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17c4:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    17c6:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
    17c8:	789b      	ldrb	r3, [r3, #2]
    17ca:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    17cc:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    17ce:	9101      	str	r1, [sp, #4]
    17d0:	9202      	str	r2, [sp, #8]
    17d2:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17d4:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
    17d8:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
    17dc:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    17e0:	d016      	beq.n	1810 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    17e2:	2300      	movs	r3, #0
    17e4:	f88d 3015 	strb.w	r3, [sp, #21]
    17e8:	f88d 3014 	strb.w	r3, [sp, #20]
    17ec:	f88d 3013 	strb.w	r3, [sp, #19]
    17f0:	f88d 3012 	strb.w	r3, [sp, #18]
    17f4:	f88d 3011 	strb.w	r3, [sp, #17]
    17f8:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    17fc:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    17fe:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1800:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    1802:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    1806:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    1808:	a901      	add	r1, sp, #4
    180a:	4790      	blx	r2
  }
    180c:	b009      	add	sp, #36	; 0x24
    180e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    1810:	4a1b      	ldr	r2, [pc, #108]	; (1880 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    1812:	7813      	ldrb	r3, [r2, #0]
    1814:	3301      	adds	r3, #1
    1816:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    181a:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    181e:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    1820:	bf14      	ite	ne
    1822:	2280      	movne	r2, #128	; 0x80
    1824:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    1826:	0799      	lsls	r1, r3, #30
    1828:	bf44      	itt	mi
    182a:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
    182e:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
    1830:	075b      	lsls	r3, r3, #29
    1832:	bf48      	it	mi
    1834:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    1838:	3210      	adds	r2, #16
    183a:	b2d2      	uxtb	r2, r2
    183c:	f10d 0313 	add.w	r3, sp, #19
    1840:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    1844:	f44f 7e80 	mov.w	lr, #256	; 0x100
    1848:	b1ac      	cbz	r4, 1876 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
    184a:	fb9e f4f4 	sdiv	r4, lr, r4
    184e:	b2e4      	uxtb	r4, r4
    1850:	1c61      	adds	r1, r4, #1
    1852:	b2c9      	uxtb	r1, r1
    1854:	fb01 2502 	mla	r5, r1, r2, r2
    1858:	122d      	asrs	r5, r5, #8
    185a:	7019      	strb	r1, [r3, #0]
    185c:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    185e:	b105      	cbz	r5, 1862 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
    1860:	3e01      	subs	r6, #1
    1862:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    1866:	b101      	cbz	r1, 186a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
    1868:	701c      	strb	r4, [r3, #0]
    186a:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    186c:	42bb      	cmp	r3, r7
    186e:	d0c5      	beq.n	17fc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
    1870:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    1872:	2c00      	cmp	r4, #0
    1874:	d1e9      	bne.n	184a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
    1876:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
    1878:	f803 4c03 	strb.w	r4, [r3, #-3]
    187c:	e7f5      	b.n	186a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
    187e:	bf00      	nop
    1880:	1fff8834 	.word	0x1fff8834

00001884 <juggle_pal()>:
 */
// use beatsin16_halfup and beatsin16_halfdown to make it go one way

bool reset_juggle_index = 0;

void juggle_pal() {
    1884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    1888:	4abe      	ldr	r2, [pc, #760]	; (1b84 <juggle_pal()+0x300>)
    188a:	7813      	ldrb	r3, [r2, #0]
 */
// use beatsin16_halfup and beatsin16_halfdown to make it go one way

bool reset_juggle_index = 0;

void juggle_pal() {
    188c:	b089      	sub	sp, #36	; 0x24
	if (mode_change) {
    188e:	2b00      	cmp	r3, #0
    1890:	f040 810b 	bne.w	1aaa <juggle_pal()+0x226>
    1894:	f8df a338 	ldr.w	sl, [pc, #824]	; 1bd0 <juggle_pal()+0x34c>
    1898:	4ebb      	ldr	r6, [pc, #748]	; (1b88 <juggle_pal()+0x304>)
    189a:	4cbc      	ldr	r4, [pc, #752]	; (1b8c <juggle_pal()+0x308>)
    189c:	4dbc      	ldr	r5, [pc, #752]	; (1b90 <juggle_pal()+0x30c>)
		this_diff = random8(0, 255/numdots);
		this_delay = 10;
		use_all_shelves = 1;//random8(2);
		Serial.println("juggle_pal");
	}
	if (reset_juggle_index) {
    189e:	7833      	ldrb	r3, [r6, #0]
    18a0:	b113      	cbz	r3, 18a8 <juggle_pal()+0x24>
		this_index = 0;
    18a2:	4bbc      	ldr	r3, [pc, #752]	; (1b94 <juggle_pal()+0x310>)
    18a4:	2200      	movs	r2, #0
    18a6:	701a      	strb	r2, [r3, #0]
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
    18a8:	7822      	ldrb	r2, [r4, #0]
    18aa:	48bb      	ldr	r0, [pc, #748]	; (1b98 <juggle_pal()+0x314>)
    18ac:	21bc      	movs	r1, #188	; 0xbc
    18ae:	f001 ffad 	bl	380c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	if (!use_all_shelves) {
    18b2:	782d      	ldrb	r5, [r5, #0]
    18b4:	2d00      	cmp	r5, #0
    18b6:	d170      	bne.n	199a <juggle_pal()+0x116>
		for (int i = 0; i < numdots; i++) {
    18b8:	f89a 3000 	ldrb.w	r3, [sl]
    18bc:	2b00      	cmp	r3, #0
    18be:	d069      	beq.n	1994 <juggle_pal()+0x110>
    18c0:	49b6      	ldr	r1, [pc, #728]	; (1b9c <juggle_pal()+0x318>)
    18c2:	4fb4      	ldr	r7, [pc, #720]	; (1b94 <juggle_pal()+0x310>)
    18c4:	9103      	str	r1, [sp, #12]
    18c6:	49b6      	ldr	r1, [pc, #728]	; (1ba0 <juggle_pal()+0x31c>)
    18c8:	9102      	str	r1, [sp, #8]
    18ca:	49b6      	ldr	r1, [pc, #728]	; (1ba4 <juggle_pal()+0x320>)
    18cc:	9104      	str	r1, [sp, #16]
    18ce:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 1bb4 <juggle_pal()+0x330>
    18d2:	49b5      	ldr	r1, [pc, #724]	; (1ba8 <juggle_pal()+0x324>)
    18d4:	783a      	ldrb	r2, [r7, #0]
    18d6:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 1bbc <juggle_pal()+0x338>
    18da:	4eaf      	ldr	r6, [pc, #700]	; (1b98 <juggle_pal()+0x314>)
    18dc:	9105      	str	r1, [sp, #20]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    18de:	f44f 7b8c 	mov.w	fp, #280	; 0x118
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
    18e2:	f899 1000 	ldrb.w	r1, [r9]
    18e6:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18e8:	9903      	ldr	r1, [sp, #12]
    18ea:	442b      	add	r3, r5
    18ec:	6809      	ldr	r1, [r1, #0]
    18ee:	9106      	str	r1, [sp, #24]
    18f0:	b29b      	uxth	r3, r3

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    18f2:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    18f4:	9906      	ldr	r1, [sp, #24]
    18f6:	bf9c      	itt	ls
    18f8:	021b      	lslls	r3, r3, #8
    18fa:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    18fc:	fb0b f101 	mul.w	r1, fp, r1
    1900:	fb03 f101 	mul.w	r1, r3, r1
    1904:	0c09      	lsrs	r1, r1, #16
    1906:	044c      	lsls	r4, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1908:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    190c:	d503      	bpl.n	1916 <juggle_pal()+0x92>
    190e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1912:	3307      	adds	r3, #7
    1914:	b29b      	uxth	r3, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1916:	f3c3 0e46 	ubfx	lr, r3, #1, #7

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    191a:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    191c:	9c02      	ldr	r4, [sp, #8]
    191e:	9b04      	ldr	r3, [sp, #16]
    1920:	5c24      	ldrb	r4, [r4, r0]
    1922:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    1926:	fb04 040e 	mla	r4, r4, lr, r0
    192a:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
    192c:	0408      	lsls	r0, r1, #16
    192e:	bf48      	it	mi
    1930:	4264      	negmi	r4, r4
    1932:	b224      	sxth	r4, r4
    1934:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
    1938:	b2a4      	uxth	r4, r4
    193a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    193e:	9805      	ldr	r0, [sp, #20]
    1940:	499a      	ldr	r1, [pc, #616]	; (1bac <juggle_pal()+0x328>)
    1942:	7800      	ldrb	r0, [r0, #0]
    1944:	9000      	str	r0, [sp, #0]
    1946:	ebc4 1484 	rsb	r4, r4, r4, lsl #6
    194a:	0c24      	lsrs	r4, r4, #16


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    194c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1950:	a807      	add	r0, sp, #28
    1952:	23ff      	movs	r3, #255	; 0xff
    1954:	f001 ffac 	bl	38b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1958:	1930      	adds	r0, r6, r4
    195a:	5d33      	ldrb	r3, [r6, r4]
    195c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    1960:	fa83 f352 	uqadd8	r3, r3, r2
    1964:	5533      	strb	r3, [r6, r4]
    1966:	f89d 201d 	ldrb.w	r2, [sp, #29]
    196a:	7843      	ldrb	r3, [r0, #1]
    196c:	fa83 f352 	uqadd8	r3, r3, r2
        g = qadd8( g, rhs.g);
    1970:	7043      	strb	r3, [r0, #1]
    1972:	7881      	ldrb	r1, [r0, #2]
    1974:	f89d 301e 	ldrb.w	r3, [sp, #30]
    1978:	fa81 f153 	uqadd8	r1, r1, r3
			this_index += this_diff;
    197c:	783c      	ldrb	r4, [r7, #0]
    197e:	f898 2000 	ldrb.w	r2, [r8]
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
		for (int i = 0; i < numdots; i++) {
    1982:	f89a 3000 	ldrb.w	r3, [sl]
        b = qadd8( b, rhs.b);
    1986:	7081      	strb	r1, [r0, #2]
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
    1988:	4422      	add	r2, r4
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
		for (int i = 0; i < numdots; i++) {
    198a:	3501      	adds	r5, #1
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
    198c:	b2d2      	uxtb	r2, r2
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
		for (int i = 0; i < numdots; i++) {
    198e:	42ab      	cmp	r3, r5
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
    1990:	703a      	strb	r2, [r7, #0]
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
		for (int i = 0; i < numdots; i++) {
    1992:	dca6      	bgt.n	18e2 <juggle_pal()+0x5e>
				this_index += this_diff;
			}
		}
	}

} // juggle_pal()
    1994:	b009      	add	sp, #36	; 0x24
    1996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    199a:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 1b94 <juggle_pal()+0x310>
    199e:	f04f 0800 	mov.w	r8, #0
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint8_t i = 0; i < numdots; i++) {
    19a2:	f89a 1000 	ldrb.w	r1, [sl]
    19a6:	2900      	cmp	r1, #0
    19a8:	d076      	beq.n	1a98 <juggle_pal()+0x214>
    19aa:	4b7d      	ldr	r3, [pc, #500]	; (1ba0 <juggle_pal()+0x31c>)
    19ac:	9304      	str	r3, [sp, #16]
    19ae:	4b7d      	ldr	r3, [pc, #500]	; (1ba4 <juggle_pal()+0x320>)
    19b0:	4f7f      	ldr	r7, [pc, #508]	; (1bb0 <juggle_pal()+0x32c>)
    19b2:	9303      	str	r3, [sp, #12]
    19b4:	4b7c      	ldr	r3, [pc, #496]	; (1ba8 <juggle_pal()+0x324>)
    19b6:	9302      	str	r3, [sp, #8]
				leds[shelf[s][beatsin16(this_beat + i + numdots, 0, shelf_num_leds[s])]] += ColorFromPalette(current_palette, this_index, 255, current_blending);
    19b8:	eb08 1388 	add.w	r3, r8, r8, lsl #6
    19bc:	441f      	add	r7, r3
    19be:	f899 2000 	ldrb.w	r2, [r9]
    19c2:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 1b9c <juggle_pal()+0x318>
    19c6:	4e74      	ldr	r6, [pc, #464]	; (1b98 <juggle_pal()+0x314>)
    19c8:	9705      	str	r7, [sp, #20]
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint8_t i = 0; i < numdots; i++) {
    19ca:	2500      	movs	r5, #0
				leds[shelf[s][beatsin16(this_beat + i + numdots, 0, shelf_num_leds[s])]] += ColorFromPalette(current_palette, this_index, 255, current_blending);
    19cc:	4b79      	ldr	r3, [pc, #484]	; (1bb4 <juggle_pal()+0x330>)
    19ce:	781c      	ldrb	r4, [r3, #0]
    19d0:	194b      	adds	r3, r1, r5
    19d2:	4979      	ldr	r1, [pc, #484]	; (1bb8 <juggle_pal()+0x334>)
    19d4:	f811 e008 	ldrb.w	lr, [r1, r8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19d8:	f8db 1000 	ldr.w	r1, [fp]
    19dc:	9107      	str	r1, [sp, #28]
    19de:	4423      	add	r3, r4

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    19e0:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    19e2:	9907      	ldr	r1, [sp, #28]
    19e4:	bf98      	it	ls
    19e6:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    19e8:	f44f 708c 	mov.w	r0, #280	; 0x118
    19ec:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    19f0:	bf98      	it	ls
    19f2:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    19f4:	fb03 f301 	mul.w	r3, r3, r1
    19f8:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    19fa:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    19fc:	f3c3 00ca 	ubfx	r0, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1a00:	d503      	bpl.n	1a0a <juggle_pal()+0x186>
    1a02:	f5c0 60ff 	rsb	r0, r0, #2040	; 0x7f8
    1a06:	3007      	adds	r0, #7
    1a08:	b280      	uxth	r0, r0

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1a0a:	0a01      	lsrs	r1, r0, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1a0c:	9c04      	ldr	r4, [sp, #16]
    1a0e:	9f03      	ldr	r7, [sp, #12]
    1a10:	5c64      	ldrb	r4, [r4, r1]
    1a12:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    1a16:	f3c0 0046 	ubfx	r0, r0, #1, #7
    1a1a:	fb04 1000 	mla	r0, r4, r0, r1

    if( theta & 0x8000 ) y = -y;
    1a1e:	041b      	lsls	r3, r3, #16
    1a20:	9c02      	ldr	r4, [sp, #8]
    1a22:	4962      	ldr	r1, [pc, #392]	; (1bac <juggle_pal()+0x328>)
    1a24:	7824      	ldrb	r4, [r4, #0]
    1a26:	9400      	str	r4, [sp, #0]
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1a28:	b280      	uxth	r0, r0

    if( theta & 0x8000 ) y = -y;
    1a2a:	bf48      	it	mi
    1a2c:	4240      	negmi	r0, r0
    1a2e:	b200      	sxth	r0, r0
    1a30:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
    1a34:	b2a0      	uxth	r0, r4
    1a36:	fb0e 0000 	mla	r0, lr, r0, r0
    1a3a:	9c05      	ldr	r4, [sp, #20]
    1a3c:	0c00      	lsrs	r0, r0, #16
    1a3e:	23ff      	movs	r3, #255	; 0xff
    1a40:	5c24      	ldrb	r4, [r4, r0]


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1a42:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1a46:	a806      	add	r0, sp, #24
    1a48:	f001 ff32 	bl	38b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1a4c:	eb06 0e04 	add.w	lr, r6, r4
    1a50:	5d33      	ldrb	r3, [r6, r4]
    1a52:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1a56:	fa83 f352 	uqadd8	r3, r3, r2
    1a5a:	5533      	strb	r3, [r6, r4]
    1a5c:	f89d 2019 	ldrb.w	r2, [sp, #25]
    1a60:	f89e 3001 	ldrb.w	r3, [lr, #1]
    1a64:	fa83 f352 	uqadd8	r3, r3, r2
        g = qadd8( g, rhs.g);
    1a68:	f88e 3001 	strb.w	r3, [lr, #1]
    1a6c:	f89e 0002 	ldrb.w	r0, [lr, #2]
    1a70:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1a74:	fa80 f053 	uqadd8	r0, r0, r3
				this_index += this_diff;
    1a78:	4b50      	ldr	r3, [pc, #320]	; (1bbc <juggle_pal()+0x338>)
    1a7a:	f899 2000 	ldrb.w	r2, [r9]
    1a7e:	781b      	ldrb	r3, [r3, #0]
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint8_t i = 0; i < numdots; i++) {
    1a80:	f89a 1000 	ldrb.w	r1, [sl]
        b = qadd8( b, rhs.b);
    1a84:	f88e 0002 	strb.w	r0, [lr, #2]
    1a88:	3501      	adds	r5, #1
				leds[shelf[s][beatsin16(this_beat + i + numdots, 0, shelf_num_leds[s])]] += ColorFromPalette(current_palette, this_index, 255, current_blending);
				this_index += this_diff;
    1a8a:	441a      	add	r2, r3
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint8_t i = 0; i < numdots; i++) {
    1a8c:	b2ed      	uxtb	r5, r5
				leds[shelf[s][beatsin16(this_beat + i + numdots, 0, shelf_num_leds[s])]] += ColorFromPalette(current_palette, this_index, 255, current_blending);
				this_index += this_diff;
    1a8e:	b2d2      	uxtb	r2, r2
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint8_t i = 0; i < numdots; i++) {
    1a90:	42a9      	cmp	r1, r5
				leds[shelf[s][beatsin16(this_beat + i + numdots, 0, shelf_num_leds[s])]] += ColorFromPalette(current_palette, this_index, 255, current_blending);
				this_index += this_diff;
    1a92:	f889 2000 	strb.w	r2, [r9]
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint8_t i = 0; i < numdots; i++) {
    1a96:	d899      	bhi.n	19cc <juggle_pal()+0x148>
    1a98:	f108 0801 	add.w	r8, r8, #1
		for (int i = 0; i < numdots; i++) {
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
    1a9c:	f1b8 0f04 	cmp.w	r8, #4
    1aa0:	f47f af7f 	bne.w	19a2 <juggle_pal()+0x11e>
				this_index += this_diff;
			}
		}
	}

} // juggle_pal()
    1aa4:	b009      	add	sp, #36	; 0x24
    1aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1aaa:	4c45      	ldr	r4, [pc, #276]	; (1bc0 <juggle_pal()+0x33c>)
bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
    1aac:	f8df a120 	ldr.w	sl, [pc, #288]	; 1bd0 <juggle_pal()+0x34c>
    1ab0:	8823      	ldrh	r3, [r4, #0]
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255/numdots);
    1ab2:	f8df 8108 	ldr.w	r8, [pc, #264]	; 1bbc <juggle_pal()+0x338>
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1ab6:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 1bb4 <juggle_pal()+0x330>

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    1aba:	f8df e118 	ldr.w	lr, [pc, #280]	; 1bd4 <juggle_pal()+0x350>
    1abe:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    1ac2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1ac6:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    1aca:	3019      	adds	r0, #25
    1acc:	b280      	uxth	r0, r0
    1ace:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    1ad2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    1ad6:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    1ada:	3519      	adds	r5, #25
    1adc:	b2ad      	uxth	r5, r5
    1ade:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    1ae2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    1ae6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1aea:	3319      	adds	r3, #25
    1aec:	b29b      	uxth	r3, r3
    1aee:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    1af2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1af6:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    1afa:	3119      	adds	r1, #25
    1afc:	b289      	uxth	r1, r1
    1afe:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    1b02:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    1b06:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    1b0a:	3619      	adds	r6, #25
    1b0c:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1b0e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255/numdots);
    1b12:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    1b16:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
    1b1a:	b2db      	uxtb	r3, r3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1b1c:	f3c0 1081 	ubfx	r0, r0, #6, #2
    1b20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		this_beat = random8(4, 20);
		this_diff = random8(0, 255/numdots);
    1b24:	b2ff      	uxtb	r7, r7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1b26:	8026      	strh	r6, [r4, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1b28:	3002      	adds	r0, #2
void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
    1b2a:	4e17      	ldr	r6, [pc, #92]	; (1b88 <juggle_pal()+0x304>)
bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
    1b2c:	f88a 0000 	strb.w	r0, [sl]
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1b30:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    1b34:	eb05 2515 	add.w	r5, r5, r5, lsr #8
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
    1b38:	111b      	asrs	r3, r3, #4
		this_beat = random8(4, 20);
		this_diff = random8(0, 255/numdots);
    1b3a:	24ff      	movs	r4, #255	; 0xff
    1b3c:	fb94 f4f0 	sdiv	r4, r4, r0
    1b40:	fb04 f707 	mul.w	r7, r4, r7
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
    1b44:	4c11      	ldr	r4, [pc, #68]	; (1b8c <juggle_pal()+0x308>)
		this_beat = random8(4, 20);
		this_diff = random8(0, 255/numdots);
		this_delay = 10;
    1b46:	481f      	ldr	r0, [pc, #124]	; (1bc4 <juggle_pal()+0x340>)
void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
    1b48:	f3c5 15c0 	ubfx	r5, r5, #7, #1
		this_fade = random8(16, 64);
    1b4c:	3310      	adds	r3, #16
		this_beat = random8(4, 20);
    1b4e:	f3c1 1103 	ubfx	r1, r1, #4, #4
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
    1b52:	7023      	strb	r3, [r4, #0]
void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
    1b54:	7035      	strb	r5, [r6, #0]
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255/numdots);
    1b56:	123b      	asrs	r3, r7, #8
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1b58:	3104      	adds	r1, #4
		this_diff = random8(0, 255/numdots);
		this_delay = 10;
		use_all_shelves = 1;//random8(2);
    1b5a:	4d0d      	ldr	r5, [pc, #52]	; (1b90 <juggle_pal()+0x30c>)
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1b5c:	f889 1000 	strb.w	r1, [r9]
		this_diff = random8(0, 255/numdots);
    1b60:	f888 3000 	strb.w	r3, [r8]

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    1b64:	2101      	movs	r1, #1
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255/numdots);
		this_delay = 10;
    1b66:	230a      	movs	r3, #10

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    1b68:	f88e 1000 	strb.w	r1, [lr]
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255/numdots);
		this_delay = 10;
		use_all_shelves = 1;//random8(2);
    1b6c:	7029      	strb	r1, [r5, #0]
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255/numdots);
		this_delay = 10;
    1b6e:	6003      	str	r3, [r0, #0]
    1b70:	4619      	mov	r1, r3
    1b72:	4815      	ldr	r0, [pc, #84]	; (1bc8 <juggle_pal()+0x344>)

bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
    1b74:	2300      	movs	r3, #0
    1b76:	7013      	strb	r3, [r2, #0]
    1b78:	f003 fd14 	bl	55a4 <usb_serial_write>
    1b7c:	4813      	ldr	r0, [pc, #76]	; (1bcc <juggle_pal()+0x348>)
    1b7e:	f003 ff15 	bl	59ac <Print::println()>
    1b82:	e68c      	b.n	189e <juggle_pal()+0x1a>
    1b84:	1fff8724 	.word	0x1fff8724
    1b88:	1fff8b78 	.word	0x1fff8b78
    1b8c:	1fff871c 	.word	0x1fff871c
    1b90:	1fff8881 	.word	0x1fff8881
    1b94:	1fff8b5c 	.word	0x1fff8b5c
    1b98:	1fff8884 	.word	0x1fff8884
    1b9c:	1fff8e5c 	.word	0x1fff8e5c
    1ba0:	00006e54 	.word	0x00006e54
    1ba4:	00007008 	.word	0x00007008
    1ba8:	1fff8b6c 	.word	0x1fff8b6c
    1bac:	1fff8b18 	.word	0x1fff8b18
    1bb0:	1fff8cb0 	.word	0x1fff8cb0
    1bb4:	1fff872b 	.word	0x1fff872b
    1bb8:	1fff8758 	.word	0x1fff8758
    1bbc:	1fff871d 	.word	0x1fff871d
    1bc0:	1fff875c 	.word	0x1fff875c
    1bc4:	1fff8720 	.word	0x1fff8720
    1bc8:	000061f4 	.word	0x000061f4
    1bcc:	1fff8764 	.word	0x1fff8764
    1bd0:	1fff872a 	.word	0x1fff872a
    1bd4:	1fff871e 	.word	0x1fff871e

00001bd8 <pride()>:
#ifndef PRIDE_H
#define PRIDE_H

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
    1bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    1bdc:	4bb4      	ldr	r3, [pc, #720]	; (1eb0 <pride()+0x2d8>)
    1bde:	781a      	ldrb	r2, [r3, #0]
#ifndef PRIDE_H
#define PRIDE_H

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
    1be0:	b093      	sub	sp, #76	; 0x4c
	if (mode_change) {
    1be2:	2a00      	cmp	r2, #0
    1be4:	f040 81e6 	bne.w	1fb4 <pride()+0x3dc>
    1be8:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 1ed0 <pride()+0x2f8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1bec:	49b1      	ldr	r1, [pc, #708]	; (1eb4 <pride()+0x2dc>)
    1bee:	680b      	ldr	r3, [r1, #0]
    1bf0:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    1bf2:	9811      	ldr	r0, [sp, #68]	; 0x44
    1bf4:	f645 7328 	movw	r3, #24360	; 0x5f28
    1bf8:	fb03 f000 	mul.w	r0, r3, r0
    1bfc:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1bfe:	0446      	lsls	r6, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1c00:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1c04:	d503      	bpl.n	1c0e <pride()+0x36>
    1c06:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1c0a:	3307      	adds	r3, #7
    1c0c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1c0e:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    1c10:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 1ed4 <pride()+0x2fc>

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1c14:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 1ed8 <pride()+0x300>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1c18:	f81a 5002 	ldrb.w	r5, [sl, r2]
    1c1c:	f83b 4012 	ldrh.w	r4, [fp, r2, lsl #1]
    1c20:	f3c3 0246 	ubfx	r2, r3, #1, #7
    1c24:	fb05 4302 	mla	r3, r5, r2, r4
    1c28:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1c2a:	0405      	lsls	r5, r0, #16
    1c2c:	bf48      	it	mi
    1c2e:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c30:	680a      	ldr	r2, [r1, #0]
    1c32:	9210      	str	r2, [sp, #64]	; 0x40
    1c34:	b21b      	sxth	r3, r3
	}
	static uint16_t sPseudotime = 0;
	static uint16_t sLastMillis = 0;
	static uint16_t sHue16 = 0;

	uint8_t sat8 = beatsin88(87, 220, 250);
    1c36:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1c3a:	b29b      	uxth	r3, r3
	return ret;
    1c3c:	9810      	ldr	r0, [sp, #64]	; 0x40
    1c3e:	4a9e      	ldr	r2, [pc, #632]	; (1eb8 <pride()+0x2e0>)
    1c40:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    1c44:	0c1b      	lsrs	r3, r3, #16
    1c46:	fb02 f000 	mul.w	r0, r2, r0
    1c4a:	0c00      	lsrs	r0, r0, #16
    1c4c:	33dc      	adds	r3, #220	; 0xdc
    1c4e:	b2db      	uxtb	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1c50:	0444      	lsls	r4, r0, #17
    1c52:	9302      	str	r3, [sp, #8]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1c54:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1c58:	d503      	bpl.n	1c62 <pride()+0x8a>
    1c5a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1c5e:	3307      	adds	r3, #7
    1c60:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1c62:	0a1c      	lsrs	r4, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1c64:	f3c3 0246 	ubfx	r2, r3, #1, #7
    1c68:	f81a 5004 	ldrb.w	r5, [sl, r4]
    1c6c:	f83b 3014 	ldrh.w	r3, [fp, r4, lsl #1]
    1c70:	fb05 3302 	mla	r3, r5, r2, r3

    if( theta & 0x8000 ) y = -y;
    1c74:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1c76:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1c78:	bf48      	it	mi
    1c7a:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c7c:	680a      	ldr	r2, [r1, #0]
    1c7e:	920f      	str	r2, [sp, #60]	; 0x3c
    1c80:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1c82:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1c86:	b29b      	uxth	r3, r3
	return ret;
    1c88:	980f      	ldr	r0, [sp, #60]	; 0x3c
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1c8a:	f64d 6208 	movw	r2, #56840	; 0xde08
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1c8e:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1c92:	fb02 f000 	mul.w	r0, r2, r0
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1c96:	0c1b      	lsrs	r3, r3, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1c98:	0c00      	lsrs	r0, r0, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1c9a:	3360      	adds	r3, #96	; 0x60
    1c9c:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1c9e:	0442      	lsls	r2, r0, #17
    1ca0:	9303      	str	r3, [sp, #12]
	uint8_t brightdepth = beatsin88(341, 96, 224);
    1ca2:	fa5f fc83 	uxtb.w	ip, r3
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1ca6:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1caa:	d503      	bpl.n	1cb4 <pride()+0xdc>
    1cac:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1cb0:	3307      	adds	r3, #7
    1cb2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1cb4:	0a1c      	lsrs	r4, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1cb6:	f3c3 0246 	ubfx	r2, r3, #1, #7
    1cba:	f81a 5004 	ldrb.w	r5, [sl, r4]
    1cbe:	f83b 3014 	ldrh.w	r3, [fp, r4, lsl #1]
    1cc2:	fb05 3302 	mla	r3, r5, r2, r3

    if( theta & 0x8000 ) y = -y;
    1cc6:	0407      	lsls	r7, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1cc8:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1cca:	bf48      	it	mi
    1ccc:	425b      	negmi	r3, r3
    1cce:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1cd0:	680a      	ldr	r2, [r1, #0]
    1cd2:	920e      	str	r2, [sp, #56]	; 0x38
    1cd4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1cd8:	b29b      	uxth	r3, r3
    1cda:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
	return ret;
    1cde:	980e      	ldr	r0, [sp, #56]	; 0x38
    1ce0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1ce4:	f24a 02c8 	movw	r2, #41160	; 0xa0c8
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1ce8:	0c1b      	lsrs	r3, r3, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1cea:	fb02 f000 	mul.w	r0, r2, r0
    1cee:	0c00      	lsrs	r0, r0, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1cf0:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
    1cf4:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1cf6:	0446      	lsls	r6, r0, #17
    1cf8:	9301      	str	r3, [sp, #4]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1cfa:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1cfe:	d503      	bpl.n	1d08 <pride()+0x130>
    1d00:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1d04:	3307      	adds	r3, #7
    1d06:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1d08:	0a1c      	lsrs	r4, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1d0a:	f3c3 0246 	ubfx	r2, r3, #1, #7
    1d0e:	f81a 5004 	ldrb.w	r5, [sl, r4]
    1d12:	f83b 3014 	ldrh.w	r3, [fp, r4, lsl #1]
    1d16:	fb05 3302 	mla	r3, r5, r2, r3
    1d1a:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1d1c:	0405      	lsls	r5, r0, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1d1e:	680a      	ldr	r2, [r1, #0]
    1d20:	920d      	str	r2, [sp, #52]	; 0x34
    1d22:	bf48      	it	mi
    1d24:	425b      	negmi	r3, r3
    1d26:	b21b      	sxth	r3, r3
	return ret;
    1d28:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	uint16_t brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	uint8_t msmultiplier = beatsin88(147, 23, 60);

	uint16_t hue16 = sHue16;//gHue * 256;
    1d2a:	4864      	ldr	r0, [pc, #400]	; (1ebc <pride()+0x2e4>)
    1d2c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1d30:	b29b      	uxth	r3, r3
    1d32:	2226      	movs	r2, #38	; 0x26
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1d34:	f647 3698 	movw	r6, #31640	; 0x7b98
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1d38:	fb02 f203 	mul.w	r2, r2, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1d3c:	fb06 f604 	mul.w	r6, r6, r4
    1d40:	0c36      	lsrs	r6, r6, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1d42:	0c12      	lsrs	r2, r2, #16
    1d44:	3217      	adds	r2, #23
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1d46:	0474      	lsls	r4, r6, #17
    1d48:	b292      	uxth	r2, r2
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1d4a:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    1d4e:	8805      	ldrh	r5, [r0, #0]
    if( theta & 0x4000 ) offset = 2047 - offset;
    1d50:	d503      	bpl.n	1d5a <pride()+0x182>
    1d52:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1d56:	3307      	adds	r3, #7
    1d58:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1d5a:	0a1c      	lsrs	r4, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1d5c:	f3c3 0346 	ubfx	r3, r3, #1, #7
    1d60:	f81a 7004 	ldrb.w	r7, [sl, r4]
    1d64:	f83b 4014 	ldrh.w	r4, [fp, r4, lsl #1]
    1d68:	fb07 4303 	mla	r3, r7, r3, r4
    1d6c:	b29b      	uxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1d6e:	680c      	ldr	r4, [r1, #0]
    1d70:	940b      	str	r4, [sp, #44]	; 0x2c

    if( theta & 0x8000 ) y = -y;
    1d72:	0437      	lsls	r7, r6, #16
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
    1d74:	4c52      	ldr	r4, [pc, #328]	; (1ec0 <pride()+0x2e8>)
	return ret;
    1d76:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1d78:	6809      	ldr	r1, [r1, #0]
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    1d7a:	4e52      	ldr	r6, [pc, #328]	; (1ec4 <pride()+0x2ec>)
    1d7c:	910c      	str	r1, [sp, #48]	; 0x30
    1d7e:	bf48      	it	mi
    1d80:	425b      	negmi	r3, r3
    1d82:	b21b      	sxth	r3, r3

	uint16_t hue16 = sHue16;//gHue * 256;
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
    1d84:	8821      	ldrh	r1, [r4, #0]
    1d86:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	uint8_t msmultiplier = beatsin88(147, 23, 60);

	uint16_t hue16 = sHue16;//gHue * 256;
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
    1d8a:	b2bf      	uxth	r7, r7
    1d8c:	f640 3eb8 	movw	lr, #3000	; 0xbb8
    1d90:	b29b      	uxth	r3, r3
	uint16_t deltams = ms - sLastMillis;
    1d92:	1a79      	subs	r1, r7, r1
    1d94:	fb0e f303 	mul.w	r3, lr, r3
	sLastMillis = ms;
    1d98:	8027      	strh	r7, [r4, #0]
	sPseudotime += deltams * msmultiplier;
    1d9a:	f8b6 e000 	ldrh.w	lr, [r6]
	return ret;
    1d9e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1da0:	4f49      	ldr	r7, [pc, #292]	; (1ec8 <pride()+0x2f0>)

	uint16_t hue16 = sHue16;//gHue * 256;
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
    1da2:	b289      	uxth	r1, r1
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    1da4:	fb11 ee02 	smlabb	lr, r1, r2, lr
    1da8:	fb07 f204 	mul.w	r2, r7, r4
    1dac:	0c12      	lsrs	r2, r2, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    1dae:	0c1b      	lsrs	r3, r3, #16
    1db0:	fa1f f48e 	uxth.w	r4, lr
    1db4:	3301      	adds	r3, #1
    1db6:	8034      	strh	r4, [r6, #0]
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1db8:	0456      	lsls	r6, r2, #17
    1dba:	b29f      	uxth	r7, r3
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1dbc:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1dc0:	d503      	bpl.n	1dca <pride()+0x1f2>
    1dc2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1dc6:	3307      	adds	r3, #7
    1dc8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1dca:	0a1e      	lsrs	r6, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1dcc:	f3c3 0346 	ubfx	r3, r3, #1, #7
    1dd0:	f81a e006 	ldrb.w	lr, [sl, r6]
    1dd4:	f83b 6016 	ldrh.w	r6, [fp, r6, lsl #1]
    1dd8:	fb0e 6303 	mla	r3, lr, r3, r6
    1ddc:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1dde:	0412      	lsls	r2, r2, #16
    1de0:	bf48      	it	mi
    1de2:	425b      	negmi	r3, r3
    1de4:	b21b      	sxth	r3, r3
	sHue16 += deltams * beatsin88(400, 5, 9);
    1de6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1dea:	b29b      	uxth	r3, r3
    1dec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1df0:	0c1b      	lsrs	r3, r3, #16
    1df2:	3305      	adds	r3, #5
    1df4:	b29b      	uxth	r3, r3
	uint16_t brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
    1df6:	f898 2000 	ldrb.w	r2, [r8]

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
    1dfa:	fb01 5103 	mla	r1, r1, r3, r5
    1dfe:	8001      	strh	r1, [r0, #0]
    1e00:	ea6f 0c0c 	mvn.w	ip, ip
	uint16_t brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
    1e04:	2a00      	cmp	r2, #0
    1e06:	d169      	bne.n	1edc <pride()+0x304>
    1e08:	9b01      	ldr	r3, [sp, #4]
    1e0a:	441c      	add	r4, r3
    1e0c:	fa5f f38c 	uxtb.w	r3, ip
    1e10:	9304      	str	r3, [sp, #16]
    1e12:	b2a4      	uxth	r4, r4
    1e14:	f04f 09bb 	mov.w	r9, #187	; 0xbb
    1e18:	ae09      	add	r6, sp, #36	; 0x24
    1e1a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			hue16 += hueinc16;
    1e1e:	197b      	adds	r3, r7, r5
    1e20:	b29d      	uxth	r5, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1e22:	0463      	lsls	r3, r4, #17
			uint8_t hue8 = hue16 / 256;
    1e24:	ea4f 2e15 	mov.w	lr, r5, lsr #8
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1e28:	f3c4 02ca 	ubfx	r2, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1e2c:	d503      	bpl.n	1e36 <pride()+0x25e>
    1e2e:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    1e32:	3207      	adds	r2, #7
    1e34:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1e36:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1e38:	f3c2 0146 	ubfx	r1, r2, #1, #7
    1e3c:	f81a c000 	ldrb.w	ip, [sl, r0]
    1e40:	f83b 2010 	ldrh.w	r2, [fp, r0, lsl #1]

			brightnesstheta16 += brightnessthetainc16;
			uint16_t b16 = sin16(brightnesstheta16) + 32768;

			uint16_t bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
			uint8_t bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
    1e44:	9b03      	ldr	r3, [sp, #12]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1e46:	f88d e028 	strb.w	lr, [sp, #40]	; 0x28
    1e4a:	fb0c 2201 	mla	r2, ip, r1, r2

    if( theta & 0x8000 ) y = -y;
    1e4e:	0420      	lsls	r0, r4, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1e50:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    1e52:	bf48      	it	mi
    1e54:	4252      	negmi	r2, r2
    1e56:	b212      	sxth	r2, r2
			uint8_t hue8 = hue16 / 256;

			brightnesstheta16 += brightnessthetainc16;
			uint16_t b16 = sin16(brightnesstheta16) + 32768;

			uint16_t bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    1e58:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    1e5c:	b292      	uxth	r2, r2
			uint8_t bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
    1e5e:	fb02 f202 	mul.w	r2, r2, r2
    1e62:	0c12      	lsrs	r2, r2, #16
    1e64:	fb03 f202 	mul.w	r2, r3, r2
    1e68:	9b04      	ldr	r3, [sp, #16]
    1e6a:	f3c2 4207 	ubfx	r2, r2, #16, #8
    1e6e:	441a      	add	r2, r3
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1e70:	4631      	mov	r1, r6
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1e72:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1e76:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1e7a:	4640      	mov	r0, r8
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1e7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1e80:	f001 fe60 	bl	3b44 <hsv2rgb_rainbow(CHSV const&, CRGB&)>

			CRGB newcolor = CHSV(hue8, sat8, bri8);

			uint16_t pixelnumber = i;
			pixelnumber = (NUM_LEDS - 1) - pixelnumber;
			nblend(leds[pixelnumber], newcolor, 64);
    1e84:	4b11      	ldr	r3, [pc, #68]	; (1ecc <pride()+0x2f4>)
    1e86:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    1e8a:	4418      	add	r0, r3
    1e8c:	2240      	movs	r2, #64	; 0x40
    1e8e:	4631      	mov	r1, r6
    1e90:	f001 fcbe 	bl	3810 <nblend(CRGB&, CRGB const&, unsigned char)>
    1e94:	9b01      	ldr	r3, [sp, #4]
    1e96:	f109 39ff 	add.w	r9, r9, #4294967295
    1e9a:	441c      	add	r4, r3
    1e9c:	fa1f f989 	uxth.w	r9, r9
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	uint16_t brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
    1ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1ea4:	4599      	cmp	r9, r3
    1ea6:	b2a4      	uxth	r4, r4
    1ea8:	d1b9      	bne.n	1e1e <pride()+0x246>
				pixelnumber = (shelf_num_leds[s] - 1) - pixelnumber;
				nblend(leds[shelf[s][pixelnumber]], newcolor, 64);
			}
		}
	}
}
    1eaa:	b013      	add	sp, #76	; 0x4c
    1eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1eb0:	1fff8724 	.word	0x1fff8724
    1eb4:	1fff8e5c 	.word	0x1fff8e5c
    1eb8:	000174f8 	.word	0x000174f8
    1ebc:	1fff8b16 	.word	0x1fff8b16
    1ec0:	1fff8b7e 	.word	0x1fff8b7e
    1ec4:	1fff8872 	.word	0x1fff8872
    1ec8:	0001b580 	.word	0x0001b580
    1ecc:	1fff8884 	.word	0x1fff8884
    1ed0:	1fff8881 	.word	0x1fff8881
    1ed4:	00006e54 	.word	0x00006e54
    1ed8:	00007008 	.word	0x00007008
    1edc:	fa5f f38c 	uxtb.w	r3, ip
    1ee0:	f8df 8110 	ldr.w	r8, [pc, #272]	; 1ff4 <pride()+0x41c>
    1ee4:	9306      	str	r3, [sp, #24]
    1ee6:	2600      	movs	r6, #0
    1ee8:	9707      	str	r7, [sp, #28]
			nblend(leds[pixelnumber], newcolor, 64);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
    1eea:	f818 2006 	ldrb.w	r2, [r8, r6]
    1eee:	2a00      	cmp	r2, #0
    1ef0:	d05a      	beq.n	1fa8 <pride()+0x3d0>
    1ef2:	9b01      	ldr	r3, [sp, #4]
    1ef4:	4939      	ldr	r1, [pc, #228]	; (1fdc <pride()+0x404>)

				CRGB newcolor = CHSV(hue8, sat8, bri8);

				uint16_t pixelnumber = i;
				pixelnumber = (shelf_num_leds[s] - 1) - pixelnumber;
				nblend(leds[shelf[s][pixelnumber]], newcolor, 64);
    1ef6:	eb06 1286 	add.w	r2, r6, r6, lsl #6
    1efa:	441c      	add	r4, r3
    1efc:	188b      	adds	r3, r1, r2
    1efe:	9304      	str	r3, [sp, #16]
    1f00:	ab0a      	add	r3, sp, #40	; 0x28
    1f02:	b2a4      	uxth	r4, r4
			nblend(leds[pixelnumber], newcolor, 64);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
    1f04:	2700      	movs	r7, #0
    1f06:	f10d 0924 	add.w	r9, sp, #36	; 0x24
    1f0a:	9305      	str	r3, [sp, #20]
    1f0c:	e000      	b.n	1f10 <pride()+0x338>
    1f0e:	4614      	mov	r4, r2
				hue16 += hueinc16;
    1f10:	9b07      	ldr	r3, [sp, #28]
    1f12:	441d      	add	r5, r3
    1f14:	b2ad      	uxth	r5, r5
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1f16:	0461      	lsls	r1, r4, #17
				uint8_t hue8 = hue16 / 256;
    1f18:	ea4f 2e15 	mov.w	lr, r5, lsr #8
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1f1c:	f3c4 02ca 	ubfx	r2, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1f20:	d503      	bpl.n	1f2a <pride()+0x352>
    1f22:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    1f26:	3207      	adds	r2, #7
    1f28:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1f2a:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1f2c:	f3c2 0146 	ubfx	r1, r2, #1, #7
    1f30:	f81a c000 	ldrb.w	ip, [sl, r0]
    1f34:	f83b 2010 	ldrh.w	r2, [fp, r0, lsl #1]
    1f38:	9805      	ldr	r0, [sp, #20]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1f3a:	f88d e028 	strb.w	lr, [sp, #40]	; 0x28
    1f3e:	fb0c 2201 	mla	r2, ip, r1, r2

    if( theta & 0x8000 ) y = -y;
    1f42:	0423      	lsls	r3, r4, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1f44:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    1f46:	bf48      	it	mi
    1f48:	4252      	negmi	r2, r2
    1f4a:	b212      	sxth	r2, r2

				brightnesstheta16 += brightnessthetainc16;
				uint16_t b16 = sin16(brightnesstheta16) + 32768;

				uint16_t bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    1f4c:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    1f50:	b292      	uxth	r2, r2
				uint8_t bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
    1f52:	9b03      	ldr	r3, [sp, #12]
    1f54:	fb02 f202 	mul.w	r2, r2, r2
    1f58:	0c12      	lsrs	r2, r2, #16
    1f5a:	fb03 f202 	mul.w	r2, r3, r2
    1f5e:	9b06      	ldr	r3, [sp, #24]
    1f60:	f3c2 4207 	ubfx	r2, r2, #16, #8
    1f64:	441a      	add	r2, r3
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1f66:	4649      	mov	r1, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1f68:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1f6c:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
    1f70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1f74:	f001 fde6 	bl	3b44 <hsv2rgb_rainbow(CHSV const&, CRGB&)>

				CRGB newcolor = CHSV(hue8, sat8, bri8);

				uint16_t pixelnumber = i;
				pixelnumber = (shelf_num_leds[s] - 1) - pixelnumber;
				nblend(leds[shelf[s][pixelnumber]], newcolor, 64);
    1f78:	f818 1006 	ldrb.w	r1, [r8, r6]
    1f7c:	9b04      	ldr	r3, [sp, #16]
    1f7e:	3901      	subs	r1, #1
    1f80:	1bc9      	subs	r1, r1, r7
    1f82:	b289      	uxth	r1, r1
    1f84:	2240      	movs	r2, #64	; 0x40
    1f86:	5c58      	ldrb	r0, [r3, r1]
    1f88:	4b15      	ldr	r3, [pc, #84]	; (1fe0 <pride()+0x408>)
    1f8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1f8e:	4418      	add	r0, r3
    1f90:	4649      	mov	r1, r9
    1f92:	f001 fc3d 	bl	3810 <nblend(CRGB&, CRGB const&, unsigned char)>
			nblend(leds[pixelnumber], newcolor, 64);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
    1f96:	3701      	adds	r7, #1
    1f98:	f818 1006 	ldrb.w	r1, [r8, r6]
    1f9c:	9b01      	ldr	r3, [sp, #4]
    1f9e:	b2bf      	uxth	r7, r7
    1fa0:	191a      	adds	r2, r3, r4
    1fa2:	42b9      	cmp	r1, r7
    1fa4:	b292      	uxth	r2, r2
    1fa6:	d8b2      	bhi.n	1f0e <pride()+0x336>
    1fa8:	3601      	adds	r6, #1
			pixelnumber = (NUM_LEDS - 1) - pixelnumber;
			nblend(leds[pixelnumber], newcolor, 64);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
    1faa:	2e04      	cmp	r6, #4
    1fac:	d19d      	bne.n	1eea <pride()+0x312>
				pixelnumber = (shelf_num_leds[s] - 1) - pixelnumber;
				nblend(leds[shelf[s][pixelnumber]], newcolor, 64);
			}
		}
	}
}
    1fae:	b013      	add	sp, #76	; 0x4c
    1fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
    1fb4:	490b      	ldr	r1, [pc, #44]	; (1fe4 <pride()+0x40c>)
		this_delay = 10;
    1fb6:	4d0c      	ldr	r5, [pc, #48]	; (1fe8 <pride()+0x410>)
		use_all_shelves = 1;// random8(2);
    1fb8:	f8df 803c 	ldr.w	r8, [pc, #60]	; 1ff8 <pride()+0x420>
    1fbc:	480b      	ldr	r0, [pc, #44]	; (1fec <pride()+0x414>)

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
	if (mode_change) {
		mode_change = 0;
    1fbe:	2200      	movs	r2, #0
		use_palette = 0;
    1fc0:	700a      	strb	r2, [r1, #0]
		this_delay = 10;
    1fc2:	260a      	movs	r6, #10
		use_all_shelves = 1;// random8(2);
    1fc4:	2401      	movs	r4, #1
    1fc6:	2105      	movs	r1, #5

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
	if (mode_change) {
		mode_change = 0;
    1fc8:	701a      	strb	r2, [r3, #0]
		use_palette = 0;
		this_delay = 10;
    1fca:	602e      	str	r6, [r5, #0]
		use_all_shelves = 1;// random8(2);
    1fcc:	f888 4000 	strb.w	r4, [r8]
    1fd0:	f003 fae8 	bl	55a4 <usb_serial_write>
    1fd4:	4806      	ldr	r0, [pc, #24]	; (1ff0 <pride()+0x418>)
    1fd6:	f003 fce9 	bl	59ac <Print::println()>
    1fda:	e607      	b.n	1bec <pride()+0x14>
    1fdc:	1fff8cb0 	.word	0x1fff8cb0
    1fe0:	1fff8884 	.word	0x1fff8884
    1fe4:	1fff871e 	.word	0x1fff871e
    1fe8:	1fff8720 	.word	0x1fff8720
    1fec:	00006200 	.word	0x00006200
    1ff0:	1fff8764 	.word	0x1fff8764
    1ff4:	1fff8758 	.word	0x1fff8758
    1ff8:	1fff8881 	.word	0x1fff8881

00001ffc <colorwave()>:
//	colorwave()
//
//	Variables
//		led.target_palette

void colorwave() {
    1ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    2000:	4bbc      	ldr	r3, [pc, #752]	; (22f4 <colorwave()+0x2f8>)
    2002:	781a      	ldrb	r2, [r3, #0]
//	colorwave()
//
//	Variables
//		led.target_palette

void colorwave() {
    2004:	b093      	sub	sp, #76	; 0x4c
	if (mode_change) {
    2006:	2a00      	cmp	r2, #0
    2008:	f040 826f 	bne.w	24ea <colorwave()+0x4ee>
    200c:	f8df a334 	ldr.w	sl, [pc, #820]	; 2344 <colorwave()+0x348>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2010:	4eb9      	ldr	r6, [pc, #740]	; (22f8 <colorwave()+0x2fc>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2012:	4bba      	ldr	r3, [pc, #744]	; (22fc <colorwave()+0x300>)
    2014:	6832      	ldr	r2, [r6, #0]
    2016:	9211      	str	r2, [sp, #68]	; 0x44
	return ret;
    2018:	9a11      	ldr	r2, [sp, #68]	; 0x44
    201a:	fb03 f202 	mul.w	r2, r3, r2
    201e:	0c12      	lsrs	r2, r2, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2020:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2022:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2026:	d503      	bpl.n	2030 <colorwave()+0x34>
    2028:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    202c:	3307      	adds	r3, #7
    202e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2030:	0a19      	lsrs	r1, r3, #8
    2032:	f8df b314 	ldr.w	fp, [pc, #788]	; 2348 <colorwave()+0x34c>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2036:	48b2      	ldr	r0, [pc, #712]	; (2300 <colorwave()+0x304>)
    2038:	5c40      	ldrb	r0, [r0, r1]
    203a:	f83b 1011 	ldrh.w	r1, [fp, r1, lsl #1]
    203e:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2042:	fb00 1303 	mla	r3, r0, r3, r1

    if( theta & 0x8000 ) y = -y;
    2046:	0417      	lsls	r7, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2048:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    204a:	bf48      	it	mi
    204c:	425b      	negmi	r3, r3
    204e:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2050:	6832      	ldr	r2, [r6, #0]
    2052:	9210      	str	r2, [sp, #64]	; 0x40
		this_delay = 10;
		use_all_shelves = 1;// random8(2);
   Serial.println("colorwave");
	}
	//uint8_t sat8 = beatsin88(87, 220, 250);
	brightdepth = beatsin88(341, 96, 224);
    2054:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2058:	b29b      	uxth	r3, r3
    205a:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
	return ret;
    205e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2060:	0c18      	lsrs	r0, r3, #16
    2062:	f64d 6308 	movw	r3, #56840	; 0xde08
    2066:	fb03 f202 	mul.w	r2, r3, r2
    206a:	0c12      	lsrs	r2, r2, #16
    206c:	4ba5      	ldr	r3, [pc, #660]	; (2304 <colorwave()+0x308>)
    206e:	3060      	adds	r0, #96	; 0x60
    2070:	b2c0      	uxtb	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2072:	0455      	lsls	r5, r2, #17
    2074:	7018      	strb	r0, [r3, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2076:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    207a:	d503      	bpl.n	2084 <colorwave()+0x88>
    207c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2080:	3307      	adds	r3, #7
    2082:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2084:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2086:	4c9e      	ldr	r4, [pc, #632]	; (2300 <colorwave()+0x304>)
    2088:	5c64      	ldrb	r4, [r4, r1]
    208a:	f83b 1011 	ldrh.w	r1, [fp, r1, lsl #1]
    208e:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2092:	fb04 1303 	mla	r3, r4, r3, r1
    2096:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2098:	0414      	lsls	r4, r2, #16
    209a:	bf48      	it	mi
    209c:	425b      	negmi	r3, r3
    209e:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    20a0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    20a4:	6832      	ldr	r2, [r6, #0]
    20a6:	920f      	str	r2, [sp, #60]	; 0x3c
    20a8:	b29b      	uxth	r3, r3
    20aa:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
    20ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	return ret;
    20b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    20b4:	0c1b      	lsrs	r3, r3, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    20b6:	f24a 02c8 	movw	r2, #41160	; 0xa0c8
    20ba:	fb02 f201 	mul.w	r2, r2, r1
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    20be:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    20c2:	4991      	ldr	r1, [pc, #580]	; (2308 <colorwave()+0x30c>)
    20c4:	b29b      	uxth	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    20c6:	0c12      	lsrs	r2, r2, #16
    20c8:	800b      	strh	r3, [r1, #0]
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    20ca:	0451      	lsls	r1, r2, #17
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    20cc:	9302      	str	r3, [sp, #8]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    20ce:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    20d2:	d503      	bpl.n	20dc <colorwave()+0xe0>
    20d4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    20d8:	3307      	adds	r3, #7
    20da:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    20dc:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    20de:	4c88      	ldr	r4, [pc, #544]	; (2300 <colorwave()+0x304>)
	msmultiplier = beatsin88(147, 23, 60);
    20e0:	4d8a      	ldr	r5, [pc, #552]	; (230c <colorwave()+0x310>)
    20e2:	5c64      	ldrb	r4, [r4, r1]
    20e4:	f83b 1011 	ldrh.w	r1, [fp, r1, lsl #1]

	hue16 = sHue16;//gHue * 256;
    20e8:	f8df 9260 	ldr.w	r9, [pc, #608]	; 234c <colorwave()+0x350>
    20ec:	f8df 8260 	ldr.w	r8, [pc, #608]	; 2350 <colorwave()+0x354>
    20f0:	f3c3 0346 	ubfx	r3, r3, #1, #7
    20f4:	fb04 1303 	mla	r3, r4, r3, r1

    if( theta & 0x8000 ) y = -y;
    20f8:	0417      	lsls	r7, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    20fa:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    20fc:	bf48      	it	mi
    20fe:	425b      	negmi	r3, r3
    2100:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2102:	6832      	ldr	r2, [r6, #0]
    2104:	920e      	str	r2, [sp, #56]	; 0x38
    2106:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    210a:	2226      	movs	r2, #38	; 0x26
    210c:	b29b      	uxth	r3, r3
    210e:	fb02 f303 	mul.w	r3, r2, r3
	return ret;
    2112:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    2114:	f8b9 2000 	ldrh.w	r2, [r9]
    2118:	f8a8 2000 	strh.w	r2, [r8]
    211c:	0c1b      	lsrs	r3, r3, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    211e:	f647 3498 	movw	r4, #31640	; 0x7b98
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    2122:	3317      	adds	r3, #23
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2124:	fb04 f407 	mul.w	r4, r4, r7
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    2128:	b299      	uxth	r1, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    212a:	0c24      	lsrs	r4, r4, #16
   Serial.println("colorwave");
	}
	//uint8_t sat8 = beatsin88(87, 220, 250);
	brightdepth = beatsin88(341, 96, 224);
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	msmultiplier = beatsin88(147, 23, 60);
    212c:	7029      	strb	r1, [r5, #0]
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    212e:	0465      	lsls	r5, r4, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2130:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2134:	d503      	bpl.n	213e <colorwave()+0x142>
    2136:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    213a:	3307      	adds	r3, #7
    213c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    213e:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2140:	4f6f      	ldr	r7, [pc, #444]	; (2300 <colorwave()+0x304>)

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
	deltams = ms - sLastMillis;
    2142:	f8df e210 	ldr.w	lr, [pc, #528]	; 2354 <colorwave()+0x358>
    2146:	5d7f      	ldrb	r7, [r7, r5]
    2148:	f83b 5015 	ldrh.w	r5, [fp, r5, lsl #1]
    214c:	f8be c000 	ldrh.w	ip, [lr]
    2150:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2154:	fb07 5303 	mla	r3, r7, r3, r5
    2158:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    215a:	0427      	lsls	r7, r4, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    215c:	6834      	ldr	r4, [r6, #0]
    215e:	940c      	str	r4, [sp, #48]	; 0x30
    2160:	bf48      	it	mi
    2162:	425b      	negmi	r3, r3
	return ret;
    2164:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2166:	6834      	ldr	r4, [r6, #0]
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    2168:	4e69      	ldr	r6, [pc, #420]	; (2310 <colorwave()+0x314>)
    216a:	940d      	str	r4, [sp, #52]	; 0x34
    216c:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    216e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
    2172:	b2ad      	uxth	r5, r5
    2174:	b29b      	uxth	r3, r3
    2176:	f240 44b1 	movw	r4, #1201	; 0x4b1
    217a:	fb04 f403 	mul.w	r4, r4, r3
	deltams = ms - sLastMillis;
    217e:	ebcc 0c05 	rsb	ip, ip, r5
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    2182:	8833      	ldrh	r3, [r6, #0]
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
    2184:	4f63      	ldr	r7, [pc, #396]	; (2314 <colorwave()+0x318>)
	deltams = ms - sLastMillis;
	sLastMillis = ms;
    2186:	f8ae 5000 	strh.w	r5, [lr]

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
	deltams = ms - sLastMillis;
    218a:	fa1f fc8c 	uxth.w	ip, ip
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    218e:	fb1c 3301 	smlabb	r3, ip, r1, r3
	return ret;
    2192:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2196:	4960      	ldr	r1, [pc, #384]	; (2318 <colorwave()+0x31c>)
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
    2198:	803d      	strh	r5, [r7, #0]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    219a:	0c24      	lsrs	r4, r4, #16
    219c:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    21a0:	fb01 fe0e 	mul.w	lr, r1, lr
	brightdepth = beatsin88(341, 96, 224);
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);
    21a4:	4d5d      	ldr	r5, [pc, #372]	; (231c <colorwave()+0x320>)

	ms = millis();
	deltams = ms - sLastMillis;
    21a6:	495e      	ldr	r1, [pc, #376]	; (2320 <colorwave()+0x324>)
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    21a8:	b2a7      	uxth	r7, r4
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    21aa:	ea4f 441e 	mov.w	r4, lr, lsr #16
    21ae:	f8a1 c000 	strh.w	ip, [r1]
	brightdepth = beatsin88(341, 96, 224);
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);
    21b2:	802f      	strh	r7, [r5, #0]

	ms = millis();
	deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    21b4:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    21b6:	0465      	lsls	r5, r4, #17
    21b8:	8031      	strh	r1, [r6, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    21ba:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    21be:	d503      	bpl.n	21c8 <colorwave()+0x1cc>
    21c0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    21c4:	3307      	adds	r3, #7
    21c6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    21c8:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    21ca:	4e4d      	ldr	r6, [pc, #308]	; (2300 <colorwave()+0x304>)
    21cc:	5d76      	ldrb	r6, [r6, r5]
    21ce:	f83b 5015 	ldrh.w	r5, [fp, r5, lsl #1]
    21d2:	f3c3 0346 	ubfx	r3, r3, #1, #7
    21d6:	fb06 5303 	mla	r3, r6, r3, r5
    21da:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    21dc:	0424      	lsls	r4, r4, #16
    21de:	bf48      	it	mi
    21e0:	425b      	negmi	r3, r3
    21e2:	b21b      	sxth	r3, r3
	sHue16 += deltams * beatsin88(400, 5, 9);
    21e4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    21e8:	b29b      	uxth	r3, r3
    21ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    21ee:	0c1b      	lsrs	r3, r3, #16
    21f0:	3305      	adds	r3, #5
	brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
    21f2:	f89a 4000 	ldrb.w	r4, [sl]
	ms = millis();
	deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;
    21f6:	f8df a160 	ldr.w	sl, [pc, #352]	; 2358 <colorwave()+0x35c>

	ms = millis();
	deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
    21fa:	b29b      	uxth	r3, r3
    21fc:	fb0c 2303 	mla	r3, ip, r3, r2
    2200:	f8a9 3000 	strh.w	r3, [r9]
	brightnesstheta16 = sPseudotime;
    2204:	f8aa 1000 	strh.w	r1, [sl]

	if (!use_all_shelves) {
    2208:	2c00      	cmp	r4, #0
    220a:	f040 80d0 	bne.w	23ae <colorwave()+0x3b2>
    220e:	4b45      	ldr	r3, [pc, #276]	; (2324 <colorwave()+0x328>)
    2210:	9303      	str	r3, [sp, #12]
    2212:	4b45      	ldr	r3, [pc, #276]	; (2328 <colorwave()+0x32c>)
    2214:	9304      	str	r3, [sp, #16]
    2216:	4b45      	ldr	r3, [pc, #276]	; (232c <colorwave()+0x330>)
    2218:	9305      	str	r3, [sp, #20]
    221a:	4b45      	ldr	r3, [pc, #276]	; (2330 <colorwave()+0x334>)
    221c:	9306      	str	r3, [sp, #24]
    221e:	4b45      	ldr	r3, [pc, #276]	; (2334 <colorwave()+0x338>)
    2220:	9307      	str	r3, [sp, #28]
    2222:	9b02      	ldr	r3, [sp, #8]
    2224:	f8df 9134 	ldr.w	r9, [pc, #308]	; 235c <colorwave()+0x360>

				cwave_index = hue8;
				//index = triwave8( index);
				cwave_index = scale8(cwave_index, 240);

				CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2228:	4604      	mov	r4, r0
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
    222a:	46be      	mov	lr, r7

				cwave_index = hue8;
				//index = triwave8( index);
				cwave_index = scale8(cwave_index, 240);

				CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    222c:	4618      	mov	r0, r3
    222e:	25bb      	movs	r5, #187	; 0xbb
    2230:	ae0b      	add	r6, sp, #44	; 0x2c
    2232:	4623      	mov	r3, r4
    2234:	4c40      	ldr	r4, [pc, #256]	; (2338 <colorwave()+0x33c>)
    2236:	eb05 0745 	add.w	r7, r5, r5, lsl #1
    223a:	4427      	add	r7, r4
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
    223c:	9702      	str	r7, [sp, #8]
    223e:	2404      	movs	r4, #4
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			for (byte c = 0; c < 4; c++) {
				hue16 += hueinc16;
    2240:	4472      	add	r2, lr
    2242:	b292      	uxth	r2, r2
				hue8 = hue16 / 256;
				h16_128 = hue16 >> 7;
    2244:	ea4f 1cd2 	mov.w	ip, r2, lsr #7
				if (h16_128 & 0x100) {
					hue8 = 255 - (h16_128 >> 1);
    2248:	ea6f 2e12 	mvn.w	lr, r2, lsr #8
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			for (byte c = 0; c < 4; c++) {
				hue16 += hueinc16;
				hue8 = hue16 / 256;
				h16_128 = hue16 >> 7;
				if (h16_128 & 0x100) {
    224c:	f41c 7f80 	tst.w	ip, #256	; 0x100
					hue8 = 255 - (h16_128 >> 1);
    2250:	fa5f fe8e 	uxtb.w	lr, lr
				}
				else {
					hue8 = h16_128 >> 1;
				}

				brightnesstheta16 += brightnessthetainc16;
    2254:	4401      	add	r1, r0
				h16_128 = hue16 >> 7;
				if (h16_128 & 0x100) {
					hue8 = 255 - (h16_128 >> 1);
				}
				else {
					hue8 = h16_128 >> 1;
    2256:	bf08      	it	eq
    2258:	ea4f 2e12 	moveq.w	lr, r2, lsr #8
	brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			for (byte c = 0; c < 4; c++) {
				hue16 += hueinc16;
    225c:	f8a8 2000 	strh.w	r2, [r8]
				h16_128 = hue16 >> 7;
				if (h16_128 & 0x100) {
					hue8 = 255 - (h16_128 >> 1);
				}
				else {
					hue8 = h16_128 >> 1;
    2260:	4a36      	ldr	r2, [pc, #216]	; (233c <colorwave()+0x340>)
	if (!use_all_shelves) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			for (byte c = 0; c < 4; c++) {
				hue16 += hueinc16;
				hue8 = hue16 / 256;
				h16_128 = hue16 >> 7;
    2262:	9f03      	ldr	r7, [sp, #12]
				if (h16_128 & 0x100) {
					hue8 = 255 - (h16_128 >> 1);
				}
				else {
					hue8 = h16_128 >> 1;
    2264:	f882 e000 	strb.w	lr, [r2]
				}

				brightnesstheta16 += brightnessthetainc16;
    2268:	b289      	uxth	r1, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    226a:	044a      	lsls	r2, r1, #17
	if (!use_all_shelves) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			for (byte c = 0; c < 4; c++) {
				hue16 += hueinc16;
				hue8 = hue16 / 256;
				h16_128 = hue16 >> 7;
    226c:	f8a7 c000 	strh.w	ip, [r7]
				}
				else {
					hue8 = h16_128 >> 1;
				}

				brightnesstheta16 += brightnessthetainc16;
    2270:	f8aa 1000 	strh.w	r1, [sl]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2274:	f3c1 00ca 	ubfx	r0, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2278:	d503      	bpl.n	2282 <colorwave()+0x286>
    227a:	f5c0 60ff 	rsb	r0, r0, #2040	; 0x7f8
    227e:	3007      	adds	r0, #7
    2280:	b280      	uxth	r0, r0

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2282:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2286:	f3c0 0246 	ubfx	r2, r0, #1, #7
    228a:	481d      	ldr	r0, [pc, #116]	; (2300 <colorwave()+0x304>)
    228c:	f810 000c 	ldrb.w	r0, [r0, ip]
    2290:	f83b c01c 	ldrh.w	ip, [fp, ip, lsl #1]
    2294:	fb00 c002 	mla	r0, r0, r2, ip

    if( theta & 0x8000 ) y = -y;
    2298:	040f      	lsls	r7, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    229a:	b280      	uxth	r0, r0

    if( theta & 0x8000 ) y = -y;
    229c:	bf48      	it	mi
    229e:	4240      	negmi	r0, r0
    22a0:	b200      	sxth	r0, r0
				b16 = sin16(brightnesstheta16) + 32768;
    22a2:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
    22a6:	b280      	uxth	r0, r0

				bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    22a8:	fb00 f200 	mul.w	r2, r0, r0
    22ac:	0c12      	lsrs	r2, r2, #16
				bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
				bri8 += (255 - brightdepth);
    22ae:	fb02 fc03 	mul.w	ip, r2, r3
    22b2:	43db      	mvns	r3, r3
    22b4:	eb03 4c1c 	add.w	ip, r3, ip, lsr #16
    22b8:	ebce 130e 	rsb	r3, lr, lr, lsl #4
    22bc:	eb0e 1e03 	add.w	lr, lr, r3, lsl #4

				cwave_index = hue8;
				//index = triwave8( index);
				cwave_index = scale8(cwave_index, 240);

				CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    22c0:	2301      	movs	r3, #1
    22c2:	9300      	str	r3, [sp, #0]
				else {
					hue8 = h16_128 >> 1;
				}

				brightnesstheta16 += brightnessthetainc16;
				b16 = sin16(brightnesstheta16) + 32768;
    22c4:	9b04      	ldr	r3, [sp, #16]

				cwave_index = hue8;
				//index = triwave8( index);
				cwave_index = scale8(cwave_index, 240);

				CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    22c6:	491e      	ldr	r1, [pc, #120]	; (2340 <colorwave()+0x344>)
				else {
					hue8 = h16_128 >> 1;
				}

				brightnesstheta16 += brightnessthetainc16;
				b16 = sin16(brightnesstheta16) + 32768;
    22c8:	8018      	strh	r0, [r3, #0]

				bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    22ca:	9805      	ldr	r0, [sp, #20]
    22cc:	8002      	strh	r2, [r0, #0]
				bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
				bri8 += (255 - brightdepth);
    22ce:	9806      	ldr	r0, [sp, #24]
    22d0:	fa5f fc8c 	uxtb.w	ip, ip
    22d4:	f3ce 2e07 	ubfx	lr, lr, #8, #8

				cwave_index = hue8;
				//index = triwave8( index);
				cwave_index = scale8(cwave_index, 240);

				CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    22d8:	4663      	mov	r3, ip
    22da:	4672      	mov	r2, lr
				brightnesstheta16 += brightnessthetainc16;
				b16 = sin16(brightnesstheta16) + 32768;

				bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
				bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
				bri8 += (255 - brightdepth);
    22dc:	f880 c000 	strb.w	ip, [r0]

				cwave_index = hue8;
				//index = triwave8( index);
				cwave_index = scale8(cwave_index, 240);
    22e0:	f889 e000 	strb.w	lr, [r9]

				CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    22e4:	4630      	mov	r0, r6
    22e6:	f001 fae3 	bl	38b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

				pixelnumber = i;
				pixelnumber = (NUM_LEDS - 1) - pixelnumber;
    22ea:	9b07      	ldr	r3, [sp, #28]

				nblend(leds[pixelnumber], newcolor, 128);
    22ec:	9802      	ldr	r0, [sp, #8]
				cwave_index = scale8(cwave_index, 240);

				CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);

				pixelnumber = i;
				pixelnumber = (NUM_LEDS - 1) - pixelnumber;
    22ee:	801d      	strh	r5, [r3, #0]
    22f0:	e036      	b.n	2360 <colorwave()+0x364>
    22f2:	bf00      	nop
    22f4:	1fff8724 	.word	0x1fff8724
    22f8:	1fff8e5c 	.word	0x1fff8e5c
    22fc:	000174f8 	.word	0x000174f8
    2300:	00006e54 	.word	0x00006e54
    2304:	1fff8b4a 	.word	0x1fff8b4a
    2308:	1fff8ac6 	.word	0x1fff8ac6
    230c:	1fff8880 	.word	0x1fff8880
    2310:	1fff8b6e 	.word	0x1fff8b6e
    2314:	1fff8870 	.word	0x1fff8870
    2318:	0001b580 	.word	0x0001b580
    231c:	1fff8bec 	.word	0x1fff8bec
    2320:	1fff8cac 	.word	0x1fff8cac
    2324:	1fff8b7a 	.word	0x1fff8b7a
    2328:	1fff8be4 	.word	0x1fff8be4
    232c:	1fff8b14 	.word	0x1fff8b14
    2330:	1fff8b48 	.word	0x1fff8b48
    2334:	1fff8abc 	.word	0x1fff8abc
    2338:	1fff8884 	.word	0x1fff8884
    233c:	1fff8b7c 	.word	0x1fff8b7c
    2340:	1fff8b18 	.word	0x1fff8b18
    2344:	1fff8881 	.word	0x1fff8881
    2348:	00007008 	.word	0x00007008
    234c:	1fff8be2 	.word	0x1fff8be2
    2350:	1fff8b4c 	.word	0x1fff8b4c
    2354:	1fff8be6 	.word	0x1fff8be6
    2358:	1fff8874 	.word	0x1fff8874
    235c:	1fff8cae 	.word	0x1fff8cae

				nblend(leds[pixelnumber], newcolor, 128);
    2360:	2280      	movs	r2, #128	; 0x80
    2362:	4631      	mov	r1, r6
    2364:	3c01      	subs	r4, #1
    2366:	f001 fa53 	bl	3810 <nblend(CRGB&, CRGB const&, unsigned char)>
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			for (byte c = 0; c < 4; c++) {
    236a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    236e:	d00b      	beq.n	2388 <colorwave()+0x38c>
    2370:	4b68      	ldr	r3, [pc, #416]	; (2514 <colorwave()+0x518>)
    2372:	f8b8 2000 	ldrh.w	r2, [r8]
    2376:	f8b3 e000 	ldrh.w	lr, [r3]
    237a:	4b67      	ldr	r3, [pc, #412]	; (2518 <colorwave()+0x51c>)
    237c:	f8ba 1000 	ldrh.w	r1, [sl]
    2380:	8818      	ldrh	r0, [r3, #0]
    2382:	4b66      	ldr	r3, [pc, #408]	; (251c <colorwave()+0x520>)
    2384:	781b      	ldrb	r3, [r3, #0]
    2386:	e75b      	b.n	2240 <colorwave()+0x244>
    2388:	3d01      	subs	r5, #1
    238a:	b2ad      	uxth	r5, r5
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
    238c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2390:	429d      	cmp	r5, r3
    2392:	f000 80a7 	beq.w	24e4 <colorwave()+0x4e8>
    2396:	4b5f      	ldr	r3, [pc, #380]	; (2514 <colorwave()+0x518>)
    2398:	f8b8 2000 	ldrh.w	r2, [r8]
    239c:	f8b3 e000 	ldrh.w	lr, [r3]
    23a0:	4b5d      	ldr	r3, [pc, #372]	; (2518 <colorwave()+0x51c>)
    23a2:	f8ba 1000 	ldrh.w	r1, [sl]
    23a6:	8818      	ldrh	r0, [r3, #0]
    23a8:	4b5c      	ldr	r3, [pc, #368]	; (251c <colorwave()+0x520>)
    23aa:	781b      	ldrb	r3, [r3, #0]
    23ac:	e742      	b.n	2234 <colorwave()+0x238>
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
    23ae:	2300      	movs	r3, #0
    23b0:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 255c <colorwave()+0x560>
    23b4:	461f      	mov	r7, r3
			}
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
    23b6:	f819 3b01 	ldrb.w	r3, [r9], #1
    23ba:	2b00      	cmp	r3, #0
    23bc:	f000 808e 	beq.w	24dc <colorwave()+0x4e0>
    23c0:	4b57      	ldr	r3, [pc, #348]	; (2520 <colorwave()+0x524>)
    23c2:	9309      	str	r3, [sp, #36]	; 0x24
    23c4:	4b57      	ldr	r3, [pc, #348]	; (2524 <colorwave()+0x528>)
    23c6:	9308      	str	r3, [sp, #32]
    23c8:	4b57      	ldr	r3, [pc, #348]	; (2528 <colorwave()+0x52c>)
    23ca:	9307      	str	r3, [sp, #28]
    23cc:	4b57      	ldr	r3, [pc, #348]	; (252c <colorwave()+0x530>)
    23ce:	9306      	str	r3, [sp, #24]
    23d0:	4b57      	ldr	r3, [pc, #348]	; (2530 <colorwave()+0x534>)
    23d2:	9305      	str	r3, [sp, #20]
    23d4:	4b57      	ldr	r3, [pc, #348]	; (2534 <colorwave()+0x538>)
    23d6:	9304      	str	r3, [sp, #16]
    23d8:	01bb      	lsls	r3, r7, #6
    23da:	2500      	movs	r5, #0
    23dc:	ae0b      	add	r6, sp, #44	; 0x2c
    23de:	9303      	str	r3, [sp, #12]
    23e0:	2404      	movs	r4, #4
    23e2:	9502      	str	r5, [sp, #8]
				for (byte c = 0; c < 4; c++) {
					hue16 += hueinc16;
    23e4:	4b4b      	ldr	r3, [pc, #300]	; (2514 <colorwave()+0x518>)
    23e6:	f8b8 2000 	ldrh.w	r2, [r8]
    23ea:	881b      	ldrh	r3, [r3, #0]
					hue8 = hue16 / 256;
					h16_128 = hue16 >> 7;
    23ec:	9909      	ldr	r1, [sp, #36]	; 0x24
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
				for (byte c = 0; c < 4; c++) {
					hue16 += hueinc16;
    23ee:	4413      	add	r3, r2
    23f0:	b29b      	uxth	r3, r3
					hue8 = hue16 / 256;
					h16_128 = hue16 >> 7;
    23f2:	09da      	lsrs	r2, r3, #7
					if (h16_128 & 0x100) {
    23f4:	f412 7f80 	tst.w	r2, #256	; 0x100
						hue8 = 255 - (h16_128 >> 1);
    23f8:	ea6f 2e13 	mvn.w	lr, r3, lsr #8
    23fc:	fa5f fe8e 	uxtb.w	lr, lr
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
				for (byte c = 0; c < 4; c++) {
					hue16 += hueinc16;
    2400:	f8a8 3000 	strh.w	r3, [r8]
					h16_128 = hue16 >> 7;
					if (h16_128 & 0x100) {
						hue8 = 255 - (h16_128 >> 1);
					}
					else {
						hue8 = h16_128 >> 1;
    2404:	bf08      	it	eq
    2406:	ea4f 2e13 	moveq.w	lr, r3, lsr #8
    240a:	4b4b      	ldr	r3, [pc, #300]	; (2538 <colorwave()+0x53c>)
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
				for (byte c = 0; c < 4; c++) {
					hue16 += hueinc16;
					hue8 = hue16 / 256;
					h16_128 = hue16 >> 7;
    240c:	800a      	strh	r2, [r1, #0]
					if (h16_128 & 0x100) {
						hue8 = 255 - (h16_128 >> 1);
					}
					else {
						hue8 = h16_128 >> 1;
    240e:	f883 e000 	strb.w	lr, [r3]
					}

					brightnesstheta16 += brightnessthetainc16;
    2412:	4b41      	ldr	r3, [pc, #260]	; (2518 <colorwave()+0x51c>)
    2414:	f8ba 2000 	ldrh.w	r2, [sl]
    2418:	881b      	ldrh	r3, [r3, #0]
    241a:	441a      	add	r2, r3
    241c:	b292      	uxth	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    241e:	0451      	lsls	r1, r2, #17
    2420:	f8aa 2000 	strh.w	r2, [sl]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2424:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2428:	d503      	bpl.n	2432 <colorwave()+0x436>
    242a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    242e:	3307      	adds	r3, #7
    2430:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2432:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2434:	4841      	ldr	r0, [pc, #260]	; (253c <colorwave()+0x540>)
    2436:	5c40      	ldrb	r0, [r0, r1]
    2438:	f83b 1011 	ldrh.w	r1, [fp, r1, lsl #1]
    243c:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2440:	fb00 1003 	mla	r0, r0, r3, r1
    2444:	b280      	uxth	r0, r0

    if( theta & 0x8000 ) y = -y;
    2446:	0413      	lsls	r3, r2, #16
    2448:	bf48      	it	mi
    244a:	4240      	negmi	r0, r0
    244c:	b200      	sxth	r0, r0
					b16 = sin16(brightnesstheta16) + 32768;
    244e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000

					bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
					bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
    2452:	4b32      	ldr	r3, [pc, #200]	; (251c <colorwave()+0x520>)

					cwave_index = hue8;
					//index = triwave8( index);
					cwave_index = scale8(cwave_index, 240);

					CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2454:	493a      	ldr	r1, [pc, #232]	; (2540 <colorwave()+0x544>)

					brightnesstheta16 += brightnessthetainc16;
					b16 = sin16(brightnesstheta16) + 32768;

					bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
					bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
    2456:	781b      	ldrb	r3, [r3, #0]
					else {
						hue8 = h16_128 >> 1;
					}

					brightnesstheta16 += brightnessthetainc16;
					b16 = sin16(brightnesstheta16) + 32768;
    2458:	b280      	uxth	r0, r0

					bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    245a:	fb00 f200 	mul.w	r2, r0, r0
    245e:	0c12      	lsrs	r2, r2, #16
					bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
					bri8 += (255 - brightdepth);
    2460:	fb02 fc03 	mul.w	ip, r2, r3
    2464:	43db      	mvns	r3, r3
    2466:	eb03 4c1c 	add.w	ip, r3, ip, lsr #16
    246a:	ebce 130e 	rsb	r3, lr, lr, lsl #4
    246e:	eb0e 1e03 	add.w	lr, lr, r3, lsl #4
					else {
						hue8 = h16_128 >> 1;
					}

					brightnesstheta16 += brightnessthetainc16;
					b16 = sin16(brightnesstheta16) + 32768;
    2472:	9b08      	ldr	r3, [sp, #32]

					cwave_index = hue8;
					//index = triwave8( index);
					cwave_index = scale8(cwave_index, 240);

					CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2474:	2501      	movs	r5, #1
    2476:	9500      	str	r5, [sp, #0]
					else {
						hue8 = h16_128 >> 1;
					}

					brightnesstheta16 += brightnessthetainc16;
					b16 = sin16(brightnesstheta16) + 32768;
    2478:	8018      	strh	r0, [r3, #0]

					bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    247a:	9807      	ldr	r0, [sp, #28]
					bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
					bri8 += (255 - brightdepth);

					cwave_index = hue8;
					//index = triwave8( index);
					cwave_index = scale8(cwave_index, 240);
    247c:	9d05      	ldr	r5, [sp, #20]
					}

					brightnesstheta16 += brightnessthetainc16;
					b16 = sin16(brightnesstheta16) + 32768;

					bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    247e:	8002      	strh	r2, [r0, #0]
					bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
					bri8 += (255 - brightdepth);
    2480:	9806      	ldr	r0, [sp, #24]
    2482:	fa5f fc8c 	uxtb.w	ip, ip
    2486:	f3ce 2e07 	ubfx	lr, lr, #8, #8

					cwave_index = hue8;
					//index = triwave8( index);
					cwave_index = scale8(cwave_index, 240);

					CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    248a:	4663      	mov	r3, ip
    248c:	4672      	mov	r2, lr
					brightnesstheta16 += brightnessthetainc16;
					b16 = sin16(brightnesstheta16) + 32768;

					bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
					bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
					bri8 += (255 - brightdepth);
    248e:	f880 c000 	strb.w	ip, [r0]

					cwave_index = hue8;
					//index = triwave8( index);
					cwave_index = scale8(cwave_index, 240);
    2492:	f885 e000 	strb.w	lr, [r5]

					CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2496:	4630      	mov	r0, r6
    2498:	f001 fa0a 	bl	38b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

					pixelnumber = i;
					pixelnumber = (shelf_num_leds[s] - 1) - pixelnumber;
    249c:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    24a0:	9a02      	ldr	r2, [sp, #8]
    24a2:	3b01      	subs	r3, #1
    24a4:	1a9b      	subs	r3, r3, r2

					nblend(leds[shelf[s][pixelnumber]], newcolor, 128);
    24a6:	9a03      	ldr	r2, [sp, #12]
    24a8:	19d1      	adds	r1, r2, r7
    24aa:	4a26      	ldr	r2, [pc, #152]	; (2544 <colorwave()+0x548>)
					cwave_index = scale8(cwave_index, 240);

					CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);

					pixelnumber = i;
					pixelnumber = (shelf_num_leds[s] - 1) - pixelnumber;
    24ac:	b29b      	uxth	r3, r3

					nblend(leds[shelf[s][pixelnumber]], newcolor, 128);
    24ae:	4411      	add	r1, r2
    24b0:	3c01      	subs	r4, #1
    24b2:	5cc8      	ldrb	r0, [r1, r3]
					cwave_index = scale8(cwave_index, 240);

					CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);

					pixelnumber = i;
					pixelnumber = (shelf_num_leds[s] - 1) - pixelnumber;
    24b4:	9904      	ldr	r1, [sp, #16]
    24b6:	800b      	strh	r3, [r1, #0]

					nblend(leds[shelf[s][pixelnumber]], newcolor, 128);
    24b8:	4b23      	ldr	r3, [pc, #140]	; (2548 <colorwave()+0x54c>)
    24ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    24be:	2280      	movs	r2, #128	; 0x80
    24c0:	4418      	add	r0, r3
    24c2:	4631      	mov	r1, r6
    24c4:	f001 f9a4 	bl	3810 <nblend(CRGB&, CRGB const&, unsigned char)>
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
				for (byte c = 0; c < 4; c++) {
    24c8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    24cc:	d18a      	bne.n	23e4 <colorwave()+0x3e8>
    24ce:	9d02      	ldr	r5, [sp, #8]
			}
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
    24d0:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    24d4:	3501      	adds	r5, #1
    24d6:	b2ad      	uxth	r5, r5
    24d8:	42ab      	cmp	r3, r5
    24da:	d881      	bhi.n	23e0 <colorwave()+0x3e4>
    24dc:	3701      	adds	r7, #1
				nblend(leds[pixelnumber], newcolor, 128);
			}
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
    24de:	2f04      	cmp	r7, #4
    24e0:	f47f af69 	bne.w	23b6 <colorwave()+0x3ba>
					nblend(leds[shelf[s][pixelnumber]], newcolor, 128);
				}
			}
		}
	}
}
    24e4:	b013      	add	sp, #76	; 0x4c
    24e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//	Variables
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
    24ea:	4918      	ldr	r1, [pc, #96]	; (254c <colorwave()+0x550>)
		mode_change = 0;
		this_delay = 10;
		use_all_shelves = 1;// random8(2);
    24ec:	f8df a070 	ldr.w	sl, [pc, #112]	; 2560 <colorwave()+0x564>

void colorwave() {
	if (mode_change) {
		use_palette = 1;
		mode_change = 0;
		this_delay = 10;
    24f0:	4d17      	ldr	r5, [pc, #92]	; (2550 <colorwave()+0x554>)
    24f2:	4818      	ldr	r0, [pc, #96]	; (2554 <colorwave()+0x558>)
//	Variables
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
    24f4:	2201      	movs	r2, #1
    24f6:	700a      	strb	r2, [r1, #0]
		mode_change = 0;
		this_delay = 10;
    24f8:	260a      	movs	r6, #10
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
		mode_change = 0;
    24fa:	2400      	movs	r4, #0
    24fc:	2109      	movs	r1, #9
		this_delay = 10;
		use_all_shelves = 1;// random8(2);
    24fe:	f88a 2000 	strb.w	r2, [sl]

void colorwave() {
	if (mode_change) {
		use_palette = 1;
		mode_change = 0;
		this_delay = 10;
    2502:	602e      	str	r6, [r5, #0]
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
		mode_change = 0;
    2504:	701c      	strb	r4, [r3, #0]
    2506:	f003 f84d 	bl	55a4 <usb_serial_write>
    250a:	4813      	ldr	r0, [pc, #76]	; (2558 <colorwave()+0x55c>)
    250c:	f003 fa4e 	bl	59ac <Print::println()>
    2510:	e57e      	b.n	2010 <colorwave()+0x14>
    2512:	bf00      	nop
    2514:	1fff8bec 	.word	0x1fff8bec
    2518:	1fff8ac6 	.word	0x1fff8ac6
    251c:	1fff8b4a 	.word	0x1fff8b4a
    2520:	1fff8b7a 	.word	0x1fff8b7a
    2524:	1fff8be4 	.word	0x1fff8be4
    2528:	1fff8b14 	.word	0x1fff8b14
    252c:	1fff8b48 	.word	0x1fff8b48
    2530:	1fff8cae 	.word	0x1fff8cae
    2534:	1fff8abc 	.word	0x1fff8abc
    2538:	1fff8b7c 	.word	0x1fff8b7c
    253c:	00006e54 	.word	0x00006e54
    2540:	1fff8b18 	.word	0x1fff8b18
    2544:	1fff8cb0 	.word	0x1fff8cb0
    2548:	1fff8884 	.word	0x1fff8884
    254c:	1fff871e 	.word	0x1fff871e
    2550:	1fff8720 	.word	0x1fff8720
    2554:	00006208 	.word	0x00006208
    2558:	1fff8764 	.word	0x1fff8764
    255c:	1fff8758 	.word	0x1fff8758
    2560:	1fff8881 	.word	0x1fff8881

00002564 <sinelon_bouncing()>:
CRGB bounce_pos[bounce_max];
uint8_t bounce_length;
uint8_t bounce_start;
bool bounce_dir;

void sinelon_bouncing() {
    2564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    2568:	4a99      	ldr	r2, [pc, #612]	; (27d0 <sinelon_bouncing()+0x26c>)
    256a:	7813      	ldrb	r3, [r2, #0]
CRGB bounce_pos[bounce_max];
uint8_t bounce_length;
uint8_t bounce_start;
bool bounce_dir;

void sinelon_bouncing() {
    256c:	b087      	sub	sp, #28
	if (mode_change) {
    256e:	2b00      	cmp	r3, #0
    2570:	f040 80d3 	bne.w	271a <sinelon_bouncing()+0x1b6>
    2574:	4e97      	ldr	r6, [pc, #604]	; (27d4 <sinelon_bouncing()+0x270>)
    2576:	4f98      	ldr	r7, [pc, #608]	; (27d8 <sinelon_bouncing()+0x274>)
    2578:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 281c <sinelon_bouncing()+0x2b8>
    257c:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 2820 <sinelon_bouncing()+0x2bc>
    2580:	4c96      	ldr	r4, [pc, #600]	; (27dc <sinelon_bouncing()+0x278>)
    2582:	f8df a2a0 	ldr.w	sl, [pc, #672]	; 2824 <sinelon_bouncing()+0x2c0>
		this_fade = 100;// random8(128, 220);
		bounce_dir = 1;
		Serial.println("sinelon_bouncing");
	}

	fill_rainbow(&(leds[shelf[current_shelf][0]]), shelf_num_leds[current_shelf], this_index++, this_diff);
    2586:	f898 0000 	ldrb.w	r0, [r8]
    258a:	4b95      	ldr	r3, [pc, #596]	; (27e0 <sinelon_bouncing()+0x27c>)
    258c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 2828 <sinelon_bouncing()+0x2c4>
    2590:	5c19      	ldrb	r1, [r3, r0]
    2592:	7822      	ldrb	r2, [r4, #0]
    2594:	4d93      	ldr	r5, [pc, #588]	; (27e4 <sinelon_bouncing()+0x280>)
    2596:	f89b 3000 	ldrb.w	r3, [fp]
    259a:	eb00 1080 	add.w	r0, r0, r0, lsl #6
    259e:	f102 0e01 	add.w	lr, r2, #1
    25a2:	f819 0000 	ldrb.w	r0, [r9, r0]
    25a6:	f884 e000 	strb.w	lr, [r4]
    25aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    25ae:	4428      	add	r0, r5
    25b0:	f001 f87a 	bl	36a8 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>

	fadeToBlackBy(bounce_pos, bounce_max, this_fade);
    25b4:	f89a 2000 	ldrb.w	r2, [sl]
    25b8:	488b      	ldr	r0, [pc, #556]	; (27e8 <sinelon_bouncing()+0x284>)
    25ba:	2114      	movs	r1, #20
    25bc:	f001 f926 	bl	380c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    25c0:	4b8a      	ldr	r3, [pc, #552]	; (27ec <sinelon_bouncing()+0x288>)
	int pos = beatsin16(this_beat, 0, bounce_length);
    25c2:	7838      	ldrb	r0, [r7, #0]
    25c4:	681b      	ldr	r3, [r3, #0]
    25c6:	9305      	str	r3, [sp, #20]
	return ret;
    25c8:	9905      	ldr	r1, [sp, #20]
    25ca:	7833      	ldrb	r3, [r6, #0]
    25cc:	f44f 728c 	mov.w	r2, #280	; 0x118
    25d0:	021b      	lsls	r3, r3, #8
    25d2:	fb02 f101 	mul.w	r1, r2, r1
    25d6:	fb03 f101 	mul.w	r1, r3, r1
    25da:	0c09      	lsrs	r1, r1, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    25dc:	044e      	lsls	r6, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    25de:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    25e2:	d503      	bpl.n	25ec <sinelon_bouncing()+0x88>
    25e4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    25e8:	3307      	adds	r3, #7
    25ea:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    25ec:	0a1e      	lsrs	r6, r3, #8
    uint8_t  m   = slope[section];
    25ee:	f8df e23c 	ldr.w	lr, [pc, #572]	; 282c <sinelon_bouncing()+0x2c8>

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    25f2:	4a7f      	ldr	r2, [pc, #508]	; (27f0 <sinelon_bouncing()+0x28c>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    25f4:	f81e e006 	ldrb.w	lr, [lr, r6]
    25f8:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    25fc:	4e7a      	ldr	r6, [pc, #488]	; (27e8 <sinelon_bouncing()+0x284>)
    25fe:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2602:	fb0e 2203 	mla	r2, lr, r3, r2

    if( theta & 0x8000 ) y = -y;
    2606:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2608:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    260a:	bf48      	it	mi
    260c:	4252      	negmi	r2, r2
    260e:	b212      	sxth	r2, r2
    2610:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    2614:	b293      	uxth	r3, r2
    2616:	fb00 3303 	mla	r3, r0, r3, r3
	bounce_pos[pos] += ColorFromPalette(current_palette, this_index);
    261a:	2001      	movs	r0, #1
    261c:	7822      	ldrb	r2, [r4, #0]
    261e:	4975      	ldr	r1, [pc, #468]	; (27f4 <sinelon_bouncing()+0x290>)
    2620:	9000      	str	r0, [sp, #0]
	}

	fill_rainbow(&(leds[shelf[current_shelf][0]]), shelf_num_leds[current_shelf], this_index++, this_diff);

	fadeToBlackBy(bounce_pos, bounce_max, this_fade);
	int pos = beatsin16(this_beat, 0, bounce_length);
    2622:	0c1c      	lsrs	r4, r3, #16
	bounce_pos[pos] += ColorFromPalette(current_palette, this_index);
    2624:	a804      	add	r0, sp, #16
    2626:	23ff      	movs	r3, #255	; 0xff
    2628:	f001 f942 	bl	38b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    262c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2630:	18f1      	adds	r1, r6, r3
    2632:	5cf2      	ldrb	r2, [r6, r3]
    2634:	f89d 0010 	ldrb.w	r0, [sp, #16]
    2638:	fa82 f250 	uqadd8	r2, r2, r0
    263c:	54f2      	strb	r2, [r6, r3]
    263e:	f89d 3011 	ldrb.w	r3, [sp, #17]
    2642:	784a      	ldrb	r2, [r1, #1]
    2644:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2648:	704a      	strb	r2, [r1, #1]
    264a:	788b      	ldrb	r3, [r1, #2]
    264c:	f89d 2012 	ldrb.w	r2, [sp, #18]
    2650:	fa83 f352 	uqadd8	r3, r3, r2

	for (uint8_t i = 0; i < bounce_length; i++) {
    2654:	783a      	ldrb	r2, [r7, #0]
        b = qadd8( b, rhs.b);
    2656:	708b      	strb	r3, [r1, #2]
    2658:	b312      	cbz	r2, 26a0 <sinelon_bouncing()+0x13c>
    265a:	2400      	movs	r4, #0
    265c:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 2804 <sinelon_bouncing()+0x2a0>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2660:	46a3      	mov	fp, r4
		leds[shelf[current_shelf][bounce_start + i]] = CRGB::Black;
    2662:	f898 3000 	ldrb.w	r3, [r8]
    2666:	f89a 2000 	ldrb.w	r2, [sl]
    266a:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    266e:	444b      	add	r3, r9
    2670:	4423      	add	r3, r4
		nblend(leds[shelf[current_shelf][bounce_start + i]], bounce_pos[i], 255);
    2672:	eb04 0144 	add.w	r1, r4, r4, lsl #1
	fadeToBlackBy(bounce_pos, bounce_max, this_fade);
	int pos = beatsin16(this_beat, 0, bounce_length);
	bounce_pos[pos] += ColorFromPalette(current_palette, this_index);

	for (uint8_t i = 0; i < bounce_length; i++) {
		leds[shelf[current_shelf][bounce_start + i]] = CRGB::Black;
    2676:	5c9b      	ldrb	r3, [r3, r2]
    2678:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    267c:	eb05 0e03 	add.w	lr, r5, r3
    2680:	f805 b003 	strb.w	fp, [r5, r3]
		nblend(leds[shelf[current_shelf][bounce_start + i]], bounce_pos[i], 255);
    2684:	4431      	add	r1, r6
    2686:	4670      	mov	r0, lr
    2688:	22ff      	movs	r2, #255	; 0xff
        g = (colorcode >>  8) & 0xFF;
    268a:	f88e b001 	strb.w	fp, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    268e:	f88e b002 	strb.w	fp, [lr, #2]
    2692:	f001 f8bd 	bl	3810 <nblend(CRGB&, CRGB const&, unsigned char)>

	fadeToBlackBy(bounce_pos, bounce_max, this_fade);
	int pos = beatsin16(this_beat, 0, bounce_length);
	bounce_pos[pos] += ColorFromPalette(current_palette, this_index);

	for (uint8_t i = 0; i < bounce_length; i++) {
    2696:	3401      	adds	r4, #1
    2698:	783b      	ldrb	r3, [r7, #0]
    269a:	b2e4      	uxtb	r4, r4
    269c:	42a3      	cmp	r3, r4
    269e:	d8e0      	bhi.n	2662 <sinelon_bouncing()+0xfe>
		leds[shelf[current_shelf][bounce_start + i]] = CRGB::Black;
		nblend(leds[shelf[current_shelf][bounce_start + i]], bounce_pos[i], 255);
	}

	EVERY_N_MILLIS(25) {
    26a0:	4d55      	ldr	r5, [pc, #340]	; (27f8 <sinelon_bouncing()+0x294>)
    26a2:	682b      	ldr	r3, [r5, #0]
    26a4:	07db      	lsls	r3, r3, #31
    26a6:	d528      	bpl.n	26fa <sinelon_bouncing()+0x196>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    26a8:	4b50      	ldr	r3, [pc, #320]	; (27ec <sinelon_bouncing()+0x288>)
    26aa:	4c54      	ldr	r4, [pc, #336]	; (27fc <sinelon_bouncing()+0x298>)
    26ac:	681b      	ldr	r3, [r3, #0]
    26ae:	9304      	str	r3, [sp, #16]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    26b0:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    26b4:	9b04      	ldr	r3, [sp, #16]
    26b6:	1a5b      	subs	r3, r3, r1
    26b8:	429a      	cmp	r2, r3
    26ba:	d814      	bhi.n	26e6 <sinelon_bouncing()+0x182>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    26bc:	4b4b      	ldr	r3, [pc, #300]	; (27ec <sinelon_bouncing()+0x288>)
		if (bounce_dir && bounce_start + bounce_length < shelf_num_leds[current_shelf]) {
    26be:	4a50      	ldr	r2, [pc, #320]	; (2800 <sinelon_bouncing()+0x29c>)
    26c0:	681b      	ldr	r3, [r3, #0]
    26c2:	9303      	str	r3, [sp, #12]
    26c4:	7813      	ldrb	r3, [r2, #0]
	return ret;
    26c6:	9903      	ldr	r1, [sp, #12]
    26c8:	6021      	str	r1, [r4, #0]
    26ca:	b17b      	cbz	r3, 26ec <sinelon_bouncing()+0x188>
    26cc:	4c4d      	ldr	r4, [pc, #308]	; (2804 <sinelon_bouncing()+0x2a0>)
    26ce:	f898 5000 	ldrb.w	r5, [r8]
    26d2:	4e43      	ldr	r6, [pc, #268]	; (27e0 <sinelon_bouncing()+0x27c>)
    26d4:	7839      	ldrb	r1, [r7, #0]
    26d6:	7820      	ldrb	r0, [r4, #0]
    26d8:	5d75      	ldrb	r5, [r6, r5]
    26da:	4401      	add	r1, r0
    26dc:	42a9      	cmp	r1, r5
    26de:	db65      	blt.n	27ac <sinelon_bouncing()+0x248>
		}
		else if (!bounce_dir && bounce_start > 0) {
			bounce_start--;
		}
		else {
			bounce_dir = !bounce_dir;
    26e0:	f083 0301 	eor.w	r3, r3, #1
    26e4:	7013      	strb	r3, [r2, #0]
		}
	}
	
}
    26e6:	b007      	add	sp, #28
    26e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	EVERY_N_MILLIS(25) {
		if (bounce_dir && bounce_start + bounce_length < shelf_num_leds[current_shelf]) {
			bounce_start++;
		}
		else if (!bounce_dir && bounce_start > 0) {
    26ec:	4845      	ldr	r0, [pc, #276]	; (2804 <sinelon_bouncing()+0x2a0>)
    26ee:	7801      	ldrb	r1, [r0, #0]
    26f0:	2900      	cmp	r1, #0
    26f2:	d0f5      	beq.n	26e0 <sinelon_bouncing()+0x17c>
			bounce_start--;
    26f4:	3901      	subs	r1, #1
    26f6:	7001      	strb	r1, [r0, #0]
    26f8:	e7f5      	b.n	26e6 <sinelon_bouncing()+0x182>
	for (uint8_t i = 0; i < bounce_length; i++) {
		leds[shelf[current_shelf][bounce_start + i]] = CRGB::Black;
		nblend(leds[shelf[current_shelf][bounce_start + i]], bounce_pos[i], 255);
	}

	EVERY_N_MILLIS(25) {
    26fa:	4628      	mov	r0, r5
    26fc:	f001 feba 	bl	4474 <__cxa_guard_acquire>
    2700:	2800      	cmp	r0, #0
    2702:	d158      	bne.n	27b6 <sinelon_bouncing()+0x252>
    2704:	4c3d      	ldr	r4, [pc, #244]	; (27fc <sinelon_bouncing()+0x298>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2706:	4b39      	ldr	r3, [pc, #228]	; (27ec <sinelon_bouncing()+0x288>)
    2708:	681b      	ldr	r3, [r3, #0]
    270a:	9304      	str	r3, [sp, #16]
    270c:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    2710:	9b04      	ldr	r3, [sp, #16]
    2712:	1a5b      	subs	r3, r3, r1
    2714:	4293      	cmp	r3, r2
    2716:	d3e6      	bcc.n	26e6 <sinelon_bouncing()+0x182>
    2718:	e7d0      	b.n	26bc <sinelon_bouncing()+0x158>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    271a:	4e3b      	ldr	r6, [pc, #236]	; (2808 <sinelon_bouncing()+0x2a4>)
		use_palette = 1;
		this_beat = 80;// random8(4, 10);
		bounce_length = 16;// random8(10, bounce_max);
		bounce_start = 0;
		current_shelf = 0;
		this_diff = random8(1, 9);
    271c:	f8df b100 	ldr.w	fp, [pc, #256]	; 2820 <sinelon_bouncing()+0x2bc>
    2720:	8833      	ldrh	r3, [r6, #0]
bool bounce_dir;

void sinelon_bouncing() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
    2722:	4d3a      	ldr	r5, [pc, #232]	; (280c <sinelon_bouncing()+0x2a8>)
		use_palette = 1;
    2724:	483a      	ldr	r0, [pc, #232]	; (2810 <sinelon_bouncing()+0x2ac>)
		bounce_start = 0;
		current_shelf = 0;
		this_diff = random8(1, 9);
		this_index = random8();
		this_fade = 100;// random8(128, 220);
		bounce_dir = 1;
    2726:	4936      	ldr	r1, [pc, #216]	; (2800 <sinelon_bouncing()+0x29c>)
		mode_change = 0;
		this_delay = 10;
		use_palette = 1;
		this_beat = 80;// random8(4, 10);
		bounce_length = 16;// random8(10, bounce_max);
		bounce_start = 0;
    2728:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 2804 <sinelon_bouncing()+0x2a0>
		current_shelf = 0;
		this_diff = random8(1, 9);
		this_index = random8();
    272c:	4c2b      	ldr	r4, [pc, #172]	; (27dc <sinelon_bouncing()+0x278>)
		this_delay = 10;
		use_palette = 1;
		this_beat = 80;// random8(4, 10);
		bounce_length = 16;// random8(10, bounce_max);
		bounce_start = 0;
		current_shelf = 0;
    272e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 281c <sinelon_bouncing()+0x2b8>
    2732:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    2736:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    273a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    273e:	3319      	adds	r3, #25
    2740:	b29b      	uxth	r3, r3
    2742:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    2746:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    274a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    274e:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
		this_diff = random8(1, 9);
    2752:	f3c3 1342 	ubfx	r3, r3, #5, #3
    2756:	3301      	adds	r3, #1
    2758:	f10e 0e19 	add.w	lr, lr, #25
    275c:	f88b 3000 	strb.w	r3, [fp]
    2760:	fa1f fe8e 	uxth.w	lr, lr
bool bounce_dir;

void sinelon_bouncing() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
    2764:	230a      	movs	r3, #10
    2766:	f8a6 e000 	strh.w	lr, [r6]
    276a:	602b      	str	r3, [r5, #0]
		use_palette = 1;
		this_beat = 80;// random8(4, 10);
    276c:	4e19      	ldr	r6, [pc, #100]	; (27d4 <sinelon_bouncing()+0x270>)
		bounce_length = 16;// random8(10, bounce_max);
    276e:	4f1a      	ldr	r7, [pc, #104]	; (27d8 <sinelon_bouncing()+0x274>)

void sinelon_bouncing() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		use_palette = 1;
    2770:	2301      	movs	r3, #1
    2772:	7003      	strb	r3, [r0, #0]
		bounce_start = 0;
		current_shelf = 0;
		this_diff = random8(1, 9);
		this_index = random8();
		this_fade = 100;// random8(128, 220);
		bounce_dir = 1;
    2774:	700b      	strb	r3, [r1, #0]
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		use_palette = 1;
		this_beat = 80;// random8(4, 10);
		bounce_length = 16;// random8(10, bounce_max);
    2776:	2310      	movs	r3, #16
void sinelon_bouncing() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		use_palette = 1;
		this_beat = 80;// random8(4, 10);
    2778:	2150      	movs	r1, #80	; 0x50
    277a:	7031      	strb	r1, [r6, #0]
		bounce_length = 16;// random8(10, bounce_max);
    277c:	703b      	strb	r3, [r7, #0]
    277e:	4619      	mov	r1, r3
uint8_t bounce_start;
bool bounce_dir;

void sinelon_bouncing() {
	if (mode_change) {
		mode_change = 0;
    2780:	2300      	movs	r3, #0
		this_delay = 10;
		use_palette = 1;
		this_beat = 80;// random8(4, 10);
		bounce_length = 16;// random8(10, bounce_max);
		bounce_start = 0;
    2782:	f88a 3000 	strb.w	r3, [sl]
		current_shelf = 0;
		this_diff = random8(1, 9);
		this_index = random8();
		this_fade = 100;// random8(128, 220);
    2786:	f8df a09c 	ldr.w	sl, [pc, #156]	; 2824 <sinelon_bouncing()+0x2c0>
uint8_t bounce_start;
bool bounce_dir;

void sinelon_bouncing() {
	if (mode_change) {
		mode_change = 0;
    278a:	7013      	strb	r3, [r2, #0]
		this_beat = 80;// random8(4, 10);
		bounce_length = 16;// random8(10, bounce_max);
		bounce_start = 0;
		current_shelf = 0;
		this_diff = random8(1, 9);
		this_index = random8();
    278c:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
		this_fade = 100;// random8(128, 220);
    2790:	2264      	movs	r2, #100	; 0x64
    2792:	4820      	ldr	r0, [pc, #128]	; (2814 <sinelon_bouncing()+0x2b0>)
		this_beat = 80;// random8(4, 10);
		bounce_length = 16;// random8(10, bounce_max);
		bounce_start = 0;
		current_shelf = 0;
		this_diff = random8(1, 9);
		this_index = random8();
    2794:	f884 e000 	strb.w	lr, [r4]
		this_delay = 10;
		use_palette = 1;
		this_beat = 80;// random8(4, 10);
		bounce_length = 16;// random8(10, bounce_max);
		bounce_start = 0;
		current_shelf = 0;
    2798:	f888 3000 	strb.w	r3, [r8]
		this_diff = random8(1, 9);
		this_index = random8();
		this_fade = 100;// random8(128, 220);
    279c:	f88a 2000 	strb.w	r2, [sl]
    27a0:	f002 ff00 	bl	55a4 <usb_serial_write>
    27a4:	481c      	ldr	r0, [pc, #112]	; (2818 <sinelon_bouncing()+0x2b4>)
    27a6:	f003 f901 	bl	59ac <Print::println()>
    27aa:	e6ec      	b.n	2586 <sinelon_bouncing()+0x22>
		nblend(leds[shelf[current_shelf][bounce_start + i]], bounce_pos[i], 255);
	}

	EVERY_N_MILLIS(25) {
		if (bounce_dir && bounce_start + bounce_length < shelf_num_leds[current_shelf]) {
			bounce_start++;
    27ac:	3001      	adds	r0, #1
    27ae:	7020      	strb	r0, [r4, #0]
		else {
			bounce_dir = !bounce_dir;
		}
	}
	
}
    27b0:	b007      	add	sp, #28
    27b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    27b6:	4b0d      	ldr	r3, [pc, #52]	; (27ec <sinelon_bouncing()+0x288>)
    27b8:	4c10      	ldr	r4, [pc, #64]	; (27fc <sinelon_bouncing()+0x298>)
    27ba:	681b      	ldr	r3, [r3, #0]
    27bc:	9302      	str	r3, [sp, #8]
	return ret;
    27be:	9b02      	ldr	r3, [sp, #8]
    27c0:	6023      	str	r3, [r4, #0]
    27c2:	2319      	movs	r3, #25
	for (uint8_t i = 0; i < bounce_length; i++) {
		leds[shelf[current_shelf][bounce_start + i]] = CRGB::Black;
		nblend(leds[shelf[current_shelf][bounce_start + i]], bounce_pos[i], 255);
	}

	EVERY_N_MILLIS(25) {
    27c4:	4628      	mov	r0, r5
    27c6:	6063      	str	r3, [r4, #4]
    27c8:	f001 fe5a 	bl	4480 <__cxa_guard_release>
    27cc:	e79b      	b.n	2706 <sinelon_bouncing()+0x1a2>
    27ce:	bf00      	nop
    27d0:	1fff8724 	.word	0x1fff8724
    27d4:	1fff872b 	.word	0x1fff872b
    27d8:	1fff8b5d 	.word	0x1fff8b5d
    27dc:	1fff8b5c 	.word	0x1fff8b5c
    27e0:	1fff8758 	.word	0x1fff8758
    27e4:	1fff8884 	.word	0x1fff8884
    27e8:	1fff8ad0 	.word	0x1fff8ad0
    27ec:	1fff8e5c 	.word	0x1fff8e5c
    27f0:	00007008 	.word	0x00007008
    27f4:	1fff8b18 	.word	0x1fff8b18
    27f8:	1fff8b58 	.word	0x1fff8b58
    27fc:	1fff8ac8 	.word	0x1fff8ac8
    2800:	1fff8b71 	.word	0x1fff8b71
    2804:	1fff8b7d 	.word	0x1fff8b7d
    2808:	1fff875c 	.word	0x1fff875c
    280c:	1fff8720 	.word	0x1fff8720
    2810:	1fff871e 	.word	0x1fff871e
    2814:	00006214 	.word	0x00006214
    2818:	1fff8764 	.word	0x1fff8764
    281c:	1fff8b80 	.word	0x1fff8b80
    2820:	1fff871d 	.word	0x1fff871d
    2824:	1fff871c 	.word	0x1fff871c
    2828:	1fff8cb0 	.word	0x1fff8cb0
    282c:	00006e54 	.word	0x00006e54

00002830 <sinelon()>:
#ifndef SINELON_H
#define SINELON_H

bool sinelon_color_change = 0;

void sinelon(){
    2830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    2834:	4a9d      	ldr	r2, [pc, #628]	; (2aac <sinelon()+0x27c>)
    2836:	7813      	ldrb	r3, [r2, #0]
#ifndef SINELON_H
#define SINELON_H

bool sinelon_color_change = 0;

void sinelon(){
    2838:	b087      	sub	sp, #28
	if (mode_change) {
    283a:	2b00      	cmp	r3, #0
    283c:	f040 8085 	bne.w	294a <sinelon()+0x11a>
    2840:	4c9b      	ldr	r4, [pc, #620]	; (2ab0 <sinelon()+0x280>)
    2842:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 2aec <sinelon()+0x2bc>
    2846:	f8df a2a8 	ldr.w	sl, [pc, #680]	; 2af0 <sinelon()+0x2c0>
    284a:	4e9a      	ldr	r6, [pc, #616]	; (2ab4 <sinelon()+0x284>)
		sinelon_color_change = random8(2);
		this_delay = 10;
		use_all_shelves = 1;//random8(2);
		Serial.println("sinelon");
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
    284c:	7822      	ldrb	r2, [r4, #0]
    284e:	489a      	ldr	r0, [pc, #616]	; (2ab8 <sinelon()+0x288>)
    2850:	21bc      	movs	r1, #188	; 0xbc
    2852:	f000 ffdb 	bl	380c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	if (!use_all_shelves) {
    2856:	7833      	ldrb	r3, [r6, #0]
    2858:	2b00      	cmp	r3, #0
    285a:	f000 80bf 	beq.w	29dc <sinelon()+0x1ac>
    285e:	4f97      	ldr	r7, [pc, #604]	; (2abc <sinelon()+0x28c>)
    2860:	f8df 8284 	ldr.w	r8, [pc, #644]	; 2ae8 <sinelon()+0x2b8>
    2864:	4d94      	ldr	r5, [pc, #592]	; (2ab8 <sinelon()+0x288>)
    2866:	4e96      	ldr	r6, [pc, #600]	; (2ac0 <sinelon()+0x290>)
			int pos = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
			if (sinelon_color_change) {
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index++);
			}
			else {
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index);
    2868:	9703      	str	r7, [sp, #12]
		this_delay = 10;
		use_all_shelves = 1;//random8(2);
		Serial.println("sinelon");
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
    286a:	2400      	movs	r4, #0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    286c:	4b95      	ldr	r3, [pc, #596]	; (2ac4 <sinelon()+0x294>)
			leds[pos] += ColorFromPalette(current_palette, this_index);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			int pos = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
    286e:	9a03      	ldr	r2, [sp, #12]
    2870:	681b      	ldr	r3, [r3, #0]
    2872:	9305      	str	r3, [sp, #20]
    2874:	f812 eb01 	ldrb.w	lr, [r2], #1
	return ret;
    2878:	9905      	ldr	r1, [sp, #20]
    287a:	f899 3000 	ldrb.w	r3, [r9]
    287e:	9203      	str	r2, [sp, #12]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2880:	f44f 728c 	mov.w	r2, #280	; 0x118
    2884:	021b      	lsls	r3, r3, #8
    2886:	fb02 f101 	mul.w	r1, r2, r1
    288a:	fb03 f101 	mul.w	r1, r3, r1
    288e:	0c09      	lsrs	r1, r1, #16
    2890:	f10e 3eff 	add.w	lr, lr, #4294967295
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2894:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2896:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    289a:	fa1f fe8e 	uxth.w	lr, lr
    if( theta & 0x4000 ) offset = 2047 - offset;
    289e:	d503      	bpl.n	28a8 <sinelon()+0x78>
    28a0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    28a4:	3307      	adds	r3, #7
    28a6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    28a8:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    28aa:	f3c3 0246 	ubfx	r2, r3, #1, #7
    28ae:	4b86      	ldr	r3, [pc, #536]	; (2ac8 <sinelon()+0x298>)
    28b0:	f813 c000 	ldrb.w	ip, [r3, r0]
    28b4:	4b85      	ldr	r3, [pc, #532]	; (2acc <sinelon()+0x29c>)
    28b6:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    28ba:	fb0c 3302 	mla	r3, ip, r2, r3
    28be:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    28c0:	040a      	lsls	r2, r1, #16
    28c2:	bf48      	it	mi
    28c4:	425b      	negmi	r3, r3
    28c6:	b21a      	sxth	r2, r3
    28c8:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    28cc:	b292      	uxth	r2, r2
    28ce:	fb0e 2e02 	mla	lr, lr, r2, r2
			if (sinelon_color_change) {
    28d2:	f89a 2000 	ldrb.w	r2, [sl]
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index++);
    28d6:	497e      	ldr	r1, [pc, #504]	; (2ad0 <sinelon()+0x2a0>)
    28d8:	eb04 1b84 	add.w	fp, r4, r4, lsl #6
    28dc:	23ff      	movs	r3, #255	; 0xff
    28de:	44b3      	add	fp, r6
    28e0:	a804      	add	r0, sp, #16
			leds[pos] += ColorFromPalette(current_palette, this_index);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			int pos = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
    28e2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
			if (sinelon_color_change) {
    28e6:	b332      	cbz	r2, 2936 <sinelon()+0x106>
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index++);
    28e8:	f898 2000 	ldrb.w	r2, [r8]
    28ec:	f81b b00e 	ldrb.w	fp, [fp, lr]
    28f0:	2701      	movs	r7, #1
    28f2:	eb02 0e07 	add.w	lr, r2, r7
    28f6:	9700      	str	r7, [sp, #0]
    28f8:	f888 e000 	strb.w	lr, [r8]
			}
			else {
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index);
    28fc:	f000 ffd8 	bl	38b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2900:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    2904:	18e9      	adds	r1, r5, r3
    2906:	5cea      	ldrb	r2, [r5, r3]
    2908:	f89d 0010 	ldrb.w	r0, [sp, #16]
    290c:	fa82 f250 	uqadd8	r2, r2, r0
    2910:	54ea      	strb	r2, [r5, r3]
    2912:	784a      	ldrb	r2, [r1, #1]
    2914:	f89d 3011 	ldrb.w	r3, [sp, #17]
    2918:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    291c:	704a      	strb	r2, [r1, #1]
    291e:	788b      	ldrb	r3, [r1, #2]
    2920:	f89d 2012 	ldrb.w	r2, [sp, #18]
    2924:	fa83 f352 	uqadd8	r3, r3, r2
    2928:	3401      	adds	r4, #1
		else {
			leds[pos] += ColorFromPalette(current_palette, this_index);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
    292a:	2c04      	cmp	r4, #4
        b = qadd8( b, rhs.b);
    292c:	708b      	strb	r3, [r1, #2]
    292e:	d19d      	bne.n	286c <sinelon()+0x3c>
			else {
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index);
			}
		}
	}
}
    2930:	b007      	add	sp, #28
    2932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			int pos = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
			if (sinelon_color_change) {
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index++);
			}
			else {
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index);
    2936:	2301      	movs	r3, #1
    2938:	f81b b00e 	ldrb.w	fp, [fp, lr]
    293c:	f898 2000 	ldrb.w	r2, [r8]
    2940:	9300      	str	r3, [sp, #0]
    2942:	4963      	ldr	r1, [pc, #396]	; (2ad0 <sinelon()+0x2a0>)
    2944:	23ff      	movs	r3, #255	; 0xff
    2946:	a804      	add	r0, sp, #16
    2948:	e7d8      	b.n	28fc <sinelon()+0xcc>
    294a:	4962      	ldr	r1, [pc, #392]	; (2ad4 <sinelon()+0x2a4>)

void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    294c:	4c58      	ldr	r4, [pc, #352]	; (2ab0 <sinelon()+0x280>)
    294e:	880b      	ldrh	r3, [r1, #0]
bool sinelon_color_change = 0;

void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    2950:	4f61      	ldr	r7, [pc, #388]	; (2ad8 <sinelon()+0x2a8>)
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
		this_delay = 10;
		use_all_shelves = 1;//random8(2);
    2952:	4e58      	ldr	r6, [pc, #352]	; (2ab4 <sinelon()+0x284>)
void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
    2954:	f8df 9194 	ldr.w	r9, [pc, #404]	; 2aec <sinelon()+0x2bc>
		sinelon_color_change = random8(2);
    2958:	f8df a194 	ldr.w	sl, [pc, #404]	; 2af0 <sinelon()+0x2c0>
    295c:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    2960:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2964:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2968:	3319      	adds	r3, #25
    296a:	b29b      	uxth	r3, r3
    296c:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    2970:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2974:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    2978:	3019      	adds	r0, #25
    297a:	b280      	uxth	r0, r0
    297c:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2980:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2984:	eb00 0585 	add.w	r5, r0, r5, lsl #2

void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    2988:	b2db      	uxtb	r3, r3
    298a:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    298e:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    2992:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2996:	3519      	adds	r5, #25
		this_beat = random8(4, 18);
    2998:	b2c0      	uxtb	r0, r0

void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    299a:	111b      	asrs	r3, r3, #4
    299c:	b2ad      	uxth	r5, r5
    299e:	3310      	adds	r3, #16
		this_beat = random8(4, 18);
    29a0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    29a4:	800d      	strh	r5, [r1, #0]

void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    29a6:	7023      	strb	r3, [r4, #0]
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
		this_delay = 10;
    29a8:	494c      	ldr	r1, [pc, #304]	; (2adc <sinelon()+0x2ac>)
bool sinelon_color_change = 0;

void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    29aa:	2301      	movs	r3, #1
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
    29ac:	11c0      	asrs	r0, r0, #7
bool sinelon_color_change = 0;

void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    29ae:	703b      	strb	r3, [r7, #0]
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
		this_delay = 10;
		use_all_shelves = 1;//random8(2);
    29b0:	7033      	strb	r3, [r6, #0]
void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
    29b2:	3004      	adds	r0, #4
		sinelon_color_change = random8(2);
		this_delay = 10;
    29b4:	230a      	movs	r3, #10
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    29b6:	eb05 2515 	add.w	r5, r5, r5, lsr #8
void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
    29ba:	f889 0000 	strb.w	r0, [r9]
		sinelon_color_change = random8(2);
		this_delay = 10;
    29be:	600b      	str	r3, [r1, #0]
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
    29c0:	f3c5 15c0 	ubfx	r5, r5, #7, #1

bool sinelon_color_change = 0;

void sinelon(){
	if (mode_change) {
		mode_change = 0;
    29c4:	2300      	movs	r3, #0
    29c6:	2107      	movs	r1, #7
    29c8:	4845      	ldr	r0, [pc, #276]	; (2ae0 <sinelon()+0x2b0>)
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
    29ca:	f88a 5000 	strb.w	r5, [sl]

bool sinelon_color_change = 0;

void sinelon(){
	if (mode_change) {
		mode_change = 0;
    29ce:	7013      	strb	r3, [r2, #0]
    29d0:	f002 fde8 	bl	55a4 <usb_serial_write>
    29d4:	4843      	ldr	r0, [pc, #268]	; (2ae4 <sinelon()+0x2b4>)
    29d6:	f002 ffe9 	bl	59ac <Print::println()>
    29da:	e737      	b.n	284c <sinelon()+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    29dc:	4b39      	ldr	r3, [pc, #228]	; (2ac4 <sinelon()+0x294>)
		use_all_shelves = 1;//random8(2);
		Serial.println("sinelon");
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
    29de:	f899 1000 	ldrb.w	r1, [r9]
    29e2:	681b      	ldr	r3, [r3, #0]
    29e4:	9304      	str	r3, [sp, #16]
	return ret;
    29e6:	9a04      	ldr	r2, [sp, #16]
    29e8:	f44f 738c 	mov.w	r3, #280	; 0x118
    29ec:	fb03 f302 	mul.w	r3, r3, r2
    29f0:	0209      	lsls	r1, r1, #8
    29f2:	fb03 f101 	mul.w	r1, r3, r1
    29f6:	0c09      	lsrs	r1, r1, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    29f8:	044d      	lsls	r5, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    29fa:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    29fe:	d503      	bpl.n	2a08 <sinelon()+0x1d8>
    2a00:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2a04:	3307      	adds	r3, #7
    2a06:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2a08:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    2a0a:	4c2f      	ldr	r4, [pc, #188]	; (2ac8 <sinelon()+0x298>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2a0c:	482f      	ldr	r0, [pc, #188]	; (2acc <sinelon()+0x29c>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2a0e:	5ca4      	ldrb	r4, [r4, r2]
    2a10:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    2a14:	f3c3 0246 	ubfx	r2, r3, #1, #7
    2a18:	fb04 0302 	mla	r3, r4, r2, r0
    2a1c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2a1e:	040c      	lsls	r4, r1, #16
    2a20:	bf48      	it	mi
    2a22:	425b      	negmi	r3, r3
    2a24:	b21b      	sxth	r3, r3
    2a26:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2a2a:	24bc      	movs	r4, #188	; 0xbc
    2a2c:	b29b      	uxth	r3, r3
		if (sinelon_color_change) {
    2a2e:	f89a 2000 	ldrb.w	r2, [sl]
		use_all_shelves = 1;//random8(2);
		Serial.println("sinelon");
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
    2a32:	fb04 f303 	mul.w	r3, r4, r3
    2a36:	0c1c      	lsrs	r4, r3, #16
		if (sinelon_color_change) {
    2a38:	bb0a      	cbnz	r2, 2a7e <sinelon()+0x24e>
			leds[pos] += ColorFromPalette(current_palette, this_index++);
		}
		else {
			leds[pos] += ColorFromPalette(current_palette, this_index);
    2a3a:	4b2b      	ldr	r3, [pc, #172]	; (2ae8 <sinelon()+0x2b8>)
    2a3c:	4924      	ldr	r1, [pc, #144]	; (2ad0 <sinelon()+0x2a0>)
    2a3e:	781a      	ldrb	r2, [r3, #0]
    2a40:	2301      	movs	r3, #1
    2a42:	9300      	str	r3, [sp, #0]
    2a44:	a805      	add	r0, sp, #20
    2a46:	23ff      	movs	r3, #255	; 0xff
    2a48:	f000 ff32 	bl	38b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2a4c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    2a50:	4a19      	ldr	r2, [pc, #100]	; (2ab8 <sinelon()+0x288>)
    2a52:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2a56:	5d13      	ldrb	r3, [r2, r4]
    2a58:	1911      	adds	r1, r2, r4
    2a5a:	fa83 f350 	uqadd8	r3, r3, r0
    2a5e:	5513      	strb	r3, [r2, r4]
    2a60:	784a      	ldrb	r2, [r1, #1]
    2a62:	f89d 3015 	ldrb.w	r3, [sp, #21]
    2a66:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2a6a:	704a      	strb	r2, [r1, #1]
    2a6c:	788b      	ldrb	r3, [r1, #2]
    2a6e:	f89d 2016 	ldrb.w	r2, [sp, #22]
    2a72:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2a76:	708b      	strb	r3, [r1, #2]
			else {
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index);
			}
		}
	}
}
    2a78:	b007      	add	sp, #28
    2a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
		if (sinelon_color_change) {
			leds[pos] += ColorFromPalette(current_palette, this_index++);
    2a7e:	4d1a      	ldr	r5, [pc, #104]	; (2ae8 <sinelon()+0x2b8>)
    2a80:	4913      	ldr	r1, [pc, #76]	; (2ad0 <sinelon()+0x2a0>)
    2a82:	782a      	ldrb	r2, [r5, #0]
    2a84:	2301      	movs	r3, #1
    2a86:	18d6      	adds	r6, r2, r3
    2a88:	9300      	str	r3, [sp, #0]
    2a8a:	a805      	add	r0, sp, #20
    2a8c:	23ff      	movs	r3, #255	; 0xff
    2a8e:	702e      	strb	r6, [r5, #0]
    2a90:	f000 ff0e 	bl	38b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2a94:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    2a98:	4b07      	ldr	r3, [pc, #28]	; (2ab8 <sinelon()+0x288>)
    2a9a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2a9e:	5d1a      	ldrb	r2, [r3, r4]
    2aa0:	1919      	adds	r1, r3, r4
    2aa2:	fa82 f250 	uqadd8	r2, r2, r0
    2aa6:	551a      	strb	r2, [r3, r4]
    2aa8:	e7da      	b.n	2a60 <sinelon()+0x230>
    2aaa:	bf00      	nop
    2aac:	1fff8724 	.word	0x1fff8724
    2ab0:	1fff871c 	.word	0x1fff871c
    2ab4:	1fff8881 	.word	0x1fff8881
    2ab8:	1fff8884 	.word	0x1fff8884
    2abc:	1fff8758 	.word	0x1fff8758
    2ac0:	1fff8cb0 	.word	0x1fff8cb0
    2ac4:	1fff8e5c 	.word	0x1fff8e5c
    2ac8:	00006e54 	.word	0x00006e54
    2acc:	00007008 	.word	0x00007008
    2ad0:	1fff8b18 	.word	0x1fff8b18
    2ad4:	1fff875c 	.word	0x1fff875c
    2ad8:	1fff871e 	.word	0x1fff871e
    2adc:	1fff8720 	.word	0x1fff8720
    2ae0:	00006228 	.word	0x00006228
    2ae4:	1fff8764 	.word	0x1fff8764
    2ae8:	1fff8b5c 	.word	0x1fff8b5c
    2aec:	1fff872b 	.word	0x1fff872b
    2af0:	1fff8ac4 	.word	0x1fff8ac4

00002af4 <sinelon_squiggle()>:
			}
		}
	}
}

void sinelon_squiggle(){
    2af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    2af8:	4c89      	ldr	r4, [pc, #548]	; (2d20 <sinelon_squiggle()+0x22c>)
    2afa:	7823      	ldrb	r3, [r4, #0]
			}
		}
	}
}

void sinelon_squiggle(){
    2afc:	b08b      	sub	sp, #44	; 0x2c
	if (mode_change) {
    2afe:	2b00      	cmp	r3, #0
    2b00:	f040 80b1 	bne.w	2c66 <sinelon_squiggle()+0x172>
    2b04:	4b87      	ldr	r3, [pc, #540]	; (2d24 <sinelon_squiggle()+0x230>)
    2b06:	9302      	str	r3, [sp, #8]
    2b08:	4b87      	ldr	r3, [pc, #540]	; (2d28 <sinelon_squiggle()+0x234>)
    2b0a:	9303      	str	r3, [sp, #12]
    2b0c:	4f87      	ldr	r7, [pc, #540]	; (2d2c <sinelon_squiggle()+0x238>)
    2b0e:	4b88      	ldr	r3, [pc, #544]	; (2d30 <sinelon_squiggle()+0x23c>)
    2b10:	4d88      	ldr	r5, [pc, #544]	; (2d34 <sinelon_squiggle()+0x240>)
    2b12:	9304      	str	r3, [sp, #16]
		that_beat = random8(3, 10);
		use_all_shelves = 1;//random8(2);
		Serial.println("sinelon_squiggle");
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
    2b14:	783a      	ldrb	r2, [r7, #0]
    2b16:	4888      	ldr	r0, [pc, #544]	; (2d38 <sinelon_squiggle()+0x244>)
    2b18:	21bc      	movs	r1, #188	; 0xbc
    2b1a:	f000 fe77 	bl	380c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	if (!use_all_shelves) {
    2b1e:	782b      	ldrb	r3, [r5, #0]
    2b20:	2b00      	cmp	r3, #0
    2b22:	f000 8123 	beq.w	2d6c <sinelon_squiggle()+0x278>
    2b26:	f8df b238 	ldr.w	fp, [pc, #568]	; 2d60 <sinelon_squiggle()+0x26c>
    2b2a:	f8df 9238 	ldr.w	r9, [pc, #568]	; 2d64 <sinelon_squiggle()+0x270>
    2b2e:	f8df 8238 	ldr.w	r8, [pc, #568]	; 2d68 <sinelon_squiggle()+0x274>
    2b32:	4f82      	ldr	r7, [pc, #520]	; (2d3c <sinelon_squiggle()+0x248>)
    2b34:	4e80      	ldr	r6, [pc, #512]	; (2d38 <sinelon_squiggle()+0x244>)
    2b36:	2400      	movs	r4, #0
    2b38:	f44f 7a8c 	mov.w	sl, #280	; 0x118
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2b3c:	f8d9 3000 	ldr.w	r3, [r9]
    2b40:	9309      	str	r3, [sp, #36]	; 0x24
			leds[(pos+pos2)/2] += ColorFromPalette(current_palette, this_index);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			int pos  = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
    2b42:	9b02      	ldr	r3, [sp, #8]
	return ret;
    2b44:	9809      	ldr	r0, [sp, #36]	; 0x24
    2b46:	781b      	ldrb	r3, [r3, #0]
    2b48:	f81b 1b01 	ldrb.w	r1, [fp], #1
    2b4c:	021b      	lsls	r3, r3, #8
    2b4e:	fb0a f000 	mul.w	r0, sl, r0
    2b52:	fb03 f000 	mul.w	r0, r3, r0
    2b56:	0c00      	lsrs	r0, r0, #16
    2b58:	3901      	subs	r1, #1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2b5a:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2b5c:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    2b60:	b289      	uxth	r1, r1
    if( theta & 0x4000 ) offset = 2047 - offset;
    2b62:	d503      	bpl.n	2b6c <sinelon_squiggle()+0x78>
    2b64:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2b68:	3307      	adds	r3, #7
    2b6a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2b6c:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2b6e:	f3c3 0246 	ubfx	r2, r3, #1, #7
    2b72:	f818 e005 	ldrb.w	lr, [r8, r5]
    2b76:	f837 3015 	ldrh.w	r3, [r7, r5, lsl #1]
    2b7a:	fb0e 3302 	mla	r3, lr, r2, r3

    if( theta & 0x8000 ) y = -y;
    2b7e:	0402      	lsls	r2, r0, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2b80:	f8d9 2000 	ldr.w	r2, [r9]
    2b84:	9208      	str	r2, [sp, #32]
			int pos2 = beatsin16(that_beat, 0, shelf_num_leds[s] - 1);
    2b86:	9a04      	ldr	r2, [sp, #16]
	return ret;
    2b88:	9808      	ldr	r0, [sp, #32]
    2b8a:	7812      	ldrb	r2, [r2, #0]
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2b8c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2b8e:	bf48      	it	mi
    2b90:	425b      	negmi	r3, r3
    2b92:	0212      	lsls	r2, r2, #8
    2b94:	b21b      	sxth	r3, r3
    2b96:	fb0a f000 	mul.w	r0, sl, r0
    2b9a:	fb02 f000 	mul.w	r0, r2, r0
			leds[(pos+pos2)/2] += ColorFromPalette(current_palette, this_index);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			int pos  = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
    2b9e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2ba2:	0c00      	lsrs	r0, r0, #16
    2ba4:	b29b      	uxth	r3, r3
LIB8STATIC uint16_t scale16( uint16_t i, fract16 scale )
{
  #if SCALE16_C == 1
    uint16_t result;
#if FASTLED_SCALE8_FIXED == 1
    result = ((uint32_t)(i) * (1+(uint32_t)(scale))) / 65536;
    2ba6:	3101      	adds	r1, #1
    2ba8:	fb01 f303 	mul.w	r3, r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2bac:	0445      	lsls	r5, r0, #17
    2bae:	ea4f 4313 	mov.w	r3, r3, lsr #16
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2bb2:	f3c0 02ca 	ubfx	r2, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2bb6:	d503      	bpl.n	2bc0 <sinelon_squiggle()+0xcc>
    2bb8:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    2bbc:	3207      	adds	r2, #7
    2bbe:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2bc0:	0a15      	lsrs	r5, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2bc2:	f3c2 0246 	ubfx	r2, r2, #1, #7
    2bc6:	f818 e005 	ldrb.w	lr, [r8, r5]
    2bca:	f837 5015 	ldrh.w	r5, [r7, r5, lsl #1]
    2bce:	fb0e 5202 	mla	r2, lr, r2, r5
    2bd2:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    2bd4:	0400      	lsls	r0, r0, #16
    2bd6:	bf48      	it	mi
    2bd8:	4252      	negmi	r2, r2
    2bda:	b212      	sxth	r2, r2
			int pos2 = beatsin16(that_beat, 0, shelf_num_leds[s] - 1);
    2bdc:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    2be0:	b292      	uxth	r2, r2
    2be2:	fb01 f102 	mul.w	r1, r1, r2
			if (sinelon_color_change) {
    2be6:	9803      	ldr	r0, [sp, #12]
				leds[shelf[s][(pos+pos2)/2]] += ColorFromPalette(current_palette, this_index++);
    2be8:	4a55      	ldr	r2, [pc, #340]	; (2d40 <sinelon_squiggle()+0x24c>)
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			int pos  = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
			int pos2 = beatsin16(that_beat, 0, shelf_num_leds[s] - 1);
			if (sinelon_color_change) {
    2bea:	7800      	ldrb	r0, [r0, #0]
				leds[shelf[s][(pos+pos2)/2]] += ColorFromPalette(current_palette, this_index++);
    2bec:	7812      	ldrb	r2, [r2, #0]
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			int pos  = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
			int pos2 = beatsin16(that_beat, 0, shelf_num_leds[s] - 1);
    2bee:	0c09      	lsrs	r1, r1, #16
			if (sinelon_color_change) {
				leds[shelf[s][(pos+pos2)/2]] += ColorFromPalette(current_palette, this_index++);
    2bf0:	4419      	add	r1, r3
    2bf2:	4b54      	ldr	r3, [pc, #336]	; (2d44 <sinelon_squiggle()+0x250>)
    2bf4:	eb03 0161 	add.w	r1, r3, r1, asr #1
    2bf8:	eb04 1384 	add.w	r3, r4, r4, lsl #6
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			int pos  = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
			int pos2 = beatsin16(that_beat, 0, shelf_num_leds[s] - 1);
			if (sinelon_color_change) {
    2bfc:	b340      	cbz	r0, 2c50 <sinelon_squiggle()+0x15c>
				leds[shelf[s][(pos+pos2)/2]] += ColorFromPalette(current_palette, this_index++);
    2bfe:	5ccb      	ldrb	r3, [r1, r3]
    2c00:	9305      	str	r3, [sp, #20]
    2c02:	4d4f      	ldr	r5, [pc, #316]	; (2d40 <sinelon_squiggle()+0x24c>)
    2c04:	4950      	ldr	r1, [pc, #320]	; (2d48 <sinelon_squiggle()+0x254>)
    2c06:	2301      	movs	r3, #1
    2c08:	18d0      	adds	r0, r2, r3
    2c0a:	9300      	str	r3, [sp, #0]
    2c0c:	7028      	strb	r0, [r5, #0]
    2c0e:	23ff      	movs	r3, #255	; 0xff
    2c10:	a807      	add	r0, sp, #28
    2c12:	f000 fe4d 	bl	38b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2c16:	9b05      	ldr	r3, [sp, #20]
    2c18:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    2c1c:	1971      	adds	r1, r6, r5
    2c1e:	5d73      	ldrb	r3, [r6, r5]
    2c20:	f89d 201c 	ldrb.w	r2, [sp, #28]
    2c24:	fa83 f352 	uqadd8	r3, r3, r2
    2c28:	5573      	strb	r3, [r6, r5]
    2c2a:	784a      	ldrb	r2, [r1, #1]
    2c2c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    2c30:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2c34:	704a      	strb	r2, [r1, #1]
    2c36:	788b      	ldrb	r3, [r1, #2]
    2c38:	f89d 201e 	ldrb.w	r2, [sp, #30]
    2c3c:	fa83 f352 	uqadd8	r3, r3, r2
    2c40:	3401      	adds	r4, #1
		else {
			leds[(pos+pos2)/2] += ColorFromPalette(current_palette, this_index);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
    2c42:	2c04      	cmp	r4, #4
        b = qadd8( b, rhs.b);
    2c44:	708b      	strb	r3, [r1, #2]
    2c46:	f47f af79 	bne.w	2b3c <sinelon_squiggle()+0x48>
			else {
				leds[shelf[s][(pos+pos2)/2]] += ColorFromPalette(current_palette, this_index);
			}
		}
	}
}
    2c4a:	b00b      	add	sp, #44	; 0x2c
    2c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			int pos2 = beatsin16(that_beat, 0, shelf_num_leds[s] - 1);
			if (sinelon_color_change) {
				leds[shelf[s][(pos+pos2)/2]] += ColorFromPalette(current_palette, this_index++);
			}
			else {
				leds[shelf[s][(pos+pos2)/2]] += ColorFromPalette(current_palette, this_index);
    2c50:	5ccd      	ldrb	r5, [r1, r3]
    2c52:	493d      	ldr	r1, [pc, #244]	; (2d48 <sinelon_squiggle()+0x254>)
    2c54:	2301      	movs	r3, #1
    2c56:	9300      	str	r3, [sp, #0]
    2c58:	a807      	add	r0, sp, #28
    2c5a:	23ff      	movs	r3, #255	; 0xff
    2c5c:	f000 fe28 	bl	38b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2c60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2c64:	e7da      	b.n	2c1c <sinelon_squiggle()+0x128>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2c66:	4839      	ldr	r0, [pc, #228]	; (2d4c <sinelon_squiggle()+0x258>)
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
		this_delay = 10;
		that_beat = random8(3, 10);
    2c68:	4b31      	ldr	r3, [pc, #196]	; (2d30 <sinelon_squiggle()+0x23c>)
    2c6a:	9304      	str	r3, [sp, #16]
    2c6c:	8803      	ldrh	r3, [r0, #0]
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
    2c6e:	4a2e      	ldr	r2, [pc, #184]	; (2d28 <sinelon_squiggle()+0x234>)
    2c70:	9203      	str	r2, [sp, #12]
    2c72:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2c76:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2c7a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2c7e:	3319      	adds	r3, #25
    2c80:	b29b      	uxth	r3, r3
    2c82:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2c86:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2c8a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2c8e:	3219      	adds	r2, #25
    2c90:	b292      	uxth	r2, r2
void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
    2c92:	4d24      	ldr	r5, [pc, #144]	; (2d24 <sinelon_squiggle()+0x230>)
    2c94:	9502      	str	r5, [sp, #8]
    2c96:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    2c9a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2c9e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2ca2:	3519      	adds	r5, #25
    2ca4:	b2ad      	uxth	r5, r5
    2ca6:	eb05 2145 	add.w	r1, r5, r5, lsl #9
    2caa:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    2cae:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    2cb2:	3119      	adds	r1, #25
    2cb4:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2cb6:	eb01 2611 	add.w	r6, r1, r1, lsr #8
    2cba:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    2cbe:	eb02 2212 	add.w	r2, r2, r2, lsr #8
		sinelon_color_change = random8(2);
		this_delay = 10;
		that_beat = random8(3, 10);
    2cc2:	b2f6      	uxtb	r6, r6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2cc4:	8001      	strh	r1, [r0, #0]

void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    2cc6:	b2db      	uxtb	r3, r3
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
    2cc8:	4817      	ldr	r0, [pc, #92]	; (2d28 <sinelon_squiggle()+0x234>)
		this_delay = 10;
		that_beat = random8(3, 10);
    2cca:	4919      	ldr	r1, [pc, #100]	; (2d30 <sinelon_squiggle()+0x23c>)

void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    2ccc:	4f17      	ldr	r7, [pc, #92]	; (2d2c <sinelon_squiggle()+0x238>)
		this_beat = random8(4, 18);
    2cce:	b2d2      	uxtb	r2, r2
		sinelon_color_change = random8(2);
		this_delay = 10;
		that_beat = random8(3, 10);
    2cd0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2cd4:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
    2cd8:	f3c5 15c0 	ubfx	r5, r5, #7, #1

void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    2cdc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		this_beat = random8(4, 18);
    2ce0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		sinelon_color_change = random8(2);
		this_delay = 10;
		that_beat = random8(3, 10);
    2ce4:	1236      	asrs	r6, r6, #8
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
    2ce6:	7005      	strb	r5, [r0, #0]
		this_delay = 10;
		that_beat = random8(3, 10);
    2ce8:	3603      	adds	r6, #3
void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
    2cea:	480e      	ldr	r0, [pc, #56]	; (2d24 <sinelon_squiggle()+0x230>)
		sinelon_color_change = random8(2);
		this_delay = 10;
		that_beat = random8(3, 10);
    2cec:	700e      	strb	r6, [r1, #0]

void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    2cee:	111b      	asrs	r3, r3, #4
		this_beat = random8(4, 18);
    2cf0:	11d2      	asrs	r2, r2, #7

void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    2cf2:	3310      	adds	r3, #16
		this_beat = random8(4, 18);
    2cf4:	3204      	adds	r2, #4
}

void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    2cf6:	4916      	ldr	r1, [pc, #88]	; (2d50 <sinelon_squiggle()+0x25c>)
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
    2cf8:	7002      	strb	r2, [r0, #0]

void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    2cfa:	703b      	strb	r3, [r7, #0]
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
		this_delay = 10;
    2cfc:	4a15      	ldr	r2, [pc, #84]	; (2d54 <sinelon_squiggle()+0x260>)
		that_beat = random8(3, 10);
		use_all_shelves = 1;//random8(2);
    2cfe:	4d0d      	ldr	r5, [pc, #52]	; (2d34 <sinelon_squiggle()+0x240>)
    2d00:	4815      	ldr	r0, [pc, #84]	; (2d58 <sinelon_squiggle()+0x264>)
}

void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    2d02:	2301      	movs	r3, #1
    2d04:	700b      	strb	r3, [r1, #0]
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
		this_delay = 10;
    2d06:	210a      	movs	r1, #10
		that_beat = random8(3, 10);
		use_all_shelves = 1;//random8(2);
    2d08:	702b      	strb	r3, [r5, #0]
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
		this_delay = 10;
    2d0a:	6011      	str	r1, [r2, #0]
	}
}

void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
    2d0c:	2300      	movs	r3, #0
    2d0e:	2110      	movs	r1, #16
    2d10:	7023      	strb	r3, [r4, #0]
    2d12:	f002 fc47 	bl	55a4 <usb_serial_write>
    2d16:	4811      	ldr	r0, [pc, #68]	; (2d5c <sinelon_squiggle()+0x268>)
    2d18:	f002 fe48 	bl	59ac <Print::println()>
    2d1c:	e6fa      	b.n	2b14 <sinelon_squiggle()+0x20>
    2d1e:	bf00      	nop
    2d20:	1fff8724 	.word	0x1fff8724
    2d24:	1fff872b 	.word	0x1fff872b
    2d28:	1fff8ac4 	.word	0x1fff8ac4
    2d2c:	1fff871c 	.word	0x1fff871c
    2d30:	1fff8727 	.word	0x1fff8727
    2d34:	1fff8881 	.word	0x1fff8881
    2d38:	1fff8884 	.word	0x1fff8884
    2d3c:	00007008 	.word	0x00007008
    2d40:	1fff8b5c 	.word	0x1fff8b5c
    2d44:	1fff8cb0 	.word	0x1fff8cb0
    2d48:	1fff8b18 	.word	0x1fff8b18
    2d4c:	1fff875c 	.word	0x1fff875c
    2d50:	1fff871e 	.word	0x1fff871e
    2d54:	1fff8720 	.word	0x1fff8720
    2d58:	00006230 	.word	0x00006230
    2d5c:	1fff8764 	.word	0x1fff8764
    2d60:	1fff8758 	.word	0x1fff8758
    2d64:	1fff8e5c 	.word	0x1fff8e5c
    2d68:	00006e54 	.word	0x00006e54
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2d6c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 2ea0 <sinelon_squiggle()+0x3ac>
		Serial.println("sinelon_squiggle");
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
    2d70:	9b02      	ldr	r3, [sp, #8]
    2d72:	f8d9 2000 	ldr.w	r2, [r9]
    2d76:	9207      	str	r2, [sp, #28]
    2d78:	781b      	ldrb	r3, [r3, #0]
	return ret;
    2d7a:	9907      	ldr	r1, [sp, #28]
    2d7c:	f44f 728c 	mov.w	r2, #280	; 0x118
    2d80:	021b      	lsls	r3, r3, #8
    2d82:	fb02 f101 	mul.w	r1, r2, r1
    2d86:	fb03 f101 	mul.w	r1, r3, r1
    2d8a:	0c09      	lsrs	r1, r1, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2d8c:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2d8e:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2d92:	d503      	bpl.n	2d9c <sinelon_squiggle()+0x2a8>
    2d94:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2d98:	3307      	adds	r3, #7
    2d9a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2d9c:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    2d9e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 2ea4 <sinelon_squiggle()+0x3b0>

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2da2:	4f3b      	ldr	r7, [pc, #236]	; (2e90 <sinelon_squiggle()+0x39c>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2da4:	f818 4002 	ldrb.w	r4, [r8, r2]
    2da8:	f837 0012 	ldrh.w	r0, [r7, r2, lsl #1]
    2dac:	f3c3 0246 	ubfx	r2, r3, #1, #7
    2db0:	fb04 0302 	mla	r3, r4, r2, r0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2db4:	f8d9 2000 	ldr.w	r2, [r9]
    2db8:	9206      	str	r2, [sp, #24]
		int pos2 = beatsin16(that_beat, 0, NUM_LEDS - 1);
    2dba:	9a04      	ldr	r2, [sp, #16]
	return ret;
    2dbc:	9806      	ldr	r0, [sp, #24]

    if( theta & 0x8000 ) y = -y;
    2dbe:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2dc0:	b29b      	uxth	r3, r3
    2dc2:	7811      	ldrb	r1, [r2, #0]

    if( theta & 0x8000 ) y = -y;
    2dc4:	bf48      	it	mi
    2dc6:	425b      	negmi	r3, r3
    2dc8:	f44f 728c 	mov.w	r2, #280	; 0x118
    2dcc:	fb02 f200 	mul.w	r2, r2, r0
    2dd0:	b21b      	sxth	r3, r3
    2dd2:	0209      	lsls	r1, r1, #8
    2dd4:	fb02 f101 	mul.w	r1, r2, r1
		Serial.println("sinelon_squiggle");
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
    2dd8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2ddc:	20bc      	movs	r0, #188	; 0xbc
    2dde:	0c09      	lsrs	r1, r1, #16
    2de0:	b29b      	uxth	r3, r3
    2de2:	fb00 f303 	mul.w	r3, r0, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2de6:	044a      	lsls	r2, r1, #17
    2de8:	ea4f 4013 	mov.w	r0, r3, lsr #16
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2dec:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2df0:	d503      	bpl.n	2dfa <sinelon_squiggle()+0x306>
    2df2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2df6:	3307      	adds	r3, #7
    2df8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2dfa:	0a1c      	lsrs	r4, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2dfc:	f3c3 0246 	ubfx	r2, r3, #1, #7
    2e00:	f818 5004 	ldrb.w	r5, [r8, r4]
    2e04:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    2e08:	fb05 3302 	mla	r3, r5, r2, r3
    2e0c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2e0e:	040e      	lsls	r6, r1, #16
    2e10:	bf48      	it	mi
    2e12:	425b      	negmi	r3, r3
		int pos2 = beatsin16(that_beat, 0, NUM_LEDS - 1);
		if (sinelon_color_change) {
    2e14:	9a03      	ldr	r2, [sp, #12]
    2e16:	b21b      	sxth	r3, r3
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
		int pos2 = beatsin16(that_beat, 0, NUM_LEDS - 1);
    2e18:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2e1c:	b29b      	uxth	r3, r3
		if (sinelon_color_change) {
    2e1e:	7811      	ldrb	r1, [r2, #0]
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
		int pos2 = beatsin16(that_beat, 0, NUM_LEDS - 1);
    2e20:	22bc      	movs	r2, #188	; 0xbc
    2e22:	fb02 f303 	mul.w	r3, r2, r3
    2e26:	0c1b      	lsrs	r3, r3, #16
		if (sinelon_color_change) {
    2e28:	bb21      	cbnz	r1, 2e74 <sinelon_squiggle()+0x380>
			leds[(pos+pos2)/2] += ColorFromPalette(current_palette, this_index++);
		}
		else {
			leds[(pos+pos2)/2] += ColorFromPalette(current_palette, this_index);
    2e2a:	4a1a      	ldr	r2, [pc, #104]	; (2e94 <sinelon_squiggle()+0x3a0>)
    2e2c:	491a      	ldr	r1, [pc, #104]	; (2e98 <sinelon_squiggle()+0x3a4>)
    2e2e:	7812      	ldrb	r2, [r2, #0]
    2e30:	4403      	add	r3, r0
    2e32:	2001      	movs	r0, #1
    2e34:	fa43 f400 	asr.w	r4, r3, r0
    2e38:	9000      	str	r0, [sp, #0]
    2e3a:	23ff      	movs	r3, #255	; 0xff
    2e3c:	a809      	add	r0, sp, #36	; 0x24
    2e3e:	f000 fd37 	bl	38b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2e42:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2e46:	4815      	ldr	r0, [pc, #84]	; (2e9c <sinelon_squiggle()+0x3a8>)
    2e48:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    2e4c:	5cc2      	ldrb	r2, [r0, r3]
    2e4e:	18c1      	adds	r1, r0, r3
    2e50:	fa82 f254 	uqadd8	r2, r2, r4
    2e54:	54c2      	strb	r2, [r0, r3]
    2e56:	784a      	ldrb	r2, [r1, #1]
    2e58:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    2e5c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2e60:	704a      	strb	r2, [r1, #1]
    2e62:	788b      	ldrb	r3, [r1, #2]
    2e64:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    2e68:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2e6c:	708b      	strb	r3, [r1, #2]
			else {
				leds[shelf[s][(pos+pos2)/2]] += ColorFromPalette(current_palette, this_index);
			}
		}
	}
}
    2e6e:	b00b      	add	sp, #44	; 0x2c
    2e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
		int pos2 = beatsin16(that_beat, 0, NUM_LEDS - 1);
		if (sinelon_color_change) {
			leds[(pos+pos2)/2] += ColorFromPalette(current_palette, this_index++);
    2e74:	4d07      	ldr	r5, [pc, #28]	; (2e94 <sinelon_squiggle()+0x3a0>)
    2e76:	4908      	ldr	r1, [pc, #32]	; (2e98 <sinelon_squiggle()+0x3a4>)
    2e78:	782a      	ldrb	r2, [r5, #0]
    2e7a:	4403      	add	r3, r0
    2e7c:	2001      	movs	r0, #1
    2e7e:	1816      	adds	r6, r2, r0
    2e80:	fa43 f400 	asr.w	r4, r3, r0
    2e84:	9000      	str	r0, [sp, #0]
    2e86:	23ff      	movs	r3, #255	; 0xff
    2e88:	a809      	add	r0, sp, #36	; 0x24
    2e8a:	702e      	strb	r6, [r5, #0]
    2e8c:	e7d7      	b.n	2e3e <sinelon_squiggle()+0x34a>
    2e8e:	bf00      	nop
    2e90:	00007008 	.word	0x00007008
    2e94:	1fff8b5c 	.word	0x1fff8b5c
    2e98:	1fff8b18 	.word	0x1fff8b18
    2e9c:	1fff8884 	.word	0x1fff8884
    2ea0:	1fff8e5c 	.word	0x1fff8e5c
    2ea4:	00006e54 	.word	0x00006e54

00002ea8 <updatePaletteIndex(CRGBPalette16)>:

const uint8_t g_gradient_palette_count =
  sizeof( g_gradient_palettes) / sizeof( TProgmemRGBGradientPalettePtr );

// Find index of current (target) palette
void updatePaletteIndex(CRGBPalette16 pal){
    2ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2eac:	b09b      	sub	sp, #108	; 0x6c
    2eae:	4b3f      	ldr	r3, [pc, #252]	; (2fac <updatePaletteIndex(CRGBPalette16)+0x104>)
    2eb0:	9309      	str	r3, [sp, #36]	; 0x24
    2eb2:	1e43      	subs	r3, r0, #1
    2eb4:	930a      	str	r3, [sp, #40]	; 0x28
    2eb6:	f100 032f 	add.w	r3, r0, #47	; 0x2f
    2eba:	930b      	str	r3, [sp, #44]	; 0x2c
    2ebc:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 2fb4 <updatePaletteIndex(CRGBPalette16)+0x10c>
  for (int i = 0; i < g_gradient_palette_count; i++){
    2ec0:	2300      	movs	r3, #0
    2ec2:	9308      	str	r3, [sp, #32]
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    2ec4:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    2ec6:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    2eca:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2ecc:	3701      	adds	r7, #1
        } while ( u.index != 255);
    2ece:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2ed0:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    2ed2:	d1f8      	bne.n	2ec6 <updatePaletteIndex(CRGBPalette16)+0x1e>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2ed4:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    2ed8:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    2eda:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    2ede:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    2ee2:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    2ee4:	9206      	str	r2, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    2ee6:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    2eea:	f3c3 4a07 	ubfx	sl, r3, #16, #8

        int indexstart = 0;
    2eee:	2400      	movs	r4, #0
    2ef0:	46c8      	mov	r8, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2ef2:	f858 5f04 	ldr.w	r5, [r8, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2ef6:	f3c5 2707 	ubfx	r7, r5, #8, #8
    2efa:	f3c5 4607 	ubfx	r6, r5, #16, #8
    2efe:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    2f00:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2f04:	9104      	str	r1, [sp, #16]
    2f06:	b2f1      	uxtb	r1, r6
    2f08:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    2f0a:	fa5f f18c 	uxtb.w	r1, ip
    2f0e:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    2f10:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    2f12:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    2f14:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2f16:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2f1a:	aa0d      	add	r2, sp, #52	; 0x34
    2f1c:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    2f1e:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2f22:	fa5f f985 	uxtb.w	r9, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    2f26:	d80c      	bhi.n	2f42 <updatePaletteIndex(CRGBPalette16)+0x9a>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    2f28:	9906      	ldr	r1, [sp, #24]
    2f2a:	458c      	cmp	ip, r1
    2f2c:	dc07      	bgt.n	2f3e <updatePaletteIndex(CRGBPalette16)+0x96>
    2f2e:	290f      	cmp	r1, #15
    2f30:	d005      	beq.n	2f3e <updatePaletteIndex(CRGBPalette16)+0x96>
                    istart8 = lastSlotUsed + 1;
    2f32:	3101      	adds	r1, #1
    2f34:	b2c9      	uxtb	r1, r1
    2f36:	428b      	cmp	r3, r1
    2f38:	9103      	str	r1, [sp, #12]
    2f3a:	bf38      	it	cc
    2f3c:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    2f3e:	b259      	sxtb	r1, r3
    2f40:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2f42:	a90c      	add	r1, sp, #48	; 0x30
    2f44:	9100      	str	r1, [sp, #0]
    2f46:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2f48:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
        g = rhs.g;
    2f4c:	f88d a035 	strb.w	sl, [sp, #53]	; 0x35
        b = rhs.b;
    2f50:	f88d e036 	strb.w	lr, [sp, #54]	; 0x36
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2f54:	f88d 7030 	strb.w	r7, [sp, #48]	; 0x30
        g = rhs.g;
    2f58:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
        b = rhs.b;
    2f5c:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
    2f60:	f000 fbc2 	bl	36e8 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    2f64:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2f66:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    2f6a:	f8dd a014 	ldr.w	sl, [sp, #20]
        b = rhs.b;
    2f6e:	46ce      	mov	lr, r9
    2f70:	d1bf      	bne.n	2ef2 <updatePaletteIndex(CRGBPalette16)+0x4a>
    2f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2f74:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    2f76:	aa0e      	add	r2, sp, #56	; 0x38
    2f78:	e001      	b.n	2f7e <updatePaletteIndex(CRGBPalette16)+0xd6>
    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
    2f7a:	42a3      	cmp	r3, r4
    2f7c:	d00f      	beq.n	2f9e <updatePaletteIndex(CRGBPalette16)+0xf6>
            if( *p != *q) return false;
    2f7e:	f812 1b01 	ldrb.w	r1, [r2], #1
    2f82:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    2f86:	4288      	cmp	r0, r1
    2f88:	d0f7      	beq.n	2f7a <updatePaletteIndex(CRGBPalette16)+0xd2>
    2f8a:	9b08      	ldr	r3, [sp, #32]
    2f8c:	3301      	adds	r3, #1
    2f8e:	2b62      	cmp	r3, #98	; 0x62
    2f90:	9308      	str	r3, [sp, #32]
    2f92:	d008      	beq.n	2fa6 <updatePaletteIndex(CRGBPalette16)+0xfe>
    2f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2f96:	f853 9f04 	ldr.w	r9, [r3, #4]!
    2f9a:	9309      	str	r3, [sp, #36]	; 0x24
    2f9c:	e792      	b.n	2ec4 <updatePaletteIndex(CRGBPalette16)+0x1c>
    if (pal == g_gradient_palettes[i]){
      palette_index = i;
    2f9e:	4b04      	ldr	r3, [pc, #16]	; (2fb0 <updatePaletteIndex(CRGBPalette16)+0x108>)
    2fa0:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2fa4:	701a      	strb	r2, [r3, #0]
      break;
    }
  }
}
    2fa6:	b01b      	add	sp, #108	; 0x6c
    2fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fac:	00006e80 	.word	0x00006e80
    2fb0:	1fff8b49 	.word	0x1fff8b49
    2fb4:	00007b64 	.word	0x00007b64

00002fb8 <shelf_array_setup()>:
//uint8_t shelf4_num_leds = 30;

uint8_t shelf[4][65];
uint8_t shelf_num_leds[4] = { 65, 63, 30, 30 };

void shelf_array_setup() {
    2fb8:	4a12      	ldr	r2, [pc, #72]	; (3004 <shelf_array_setup()+0x4c>)
    2fba:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < 65; i++) {  shelf[0][i] = i; }
    2fbc:	f802 3f01 	strb.w	r3, [r2, #1]!
    2fc0:	3301      	adds	r3, #1
    2fc2:	2b41      	cmp	r3, #65	; 0x41
    2fc4:	d1fa      	bne.n	2fbc <shelf_array_setup()+0x4>
    2fc6:	4a10      	ldr	r2, [pc, #64]	; (3008 <shelf_array_setup()+0x50>)
    2fc8:	237f      	movs	r3, #127	; 0x7f
    2fca:	f102 013f 	add.w	r1, r2, #63	; 0x3f
	for (uint8_t i = 0; i < 63; i++) {  shelf[1][i] = 127 - i; }
    2fce:	f802 3f01 	strb.w	r3, [r2, #1]!
    2fd2:	3b01      	subs	r3, #1
    2fd4:	428a      	cmp	r2, r1
    2fd6:	b2db      	uxtb	r3, r3
    2fd8:	d1f9      	bne.n	2fce <shelf_array_setup()+0x16>
    2fda:	4a0c      	ldr	r2, [pc, #48]	; (300c <shelf_array_setup()+0x54>)
//uint8_t shelf4_num_leds = 30;

uint8_t shelf[4][65];
uint8_t shelf_num_leds[4] = { 65, 63, 30, 30 };

void shelf_array_setup() {
    2fdc:	b410      	push	{r4}
	for (uint8_t i = 0; i < 65; i++) {  shelf[0][i] = i; }
	for (uint8_t i = 0; i < 63; i++) {  shelf[1][i] = 127 - i; }
    2fde:	2380      	movs	r3, #128	; 0x80
    2fe0:	f102 0141 	add.w	r1, r2, #65	; 0x41
    2fe4:	f102 041e 	add.w	r4, r2, #30
	for (uint8_t i = 0; i < 30; i++) {  shelf[2][i] = 128 + i;
    2fe8:	f802 3f01 	strb.w	r3, [r2, #1]!
									    shelf[3][i] = 187 - i; }
    2fec:	f1c3 003b 	rsb	r0, r3, #59	; 0x3b
uint8_t shelf_num_leds[4] = { 65, 63, 30, 30 };

void shelf_array_setup() {
	for (uint8_t i = 0; i < 65; i++) {  shelf[0][i] = i; }
	for (uint8_t i = 0; i < 63; i++) {  shelf[1][i] = 127 - i; }
	for (uint8_t i = 0; i < 30; i++) {  shelf[2][i] = 128 + i;
    2ff0:	42a2      	cmp	r2, r4
    2ff2:	f103 0301 	add.w	r3, r3, #1
									    shelf[3][i] = 187 - i; }
    2ff6:	f801 0f01 	strb.w	r0, [r1, #1]!
    2ffa:	b2db      	uxtb	r3, r3
uint8_t shelf_num_leds[4] = { 65, 63, 30, 30 };

void shelf_array_setup() {
	for (uint8_t i = 0; i < 65; i++) {  shelf[0][i] = i; }
	for (uint8_t i = 0; i < 63; i++) {  shelf[1][i] = 127 - i; }
	for (uint8_t i = 0; i < 30; i++) {  shelf[2][i] = 128 + i;
    2ffc:	d1f4      	bne.n	2fe8 <shelf_array_setup()+0x30>
									    shelf[3][i] = 187 - i; }
}
    2ffe:	bc10      	pop	{r4}
    3000:	4770      	bx	lr
    3002:	bf00      	nop
    3004:	1fff8caf 	.word	0x1fff8caf
    3008:	1fff8cf0 	.word	0x1fff8cf0
    300c:	1fff8d31 	.word	0x1fff8d31

00003010 <setup>:
#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))


void setup() {
  Serial.begin(57600);
  delay(2000); // 2 second delay for recovery
    3010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3014:	f640 31b8 	movw	r1, #3000	; 0xbb8
    3018:	b097      	sub	sp, #92	; 0x5c
    301a:	487c      	ldr	r0, [pc, #496]	; (320c <setup+0x1fc>)
    301c:	f000 ff90 	bl	3f40 <VisualMicroDebug::init(unsigned long)>
    3020:	f44f 4161 	mov.w	r1, #57600	; 0xe100
    3024:	4879      	ldr	r0, [pc, #484]	; (320c <setup+0x1fc>)
    3026:	f000 ff87 	bl	3f38 <VisualMicroDebug::begin(unsigned long)>
    302a:	2101      	movs	r1, #1
    302c:	4877      	ldr	r0, [pc, #476]	; (320c <setup+0x1fc>)
    302e:	f000 ff5d 	bl	3eec <VisualMicroDebug::outPacketStart(bool)>
    3032:	b150      	cbz	r0, 304a <setup+0x3a>
    3034:	2110      	movs	r1, #16
    3036:	4876      	ldr	r0, [pc, #472]	; (3210 <setup+0x200>)
    3038:	f002 fab4 	bl	55a4 <usb_serial_write>
    303c:	4873      	ldr	r0, [pc, #460]	; (320c <setup+0x1fc>)
    303e:	210a      	movs	r1, #10
    3040:	f000 feca 	bl	3dd8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    3044:	4871      	ldr	r0, [pc, #452]	; (320c <setup+0x1fc>)
    3046:	f000 ff75 	bl	3f34 <VisualMicroDebug::outPacketEnd()>
    304a:	2201      	movs	r2, #1
    304c:	2100      	movs	r1, #0
    304e:	486f      	ldr	r0, [pc, #444]	; (320c <setup+0x1fc>)
    3050:	f001 f822 	bl	4098 <VisualMicroDebug::start(bool, bool)>
  
  // tell FastLED about the LED strip configuration
    3054:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    3058:	f001 fa8c 	bl	4574 <delay>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    305c:	486d      	ldr	r0, [pc, #436]	; (3214 <setup+0x204>)
    305e:	6803      	ldr	r3, [r0, #0]
    3060:	f013 0401 	ands.w	r4, r3, #1
    3064:	f000 80ae 	beq.w	31c4 <setup+0x1b4>
    3068:	2300      	movs	r3, #0
    306a:	22bc      	movs	r2, #188	; 0xbc
    306c:	496a      	ldr	r1, [pc, #424]	; (3218 <setup+0x208>)
    306e:	486b      	ldr	r0, [pc, #428]	; (321c <setup+0x20c>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
    3070:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 3240 <setup+0x230>
    3074:	f000 fca4 	bl	39c0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    3078:	4b69      	ldr	r3, [pc, #420]	; (3220 <setup+0x210>)

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    307a:	2201      	movs	r2, #1
    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
        b = (colorcode >>  0) & 0xFF;
    307c:	21f0      	movs	r1, #240	; 0xf0
    307e:	7482      	strb	r2, [r0, #18]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    3080:	25ff      	movs	r5, #255	; 0xff
    3082:	22b4      	movs	r2, #180	; 0xb4
        g = (colorcode >>  8) & 0xFF;
    3084:	24b0      	movs	r4, #176	; 0xb0
    3086:	701a      	strb	r2, [r3, #0]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    3088:	7305      	strb	r5, [r0, #12]
        g = (colorcode >>  8) & 0xFF;
    308a:	7344      	strb	r4, [r0, #13]
        b = (colorcode >>  0) & 0xFF;
    308c:	7381      	strb	r1, [r0, #14]
  // set master brightness control
  FastLED.setBrightness(180);

  shelf_array_setup();

  set_max_power_in_volts_and_milliamps(5, 3000);
    308e:	f7ff ff93 	bl	2fb8 <shelf_array_setup()>

  random16_set_seed(4832);
    3092:	f640 31b8 	movw	r1, #3000	; 0xbb8
    3096:	2005      	movs	r0, #5
    3098:	f000 fe92 	bl	3dc0 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
    309c:	f44f 5397 	mov.w	r3, #4832	; 0x12e0
  random16_add_entropy(analogRead(2));

  //led_mode = EEPROM.read(STARTMODE);
    30a0:	2002      	movs	r0, #2
    30a2:	f8a8 3000 	strh.w	r3, [r8]
    30a6:	f001 f937 	bl	4318 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    30aa:	f8b8 3000 	ldrh.w	r3, [r8]
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    30ae:	4c5d      	ldr	r4, [pc, #372]	; (3224 <setup+0x214>)
    30b0:	4403      	add	r3, r0
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    30b2:	2700      	movs	r7, #0
        fill_gradient( &(entries[0]), 16, c1, c2, c3, c4);
    }

    CRGBPalette16( const CRGB& c1)
    {
        fill_solid( &(entries[0]), 16, c1);
    30b4:	aa09      	add	r2, sp, #36	; 0x24
    30b6:	a80a      	add	r0, sp, #40	; 0x28
    30b8:	2110      	movs	r1, #16
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    30ba:	ad0a      	add	r5, sp, #40	; 0x28
    30bc:	f8a8 3000 	strh.w	r3, [r8]
    30c0:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    30c4:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    30c8:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
        fill_gradient( &(entries[0]), 16, c1, c2, c3, c4);
    }

    CRGBPalette16( const CRGB& c1)
    {
        fill_solid( &(entries[0]), 16, c1);
    30cc:	f000 fadc 	bl	3688 <fill_solid(CRGB*, int, CRGB const&)>
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    30d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    30d2:	f8b8 6000 	ldrh.w	r6, [r8]
    30d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    30d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    30da:	eb06 2e46 	add.w	lr, r6, r6, lsl #9
    30de:	eb06 068e 	add.w	r6, r6, lr, lsl #2
    30e2:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    30e6:	3619      	adds	r6, #25
    30e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    30ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    30ee:	b2b5      	uxth	r5, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    30f0:	eb05 2615 	add.w	r6, r5, r5, lsr #8

  current_palette = CRGBPalette16(CRGB::Black);
  target_palette = g_gradient_palettes[random8(g_gradient_palette_count + 1)];
  current_blending = LINEARBLEND;
}
    30f4:	b2f6      	uxtb	r6, r6
    30f6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    30fa:	eb06 1646 	add.w	r6, r6, r6, lsl #5
    30fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3102:	1236      	asrs	r6, r6, #8
    3104:	4b48      	ldr	r3, [pc, #288]	; (3228 <setup+0x218>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3106:	f8a8 5000 	strh.w	r5, [r8]
    310a:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    310e:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    3112:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    3114:	3701      	adds	r7, #1
        } while ( u.index != 255);
    3116:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    3118:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    311a:	d1f8      	bne.n	310e <setup+0xfe>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    311c:	f8d8 3000 	ldr.w	r3, [r8]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    3120:	9707      	str	r7, [sp, #28]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    3122:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    3126:	ea4f 6913 	mov.w	r9, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    312a:	9206      	str	r2, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    312c:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    3130:	f3c3 4a07 	ubfx	sl, r3, #16, #8

        int indexstart = 0;
    3134:	2400      	movs	r4, #0
    3136:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    3138:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    313c:	483b      	ldr	r0, [pc, #236]	; (322c <setup+0x21c>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    313e:	f3c5 2707 	ubfx	r7, r5, #8, #8
    3142:	f3c5 4607 	ubfx	r6, r5, #16, #8
    3146:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    3148:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    314c:	9104      	str	r1, [sp, #16]
    314e:	b2f1      	uxtb	r1, r6
    3150:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    3152:	fa5f f18c 	uxtb.w	r1, ip
    3156:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    3158:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    315a:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    315c:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    315e:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3162:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    3164:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3168:	fa5f f985 	uxtb.w	r9, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    316c:	d80c      	bhi.n	3188 <setup+0x178>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    316e:	9906      	ldr	r1, [sp, #24]
    3170:	458c      	cmp	ip, r1
    3172:	dc07      	bgt.n	3184 <setup+0x174>
    3174:	290f      	cmp	r1, #15
    3176:	d005      	beq.n	3184 <setup+0x174>
                    istart8 = lastSlotUsed + 1;
    3178:	3101      	adds	r1, #1
    317a:	b2c9      	uxtb	r1, r1
    317c:	428b      	cmp	r3, r1
    317e:	9103      	str	r1, [sp, #12]
    3180:	bf38      	it	cc
    3182:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    3184:	b259      	sxtb	r1, r3
    3186:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3188:	a909      	add	r1, sp, #36	; 0x24
    318a:	9100      	str	r1, [sp, #0]
    318c:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    318e:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
    3192:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        b = rhs.b;
    3196:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    319a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
    319e:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
    31a2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
    31a6:	f000 fa9f 	bl	36e8 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    31aa:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    31ac:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    31b0:	f8dd a014 	ldr.w	sl, [sp, #20]
        b = rhs.b;
    31b4:	46ce      	mov	lr, r9
    31b6:	d1bf      	bne.n	3138 <setup+0x128>

    31b8:	4b1d      	ldr	r3, [pc, #116]	; (3230 <setup+0x220>)
    31ba:	2201      	movs	r2, #1
    31bc:	701a      	strb	r2, [r3, #0]

    31be:	b017      	add	sp, #92	; 0x5c
    31c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    31c4:	f001 f956 	bl	4474 <__cxa_guard_acquire>
    31c8:	2800      	cmp	r0, #0
    31ca:	f43f af4d 	beq.w	3068 <setup+0x58>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    31ce:	4919      	ldr	r1, [pc, #100]	; (3234 <setup+0x224>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    31d0:	4b12      	ldr	r3, [pc, #72]	; (321c <setup+0x20c>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    31d2:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    31d4:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    31d6:	22ff      	movs	r2, #255	; 0xff
    31d8:	2501      	movs	r5, #1
    31da:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    31dc:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    31de:	749d      	strb	r5, [r3, #18]
    31e0:	731a      	strb	r2, [r3, #12]
    31e2:	735a      	strb	r2, [r3, #13]
    31e4:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    31e6:	73da      	strb	r2, [r3, #15]
    31e8:	741a      	strb	r2, [r3, #16]
    31ea:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    31ec:	b160      	cbz	r0, 3208 <setup+0x1f8>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    31ee:	4a12      	ldr	r2, [pc, #72]	; (3238 <setup+0x228>)
    31f0:	6811      	ldr	r1, [r2, #0]
    31f2:	b101      	cbz	r1, 31f6 <setup+0x1e6>
    31f4:	608b      	str	r3, [r1, #8]
        m_pTail = this;
    31f6:	6013      	str	r3, [r2, #0]
		// CORE_PIN14_CONFIG = gState.pins[3];
	}


public:
	ARMHardwareSPIOutput() { m_pSelect = NULL; }
    31f8:	2200      	movs	r2, #0
		mSPI.writeWord(w);
#endif
	}

public:
	APA102Controller() {}
    31fa:	4910      	ldr	r1, [pc, #64]	; (323c <setup+0x22c>)
    31fc:	4805      	ldr	r0, [pc, #20]	; (3214 <setup+0x204>)
    31fe:	619a      	str	r2, [r3, #24]
    3200:	6019      	str	r1, [r3, #0]
    3202:	f001 f93d 	bl	4480 <__cxa_guard_release>
    3206:	e72f      	b.n	3068 <setup+0x58>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    3208:	600b      	str	r3, [r1, #0]
    320a:	e7f0      	b.n	31ee <setup+0x1de>
    320c:	1fff8e0c 	.word	0x1fff8e0c
    3210:	000062b8 	.word	0x000062b8
    3214:	1fff8838 	.word	0x1fff8838
    3218:	1fff8884 	.word	0x1fff8884
    321c:	1fff883c 	.word	0x1fff883c
    3220:	1fff8de4 	.word	0x1fff8de4
    3224:	1fff8b18 	.word	0x1fff8b18
    3228:	00006e80 	.word	0x00006e80
    322c:	1fff8db4 	.word	0x1fff8db4
    3230:	1fff8b6c 	.word	0x1fff8b6c
    3234:	1fff8df4 	.word	0x1fff8df4
    3238:	1fff8e04 	.word	0x1fff8e04
    323c:	00005fd4 	.word	0x00005fd4
    3240:	1fff875c 	.word	0x1fff875c

00003244 <loop>:


void loop()
{
  // Blend Palettes
    3244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3248:	f8df 8254 	ldr.w	r8, [pc, #596]	; 34a0 <loop+0x25c>
    324c:	b0a3      	sub	sp, #140	; 0x8c
    324e:	f8d8 3000 	ldr.w	r3, [r8]
    3252:	9308      	str	r3, [sp, #32]
	return ret;
    3254:	9b08      	ldr	r3, [sp, #32]
    3256:	b92b      	cbnz	r3, 3264 <loop+0x20>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3258:	f8d8 3000 	ldr.w	r3, [r8]
    325c:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    325e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3260:	2b01      	cmp	r3, #1
    3262:	d921      	bls.n	32a8 <loop+0x64>
    3264:	4878      	ldr	r0, [pc, #480]	; (3448 <loop+0x204>)
    3266:	4c79      	ldr	r4, [pc, #484]	; (344c <loop+0x208>)
    3268:	f000 fdc8 	bl	3dfc <VisualMicroDebug::DBG_Millis()>
    326c:	6822      	ldr	r2, [r4, #0]
    326e:	4978      	ldr	r1, [pc, #480]	; (3450 <loop+0x20c>)
    3270:	4290      	cmp	r0, r2
    3272:	4603      	mov	r3, r0
    3274:	6008      	str	r0, [r1, #0]
    3276:	f0c0 80e5 	bcc.w	3444 <loop+0x200>
    327a:	1a9a      	subs	r2, r3, r2
    327c:	2af9      	cmp	r2, #249	; 0xf9
    327e:	d913      	bls.n	32a8 <loop+0x64>
    3280:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    3284:	4870      	ldr	r0, [pc, #448]	; (3448 <loop+0x204>)
    3286:	6023      	str	r3, [r4, #0]
    3288:	f000 fdc2 	bl	3e10 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>
    328c:	2101      	movs	r1, #1
    328e:	486e      	ldr	r0, [pc, #440]	; (3448 <loop+0x204>)
    3290:	f000 fe2c 	bl	3eec <VisualMicroDebug::outPacketStart(bool)>
    3294:	2800      	cmp	r0, #0
    3296:	f040 81bc 	bne.w	3612 <loop+0x3ce>
    329a:	486b      	ldr	r0, [pc, #428]	; (3448 <loop+0x204>)
    329c:	2105      	movs	r1, #5
    329e:	f000 fd9b 	bl	3dd8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    32a2:	4869      	ldr	r0, [pc, #420]	; (3448 <loop+0x204>)
    32a4:	f000 fe18 	bl	3ed8 <VisualMicroDebug::OnBreakPointEnd()>
  EVERY_N_MILLISECONDS(50) {
    nblendPaletteTowardPalette( current_palette, target_palette, 24);
  }
    32a8:	4d6a      	ldr	r5, [pc, #424]	; (3454 <loop+0x210>)
    32aa:	682b      	ldr	r3, [r5, #0]
    32ac:	07d8      	lsls	r0, r3, #31
    32ae:	f140 8089 	bpl.w	33c4 <loop+0x180>
    32b2:	4c69      	ldr	r4, [pc, #420]	; (3458 <loop+0x214>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    32b4:	f8d8 3000 	ldr.w	r3, [r8]
    32b8:	930d      	str	r3, [sp, #52]	; 0x34
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    32ba:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    32be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    32c0:	1a5b      	subs	r3, r3, r1
    32c2:	429a      	cmp	r2, r3
    32c4:	f240 808f 	bls.w	33e6 <loop+0x1a2>

  // Change current palette
  EVERY_N_SECONDS(25) {
	  if (use_palette) {
		  updatePaletteIndex(target_palette);
    32c8:	4d64      	ldr	r5, [pc, #400]	; (345c <loop+0x218>)
    32ca:	682b      	ldr	r3, [r5, #0]
    32cc:	07d9      	lsls	r1, r3, #31
    32ce:	f140 8099 	bpl.w	3404 <loop+0x1c0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    32d2:	f8d8 3000 	ldr.w	r3, [r8]
    32d6:	4c62      	ldr	r4, [pc, #392]	; (3460 <loop+0x21c>)
    32d8:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    32da:	9b10      	ldr	r3, [sp, #64]	; 0x40
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    32dc:	4861      	ldr	r0, [pc, #388]	; (3464 <loop+0x220>)
    32de:	8822      	ldrh	r2, [r4, #0]
    32e0:	8861      	ldrh	r1, [r4, #2]
    32e2:	fba0 0303 	umull	r0, r3, r0, r3
    32e6:	ebc2 1393 	rsb	r3, r2, r3, lsr #6
    32ea:	b29b      	uxth	r3, r3
    32ec:	4299      	cmp	r1, r3
    32ee:	d80d      	bhi.n	330c <loop+0xc8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    32f0:	f8d8 3000 	ldr.w	r3, [r8]
    32f4:	930f      	str	r3, [sp, #60]	; 0x3c
	return ret;
    32f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    32f8:	495a      	ldr	r1, [pc, #360]	; (3464 <loop+0x220>)
		  palette_index = random8(g_gradient_palette_count);
    32fa:	4a5b      	ldr	r2, [pc, #364]	; (3468 <loop+0x224>)
    32fc:	fba1 1303 	umull	r1, r3, r1, r3
    3300:	7812      	ldrb	r2, [r2, #0]
    3302:	099b      	lsrs	r3, r3, #6
    3304:	8023      	strh	r3, [r4, #0]
    3306:	2a00      	cmp	r2, #0
    3308:	f040 80cc 	bne.w	34a4 <loop+0x260>
  }

  // Change mode 
  EVERY_N_SECONDS(20) {
	  mode_change = 1;
      fill_solid(leds,NUM_LEDS,CRGB::Black);
    330c:	4d57      	ldr	r5, [pc, #348]	; (346c <loop+0x228>)
    330e:	682b      	ldr	r3, [r5, #0]
    3310:	07da      	lsls	r2, r3, #31
    3312:	f140 808c 	bpl.w	342e <loop+0x1ea>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3316:	f8d8 3000 	ldr.w	r3, [r8]
    331a:	4c55      	ldr	r4, [pc, #340]	; (3470 <loop+0x22c>)
    331c:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    331e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3320:	4850      	ldr	r0, [pc, #320]	; (3464 <loop+0x220>)
    3322:	8822      	ldrh	r2, [r4, #0]
    3324:	8861      	ldrh	r1, [r4, #2]
    3326:	fba0 0303 	umull	r0, r3, r0, r3
    332a:	ebc2 1393 	rsb	r3, r2, r3, lsr #6
    332e:	b29b      	uxth	r3, r3
    3330:	4299      	cmp	r1, r3
    3332:	d824      	bhi.n	337e <loop+0x13a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3334:	f8d8 3000 	ldr.w	r3, [r8]
    3338:	9312      	str	r3, [sp, #72]	; 0x48
	return ret;
    333a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    333c:	4a49      	ldr	r2, [pc, #292]	; (3464 <loop+0x220>)
	  //current_mode_number = random8(ARRAY_SIZE(modes));
    333e:	4e4d      	ldr	r6, [pc, #308]	; (3474 <loop+0x230>)
	  current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
    3340:	484d      	ldr	r0, [pc, #308]	; (3478 <loop+0x234>)
    3342:	fba2 2303 	umull	r2, r3, r2, r3
    3346:	099b      	lsrs	r3, r3, #6
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    3348:	2500      	movs	r5, #0

  // Change mode 
  EVERY_N_SECONDS(20) {
	  mode_change = 1;
      fill_solid(leds,NUM_LEDS,CRGB::Black);
	  //current_mode_number = random8(ARRAY_SIZE(modes));
    334a:	2701      	movs	r7, #1
	  current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
    334c:	aa16      	add	r2, sp, #88	; 0x58
    334e:	21bc      	movs	r1, #188	; 0xbc
    3350:	8023      	strh	r3, [r4, #0]

  // Change mode 
  EVERY_N_SECONDS(20) {
	  mode_change = 1;
      fill_solid(leds,NUM_LEDS,CRGB::Black);
	  //current_mode_number = random8(ARRAY_SIZE(modes));
    3352:	7037      	strb	r7, [r6, #0]
    3354:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
    3358:	f88d 5059 	strb.w	r5, [sp, #89]	; 0x59
    335c:	f88d 505a 	strb.w	r5, [sp, #90]	; 0x5a
	  current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
    3360:	f000 f992 	bl	3688 <fill_solid(CRGB*, int, CRGB const&)>
  }

    3364:	4945      	ldr	r1, [pc, #276]	; (347c <loop+0x238>)
    3366:	4b46      	ldr	r3, [pc, #280]	; (3480 <loop+0x23c>)
    3368:	780a      	ldrb	r2, [r1, #0]
    336a:	443a      	add	r2, r7
    336c:	fba3 0302 	umull	r0, r3, r3, r2
    3370:	08db      	lsrs	r3, r3, #3
    3372:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    3376:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    337a:	1ad3      	subs	r3, r2, r3
    337c:	700b      	strb	r3, [r1, #0]
  // Send values to LEDs
  EVERY_N_MILLIS_I(this_timer, this_delay) {
	  this_timer.setPeriod(this_delay);
	  modes[current_mode_number]();
    337e:	4d41      	ldr	r5, [pc, #260]	; (3484 <loop+0x240>)
    3380:	682b      	ldr	r3, [r5, #0]
    3382:	07db      	lsls	r3, r3, #31
    3384:	d549      	bpl.n	341a <loop+0x1d6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3386:	f8d8 3000 	ldr.w	r3, [r8]
    338a:	4c3f      	ldr	r4, [pc, #252]	; (3488 <loop+0x244>)
    338c:	9316      	str	r3, [sp, #88]	; 0x58
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    338e:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    3392:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3394:	1a5b      	subs	r3, r3, r1
    3396:	4293      	cmp	r3, r2
    3398:	d30d      	bcc.n	33b6 <loop+0x172>
  }

    339a:	4b38      	ldr	r3, [pc, #224]	; (347c <loop+0x238>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    339c:	f8d8 1000 	ldr.w	r1, [r8]

  // Send values to LEDs
  EVERY_N_MILLIS_I(this_timer, this_delay) {
	  this_timer.setPeriod(this_delay);
	  modes[current_mode_number]();
  }
    33a0:	4a3a      	ldr	r2, [pc, #232]	; (348c <loop+0x248>)

    33a2:	7818      	ldrb	r0, [r3, #0]
    33a4:	9115      	str	r1, [sp, #84]	; 0x54
    33a6:	4b3a      	ldr	r3, [pc, #232]	; (3490 <loop+0x24c>)
	return ret;
    33a8:	9915      	ldr	r1, [sp, #84]	; 0x54
    33aa:	6812      	ldr	r2, [r2, #0]
    33ac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    33b0:	e884 0006 	stmia.w	r4, {r1, r2}
    33b4:	4798      	blx	r3
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    33b6:	4837      	ldr	r0, [pc, #220]	; (3494 <loop+0x250>)
    33b8:	7801      	ldrb	r1, [r0, #0]
    33ba:	f000 fb53 	bl	3a64 <CFastLED::show(unsigned char)>
  // Show LEDs
  FastLED.show();
}
    33be:	b023      	add	sp, #140	; 0x8c
    33c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
void loop()
{
  // Blend Palettes
  EVERY_N_MILLISECONDS(50) {
    nblendPaletteTowardPalette( current_palette, target_palette, 24);
  }
    33c4:	4628      	mov	r0, r5
    33c6:	f001 f855 	bl	4474 <__cxa_guard_acquire>
    33ca:	2800      	cmp	r0, #0
    33cc:	f040 80e8 	bne.w	35a0 <loop+0x35c>
    33d0:	4c21      	ldr	r4, [pc, #132]	; (3458 <loop+0x214>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    33d2:	f8d8 3000 	ldr.w	r3, [r8]
    33d6:	930d      	str	r3, [sp, #52]	; 0x34
    33d8:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    33dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    33de:	1a5b      	subs	r3, r3, r1
    33e0:	4293      	cmp	r3, r2
    33e2:	f4ff af71 	bcc.w	32c8 <loop+0x84>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    33e6:	f8d8 3000 	ldr.w	r3, [r8]
    33ea:	930c      	str	r3, [sp, #48]	; 0x30
	return ret;
    33ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30

  // Change current palette
  EVERY_N_SECONDS(25) {
	  if (use_palette) {
		  updatePaletteIndex(target_palette);
    33ee:	4d1b      	ldr	r5, [pc, #108]	; (345c <loop+0x218>)
{
  // Blend Palettes
  EVERY_N_MILLISECONDS(50) {
    nblendPaletteTowardPalette( current_palette, target_palette, 24);
  }

    33f0:	4929      	ldr	r1, [pc, #164]	; (3498 <loop+0x254>)
    33f2:	6023      	str	r3, [r4, #0]
    33f4:	4829      	ldr	r0, [pc, #164]	; (349c <loop+0x258>)
    33f6:	2218      	movs	r2, #24
    33f8:	f000 faba 	bl	3970 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
  // Change current palette
  EVERY_N_SECONDS(25) {
	  if (use_palette) {
		  updatePaletteIndex(target_palette);
    33fc:	682b      	ldr	r3, [r5, #0]
    33fe:	07d9      	lsls	r1, r3, #31
    3400:	f53f af67 	bmi.w	32d2 <loop+0x8e>
    3404:	4628      	mov	r0, r5
    3406:	f001 f835 	bl	4474 <__cxa_guard_acquire>
    340a:	2800      	cmp	r0, #0
    340c:	f040 80d4 	bne.w	35b8 <loop+0x374>
    3410:	4c13      	ldr	r4, [pc, #76]	; (3460 <loop+0x21c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3412:	f8d8 3000 	ldr.w	r3, [r8]
    3416:	9310      	str	r3, [sp, #64]	; 0x40
    3418:	e75f      	b.n	32da <loop+0x96>
  }

  // Send values to LEDs
  EVERY_N_MILLIS_I(this_timer, this_delay) {
	  this_timer.setPeriod(this_delay);
	  modes[current_mode_number]();
    341a:	4628      	mov	r0, r5
    341c:	f001 f82a 	bl	4474 <__cxa_guard_acquire>
    3420:	2800      	cmp	r0, #0
    3422:	f040 80e9 	bne.w	35f8 <loop+0x3b4>
    3426:	4c18      	ldr	r4, [pc, #96]	; (3488 <loop+0x244>)
    3428:	f8d8 3000 	ldr.w	r3, [r8]
    342c:	e7ae      	b.n	338c <loop+0x148>
  }

  // Change mode 
  EVERY_N_SECONDS(20) {
	  mode_change = 1;
      fill_solid(leds,NUM_LEDS,CRGB::Black);
    342e:	4628      	mov	r0, r5
    3430:	f001 f820 	bl	4474 <__cxa_guard_acquire>
    3434:	2800      	cmp	r0, #0
    3436:	f040 80cf 	bne.w	35d8 <loop+0x394>
    343a:	4c0d      	ldr	r4, [pc, #52]	; (3470 <loop+0x22c>)
    343c:	f8d8 3000 	ldr.w	r3, [r8]
    3440:	9313      	str	r3, [sp, #76]	; 0x4c
    3442:	e76c      	b.n	331e <loop+0xda>



void loop()
{
  // Blend Palettes
    3444:	6023      	str	r3, [r4, #0]
    3446:	e72f      	b.n	32a8 <loop+0x64>
    3448:	1fff8e0c 	.word	0x1fff8e0c
    344c:	1fff8b60 	.word	0x1fff8b60
    3450:	1fff8b74 	.word	0x1fff8b74
    3454:	1fff8b50 	.word	0x1fff8b50
    3458:	1fff8b0c 	.word	0x1fff8b0c
    345c:	1fff8b54 	.word	0x1fff8b54
    3460:	1fff8878 	.word	0x1fff8878
    3464:	10624dd3 	.word	0x10624dd3
    3468:	1fff871e 	.word	0x1fff871e
    346c:	1fff8ac0 	.word	0x1fff8ac0
    3470:	1fff887c 	.word	0x1fff887c
    3474:	1fff8724 	.word	0x1fff8724
    3478:	1fff8884 	.word	0x1fff8884
    347c:	1fff8ac5 	.word	0x1fff8ac5
    3480:	ba2e8ba3 	.word	0xba2e8ba3
    3484:	1fff8ab8 	.word	0x1fff8ab8
    3488:	1fff8b64 	.word	0x1fff8b64
    348c:	1fff8720 	.word	0x1fff8720
    3490:	1fff872c 	.word	0x1fff872c
    3494:	1fff8de4 	.word	0x1fff8de4
    3498:	1fff8db4 	.word	0x1fff8db4
    349c:	1fff8b18 	.word	0x1fff8b18
    34a0:	1fff8e5c 	.word	0x1fff8e5c
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };

    CRGBPalette16( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    34a4:	4d67      	ldr	r5, [pc, #412]	; (3644 <loop+0x400>)
    34a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    34a8:	ac16      	add	r4, sp, #88	; 0x58
    34aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    34ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    34ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    34b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    34b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // Change current palette
  EVERY_N_SECONDS(25) {
	  if (use_palette) {
		  updatePaletteIndex(target_palette);
		  palette_index = random8(g_gradient_palette_count);
		  target_palette = g_gradient_palettes[palette_index];
    34b8:	a816      	add	r0, sp, #88	; 0x58
    34ba:	f7ff fcf5 	bl	2ea8 <updatePaletteIndex(CRGBPalette16)>
    34be:	4962      	ldr	r1, [pc, #392]	; (3648 <loop+0x404>)
	  }
  }
    34c0:	4c62      	ldr	r4, [pc, #392]	; (364c <loop+0x408>)
    34c2:	880b      	ldrh	r3, [r1, #0]
  EVERY_N_SECONDS(25) {
	  if (use_palette) {
		  updatePaletteIndex(target_palette);
		  palette_index = random8(g_gradient_palette_count);
		  target_palette = g_gradient_palettes[palette_index];
	  }
    34c4:	4862      	ldr	r0, [pc, #392]	; (3650 <loop+0x40c>)
    34c6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    34ca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    34ce:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    34d2:	3319      	adds	r3, #25
    34d4:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    34d6:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    34da:	b2d2      	uxtb	r2, r2
    34dc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    34e0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    34e4:	11d2      	asrs	r2, r2, #7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    34e6:	800b      	strh	r3, [r1, #0]
  }
    34e8:	f854 9022 	ldr.w	r9, [r4, r2, lsl #2]
  EVERY_N_SECONDS(25) {
	  if (use_palette) {
		  updatePaletteIndex(target_palette);
		  palette_index = random8(g_gradient_palette_count);
		  target_palette = g_gradient_palettes[palette_index];
	  }
    34ec:	7002      	strb	r2, [r0, #0]
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    34ee:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    34f0:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    34f4:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    34f6:	3701      	adds	r7, #1
        } while ( u.index != 255);
    34f8:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    34fa:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    34fc:	d1f8      	bne.n	34f0 <loop+0x2ac>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    34fe:	f8d9 3000 	ldr.w	r3, [r9]
    3502:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
    3504:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    3508:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    350c:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    3510:	0e1b      	lsrs	r3, r3, #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    3512:	9206      	str	r2, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    3514:	9303      	str	r3, [sp, #12]

        int indexstart = 0;
    3516:	2400      	movs	r4, #0
    3518:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    351a:	f859 5f04 	ldr.w	r5, [r9, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    351e:	4849      	ldr	r0, [pc, #292]	; (3644 <loop+0x400>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3520:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    3524:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3528:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    352c:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    352e:	b2f9      	uxtb	r1, r7
    3530:	f3c5 6507 	ubfx	r5, r5, #24, #8
    3534:	9104      	str	r1, [sp, #16]
    3536:	b2e9      	uxtb	r1, r5
    3538:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    353a:	fa5f f18c 	uxtb.w	r1, ip
    353e:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
    3540:	9907      	ldr	r1, [sp, #28]
    3542:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3544:	aa16      	add	r2, sp, #88	; 0x58
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    3546:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    354a:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    354e:	d80c      	bhi.n	356a <loop+0x326>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    3550:	9906      	ldr	r1, [sp, #24]
    3552:	458c      	cmp	ip, r1
    3554:	dc07      	bgt.n	3566 <loop+0x322>
    3556:	290f      	cmp	r1, #15
    3558:	d005      	beq.n	3566 <loop+0x322>
                    istart8 = lastSlotUsed + 1;
    355a:	3101      	adds	r1, #1
    355c:	b2c9      	uxtb	r1, r1
    355e:	428b      	cmp	r3, r1
    3560:	9102      	str	r1, [sp, #8]
    3562:	bf38      	it	cc
    3564:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    3566:	b259      	sxtb	r1, r3
    3568:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    356a:	a915      	add	r1, sp, #84	; 0x54
    356c:	9100      	str	r1, [sp, #0]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    356e:	f88d e059 	strb.w	lr, [sp, #89]	; 0x59
    3572:	9902      	ldr	r1, [sp, #8]
        b = rhs.b;
    3574:	f89d e00c 	ldrb.w	lr, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3578:	f88d b058 	strb.w	fp, [sp, #88]	; 0x58
        g = rhs.g;
        b = rhs.b;
    357c:	f88d e05a 	strb.w	lr, [sp, #90]	; 0x5a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3580:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
        g = rhs.g;
    3584:	f88d 6055 	strb.w	r6, [sp, #85]	; 0x55
        b = rhs.b;
    3588:	f88d 5056 	strb.w	r5, [sp, #86]	; 0x56
    358c:	f000 f8ac 	bl	36e8 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    3590:	9b05      	ldr	r3, [sp, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3592:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    3596:	9303      	str	r3, [sp, #12]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    3598:	2cff      	cmp	r4, #255	; 0xff

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    359a:	46d6      	mov	lr, sl
    359c:	d1bd      	bne.n	351a <loop+0x2d6>
    359e:	e6b5      	b.n	330c <loop+0xc8>
    35a0:	f8d8 3000 	ldr.w	r3, [r8]
    35a4:	4c2b      	ldr	r4, [pc, #172]	; (3654 <loop+0x410>)
    35a6:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    35a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    35aa:	6023      	str	r3, [r4, #0]
    35ac:	2332      	movs	r3, #50	; 0x32
void loop()
{
  // Blend Palettes
  EVERY_N_MILLISECONDS(50) {
    nblendPaletteTowardPalette( current_palette, target_palette, 24);
  }
    35ae:	4628      	mov	r0, r5
    35b0:	6063      	str	r3, [r4, #4]
    35b2:	f000 ff65 	bl	4480 <__cxa_guard_release>
    35b6:	e70c      	b.n	33d2 <loop+0x18e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    35b8:	f8d8 3000 	ldr.w	r3, [r8]
    35bc:	930e      	str	r3, [sp, #56]	; 0x38
	return ret;
    35be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    35c0:	4a25      	ldr	r2, [pc, #148]	; (3658 <loop+0x414>)
    35c2:	4c26      	ldr	r4, [pc, #152]	; (365c <loop+0x418>)
    35c4:	fba2 2303 	umull	r2, r3, r2, r3
    35c8:	099b      	lsrs	r3, r3, #6
    35ca:	2219      	movs	r2, #25

  // Change current palette
  EVERY_N_SECONDS(25) {
	  if (use_palette) {
		  updatePaletteIndex(target_palette);
    35cc:	4628      	mov	r0, r5
    35ce:	8023      	strh	r3, [r4, #0]
    35d0:	8062      	strh	r2, [r4, #2]
    35d2:	f000 ff55 	bl	4480 <__cxa_guard_release>
    35d6:	e71c      	b.n	3412 <loop+0x1ce>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    35d8:	f8d8 3000 	ldr.w	r3, [r8]
    35dc:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    35de:	9b11      	ldr	r3, [sp, #68]	; 0x44
    35e0:	4a1d      	ldr	r2, [pc, #116]	; (3658 <loop+0x414>)
    35e2:	4c1f      	ldr	r4, [pc, #124]	; (3660 <loop+0x41c>)
    35e4:	fba2 2303 	umull	r2, r3, r2, r3
    35e8:	099b      	lsrs	r3, r3, #6
    35ea:	2214      	movs	r2, #20
  }

  // Change mode 
  EVERY_N_SECONDS(20) {
	  mode_change = 1;
      fill_solid(leds,NUM_LEDS,CRGB::Black);
    35ec:	4628      	mov	r0, r5
    35ee:	8023      	strh	r3, [r4, #0]
    35f0:	8062      	strh	r2, [r4, #2]
    35f2:	f000 ff45 	bl	4480 <__cxa_guard_release>
    35f6:	e721      	b.n	343c <loop+0x1f8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    35f8:	f8d8 2000 	ldr.w	r2, [r8]
  }

  // Send values to LEDs
  EVERY_N_MILLIS_I(this_timer, this_delay) {
	  this_timer.setPeriod(this_delay);
	  modes[current_mode_number]();
    35fc:	4b19      	ldr	r3, [pc, #100]	; (3664 <loop+0x420>)
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    35fe:	4c1a      	ldr	r4, [pc, #104]	; (3668 <loop+0x424>)
    3600:	9214      	str	r2, [sp, #80]	; 0x50
	return ret;
    3602:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3604:	681b      	ldr	r3, [r3, #0]
    3606:	6022      	str	r2, [r4, #0]
    3608:	4628      	mov	r0, r5
    360a:	6063      	str	r3, [r4, #4]
    360c:	f000 ff38 	bl	4480 <__cxa_guard_release>
    3610:	e70a      	b.n	3428 <loop+0x1e4>



void loop()
{
  // Blend Palettes
    3612:	2101      	movs	r1, #1
    3614:	4815      	ldr	r0, [pc, #84]	; (366c <loop+0x428>)
    3616:	f000 fc0d 	bl	3e34 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>
    361a:	2101      	movs	r1, #1
    361c:	4814      	ldr	r0, [pc, #80]	; (3670 <loop+0x42c>)
    361e:	f001 ffc1 	bl	55a4 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3622:	f8d8 3000 	ldr.w	r3, [r8]
    3626:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    3628:	990a      	ldr	r1, [sp, #40]	; 0x28

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    362a:	4812      	ldr	r0, [pc, #72]	; (3674 <loop+0x430>)
    362c:	2300      	movs	r3, #0
    362e:	220a      	movs	r2, #10
    3630:	f002 f9cc 	bl	59cc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3634:	480d      	ldr	r0, [pc, #52]	; (366c <loop+0x428>)
    3636:	f000 fc41 	bl	3ebc <VisualMicroDebug::OnBreakPointPrintEnd()>
    363a:	480c      	ldr	r0, [pc, #48]	; (366c <loop+0x428>)
    363c:	f000 fc7a 	bl	3f34 <VisualMicroDebug::outPacketEnd()>
    3640:	e62b      	b.n	329a <loop+0x56>
    3642:	bf00      	nop
    3644:	1fff8db4 	.word	0x1fff8db4
    3648:	1fff875c 	.word	0x1fff875c
    364c:	00006e80 	.word	0x00006e80
    3650:	1fff8b49 	.word	0x1fff8b49
    3654:	1fff8b0c 	.word	0x1fff8b0c
    3658:	10624dd3 	.word	0x10624dd3
    365c:	1fff8878 	.word	0x1fff8878
    3660:	1fff887c 	.word	0x1fff887c
    3664:	1fff8720 	.word	0x1fff8720
    3668:	1fff8b64 	.word	0x1fff8b64
    366c:	1fff8e0c 	.word	0x1fff8e0c
    3670:	000062cc 	.word	0x000062cc
    3674:	1fff8764 	.word	0x1fff8764

00003678 <_GLOBAL__sub_I_palette_index>:
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    3678:	4b02      	ldr	r3, [pc, #8]	; (3684 <_GLOBAL__sub_I_palette_index+0xc>)
    367a:	2200      	movs	r2, #0
    367c:	701a      	strb	r2, [r3, #0]
    367e:	705a      	strb	r2, [r3, #1]
    3680:	709a      	strb	r2, [r3, #2]
    3682:	4770      	bx	lr
    3684:	1fff8be8 	.word	0x1fff8be8

00003688 <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    3688:	2900      	cmp	r1, #0
    368a:	dd0b      	ble.n	36a4 <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    368c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3690:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3692:	7813      	ldrb	r3, [r2, #0]
    3694:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    3696:	7853      	ldrb	r3, [r2, #1]
    3698:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    369a:	7893      	ldrb	r3, [r2, #2]
    369c:	7083      	strb	r3, [r0, #2]
    369e:	3003      	adds	r0, #3
    36a0:	4288      	cmp	r0, r1
    36a2:	d1f6      	bne.n	3692 <fill_solid(CRGB*, int, CRGB const&)+0xa>
    36a4:	4770      	bx	lr
    36a6:	bf00      	nop

000036a8 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>:
// }

void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    36a8:	b570      	push	{r4, r5, r6, lr}
    36aa:	b082      	sub	sp, #8
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    36ac:	25ff      	movs	r5, #255	; 0xff
    hsv.sat = 240;
    36ae:	24f0      	movs	r4, #240	; 0xf0
    for( int i = 0; i < numToFill; i++) {
    36b0:	2900      	cmp	r1, #0
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    CHSV hsv;
    hsv.hue = initialhue;
    36b2:	f88d 2004 	strb.w	r2, [sp, #4]
    hsv.val = 255;
    36b6:	f88d 5006 	strb.w	r5, [sp, #6]
    hsv.sat = 240;
    36ba:	f88d 4005 	strb.w	r4, [sp, #5]
    for( int i = 0; i < numToFill; i++) {
    36be:	dd10      	ble.n	36e2 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x3a>
    36c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    36c4:	461e      	mov	r6, r3
    36c6:	4604      	mov	r4, r0
    36c8:	1845      	adds	r5, r0, r1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    36ca:	4621      	mov	r1, r4
    36cc:	a801      	add	r0, sp, #4
    36ce:	f000 fa39 	bl	3b44 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    36d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
    36d6:	3403      	adds	r4, #3
    36d8:	4432      	add	r2, r6
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    36da:	42ac      	cmp	r4, r5
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    36dc:	f88d 2004 	strb.w	r2, [sp, #4]
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    36e0:	d1f3      	bne.n	36ca <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x22>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    }
}
    36e2:	b002      	add	sp, #8
    36e4:	bd70      	pop	{r4, r5, r6, pc}
    36e6:	bf00      	nop

000036e8 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    36e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    36ec:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    36ee:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    36f0:	d352      	bcc.n	3798 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    36f2:	f896 e000 	ldrb.w	lr, [r6]
    36f6:	7815      	ldrb	r5, [r2, #0]
    36f8:	7877      	ldrb	r7, [r6, #1]
    36fa:	f896 8002 	ldrb.w	r8, [r6, #2]
    36fe:	7854      	ldrb	r4, [r2, #1]
    3700:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    3704:	ebc1 0b03 	rsb	fp, r1, r3

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    3708:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    370c:	ebc4 0a07 	rsb	sl, r4, r7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    3710:	ebcc 0608 	rsb	r6, ip, r8

    uint16_t pixeldistance = endpos - startpos;
    3714:	fa1f f28b 	uxth.w	r2, fp

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    3718:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    371c:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    3720:	01f6      	lsls	r6, r6, #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    3722:	b3b2      	cbz	r2, 3792 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    3724:	fa0f fb82 	sxth.w	fp, r2

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    3728:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    372c:	fb9a fafb 	sdiv	sl, sl, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    3730:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    3734:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    3738:	fb96 fbfb 	sdiv	fp, r6, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    373c:	4299      	cmp	r1, r3
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;
    373e:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    3742:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    3746:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    374a:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    374e:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    3752:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    3756:	ea4f 220c 	mov.w	r2, ip, lsl #8
    for( uint16_t i = startpos; i <= endpos; i++) {
    375a:	d818      	bhi.n	378e <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    375c:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    3760:	3101      	adds	r1, #1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    3762:	19c6      	adds	r6, r0, r7
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    3764:	b289      	uxth	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3766:	ea4f 2925 	mov.w	r9, r5, asr #8
        g = rhs.g;
    376a:	ea4f 2824 	mov.w	r8, r4, asr #8
        b = rhs.b;
    376e:	ea4f 2c22 	mov.w	ip, r2, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    3772:	4475      	add	r5, lr
        g88 += gdelta87;
    3774:	4454      	add	r4, sl
        b88 += bdelta87;
    3776:	445a      	add	r2, fp
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    3778:	428b      	cmp	r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    377a:	f800 9007 	strb.w	r9, [r0, r7]
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    377e:	b2ad      	uxth	r5, r5
        g = rhs.g;
    3780:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    3784:	b2a4      	uxth	r4, r4
        b = rhs.b;
    3786:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    378a:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    378c:	d2e6      	bcs.n	375c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    378e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3792:	f04f 0b01 	mov.w	fp, #1
    3796:	e7c7      	b.n	3728 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    3798:	4689      	mov	r9, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    379a:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    379c:	f892 e000 	ldrb.w	lr, [r2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    37a0:	7874      	ldrb	r4, [r6, #1]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    37a2:	7857      	ldrb	r7, [r2, #1]
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    37a4:	f896 c002 	ldrb.w	ip, [r6, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    37a8:	f892 8002 	ldrb.w	r8, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    37ac:	7015      	strb	r5, [r2, #0]
    37ae:	4619      	mov	r1, r3
    37b0:	f886 e000 	strb.w	lr, [r6]
    37b4:	464b      	mov	r3, r9
        g = rhs.g;
    37b6:	7054      	strb	r4, [r2, #1]
    37b8:	7077      	strb	r7, [r6, #1]
        b = rhs.b;
    37ba:	f882 c002 	strb.w	ip, [r2, #2]
    37be:	f886 8002 	strb.w	r8, [r6, #2]
    37c2:	e79f      	b.n	3704 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1c>

000037c4 <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    37c4:	b309      	cbz	r1, 380a <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    37c6:	b430      	push	{r4, r5}
    37c8:	1e4d      	subs	r5, r1, #1
    37ca:	b2ad      	uxth	r5, r5
    37cc:	43d2      	mvns	r2, r2
    37ce:	3501      	adds	r5, #1
    37d0:	b2d2      	uxtb	r2, r2
    37d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    37d6:	4405      	add	r5, r0
    37d8:	3201      	adds	r2, #1
    37da:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    37dc:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    37e0:	fb02 f303 	mul.w	r3, r2, r3
    37e4:	121b      	asrs	r3, r3, #8
    37e6:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    37ea:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    37ec:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    37ee:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    37f2:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    37f6:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    37f8:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    37fa:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    37fc:	7083      	strb	r3, [r0, #2]
    37fe:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    3800:	4285      	cmp	r5, r0
    3802:	f104 0403 	add.w	r4, r4, #3
    3806:	d1e9      	bne.n	37dc <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    3808:	bc30      	pop	{r4, r5}
    380a:	4770      	bx	lr

0000380c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    380c:	f7ff bfda 	b.w	37c4 <fade_raw(CRGB*, unsigned short, unsigned char)>

00003810 <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    3810:	b322      	cbz	r2, 385c <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    3812:	2aff      	cmp	r2, #255	; 0xff
    3814:	d023      	beq.n	385e <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    3816:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    3818:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    381a:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    381c:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    381e:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    3820:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    3822:	43d2      	mvns	r2, r2
    3824:	fb06 7605 	mla	r6, r6, r5, r7
    3828:	b2d2      	uxtb	r2, r2
    382a:	fb04 6402 	mla	r4, r4, r2, r6
    382e:	f3c4 2407 	ubfx	r4, r4, #8, #8
    3832:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    3834:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    3836:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    3838:	191f      	adds	r7, r3, r4
    383a:	fb04 7405 	mla	r4, r4, r5, r7
    383e:	fb03 4302 	mla	r3, r3, r2, r4
    3842:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3846:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    3848:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    384a:	18f1      	adds	r1, r6, r3
    384c:	fb03 1505 	mla	r5, r3, r5, r1
    3850:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    3854:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    3856:	f3c2 2207 	ubfx	r2, r2, #8, #8
    385a:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    385c:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    385e:	780b      	ldrb	r3, [r1, #0]
    3860:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    3862:	784b      	ldrb	r3, [r1, #1]
    3864:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    3866:	788b      	ldrb	r3, [r1, #2]
    3868:	7083      	strb	r3, [r0, #2]
    386a:	4770      	bx	lr

0000386c <HeatColor(unsigned char)>:
///  This makes for better 'video'/LED dimming, at the cost of
///  several additional cycles.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    386c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    3870:	ebc1 1383 	rsb	r3, r1, r3, lsl #6
    3874:	3100      	adds	r1, #0
    3876:	bf18      	it	ne
    3878:	2101      	movne	r1, #1
    387a:	eb01 2123 	add.w	r1, r1, r3, asr #8
    387e:	b2c9      	uxtb	r1, r1
    3880:	008b      	lsls	r3, r1, #2
    // zero to 255 in each 'third' of the scale.
    uint8_t heatramp = t192 & 0x3F; // 0..63
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
    3882:	060a      	lsls	r2, r1, #24
    3884:	b2db      	uxtb	r3, r3
    3886:	d40e      	bmi.n	38a6 <HeatColor(unsigned char)+0x3a>
        // we're in the hottest third
        heatcolor.r = 255; // full red
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
    3888:	f001 0140 	and.w	r1, r1, #64	; 0x40
    388c:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    3890:	b919      	cbnz	r1, 389a <HeatColor(unsigned char)+0x2e>
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
    3892:	7003      	strb	r3, [r0, #0]
        heatcolor.g = 0; // no green
    3894:	7042      	strb	r2, [r0, #1]
        heatcolor.b = 0; // no blue
    3896:	7082      	strb	r2, [r0, #2]
    }

    return heatcolor;
}
    3898:	4770      	bx	lr
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    389a:	21ff      	movs	r1, #255	; 0xff
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    389c:	2200      	movs	r2, #0
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
        heatcolor.g = heatramp; // ramp up green
    389e:	7043      	strb	r3, [r0, #1]
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    38a0:	7001      	strb	r1, [r0, #0]
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    38a2:	7082      	strb	r2, [r0, #2]
    38a4:	4770      	bx	lr
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    38a6:	22ff      	movs	r2, #255	; 0xff
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue
    38a8:	7083      	strb	r3, [r0, #2]
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    38aa:	7002      	strb	r2, [r0, #0]
        heatcolor.g = 255; // full green
    38ac:	7042      	strb	r2, [r0, #1]
    38ae:	4770      	bx	lr

000038b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    38b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    38b4:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    38b6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    38ba:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    38be:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    38c0:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    38c4:	d000      	beq.n	38c8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    38c6:	b9e6      	cbnz	r6, 3902 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    38c8:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    38ca:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    38cc:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    38ce:	2bff      	cmp	r3, #255	; 0xff
    38d0:	d012      	beq.n	38f8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    38d2:	2b00      	cmp	r3, #0
    38d4:	d043      	beq.n	395e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    38d6:	3301      	adds	r3, #1
    38d8:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    38da:	b11c      	cbz	r4, 38e4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    38dc:	fb03 4404 	mla	r4, r3, r4, r4
    38e0:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    38e4:	b119      	cbz	r1, 38ee <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    38e6:	fb03 1101 	mla	r1, r3, r1, r1
    38ea:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    38ee:	b11a      	cbz	r2, 38f8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    38f0:	fb03 2202 	mla	r2, r3, r2, r2
    38f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    38f8:	7004      	strb	r4, [r0, #0]
    38fa:	7041      	strb	r1, [r0, #1]
    38fc:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    38fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    3902:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    3904:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    3906:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    390a:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    390c:	d000      	beq.n	3910 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    390e:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    3910:	0112      	lsls	r2, r2, #4
    3912:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    3916:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    3918:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    391c:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    3920:	f891 8002 	ldrb.w	r8, [r1, #2]
    3924:	fb04 f606 	mul.w	r6, r4, r6
    3928:	1c51      	adds	r1, r2, #1
    392a:	fb04 f509 	mul.w	r5, r4, r9
    392e:	fb04 f407 	mul.w	r4, r4, r7
    3932:	f3c4 2407 	ubfx	r4, r4, #8, #8
    3936:	f3c6 2707 	ubfx	r7, r6, #8, #8
    393a:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    393e:	fb01 f60c 	mul.w	r6, r1, ip
    3942:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    3946:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    394a:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    394e:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    3952:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    3956:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    3958:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    395a:	b2d2      	uxtb	r2, r2
    395c:	e7b7      	b.n	38ce <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    395e:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    3960:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    3962:	461c      	mov	r4, r3
    3964:	7004      	strb	r4, [r0, #0]
    3966:	7041      	strb	r1, [r0, #1]
    3968:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    396a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    396e:	bf00      	nop

00003970 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>:
}
#endif


void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)
{
    3970:	b5f0      	push	{r4, r5, r6, r7, lr}
    3972:	3901      	subs	r1, #1
    3974:	1e44      	subs	r4, r0, #1
    uint8_t* p1;
    uint8_t* p2;
    uint8_t  changes = 0;
    3976:	2500      	movs	r5, #0
    3978:	302f      	adds	r0, #47	; 0x2f
    397a:	e001      	b.n	3980 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x10>

    p1 = (uint8_t*)current.entries;
    p2 = (uint8_t*)target.entries;

    const uint8_t totalChannels = sizeof(CRGBPalette16);
    for( uint8_t i = 0; i < totalChannels; i++) {
    397c:	4284      	cmp	r4, r0
    397e:	d01e      	beq.n	39be <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4e>
        // if the values are equal, no changes are needed
        if( p1[i] == p2[i] ) { continue; }
    3980:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    3984:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    3988:	42b3      	cmp	r3, r6
    398a:	d0f7      	beq.n	397c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>

        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }
    398c:	f103 0701 	add.w	r7, r3, #1
    3990:	d204      	bcs.n	399c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x2c>
    3992:	b2fb      	uxtb	r3, r7
    3994:	7023      	strb	r3, [r4, #0]
    3996:	3501      	adds	r5, #1
    3998:	780e      	ldrb	r6, [r1, #0]
    399a:	b2ed      	uxtb	r5, r5

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    399c:	1e5f      	subs	r7, r3, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    399e:	429e      	cmp	r6, r3
            p1[i]--; changes++;
    39a0:	b2ff      	uxtb	r7, r7
    39a2:	f105 0e01 	add.w	lr, r5, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    39a6:	d208      	bcs.n	39ba <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4a>
            p1[i]--; changes++;
    39a8:	7027      	strb	r7, [r4, #0]
            if( p1[i] > p2[i] ) { p1[i]--; }
    39aa:	780e      	ldrb	r6, [r1, #0]
    39ac:	42be      	cmp	r6, r7
    39ae:	bf38      	it	cc
    39b0:	3b02      	subcc	r3, #2
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    39b2:	fa5f f58e 	uxtb.w	r5, lr
            if( p1[i] > p2[i] ) { p1[i]--; }
    39b6:	bf38      	it	cc
    39b8:	7023      	strbcc	r3, [r4, #0]
        }

        // if we've hit the maximum number of changes, exit
        if( changes >= maxChanges) { break; }
    39ba:	4295      	cmp	r5, r2
    39bc:	d3de      	bcc.n	397c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>
    39be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000039c0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    39c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    39c2:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    39c4:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    39c6:	4604      	mov	r4, r0
    39c8:	bfcc      	ite	gt
    39ca:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    39ce:	2500      	movle	r5, #0
    39d0:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    39d2:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    39d4:	bfd8      	it	le
    39d6:	4616      	movle	r6, r2

	pLed->init();
    39d8:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    39da:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    39dc:	6823      	ldr	r3, [r4, #0]
    39de:	6062      	str	r2, [r4, #4]
    39e0:	695b      	ldr	r3, [r3, #20]
    39e2:	4a0a      	ldr	r2, [pc, #40]	; (3a0c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    39e4:	6166      	str	r6, [r4, #20]
    39e6:	4293      	cmp	r3, r2
    39e8:	d101      	bne.n	39ee <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    39ea:	4620      	mov	r0, r4
    39ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    39ee:	4620      	mov	r0, r4
    39f0:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    39f2:	2800      	cmp	r0, #0
    39f4:	d0f9      	beq.n	39ea <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    39f6:	4a06      	ldr	r2, [pc, #24]	; (3a10 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    39f8:	4b06      	ldr	r3, [pc, #24]	; (3a14 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    39fa:	6851      	ldr	r1, [r2, #4]
    39fc:	fb93 f0f0 	sdiv	r0, r3, r0
    3a00:	4288      	cmp	r0, r1
    3a02:	bf38      	it	cc
    3a04:	4608      	movcc	r0, r1
    3a06:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    3a08:	4620      	mov	r0, r4
    3a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a0c:	00000471 	.word	0x00000471
    3a10:	1fff8de4 	.word	0x1fff8de4
    3a14:	000f4240 	.word	0x000f4240

00003a18 <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    3a18:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    3a1a:	4c0f      	ldr	r4, [pc, #60]	; (3a58 <CFastLED::countFPS(int)+0x40>)
    3a1c:	6822      	ldr	r2, [r4, #0]
    3a1e:	1c53      	adds	r3, r2, #1
    3a20:	428a      	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    3a22:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    3a24:	6023      	str	r3, [r4, #0]
    3a26:	db13      	blt.n	3a50 <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3a28:	4d0c      	ldr	r5, [pc, #48]	; (3a5c <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    3a2a:	4a0d      	ldr	r2, [pc, #52]	; (3a60 <CFastLED::countFPS(int)+0x48>)
    3a2c:	6829      	ldr	r1, [r5, #0]
    3a2e:	9101      	str	r1, [sp, #4]
	return ret;
    3a30:	9901      	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3a32:	682d      	ldr	r5, [r5, #0]
    3a34:	9500      	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    3a36:	6816      	ldr	r6, [r2, #0]
	return ret;
    3a38:	9d00      	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    3a3a:	6015      	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    3a3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    br = 0;
    3a40:	2500      	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    3a42:	1b89      	subs	r1, r1, r6
    3a44:	fb02 f303 	mul.w	r3, r2, r3
    br = 0;
    3a48:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    3a4a:	fbb3 f3f1 	udiv	r3, r3, r1
    3a4e:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    3a50:	b003      	add	sp, #12
    3a52:	bc70      	pop	{r4, r5, r6}
    3a54:	4770      	bx	lr
    3a56:	bf00      	nop
    3a58:	1fff8df8 	.word	0x1fff8df8
    3a5c:	1fff8e5c 	.word	0x1fff8e5c
    3a60:	1fff8e00 	.word	0x1fff8e00

00003a64 <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    3a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a68:	6843      	ldr	r3, [r0, #4]
    3a6a:	4c2d      	ldr	r4, [pc, #180]	; (3b20 <CFastLED::show(unsigned char)+0xbc>)
    3a6c:	b083      	sub	sp, #12
    3a6e:	4606      	mov	r6, r0
    3a70:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    3a72:	2b00      	cmp	r3, #0
    3a74:	d14b      	bne.n	3b0e <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    3a76:	f000 fd5b 	bl	4530 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    3a7a:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    3a7c:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    3a7e:	b11b      	cbz	r3, 3a88 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    3a80:	4648      	mov	r0, r9
    3a82:	68b1      	ldr	r1, [r6, #8]
    3a84:	4798      	blx	r3
    3a86:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    3a88:	4b26      	ldr	r3, [pc, #152]	; (3b24 <CFastLED::show(unsigned char)+0xc0>)
    3a8a:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    3a8c:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3a8e:	2c00      	cmp	r4, #0
    3a90:	d036      	beq.n	3b00 <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    3a92:	8873      	ldrh	r3, [r6, #2]
    3a94:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    3a96:	6861      	ldr	r1, [r4, #4]
    3a98:	6962      	ldr	r2, [r4, #20]
    3a9a:	2b63      	cmp	r3, #99	; 0x63
    3a9c:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    3a9e:	bf98      	it	ls
    3aa0:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    3aa2:	f8d3 8004 	ldr.w	r8, [r3, #4]
    3aa6:	f88d 5004 	strb.w	r5, [sp, #4]
    3aaa:	f88d 5005 	strb.w	r5, [sp, #5]
    3aae:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    3ab2:	f1b9 0f00 	cmp.w	r9, #0
    3ab6:	d01c      	beq.n	3af2 <CFastLED::show(unsigned char)+0x8e>
    3ab8:	f104 030b 	add.w	r3, r4, #11
    3abc:	f10d 0e04 	add.w	lr, sp, #4
    3ac0:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    3ac4:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    3ac8:	f1bb 0f00 	cmp.w	fp, #0
    3acc:	d00d      	beq.n	3aea <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    3ace:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    3ad2:	f10a 0001 	add.w	r0, sl, #1
    3ad6:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    3ada:	f1ba 0f00 	cmp.w	sl, #0
    3ade:	d004      	beq.n	3aea <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    3ae0:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    3ae4:	0c00      	lsrs	r0, r0, #16
    3ae6:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    3aea:	4563      	cmp	r3, ip
    3aec:	f10e 0e01 	add.w	lr, lr, #1
    3af0:	d1e8      	bne.n	3ac4 <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    3af2:	4620      	mov	r0, r4
    3af4:	ab01      	add	r3, sp, #4
    3af6:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    3af8:	74a7      	strb	r7, [r4, #18]
    3afa:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3afc:	2c00      	cmp	r4, #0
    3afe:	d1c8      	bne.n	3a92 <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    3b00:	4630      	mov	r0, r6
    3b02:	2119      	movs	r1, #25
    3b04:	f7ff ff88 	bl	3a18 <CFastLED::countFPS(int)>
}
    3b08:	b003      	add	sp, #12
    3b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    3b0e:	f000 fd0f 	bl	4530 <micros>
    3b12:	6822      	ldr	r2, [r4, #0]
    3b14:	6873      	ldr	r3, [r6, #4]
    3b16:	1a80      	subs	r0, r0, r2
    3b18:	4298      	cmp	r0, r3
    3b1a:	d3aa      	bcc.n	3a72 <CFastLED::show(unsigned char)+0xe>
    3b1c:	e7ab      	b.n	3a76 <CFastLED::show(unsigned char)+0x12>
    3b1e:	bf00      	nop
    3b20:	1fff8dfc 	.word	0x1fff8dfc
    3b24:	1fff8df4 	.word	0x1fff8df4

00003b28 <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    3b28:	2000      	movs	r0, #0
    3b2a:	4770      	bx	lr

00003b2c <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    3b2c:	4b04      	ldr	r3, [pc, #16]	; (3b40 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    3b2e:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    3b30:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    3b32:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    3b36:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    3b38:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    3b3a:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    3b3c:	60da      	str	r2, [r3, #12]
    3b3e:	4770      	bx	lr
    3b40:	1fff8de4 	.word	0x1fff8de4

00003b44 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    3b44:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    3b46:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    3b48:	7846      	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    3b4a:	7882      	ldrb	r2, [r0, #2]
    3b4c:	00e0      	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    3b4e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    3b52:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    3b56:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    3b5a:	4403      	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    3b5c:	0625      	lsls	r5, r4, #24
    3b5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3b62:	d45f      	bmi.n	3c24 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    3b64:	f004 0540 	and.w	r5, r4, #64	; 0x40
    3b68:	f005 07ff 	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    3b6c:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    3b70:	2d00      	cmp	r5, #0
    3b72:	d146      	bne.n	3c02 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    3b74:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    3b78:	2c00      	cmp	r4, #0
    3b7a:	d06c      	beq.n	3c56 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    3b7c:	3355      	adds	r3, #85	; 0x55
    3b7e:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    3b80:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    3b82:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    3b84:	2eff      	cmp	r6, #255	; 0xff
    3b86:	d01c      	beq.n	3bc2 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    3b88:	2e00      	cmp	r6, #0
    3b8a:	d079      	beq.n	3c80 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    3b8c:	b11c      	cbz	r4, 3b96 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    3b8e:	fb06 4404 	mla	r4, r6, r4, r4
    3b92:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    3b96:	b11d      	cbz	r5, 3ba0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    3b98:	fb06 5505 	mla	r5, r6, r5, r5
    3b9c:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    3ba0:	b11b      	cbz	r3, 3baa <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    3ba2:	fb06 3303 	mla	r3, r6, r3, r3
    3ba6:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    3baa:	43f0      	mvns	r0, r6
    3bac:	b2c0      	uxtb	r0, r0
    3bae:	fb00 0000 	mla	r0, r0, r0, r0
    3bb2:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    3bb6:	4404      	add	r4, r0
            g += brightness_floor;
    3bb8:	4405      	add	r5, r0
            b += brightness_floor;
    3bba:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    3bbc:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    3bbe:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    3bc0:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    3bc2:	2aff      	cmp	r2, #255	; 0xff
    3bc4:	d018      	beq.n	3bf8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    3bc6:	fb12 f002 	smulbb	r0, r2, r2
    3bca:	3200      	adds	r2, #0
    3bcc:	bf18      	it	ne
    3bce:	2201      	movne	r2, #1
    3bd0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    3bd4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    3bd8:	d056      	beq.n	3c88 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    3bda:	b11c      	cbz	r4, 3be4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    3bdc:	fb02 4404 	mla	r4, r2, r4, r4
    3be0:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    3be4:	b11d      	cbz	r5, 3bee <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    3be6:	fb02 5505 	mla	r5, r2, r5, r5
    3bea:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    3bee:	b11b      	cbz	r3, 3bf8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    3bf0:	fb02 3303 	mla	r3, r2, r3, r3
    3bf4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    3bf8:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    3bfa:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    3bfc:	708b      	strb	r3, [r1, #2]
}
    3bfe:	bcf0      	pop	{r4, r5, r6, r7}
    3c00:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    3c02:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    3c06:	bb5c      	cbnz	r4, 3c60 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    3c08:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    3c0c:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    3c10:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    3c14:	1204      	asrs	r4, r0, #8
                    g = K170 + third;
    3c16:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    3c18:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    3c1c:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    3c1e:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    3c20:	463b      	mov	r3, r7
    3c22:	e7af      	b.n	3b84 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    3c24:	f004 0740 	and.w	r7, r4, #64	; 0x40
    3c28:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    3c2c:	b9e7      	cbnz	r7, 3c68 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    3c2e:	f004 0720 	and.w	r7, r4, #32
    3c32:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    3c36:	2f00      	cmp	r7, #0
    3c38:	d136      	bne.n	3ca8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    3c3a:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    3c3e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    3c42:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    3c46:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    3c4a:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    3c4e:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    3c50:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    3c52:	b2c3      	uxtb	r3, r0
    3c54:	e796      	b.n	3b84 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    3c56:	43dc      	mvns	r4, r3
    3c58:	b2e4      	uxtb	r4, r4
                g = third;
    3c5a:	461d      	mov	r5, r3
                b = 0;
    3c5c:	4603      	mov	r3, r0
    3c5e:	e791      	b.n	3b84 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    3c60:	2400      	movs	r4, #0
                g = K255 - third;
    3c62:	43dd      	mvns	r5, r3
    3c64:	b2ed      	uxtb	r5, r5
    3c66:	e78d      	b.n	3b84 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    3c68:	f004 0420 	and.w	r4, r4, #32
    3c6c:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    3c70:	b994      	cbnz	r4, 3c98 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    3c72:	f103 0455 	add.w	r4, r3, #85	; 0x55
    3c76:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    3c78:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    3c7c:	b2db      	uxtb	r3, r3
    3c7e:	e781      	b.n	3b84 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    3c80:	23ff      	movs	r3, #255	; 0xff
    3c82:	461d      	mov	r5, r3
    3c84:	461c      	mov	r4, r3
    3c86:	e79c      	b.n	3bc2 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    3c88:	4615      	mov	r5, r2
    3c8a:	4614      	mov	r4, r2
    3c8c:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    3c8e:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    3c90:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    3c92:	708b      	strb	r3, [r1, #2]
}
    3c94:	bcf0      	pop	{r4, r5, r6, r7}
    3c96:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    3c98:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
    3c9c:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    3c9e:	2500      	movs	r5, #0
                b = K85 - third;
    3ca0:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    3ca4:	b2db      	uxtb	r3, r3
    3ca6:	e76d      	b.n	3b84 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    3ca8:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    3caa:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    3cac:	b2c3      	uxtb	r3, r0
    3cae:	e769      	b.n	3b84 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

00003cb0 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    3cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    3cb2:	b361      	cbz	r1, 3d0e <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x5e>
    3cb4:	f101 3eff 	add.w	lr, r1, #4294967295
    3cb8:	fa1f fe8e 	uxth.w	lr, lr
    3cbc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    3cc0:	2200      	movs	r2, #0
    3cc2:	f10e 0e06 	add.w	lr, lr, #6
    3cc6:	4486      	add	lr, r0
    3cc8:	1cc3      	adds	r3, r0, #3
    3cca:	4615      	mov	r5, r2
    3ccc:	4614      	mov	r4, r2
        red32   += *p++;
    3cce:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        green32 += *p++;
    3cd2:	f813 0c02 	ldrb.w	r0, [r3, #-2]
        blue32  += *p++;
    3cd6:	f813 6c01 	ldrb.w	r6, [r3, #-1]
    3cda:	3303      	adds	r3, #3
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    3cdc:	4573      	cmp	r3, lr
        red32   += *p++;
    3cde:	443c      	add	r4, r7
        green32 += *p++;
    3ce0:	4405      	add	r5, r0
        blue32  += *p++;
    3ce2:	4432      	add	r2, r6
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    3ce4:	d1f3      	bne.n	3cce <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x1e>
    3ce6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3cea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3cee:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    3cf2:	f3c4 1317 	ubfx	r3, r4, #4, #24
    3cf6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    3cfa:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    3cfe:	0a12      	lsrs	r2, r2, #8
    3d00:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    3d04:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3d08:	1910      	adds	r0, r2, r4
}
    3d0a:	4408      	add	r0, r1
    3d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    3d0e:	460c      	mov	r4, r1
    3d10:	460a      	mov	r2, r1
    3d12:	e7f7      	b.n	3d04 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x54>

00003d14 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    3d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    3d18:	4b25      	ldr	r3, [pc, #148]	; (3db0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x9c>)
    3d1a:	681c      	ldr	r4, [r3, #0]
    3d1c:	b085      	sub	sp, #20
    3d1e:	4607      	mov	r7, r0
    3d20:	4688      	mov	r8, r1
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3d22:	b19c      	cbz	r4, 3d4c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x38>
    3d24:	f8df 9094 	ldr.w	r9, [pc, #148]	; 3dbc <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>
    3d28:	257d      	movs	r5, #125	; 0x7d
    3d2a:	e007      	b.n	3d3c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    3d2c:	6960      	ldr	r0, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    3d2e:	b281      	uxth	r1, r0
    3d30:	4630      	mov	r0, r6
    3d32:	f7ff ffbd 	bl	3cb0 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    3d36:	68a4      	ldr	r4, [r4, #8]
    3d38:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3d3a:	b144      	cbz	r4, 3d4e <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    3d3c:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    3d40:	691b      	ldr	r3, [r3, #16]
    3d42:	454b      	cmp	r3, r9
    3d44:	d0f2      	beq.n	3d2c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    3d46:	4620      	mov	r0, r4
    3d48:	4798      	blx	r3
    3d4a:	e7f0      	b.n	3d2e <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;
    3d4c:	257d      	movs	r5, #125	; 0x7d
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    3d4e:	fb05 f507 	mul.w	r5, r5, r7
    3d52:	0a2d      	lsrs	r5, r5, #8
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    3d54:	4b17      	ldr	r3, [pc, #92]	; (3db4 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    3d56:	4545      	cmp	r5, r8
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    3d58:	781b      	ldrb	r3, [r3, #0]
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    3d5a:	d210      	bcs.n	3d7e <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x6a>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    3d5c:	b323      	cbz	r3, 3da8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    3d5e:	4a16      	ldr	r2, [pc, #88]	; (3db8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    3d60:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    3d62:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    3d66:	f88d 100c 	strb.w	r1, [sp, #12]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    3d6a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    3d6e:	7813      	ldrb	r3, [r2, #0]
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    3d70:	4638      	mov	r0, r7
    3d72:	ea23 0301 	bic.w	r3, r3, r1
    3d76:	7013      	strb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    3d78:	b005      	add	sp, #20
    3d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    3d7e:	fb08 f707 	mul.w	r7, r8, r7
    3d82:	fbb7 f0f5 	udiv	r0, r7, r5
    3d86:	b2c7      	uxtb	r7, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    3d88:	b173      	cbz	r3, 3da8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    3d8a:	4a0b      	ldr	r2, [pc, #44]	; (3db8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    3d8c:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    3d8e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    3d92:	f88d 100c 	strb.w	r1, [sp, #12]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    3d96:	f89d 100c 	ldrb.w	r1, [sp, #12]
    3d9a:	7813      	ldrb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    3d9c:	4638      	mov	r0, r7
    3d9e:	430b      	orrs	r3, r1
    3da0:	7013      	strb	r3, [r2, #0]
}
    3da2:	b005      	add	sp, #20
    3da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    3da8:	4638      	mov	r0, r7
}
    3daa:	b005      	add	sp, #20
    3dac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3db0:	1fff8df4 	.word	0x1fff8df4
    3db4:	1fff8e08 	.word	0x1fff8e08
    3db8:	00007db0 	.word	0x00007db0
    3dbc:	0000046d 	.word	0x0000046d

00003dc0 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>:
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
    3dc0:	4b03      	ldr	r3, [pc, #12]	; (3dd0 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x10>)
    3dc2:	4a04      	ldr	r2, [pc, #16]	; (3dd4 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x14>)
    3dc4:	60da      	str	r2, [r3, #12]
    3dc6:	fb01 f100 	mul.w	r1, r1, r0
    3dca:	6099      	str	r1, [r3, #8]
    3dcc:	4770      	bx	lr
    3dce:	bf00      	nop
    3dd0:	1fff8de4 	.word	0x1fff8de4
    3dd4:	00003d15 	.word	0x00003d15

00003dd8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3dd8:	4807      	ldr	r0, [pc, #28]	; (3df8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    3dda:	b082      	sub	sp, #8
    3ddc:	6803      	ldr	r3, [r0, #0]
    3dde:	9301      	str	r3, [sp, #4]
	return ret;
    3de0:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    3de2:	4411      	add	r1, r2
    3de4:	e001      	b.n	3dea <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    3de6:	4299      	cmp	r1, r3
    3de8:	d304      	bcc.n	3df4 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3dea:	6803      	ldr	r3, [r0, #0]
    3dec:	9300      	str	r3, [sp, #0]
	return ret;
    3dee:	9b00      	ldr	r3, [sp, #0]
    3df0:	429a      	cmp	r2, r3
    3df2:	d9f8      	bls.n	3de6 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    3df4:	b002      	add	sp, #8
    3df6:	4770      	bx	lr
    3df8:	1fff8e5c 	.word	0x1fff8e5c

00003dfc <VisualMicroDebug::DBG_Millis()>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3dfc:	4b03      	ldr	r3, [pc, #12]	; (3e0c <VisualMicroDebug::DBG_Millis()+0x10>)
{
	return RTT::millis();
}
#else
unsigned long VisualMicroDebug::DBG_Millis()
{
    3dfe:	b082      	sub	sp, #8
    3e00:	681b      	ldr	r3, [r3, #0]
    3e02:	9301      	str	r3, [sp, #4]
	return ret;
    3e04:	9801      	ldr	r0, [sp, #4]
	return millis();
}
    3e06:	b002      	add	sp, #8
    3e08:	4770      	bx	lr
    3e0a:	bf00      	nop
    3e0c:	1fff8e5c 	.word	0x1fff8e5c

00003e10 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>:
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
    3e10:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e12:	4b07      	ldr	r3, [pc, #28]	; (3e30 <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x20>)
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
    3e14:	6882      	ldr	r2, [r0, #8]
    3e16:	681b      	ldr	r3, [r3, #0]

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
    3e18:	6101      	str	r1, [r0, #16]
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
    3e1a:	b083      	sub	sp, #12
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
    3e1c:	2400      	movs	r4, #0
    3e1e:	9301      	str	r3, [sp, #4]
	return ret;
    3e20:	9b01      	ldr	r3, [sp, #4]
    3e22:	6144      	str	r4, [r0, #20]
	BreakPrevMillis = BreakStartMillis;
    3e24:	60c2      	str	r2, [r0, #12]
	BreakStartMillis = DBG_Millis();
    3e26:	6083      	str	r3, [r0, #8]
}
    3e28:	b003      	add	sp, #12
    3e2a:	bc10      	pop	{r4}
    3e2c:	4770      	bx	lr
    3e2e:	bf00      	nop
    3e30:	1fff8e5c 	.word	0x1fff8e5c

00003e34 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>:

void VisualMicroDebug::OnBreakPointPrintBegin(uint8_t breakpoint_id)
{
    3e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e38:	4b1b      	ldr	r3, [pc, #108]	; (3ea8 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x74>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3e3a:	4c1c      	ldr	r4, [pc, #112]	; (3eac <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x78>)
    3e3c:	681b      	ldr	r3, [r3, #0]
    3e3e:	4e1c      	ldr	r6, [pc, #112]	; (3eb0 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x7c>)
    3e40:	b082      	sub	sp, #8
    3e42:	4605      	mov	r5, r0
    3e44:	9301      	str	r3, [sp, #4]
    3e46:	4688      	mov	r8, r1
    3e48:	481a      	ldr	r0, [pc, #104]	; (3eb4 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x80>)
	return ret;
    3e4a:	9f01      	ldr	r7, [sp, #4]
    3e4c:	2106      	movs	r1, #6
    3e4e:	f001 fba9 	bl	55a4 <usb_serial_write>
    3e52:	4641      	mov	r1, r8
    3e54:	2300      	movs	r3, #0
    3e56:	220a      	movs	r2, #10
    3e58:	4620      	mov	r0, r4
    3e5a:	f001 fdb7 	bl	59cc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3e5e:	2103      	movs	r1, #3
    3e60:	4815      	ldr	r0, [pc, #84]	; (3eb8 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x84>)
    3e62:	f001 fb9f 	bl	55a4 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    3e66:	4639      	mov	r1, r7
    3e68:	2300      	movs	r3, #0
    3e6a:	220a      	movs	r2, #10
    3e6c:	4620      	mov	r0, r4
    3e6e:	f001 fdad 	bl	59cc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3e72:	4630      	mov	r0, r6
    3e74:	2101      	movs	r1, #1
    3e76:	f001 fb95 	bl	55a4 <usb_serial_write>
    3e7a:	68a9      	ldr	r1, [r5, #8]
    3e7c:	2300      	movs	r3, #0
    3e7e:	1a79      	subs	r1, r7, r1
    3e80:	220a      	movs	r2, #10
    3e82:	4620      	mov	r0, r4
    3e84:	f001 fda2 	bl	59cc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3e88:	4630      	mov	r0, r6
    3e8a:	2101      	movs	r1, #1
    3e8c:	f001 fb8a 	bl	55a4 <usb_serial_write>
    3e90:	68eb      	ldr	r3, [r5, #12]
    3e92:	68a9      	ldr	r1, [r5, #8]
    3e94:	4620      	mov	r0, r4
    3e96:	1ac9      	subs	r1, r1, r3
    3e98:	220a      	movs	r2, #10
    3e9a:	2300      	movs	r3, #0
    3e9c:	f001 fd96 	bl	59cc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	VM_DEBUGGER_SOFT_TRANSPORT.print((m - BreakStartMillis));
	VM_DEBUGGER_SOFT_TRANSPORT.print(":");
	//millis since last bp was hit
	VM_DEBUGGER_SOFT_TRANSPORT.print((BreakStartMillis - BreakPrevMillis));
#endif
}
    3ea0:	b002      	add	sp, #8
    3ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ea6:	bf00      	nop
    3ea8:	1fff8e5c 	.word	0x1fff8e5c
    3eac:	1fff8764 	.word	0x1fff8764
    3eb0:	00007d20 	.word	0x00007d20
    3eb4:	00007d14 	.word	0x00007d14
    3eb8:	00007d1c 	.word	0x00007d1c

00003ebc <VisualMicroDebug::OnBreakPointPrintEnd()>:
void VisualMicroDebug::OnBreakPointPrintEnd()
{
    3ebc:	b508      	push	{r3, lr}
    3ebe:	2106      	movs	r1, #6
    3ec0:	4803      	ldr	r0, [pc, #12]	; (3ed0 <VisualMicroDebug::OnBreakPointPrintEnd()+0x14>)
    3ec2:	f001 fb6f 	bl	55a4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3ec6:	4803      	ldr	r0, [pc, #12]	; (3ed4 <VisualMicroDebug::OnBreakPointPrintEnd()+0x18>)
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_SOFTWARESERIAL)
	transport->println("_VMDPE");
#else
	VM_DEBUGGER_SOFT_TRANSPORT.println("_VMDPE");
#endif
}
    3ec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3ecc:	f001 bd6e 	b.w	59ac <Print::println()>
    3ed0:	00007d24 	.word	0x00007d24
    3ed4:	1fff8764 	.word	0x1fff8764

00003ed8 <VisualMicroDebug::OnBreakPointEnd()>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ed8:	4b03      	ldr	r3, [pc, #12]	; (3ee8 <VisualMicroDebug::OnBreakPointEnd()+0x10>)

void VisualMicroDebug::OnBreakPointEnd()
{
    3eda:	b082      	sub	sp, #8
    3edc:	681b      	ldr	r3, [r3, #0]
    3ede:	9301      	str	r3, [sp, #4]
	return ret;
    3ee0:	9b01      	ldr	r3, [sp, #4]
	//update millis to now. ensure time taken for debug doesn't affect comparison of the time to the next point
	BreakStartMillis = DBG_Millis();
    3ee2:	6083      	str	r3, [r0, #8]
}
    3ee4:	b002      	add	sp, #8
    3ee6:	4770      	bx	lr
    3ee8:	1fff8e5c 	.word	0x1fff8e5c

00003eec <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    3eec:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3eee:	4a10      	ldr	r2, [pc, #64]	; (3f30 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    3ef0:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    3ef2:	b9a1      	cbnz	r1, 3f1e <VisualMicroDebug::outPacketStart(bool)+0x32>
    3ef4:	6813      	ldr	r3, [r2, #0]
    3ef6:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    3ef8:	6841      	ldr	r1, [r0, #4]
	return ret;
    3efa:	9b00      	ldr	r3, [sp, #0]
    3efc:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    3efe:	2931      	cmp	r1, #49	; 0x31
    3f00:	d80d      	bhi.n	3f1e <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f02:	6813      	ldr	r3, [r2, #0]
    3f04:	9302      	str	r3, [sp, #8]
	return ret;
    3f06:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    3f08:	f104 0332 	add.w	r3, r4, #50	; 0x32
    3f0c:	1a59      	subs	r1, r3, r1
    3f0e:	e001      	b.n	3f14 <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    3f10:	4299      	cmp	r1, r3
    3f12:	d304      	bcc.n	3f1e <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f14:	6813      	ldr	r3, [r2, #0]
    3f16:	9301      	str	r3, [sp, #4]
	return ret;
    3f18:	9b01      	ldr	r3, [sp, #4]
    3f1a:	429c      	cmp	r4, r3
    3f1c:	d9f8      	bls.n	3f10 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f1e:	6813      	ldr	r3, [r2, #0]
    3f20:	9303      	str	r3, [sp, #12]
	return ret;
    3f22:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    3f24:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    3f26:	2001      	movs	r0, #1
    3f28:	b005      	add	sp, #20
    3f2a:	bc10      	pop	{r4}
    3f2c:	4770      	bx	lr
    3f2e:	bf00      	nop
    3f30:	1fff8e5c 	.word	0x1fff8e5c

00003f34 <VisualMicroDebug::outPacketEnd()>:
    3f34:	4770      	bx	lr
    3f36:	bf00      	nop

00003f38 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    3f38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3f3c:	f000 bb1a 	b.w	4574 <delay>

00003f40 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    3f40:	2300      	movs	r3, #0
    3f42:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    3f44:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    3f46:	b171      	cbz	r1, 3f66 <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f48:	4807      	ldr	r0, [pc, #28]	; (3f68 <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    3f4a:	b082      	sub	sp, #8
    3f4c:	6803      	ldr	r3, [r0, #0]
    3f4e:	9301      	str	r3, [sp, #4]
	return ret;
    3f50:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    3f52:	4411      	add	r1, r2
    3f54:	e001      	b.n	3f5a <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    3f56:	4299      	cmp	r1, r3
    3f58:	d304      	bcc.n	3f64 <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f5a:	6803      	ldr	r3, [r0, #0]
    3f5c:	9300      	str	r3, [sp, #0]
	return ret;
    3f5e:	9b00      	ldr	r3, [sp, #0]
    3f60:	429a      	cmp	r2, r3
    3f62:	d9f8      	bls.n	3f56 <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    3f64:	b002      	add	sp, #8
    3f66:	4770      	bx	lr
    3f68:	1fff8e5c 	.word	0x1fff8e5c

00003f6c <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    3f6c:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f6e:	4c13      	ldr	r4, [pc, #76]	; (3fbc <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    3f70:	b085      	sub	sp, #20
    3f72:	6823      	ldr	r3, [r4, #0]
    3f74:	9303      	str	r3, [sp, #12]
	return ret;
    3f76:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    3f78:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    3f7a:	460d      	mov	r5, r1
    3f7c:	4810      	ldr	r0, [pc, #64]	; (3fc0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    3f7e:	2106      	movs	r1, #6
    3f80:	f001 fb10 	bl	55a4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3f84:	2300      	movs	r3, #0
    3f86:	220a      	movs	r2, #10
    3f88:	4629      	mov	r1, r5
    3f8a:	480e      	ldr	r0, [pc, #56]	; (3fc4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    3f8c:	f001 fd1e 	bl	59cc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3f90:	2106      	movs	r1, #6
    3f92:	480d      	ldr	r0, [pc, #52]	; (3fc8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    3f94:	f001 fb06 	bl	55a4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3f98:	480a      	ldr	r0, [pc, #40]	; (3fc4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    3f9a:	f001 fd07 	bl	59ac <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f9e:	6823      	ldr	r3, [r4, #0]
    3fa0:	9302      	str	r3, [sp, #8]
	return ret;
    3fa2:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    3fa4:	f102 0132 	add.w	r1, r2, #50	; 0x32
    3fa8:	e001      	b.n	3fae <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    3faa:	4299      	cmp	r1, r3
    3fac:	d304      	bcc.n	3fb8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3fae:	6823      	ldr	r3, [r4, #0]
    3fb0:	9301      	str	r3, [sp, #4]
	return ret;
    3fb2:	9b01      	ldr	r3, [sp, #4]
    3fb4:	429a      	cmp	r2, r3
    3fb6:	d9f8      	bls.n	3faa <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    3fb8:	b005      	add	sp, #20
    3fba:	bd30      	pop	{r4, r5, pc}
    3fbc:	1fff8e5c 	.word	0x1fff8e5c
    3fc0:	00007d2c 	.word	0x00007d2c
    3fc4:	1fff8764 	.word	0x1fff8764
    3fc8:	00007d34 	.word	0x00007d34

00003fcc <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    3fcc:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    3fce:	7e03      	ldrb	r3, [r0, #24]
    3fd0:	b90b      	cbnz	r3, 3fd6 <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    3fd2:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    3fd4:	bd38      	pop	{r3, r4, r5, pc}
    3fd6:	460d      	mov	r5, r1
    3fd8:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3fda:	f001 fab9 	bl	5550 <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    3fde:	f010 0fff 	tst.w	r0, #255	; 0xff
    3fe2:	d101      	bne.n	3fe8 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    3fe4:	2065      	movs	r0, #101	; 0x65
    3fe6:	bd38      	pop	{r3, r4, r5, pc}
    3fe8:	f001 fab2 	bl	5550 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    3fec:	f010 0fff 	tst.w	r0, #255	; 0xff
    3ff0:	d0f8      	beq.n	3fe4 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    3ff2:	f001 fa71 	bl	54d8 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    3ff6:	b2c0      	uxtb	r0, r0
    3ff8:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    3ffc:	2b1e      	cmp	r3, #30
    3ffe:	d8f3      	bhi.n	3fe8 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    4000:	a201      	add	r2, pc, #4	; (adr r2, 4008 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    4002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4006:	bf00      	nop
    4008:	00004091 	.word	0x00004091
    400c:	00003fe9 	.word	0x00003fe9
    4010:	00003fe9 	.word	0x00003fe9
    4014:	00003fe9 	.word	0x00003fe9
    4018:	00003fe9 	.word	0x00003fe9
    401c:	00003fe9 	.word	0x00003fe9
    4020:	00003fe9 	.word	0x00003fe9
    4024:	00003fe9 	.word	0x00003fe9
    4028:	00003fe9 	.word	0x00003fe9
    402c:	00003fe9 	.word	0x00003fe9
    4030:	00003fe9 	.word	0x00003fe9
    4034:	00004085 	.word	0x00004085
    4038:	00003fe9 	.word	0x00003fe9
    403c:	00003fe9 	.word	0x00003fe9
    4040:	00003fe9 	.word	0x00003fe9
    4044:	00003fe9 	.word	0x00003fe9
    4048:	00003fd3 	.word	0x00003fd3
    404c:	00003fe9 	.word	0x00003fe9
    4050:	00003fe9 	.word	0x00003fe9
    4054:	00003fe9 	.word	0x00003fe9
    4058:	00003fe9 	.word	0x00003fe9
    405c:	00003fe9 	.word	0x00003fe9
    4060:	00003fe9 	.word	0x00003fe9
    4064:	00003fe9 	.word	0x00003fe9
    4068:	00003fe9 	.word	0x00003fe9
    406c:	00003fd3 	.word	0x00003fd3
    4070:	00003fe9 	.word	0x00003fe9
    4074:	00003fe9 	.word	0x00003fe9
    4078:	00003fe9 	.word	0x00003fe9
    407c:	00003fe9 	.word	0x00003fe9
    4080:	00003fd5 	.word	0x00003fd5
		{

		case 'c':
			sendContinuedACK(breakPointId);
    4084:	4620      	mov	r0, r4
    4086:	4629      	mov	r1, r5
    4088:	f7ff ff70 	bl	3f6c <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    408c:	2063      	movs	r0, #99	; 0x63
    408e:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    4090:	2300      	movs	r3, #0
    4092:	7623      	strb	r3, [r4, #24]
			return 'c';
    4094:	2063      	movs	r0, #99	; 0x63
    4096:	bd38      	pop	{r3, r4, r5, pc}

00004098 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    4098:	b570      	push	{r4, r5, r6, lr}
    409a:	4605      	mov	r5, r0
    409c:	b082      	sub	sp, #8
    409e:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    40a0:	b1c9      	cbz	r1, 40d6 <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    40a2:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    40a4:	4c0d      	ldr	r4, [pc, #52]	; (40dc <VisualMicroDebug::start(bool, bool)+0x44>)
    40a6:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    40a8:	2100      	movs	r1, #0
    40aa:	4628      	mov	r0, r5
    40ac:	f7ff ff8e 	bl	3fcc <VisualMicroDebug::breakWait(unsigned char)>
    40b0:	2863      	cmp	r0, #99	; 0x63
    40b2:	d010      	beq.n	40d6 <VisualMicroDebug::start(bool, bool)+0x3e>
    40b4:	6823      	ldr	r3, [r4, #0]
    40b6:	9301      	str	r3, [sp, #4]
	return ret;
    40b8:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    40ba:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    40bc:	6823      	ldr	r3, [r4, #0]
    40be:	9300      	str	r3, [sp, #0]
	return ret;
    40c0:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    40c2:	429a      	cmp	r2, r3
    40c4:	d8f0      	bhi.n	40a8 <VisualMicroDebug::start(bool, bool)+0x10>
    40c6:	4299      	cmp	r1, r3
    40c8:	d2f8      	bcs.n	40bc <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    40ca:	2100      	movs	r1, #0
    40cc:	4628      	mov	r0, r5
    40ce:	f7ff ff7d 	bl	3fcc <VisualMicroDebug::breakWait(unsigned char)>
    40d2:	2863      	cmp	r0, #99	; 0x63
    40d4:	d1ee      	bne.n	40b4 <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    40d6:	762e      	strb	r6, [r5, #24]
#endif

}
    40d8:	b002      	add	sp, #8
    40da:	bd70      	pop	{r4, r5, r6, pc}
    40dc:	1fff8e5c 	.word	0x1fff8e5c

000040e0 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    40e0:	4b03      	ldr	r3, [pc, #12]	; (40f0 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    40e2:	2200      	movs	r2, #0
    40e4:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    40e6:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    40e8:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    40ea:	615a      	str	r2, [r3, #20]
    40ec:	4770      	bx	lr
    40ee:	bf00      	nop
    40f0:	1fff8e0c 	.word	0x1fff8e0c

000040f4 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    40f4:	4a37      	ldr	r2, [pc, #220]	; (41d4 <wait_for_cal+0xe0>)
    40f6:	4938      	ldr	r1, [pc, #224]	; (41d8 <wait_for_cal+0xe4>)
    40f8:	6813      	ldr	r3, [r2, #0]
    40fa:	061b      	lsls	r3, r3, #24
    40fc:	d4fc      	bmi.n	40f8 <wait_for_cal+0x4>
    40fe:	680b      	ldr	r3, [r1, #0]
    4100:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    4104:	d1f8      	bne.n	40f8 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    4106:	b672      	cpsid	i
	if (calibrating) {
    4108:	4934      	ldr	r1, [pc, #208]	; (41dc <wait_for_cal+0xe8>)
    410a:	780a      	ldrb	r2, [r1, #0]
    410c:	2a00      	cmp	r2, #0
    410e:	d05f      	beq.n	41d0 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    4110:	4a33      	ldr	r2, [pc, #204]	; (41e0 <wait_for_cal+0xec>)
    4112:	4834      	ldr	r0, [pc, #208]	; (41e4 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    4114:	b4f0      	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    4116:	4c34      	ldr	r4, [pc, #208]	; (41e8 <wait_for_cal+0xf4>)
    4118:	6817      	ldr	r7, [r2, #0]
    411a:	6806      	ldr	r6, [r0, #0]
    411c:	6825      	ldr	r5, [r4, #0]
    411e:	68d4      	ldr	r4, [r2, #12]
    4120:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    4122:	443e      	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    4124:	3214      	adds	r2, #20
    4126:	6800      	ldr	r0, [r0, #0]
    4128:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    412a:	4f30      	ldr	r7, [pc, #192]	; (41ec <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    412c:	4435      	add	r5, r6
    412e:	442c      	add	r4, r5
    4130:	4420      	add	r0, r4
    4132:	4402      	add	r2, r0
    4134:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    4138:	4e2d      	ldr	r6, [pc, #180]	; (41f0 <wait_for_cal+0xfc>)
    413a:	482e      	ldr	r0, [pc, #184]	; (41f4 <wait_for_cal+0x100>)
    413c:	4d2e      	ldr	r5, [pc, #184]	; (41f8 <wait_for_cal+0x104>)
    413e:	4c2f      	ldr	r4, [pc, #188]	; (41fc <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    4140:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    4144:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    4146:	6837      	ldr	r7, [r6, #0]
    4148:	6806      	ldr	r6, [r0, #0]
    414a:	682d      	ldr	r5, [r5, #0]
    414c:	4a2c      	ldr	r2, [pc, #176]	; (4200 <wait_for_cal+0x10c>)
    414e:	6824      	ldr	r4, [r4, #0]
    4150:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    4152:	443e      	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    4154:	6800      	ldr	r0, [r0, #0]
    4156:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    4158:	4f2a      	ldr	r7, [pc, #168]	; (4204 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    415a:	4435      	add	r5, r6
    415c:	442c      	add	r4, r5
    415e:	4420      	add	r0, r4
    4160:	4402      	add	r2, r0
    4162:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    4166:	4e28      	ldr	r6, [pc, #160]	; (4208 <wait_for_cal+0x114>)
    4168:	4828      	ldr	r0, [pc, #160]	; (420c <wait_for_cal+0x118>)
    416a:	4d29      	ldr	r5, [pc, #164]	; (4210 <wait_for_cal+0x11c>)
    416c:	4c29      	ldr	r4, [pc, #164]	; (4214 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    416e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    4172:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    4174:	6837      	ldr	r7, [r6, #0]
    4176:	6806      	ldr	r6, [r0, #0]
    4178:	682d      	ldr	r5, [r5, #0]
    417a:	4a27      	ldr	r2, [pc, #156]	; (4218 <wait_for_cal+0x124>)
    417c:	6824      	ldr	r4, [r4, #0]
    417e:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    4180:	443e      	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    4182:	6800      	ldr	r0, [r0, #0]
    4184:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    4186:	4f25      	ldr	r7, [pc, #148]	; (421c <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    4188:	4435      	add	r5, r6
    418a:	442c      	add	r4, r5
    418c:	4420      	add	r0, r4
    418e:	4402      	add	r2, r0
    4190:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    4194:	4e22      	ldr	r6, [pc, #136]	; (4220 <wait_for_cal+0x12c>)
    4196:	4823      	ldr	r0, [pc, #140]	; (4224 <wait_for_cal+0x130>)
    4198:	4d23      	ldr	r5, [pc, #140]	; (4228 <wait_for_cal+0x134>)
    419a:	4c24      	ldr	r4, [pc, #144]	; (422c <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    419c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    41a0:	603a      	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    41a2:	6837      	ldr	r7, [r6, #0]
    41a4:	6806      	ldr	r6, [r0, #0]
    41a6:	682d      	ldr	r5, [r5, #0]
    41a8:	4a21      	ldr	r2, [pc, #132]	; (4230 <wait_for_cal+0x13c>)
    41aa:	6824      	ldr	r4, [r4, #0]
    41ac:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    41ae:	443e      	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    41b0:	6800      	ldr	r0, [r0, #0]
    41b2:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    41b4:	4435      	add	r5, r6
    41b6:	442c      	add	r4, r5
    41b8:	4420      	add	r0, r4
    41ba:	4402      	add	r2, r0
    41bc:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    41c0:	481c      	ldr	r0, [pc, #112]	; (4234 <wait_for_cal+0x140>)
    41c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    41c6:	6002      	str	r2, [r0, #0]
#endif
		calibrating = 0;
    41c8:	700b      	strb	r3, [r1, #0]
	}
	__enable_irq();
    41ca:	b662      	cpsie	i
}
    41cc:	bcf0      	pop	{r4, r5, r6, r7}
    41ce:	4770      	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    41d0:	b662      	cpsie	i
    41d2:	4770      	bx	lr
    41d4:	4003b024 	.word	0x4003b024
    41d8:	400bb024 	.word	0x400bb024
    41dc:	1fff8e55 	.word	0x1fff8e55
    41e0:	4003b038 	.word	0x4003b038
    41e4:	4003b03c 	.word	0x4003b03c
    41e8:	4003b040 	.word	0x4003b040
    41ec:	4003b02c 	.word	0x4003b02c
    41f0:	4003b058 	.word	0x4003b058
    41f4:	4003b05c 	.word	0x4003b05c
    41f8:	4003b060 	.word	0x4003b060
    41fc:	4003b064 	.word	0x4003b064
    4200:	4003b06c 	.word	0x4003b06c
    4204:	4003b030 	.word	0x4003b030
    4208:	400bb038 	.word	0x400bb038
    420c:	400bb03c 	.word	0x400bb03c
    4210:	400bb040 	.word	0x400bb040
    4214:	400bb044 	.word	0x400bb044
    4218:	400bb04c 	.word	0x400bb04c
    421c:	400bb02c 	.word	0x400bb02c
    4220:	400bb058 	.word	0x400bb058
    4224:	400bb05c 	.word	0x400bb05c
    4228:	400bb060 	.word	0x400bb060
    422c:	400bb064 	.word	0x400bb064
    4230:	400bb06c 	.word	0x400bb06c
    4234:	400bb030 	.word	0x400bb030

00004238 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    4238:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    423a:	4829      	ldr	r0, [pc, #164]	; (42e0 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    423c:	4a29      	ldr	r2, [pc, #164]	; (42e4 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    423e:	4b2a      	ldr	r3, [pc, #168]	; (42e8 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4240:	4d2a      	ldr	r5, [pc, #168]	; (42ec <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    4242:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    4244:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    4246:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    4248:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    424a:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    424c:	4c28      	ldr	r4, [pc, #160]	; (42f0 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    424e:	2b08      	cmp	r3, #8
    4250:	d030      	beq.n	42b4 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    4252:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    4254:	4827      	ldr	r0, [pc, #156]	; (42f4 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4256:	4928      	ldr	r1, [pc, #160]	; (42f8 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    4258:	d037      	beq.n	42ca <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    425a:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    425c:	bf0c      	ite	eq
    425e:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4260:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    4262:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4264:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    4266:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4268:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    426a:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    426c:	4b23      	ldr	r3, [pc, #140]	; (42fc <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    426e:	4924      	ldr	r1, [pc, #144]	; (4300 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    4270:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4272:	4a24      	ldr	r2, [pc, #144]	; (4304 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    4274:	b1bb      	cbz	r3, 42a6 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4276:	2301      	movs	r3, #1
    4278:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    427a:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    427c:	4b22      	ldr	r3, [pc, #136]	; (4308 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    427e:	4923      	ldr	r1, [pc, #140]	; (430c <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    4280:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    4282:	4a23      	ldr	r2, [pc, #140]	; (4310 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    4284:	2b01      	cmp	r3, #1
    4286:	d926      	bls.n	42d6 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    4288:	2b04      	cmp	r3, #4
    428a:	d90f      	bls.n	42ac <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    428c:	2b08      	cmp	r3, #8
    428e:	d91e      	bls.n	42ce <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    4290:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    4292:	bf94      	ite	ls
    4294:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    4296:	2387      	movhi	r3, #135	; 0x87
    4298:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    429a:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    429c:	4b1d      	ldr	r3, [pc, #116]	; (4314 <analog_init+0xdc>)
    429e:	2201      	movs	r2, #1
    42a0:	701a      	strb	r2, [r3, #0]
}
    42a2:	bc30      	pop	{r4, r5}
    42a4:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    42a6:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    42a8:	6013      	str	r3, [r2, #0]
    42aa:	e7e7      	b.n	427c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    42ac:	2384      	movs	r3, #132	; 0x84
    42ae:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    42b0:	6013      	str	r3, [r2, #0]
    42b2:	e7f3      	b.n	429c <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    42b4:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    42b8:	490f      	ldr	r1, [pc, #60]	; (42f8 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    42ba:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    42bc:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    42be:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    42c0:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    42c2:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    42c4:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    42c6:	600b      	str	r3, [r1, #0]
    42c8:	e7d0      	b.n	426c <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    42ca:	2239      	movs	r2, #57	; 0x39
    42cc:	e7f7      	b.n	42be <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    42ce:	2385      	movs	r3, #133	; 0x85
    42d0:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    42d2:	6013      	str	r3, [r2, #0]
    42d4:	e7e2      	b.n	429c <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    42d6:	2380      	movs	r3, #128	; 0x80
    42d8:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    42da:	6013      	str	r3, [r2, #0]
    42dc:	e7de      	b.n	429c <analog_init+0x64>
    42de:	bf00      	nop
    42e0:	40074000 	.word	0x40074000
    42e4:	40074001 	.word	0x40074001
    42e8:	1fff875e 	.word	0x1fff875e
    42ec:	4003b008 	.word	0x4003b008
    42f0:	4003b00c 	.word	0x4003b00c
    42f4:	400bb008 	.word	0x400bb008
    42f8:	400bb00c 	.word	0x400bb00c
    42fc:	1fff8e58 	.word	0x1fff8e58
    4300:	4003b020 	.word	0x4003b020
    4304:	400bb020 	.word	0x400bb020
    4308:	1fff875f 	.word	0x1fff875f
    430c:	4003b024 	.word	0x4003b024
    4310:	400bb024 	.word	0x400bb024
    4314:	1fff8e55 	.word	0x1fff8e55

00004318 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    4318:	2828      	cmp	r0, #40	; 0x28
    431a:	d82f      	bhi.n	437c <analogRead+0x64>
	channel = pin2sc1a[pin];
    431c:	4b33      	ldr	r3, [pc, #204]	; (43ec <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    431e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    4322:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    4324:	2eff      	cmp	r6, #255	; 0xff
    4326:	d02b      	beq.n	4380 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    4328:	4b31      	ldr	r3, [pc, #196]	; (43f0 <analogRead+0xd8>)
    432a:	781b      	ldrb	r3, [r3, #0]
    432c:	2b00      	cmp	r3, #0
    432e:	d12a      	bne.n	4386 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    4330:	0632      	lsls	r2, r6, #24
    4332:	d42c      	bmi.n	438e <analogRead+0x76>
#endif

	__disable_irq();
    4334:	b672      	cpsid	i
    4336:	4d2f      	ldr	r5, [pc, #188]	; (43f4 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    4338:	4c2f      	ldr	r4, [pc, #188]	; (43f8 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    433a:	462f      	mov	r7, r5
    433c:	2301      	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    433e:	6026      	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    4340:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    4342:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    4344:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    4346:	6823      	ldr	r3, [r4, #0]
    4348:	061b      	lsls	r3, r3, #24
    434a:	d40c      	bmi.n	4366 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    434c:	783b      	ldrb	r3, [r7, #0]
    434e:	b91b      	cbnz	r3, 4358 <analogRead+0x40>
    4350:	e7f4      	b.n	433c <analogRead+0x24>
    4352:	782b      	ldrb	r3, [r5, #0]
    4354:	2b00      	cmp	r3, #0
    4356:	d0f1      	beq.n	433c <analogRead+0x24>
		__enable_irq();
    4358:	b662      	cpsie	i
		yield();
    435a:	f001 fb8d 	bl	5a78 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    435e:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    4360:	6823      	ldr	r3, [r4, #0]
    4362:	0618      	lsls	r0, r3, #24
    4364:	d5f5      	bpl.n	4352 <analogRead+0x3a>
			result = ADC0_RA;
    4366:	4b25      	ldr	r3, [pc, #148]	; (43fc <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    4368:	681b      	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    436a:	2200      	movs	r2, #0
    436c:	702a      	strb	r2, [r5, #0]
			__enable_irq();
    436e:	b662      	cpsie	i
			result >>= analog_right_shift;
    4370:	4a23      	ldr	r2, [pc, #140]	; (4400 <analogRead+0xe8>)
    4372:	7810      	ldrb	r0, [r2, #0]
    4374:	fa43 f000 	asr.w	r0, r3, r0
			return result;
    4378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    437c:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    437e:	4770      	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    4380:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    4382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    4386:	f7ff feb5 	bl	40f4 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    438a:	0632      	lsls	r2, r6, #24
    438c:	d5d2      	bpl.n	4334 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    438e:	b672      	cpsid	i
    4390:	4d1c      	ldr	r5, [pc, #112]	; (4404 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    4392:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4410 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    4396:	4c1c      	ldr	r4, [pc, #112]	; (4408 <analogRead+0xf0>)
    4398:	f006 0740 	and.w	r7, r6, #64	; 0x40
    439c:	b2ff      	uxtb	r7, r7
    439e:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    43a2:	f8d8 3000 	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    43a6:	b1df      	cbz	r7, 43e0 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    43a8:	f023 0310 	bic.w	r3, r3, #16
    43ac:	f8c8 3000 	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    43b0:	2301      	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    43b2:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    43b4:	4a13      	ldr	r2, [pc, #76]	; (4404 <analogRead+0xec>)
    43b6:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    43b8:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    43ba:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    43bc:	6823      	ldr	r3, [r4, #0]
    43be:	0619      	lsls	r1, r3, #24
    43c0:	d40c      	bmi.n	43dc <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    43c2:	7813      	ldrb	r3, [r2, #0]
    43c4:	b91b      	cbnz	r3, 43ce <analogRead+0xb6>
    43c6:	e7ec      	b.n	43a2 <analogRead+0x8a>
    43c8:	782b      	ldrb	r3, [r5, #0]
    43ca:	2b00      	cmp	r3, #0
    43cc:	d0e9      	beq.n	43a2 <analogRead+0x8a>
		__enable_irq();
    43ce:	b662      	cpsie	i
		yield();
    43d0:	f001 fb52 	bl	5a78 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    43d4:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    43d6:	6823      	ldr	r3, [r4, #0]
    43d8:	061b      	lsls	r3, r3, #24
    43da:	d5f5      	bpl.n	43c8 <analogRead+0xb0>
			result = ADC1_RA;
    43dc:	4b0b      	ldr	r3, [pc, #44]	; (440c <analogRead+0xf4>)
    43de:	e7c3      	b.n	4368 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    43e0:	f043 0310 	orr.w	r3, r3, #16
    43e4:	f8c8 3000 	str.w	r3, [r8]
    43e8:	e7e2      	b.n	43b0 <analogRead+0x98>
    43ea:	bf00      	nop
    43ec:	00007d84 	.word	0x00007d84
    43f0:	1fff8e55 	.word	0x1fff8e55
    43f4:	1fff8e57 	.word	0x1fff8e57
    43f8:	4003b000 	.word	0x4003b000
    43fc:	4003b010 	.word	0x4003b010
    4400:	1fff8e54 	.word	0x1fff8e54
    4404:	1fff8e56 	.word	0x1fff8e56
    4408:	400bb000 	.word	0x400bb000
    440c:	400bb010 	.word	0x400bb010
    4410:	400bb00c 	.word	0x400bb00c

00004414 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    4414:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    4416:	4c10      	ldr	r4, [pc, #64]	; (4458 <fault_isr+0x44>)
    4418:	e008      	b.n	442c <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    441a:	6823      	ldr	r3, [r4, #0]
    441c:	0559      	lsls	r1, r3, #21
    441e:	d40d      	bmi.n	443c <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4420:	6823      	ldr	r3, [r4, #0]
    4422:	051a      	lsls	r2, r3, #20
    4424:	d40f      	bmi.n	4446 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    4426:	6823      	ldr	r3, [r4, #0]
    4428:	04db      	lsls	r3, r3, #19
    442a:	d411      	bmi.n	4450 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    442c:	6823      	ldr	r3, [r4, #0]
    442e:	0358      	lsls	r0, r3, #13
    4430:	d5f3      	bpl.n	441a <fault_isr+0x6>
    4432:	f000 fa37 	bl	48a4 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    4436:	6823      	ldr	r3, [r4, #0]
    4438:	0559      	lsls	r1, r3, #21
    443a:	d5f1      	bpl.n	4420 <fault_isr+0xc>
    443c:	f001 fba0 	bl	5b80 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4440:	6823      	ldr	r3, [r4, #0]
    4442:	051a      	lsls	r2, r3, #20
    4444:	d5ef      	bpl.n	4426 <fault_isr+0x12>
    4446:	f001 fc31 	bl	5cac <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    444a:	6823      	ldr	r3, [r4, #0]
    444c:	04db      	lsls	r3, r3, #19
    444e:	d5ed      	bpl.n	442c <fault_isr+0x18>
    4450:	f001 fcc2 	bl	5dd8 <uart2_status_isr>
    4454:	e7ea      	b.n	442c <fault_isr+0x18>
    4456:	bf00      	nop
    4458:	40048034 	.word	0x40048034

0000445c <unused_isr>:
	}
}

void unused_isr(void)
{
    445c:	b508      	push	{r3, lr}
	fault_isr();
    445e:	f7ff ffd9 	bl	4414 <fault_isr>
    4462:	bf00      	nop

00004464 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    4464:	4b01      	ldr	r3, [pc, #4]	; (446c <startup_early_hook+0x8>)
    4466:	2210      	movs	r2, #16
    4468:	801a      	strh	r2, [r3, #0]
    446a:	4770      	bx	lr
    446c:	40052000 	.word	0x40052000

00004470 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    4470:	4770      	bx	lr
    4472:	bf00      	nop

00004474 <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    4474:	7800      	ldrb	r0, [r0, #0]
}
    4476:	fab0 f080 	clz	r0, r0
    447a:	0940      	lsrs	r0, r0, #5
    447c:	4770      	bx	lr
    447e:	bf00      	nop

00004480 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    4480:	2301      	movs	r3, #1
    4482:	7003      	strb	r3, [r0, #0]
    4484:	4770      	bx	lr
    4486:	bf00      	nop

00004488 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    4488:	4a1c      	ldr	r2, [pc, #112]	; (44fc <pinMode.part.2+0x74>)
    448a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    448e:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    4490:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    4492:	d011      	beq.n	44b8 <pinMode.part.2+0x30>
    4494:	2904      	cmp	r1, #4
    4496:	d01b      	beq.n	44d0 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    4498:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    449c:	2200      	movs	r2, #0
    449e:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    44a2:	b129      	cbz	r1, 44b0 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    44a4:	2902      	cmp	r1, #2
    44a6:	d020      	beq.n	44ea <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    44a8:	2903      	cmp	r1, #3
    44aa:	d022      	beq.n	44f2 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    44ac:	601a      	str	r2, [r3, #0]
    44ae:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    44b0:	f44f 7280 	mov.w	r2, #256	; 0x100
    44b4:	601a      	str	r2, [r3, #0]
    44b6:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    44b8:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    44bc:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    44c0:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    44c4:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    44c6:	681a      	ldr	r2, [r3, #0]
    44c8:	f022 0220 	bic.w	r2, r2, #32
    44cc:	601a      	str	r2, [r3, #0]
    44ce:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    44d0:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    44d4:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    44d8:	2001      	movs	r0, #1
    44da:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    44de:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    44e0:	681a      	ldr	r2, [r3, #0]
    44e2:	f042 0220 	orr.w	r2, r2, #32
    44e6:	601a      	str	r2, [r3, #0]
    44e8:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    44ea:	f240 1203 	movw	r2, #259	; 0x103
    44ee:	601a      	str	r2, [r3, #0]
    44f0:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    44f2:	f44f 7281 	mov.w	r2, #258	; 0x102
    44f6:	601a      	str	r2, [r3, #0]
    44f8:	4770      	bx	lr
    44fa:	bf00      	nop
    44fc:	00007db0 	.word	0x00007db0

00004500 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    4500:	b430      	push	{r4, r5}
	RTC_SR = 0;
    4502:	4b05      	ldr	r3, [pc, #20]	; (4518 <rtc_set+0x18>)
	RTC_TPR = 0;
    4504:	4d05      	ldr	r5, [pc, #20]	; (451c <rtc_set+0x1c>)
	RTC_TSR = t;
    4506:	4c06      	ldr	r4, [pc, #24]	; (4520 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    4508:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    450a:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    450c:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    450e:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    4510:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    4512:	6019      	str	r1, [r3, #0]
}
    4514:	bc30      	pop	{r4, r5}
    4516:	4770      	bx	lr
    4518:	4003d014 	.word	0x4003d014
    451c:	4003d004 	.word	0x4003d004
    4520:	4003d000 	.word	0x4003d000

00004524 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    4524:	2821      	cmp	r0, #33	; 0x21
    4526:	d801      	bhi.n	452c <pinMode+0x8>
    4528:	f7ff bfae 	b.w	4488 <pinMode.part.2>
    452c:	4770      	bx	lr
    452e:	bf00      	nop

00004530 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    4530:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    4532:	490c      	ldr	r1, [pc, #48]	; (4564 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4534:	4b0c      	ldr	r3, [pc, #48]	; (4568 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4536:	4a0d      	ldr	r2, [pc, #52]	; (456c <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4538:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    453a:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    453c:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    453e:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4540:	0152      	lsls	r2, r2, #5
    4542:	d502      	bpl.n	454a <micros+0x1a>
    4544:	2b32      	cmp	r3, #50	; 0x32
    4546:	bf88      	it	hi
    4548:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    454a:	4909      	ldr	r1, [pc, #36]	; (4570 <micros+0x40>)
    454c:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    4550:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4554:	33ff      	adds	r3, #255	; 0xff
    4556:	fba1 1303 	umull	r1, r3, r1, r3
    455a:	fb02 f000 	mul.w	r0, r2, r0
}
    455e:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    4562:	4770      	bx	lr
    4564:	1fff8e5c 	.word	0x1fff8e5c
    4568:	e000e018 	.word	0xe000e018
    456c:	e000ed04 	.word	0xe000ed04
    4570:	aaaaaaab 	.word	0xaaaaaaab

00004574 <delay>:

void delay(uint32_t ms)
{
    4574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4578:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    457a:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    457c:	4f20      	ldr	r7, [pc, #128]	; (4600 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    457e:	4b21      	ldr	r3, [pc, #132]	; (4604 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4580:	4a21      	ldr	r2, [pc, #132]	; (4608 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4582:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    4584:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4586:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    4588:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    458a:	0152      	lsls	r2, r2, #5
    458c:	d502      	bpl.n	4594 <delay+0x20>
    458e:	2b32      	cmp	r3, #50	; 0x32
    4590:	bf88      	it	hi
    4592:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    4594:	b395      	cbz	r5, 45fc <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    4596:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    459a:	4e1c      	ldr	r6, [pc, #112]	; (460c <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    459c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 4604 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    45a0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4608 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    45a4:	33ff      	adds	r3, #255	; 0xff
    45a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    45aa:	fba6 1303 	umull	r1, r3, r6, r3
    45ae:	fb02 f404 	mul.w	r4, r2, r4
    45b2:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    45b6:	b672      	cpsid	i
	current = SYST_CVR;
    45b8:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    45bc:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    45be:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    45c2:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    45c4:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    45c8:	33ff      	adds	r3, #255	; 0xff
    45ca:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    45ce:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    45d2:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    45d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    45da:	d002      	beq.n	45e2 <delay+0x6e>
    45dc:	2932      	cmp	r1, #50	; 0x32
    45de:	bf88      	it	hi
    45e0:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    45e2:	fb00 3302 	mla	r3, r0, r2, r3
    45e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    45ea:	d304      	bcc.n	45f6 <delay+0x82>
				ms--;
				if (ms == 0) return;
    45ec:	3d01      	subs	r5, #1
    45ee:	d005      	beq.n	45fc <delay+0x88>
				start += 1000;
    45f0:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    45f4:	e7df      	b.n	45b6 <delay+0x42>
			}
			yield();
    45f6:	f001 fa3f 	bl	5a78 <yield>
		}
    45fa:	e7dc      	b.n	45b6 <delay+0x42>
    45fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4600:	1fff8e5c 	.word	0x1fff8e5c
    4604:	e000e018 	.word	0xe000e018
    4608:	e000ed04 	.word	0xe000ed04
    460c:	aaaaaaab 	.word	0xaaaaaaab

00004610 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    4610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    4612:	4b2d      	ldr	r3, [pc, #180]	; (46c8 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    4614:	492d      	ldr	r1, [pc, #180]	; (46cc <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    4616:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 46e8 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    461a:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 46ec <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    461e:	4e2c      	ldr	r6, [pc, #176]	; (46d0 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    4620:	4d2c      	ldr	r5, [pc, #176]	; (46d4 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    4622:	4c2d      	ldr	r4, [pc, #180]	; (46d8 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    4624:	4a2d      	ldr	r2, [pc, #180]	; (46dc <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    4626:	4f2e      	ldr	r7, [pc, #184]	; (46e0 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    4628:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    462c:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    462e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    4632:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    4634:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    4638:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    463a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    463e:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    4640:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    4644:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    4646:	2000      	movs	r0, #0
    4648:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    464a:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    464c:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    4650:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    4654:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    4658:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    465a:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    465c:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    465e:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    4660:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    4662:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    4664:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4666:	2209      	movs	r2, #9
    4668:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    466c:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    4670:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    4674:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    4678:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    467c:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    4680:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    4684:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    4686:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    468a:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    468e:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    4692:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    4696:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    4698:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    469c:	4811      	ldr	r0, [pc, #68]	; (46e4 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    469e:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    46a0:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    46a4:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    46a8:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    46aa:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    46ac:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    46ae:	f7ff fdc3 	bl	4238 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    46b2:	2019      	movs	r0, #25
    46b4:	f7ff ff5e 	bl	4574 <delay>
	usb_init();
    46b8:	f000 fe5c 	bl	5374 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    46bc:	f240 1013 	movw	r0, #275	; 0x113
}
    46c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    46c4:	f7ff bf56 	b.w	4574 <delay>
    46c8:	e000e108 	.word	0xe000e108
    46cc:	40038004 	.word	0x40038004
    46d0:	40038014 	.word	0x40038014
    46d4:	40038024 	.word	0x40038024
    46d8:	4003802c 	.word	0x4003802c
    46dc:	4003801c 	.word	0x4003801c
    46e0:	40038034 	.word	0x40038034
    46e4:	400b8000 	.word	0x400b8000
    46e8:	4003800c 	.word	0x4003800c
    46ec:	40038008 	.word	0x40038008

000046f0 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    46f0:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    46f2:	2b03      	cmp	r3, #3
    46f4:	d814      	bhi.n	4720 <usb_rx+0x30>
	__disable_irq();
    46f6:	b672      	cpsid	i
	ret = rx_first[endpoint];
    46f8:	490a      	ldr	r1, [pc, #40]	; (4724 <usb_rx+0x34>)
    46fa:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    46fe:	b168      	cbz	r0, 471c <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    4700:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    4702:	4c09      	ldr	r4, [pc, #36]	; (4728 <usb_rx+0x38>)
    4704:	8805      	ldrh	r5, [r0, #0]
    4706:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    470a:	6846      	ldr	r6, [r0, #4]
    470c:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    4710:	1b52      	subs	r2, r2, r5
    4712:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    4716:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    4718:	bc70      	pop	{r4, r5, r6}
    471a:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    471c:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    471e:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    4720:	2000      	movs	r0, #0
    4722:	4770      	bx	lr
    4724:	1fff8eb8 	.word	0x1fff8eb8
    4728:	1fff9108 	.word	0x1fff9108

0000472c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    472c:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    472e:	2803      	cmp	r0, #3
    4730:	d80b      	bhi.n	474a <usb_tx_packet_count+0x1e>
	__disable_irq();
    4732:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    4734:	4b07      	ldr	r3, [pc, #28]	; (4754 <usb_tx_packet_count+0x28>)
    4736:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    473a:	b143      	cbz	r3, 474e <usb_tx_packet_count+0x22>
    473c:	2000      	movs	r0, #0
    473e:	685b      	ldr	r3, [r3, #4]
    4740:	3001      	adds	r0, #1
    4742:	2b00      	cmp	r3, #0
    4744:	d1fb      	bne.n	473e <usb_tx_packet_count+0x12>
	__enable_irq();
    4746:	b662      	cpsie	i
	return count;
    4748:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    474a:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    474c:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    474e:	4618      	mov	r0, r3
    4750:	e7f9      	b.n	4746 <usb_tx_packet_count+0x1a>
    4752:	bf00      	nop
    4754:	1fff8f0c 	.word	0x1fff8f0c

00004758 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    4758:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    475a:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    475c:	4a2b      	ldr	r2, [pc, #172]	; (480c <usb_rx_memory+0xb4>)
    475e:	7813      	ldrb	r3, [r2, #0]
    4760:	071d      	lsls	r5, r3, #28
    4762:	d506      	bpl.n	4772 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4764:	4b2a      	ldr	r3, [pc, #168]	; (4810 <usb_rx_memory+0xb8>)
    4766:	6a19      	ldr	r1, [r3, #32]
    4768:	2900      	cmp	r1, #0
    476a:	d036      	beq.n	47da <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    476c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    476e:	2900      	cmp	r1, #0
    4770:	d041      	beq.n	47f6 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4772:	7853      	ldrb	r3, [r2, #1]
    4774:	071c      	lsls	r4, r3, #28
    4776:	d506      	bpl.n	4786 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4778:	4b25      	ldr	r3, [pc, #148]	; (4810 <usb_rx_memory+0xb8>)
    477a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    477c:	2900      	cmp	r1, #0
    477e:	d03e      	beq.n	47fe <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4780:	6c99      	ldr	r1, [r3, #72]	; 0x48
    4782:	2900      	cmp	r1, #0
    4784:	d039      	beq.n	47fa <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4786:	7893      	ldrb	r3, [r2, #2]
    4788:	0719      	lsls	r1, r3, #28
    478a:	d505      	bpl.n	4798 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    478c:	4b20      	ldr	r3, [pc, #128]	; (4810 <usb_rx_memory+0xb8>)
    478e:	6e19      	ldr	r1, [r3, #96]	; 0x60
    4790:	2900      	cmp	r1, #0
    4792:	d036      	beq.n	4802 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4794:	6e99      	ldr	r1, [r3, #104]	; 0x68
    4796:	b189      	cbz	r1, 47bc <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4798:	78d3      	ldrb	r3, [r2, #3]
    479a:	071b      	lsls	r3, r3, #28
    479c:	d507      	bpl.n	47ae <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    479e:	4b1c      	ldr	r3, [pc, #112]	; (4810 <usb_rx_memory+0xb8>)
    47a0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    47a4:	b37a      	cbz	r2, 4806 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    47a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    47aa:	2111      	movs	r1, #17
    47ac:	b13a      	cbz	r2, 47be <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    47ae:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    47b0:	4b18      	ldr	r3, [pc, #96]	; (4814 <usb_rx_memory+0xbc>)
    47b2:	2200      	movs	r2, #0
    47b4:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    47b6:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    47b8:	f000 be68 	b.w	548c <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    47bc:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    47be:	4c15      	ldr	r4, [pc, #84]	; (4814 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    47c0:	4d15      	ldr	r5, [pc, #84]	; (4818 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    47c2:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    47c4:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    47c8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    47cc:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    47ce:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    47d0:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    47d2:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    47d4:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    47d6:	bc30      	pop	{r4, r5}
    47d8:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    47da:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    47dc:	4c0d      	ldr	r4, [pc, #52]	; (4814 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    47de:	4d0f      	ldr	r5, [pc, #60]	; (481c <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    47e0:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    47e2:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    47e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    47ea:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    47ec:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    47ee:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    47f0:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    47f2:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    47f4:	e7ef      	b.n	47d6 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    47f6:	2105      	movs	r1, #5
    47f8:	e7e1      	b.n	47be <usb_rx_memory+0x66>
    47fa:	2109      	movs	r1, #9
    47fc:	e7df      	b.n	47be <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    47fe:	2208      	movs	r2, #8
    4800:	e7ec      	b.n	47dc <usb_rx_memory+0x84>
    4802:	220c      	movs	r2, #12
    4804:	e7ea      	b.n	47dc <usb_rx_memory+0x84>
    4806:	2210      	movs	r2, #16
    4808:	e7e8      	b.n	47dc <usb_rx_memory+0x84>
    480a:	bf00      	nop
    480c:	00007eec 	.word	0x00007eec
    4810:	1fff8000 	.word	0x1fff8000
    4814:	1fff8f35 	.word	0x1fff8f35
    4818:	004000c8 	.word	0x004000c8
    481c:	00400088 	.word	0x00400088

00004820 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    4820:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    4822:	2b03      	cmp	r3, #3
    4824:	d81d      	bhi.n	4862 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    4826:	4a1b      	ldr	r2, [pc, #108]	; (4894 <usb_tx+0x74>)
    4828:	0140      	lsls	r0, r0, #5
    482a:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    482e:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    4830:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    4832:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    4834:	4c18      	ldr	r4, [pc, #96]	; (4898 <usb_tx+0x78>)
    4836:	5ce2      	ldrb	r2, [r4, r3]
    4838:	2a03      	cmp	r2, #3
    483a:	d81b      	bhi.n	4874 <usb_tx+0x54>
    483c:	e8df f002 	tbb	[pc, r2]
    4840:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    4844:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4846:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    4848:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    484a:	f010 0f08 	tst.w	r0, #8
    484e:	bf14      	ite	ne
    4850:	23c8      	movne	r3, #200	; 0xc8
    4852:	2388      	moveq	r3, #136	; 0x88
    4854:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    4858:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    485a:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    485c:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    485e:	b662      	cpsie	i
}
    4860:	bc30      	pop	{r4, r5}
    4862:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    4864:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    4866:	2202      	movs	r2, #2
		break;
    4868:	e7ed      	b.n	4846 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    486a:	2205      	movs	r2, #5
    486c:	e7eb      	b.n	4846 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    486e:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    4870:	2204      	movs	r2, #4
		break;
    4872:	e7e8      	b.n	4846 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    4874:	4a09      	ldr	r2, [pc, #36]	; (489c <usb_tx+0x7c>)
    4876:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    487a:	b138      	cbz	r0, 488c <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    487c:	4a08      	ldr	r2, [pc, #32]	; (48a0 <usb_tx+0x80>)
    487e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    4882:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    4884:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    4888:	b662      	cpsie	i
		return;
    488a:	e7e9      	b.n	4860 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    488c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    4890:	4a03      	ldr	r2, [pc, #12]	; (48a0 <usb_tx+0x80>)
    4892:	e7f7      	b.n	4884 <usb_tx+0x64>
    4894:	1fff8000 	.word	0x1fff8000
    4898:	1fff8f44 	.word	0x1fff8f44
    489c:	1fff8f0c 	.word	0x1fff8f0c
    48a0:	1fff8f1c 	.word	0x1fff8f1c

000048a4 <usb_isr>:
}



void usb_isr(void)
{
    48a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    48a8:	f8df b30c 	ldr.w	fp, [pc, #780]	; 4bb8 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    48ac:	f8df a30c 	ldr.w	sl, [pc, #780]	; 4bbc <usb_isr+0x318>
}



void usb_isr(void)
{
    48b0:	b087      	sub	sp, #28
    48b2:	e044      	b.n	493e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    48b4:	4fab      	ldr	r7, [pc, #684]	; (4b64 <usb_isr+0x2c0>)
    48b6:	ea4f 0893 	mov.w	r8, r3, lsr #2
    48ba:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    48be:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    48c0:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    48c4:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    48c8:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    48ca:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    48ce:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    48d2:	2b00      	cmp	r3, #0
    48d4:	f040 8102 	bne.w	4adc <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    48d8:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    48dc:	0c1b      	lsrs	r3, r3, #16
    48de:	b299      	uxth	r1, r3
    48e0:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    48e4:	2b00      	cmp	r3, #0
    48e6:	f000 80f0 	beq.w	4aca <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    48ea:	4b9f      	ldr	r3, [pc, #636]	; (4b68 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    48ec:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    48f0:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    48f4:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    48f8:	2a00      	cmp	r2, #0
    48fa:	f000 82c5 	beq.w	4e88 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    48fe:	4d9b      	ldr	r5, [pc, #620]	; (4b6c <usb_isr+0x2c8>)
    4900:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    4904:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    4906:	4c9a      	ldr	r4, [pc, #616]	; (4b70 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    4908:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    490c:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    4910:	4419      	add	r1, r3
    4912:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    4916:	f000 fd99 	bl	544c <usb_malloc>
					if (packet) {
    491a:	2800      	cmp	r0, #0
    491c:	f000 82ad 	beq.w	4e7a <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    4920:	4a94      	ldr	r2, [pc, #592]	; (4b74 <usb_isr+0x2d0>)
    4922:	4b95      	ldr	r3, [pc, #596]	; (4b78 <usb_isr+0x2d4>)
    4924:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    4928:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    492c:	bf18      	it	ne
    492e:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    4930:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    4934:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    4938:	2308      	movs	r3, #8
    493a:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    493e:	f89b 4000 	ldrb.w	r4, [fp]
    4942:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    4944:	0761      	lsls	r1, r4, #29
    4946:	d51a      	bpl.n	497e <usb_isr+0xda>
		if (usb_configuration) {
    4948:	4b8c      	ldr	r3, [pc, #560]	; (4b7c <usb_isr+0x2d8>)
    494a:	781b      	ldrb	r3, [r3, #0]
    494c:	b1a3      	cbz	r3, 4978 <usb_isr+0xd4>
			t = usb_reboot_timer;
    494e:	498c      	ldr	r1, [pc, #560]	; (4b80 <usb_isr+0x2dc>)
    4950:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    4952:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    4956:	b122      	cbz	r2, 4962 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    4958:	3b01      	subs	r3, #1
    495a:	b2db      	uxtb	r3, r3
    495c:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    495e:	b903      	cbnz	r3, 4962 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    4960:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    4962:	4988      	ldr	r1, [pc, #544]	; (4b84 <usb_isr+0x2e0>)
    4964:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    4966:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    496a:	b12a      	cbz	r2, 4978 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    496c:	3b01      	subs	r3, #1
    496e:	b2db      	uxtb	r3, r3
    4970:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    4972:	2b00      	cmp	r3, #0
    4974:	f000 8257 	beq.w	4e26 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    4978:	2304      	movs	r3, #4
    497a:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    497e:	f004 0308 	and.w	r3, r4, #8
    4982:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    4986:	2b00      	cmp	r3, #0
    4988:	f000 80cc 	beq.w	4b24 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    498c:	f89a 3000 	ldrb.w	r3, [sl]
    4990:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    4992:	091e      	lsrs	r6, r3, #4
    4994:	d18e      	bne.n	48b4 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    4996:	089c      	lsrs	r4, r3, #2
    4998:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 4b64 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    499c:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    49a0:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    49a4:	f3c2 0283 	ubfx	r2, r2, #2, #4
    49a8:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    49aa:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    49ac:	2a0c      	cmp	r2, #12
    49ae:	f200 8088 	bhi.w	4ac2 <usb_isr+0x21e>
    49b2:	e8df f002 	tbb	[pc, r2]
    49b6:	7c7c      	.short	0x7c7c
    49b8:	86868686 	.word	0x86868686
    49bc:	86478686 	.word	0x86478686
    49c0:	8686      	.short	0x8686
    49c2:	07          	.byte	0x07
    49c3:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    49c4:	6808      	ldr	r0, [r1, #0]
    49c6:	4d70      	ldr	r5, [pc, #448]	; (4b88 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    49c8:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    49ca:	4f70      	ldr	r7, [pc, #448]	; (4b8c <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    49cc:	4e70      	ldr	r6, [pc, #448]	; (4b90 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    49ce:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    49d0:	b281      	uxth	r1, r0
    49d2:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    49d6:	4b67      	ldr	r3, [pc, #412]	; (4b74 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    49d8:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    49da:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    49de:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    49e0:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    49e2:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    49e6:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    49e8:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    49ec:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    49f0:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    49f4:	4c5b      	ldr	r4, [pc, #364]	; (4b64 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    49f6:	f200 80e3 	bhi.w	4bc0 <usb_isr+0x31c>
    49fa:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    49fe:	f080 8346 	bcs.w	508e <usb_isr+0x7ea>
    4a02:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    4a06:	f000 82fc 	beq.w	5002 <usb_isr+0x75e>
    4a0a:	f200 828d 	bhi.w	4f28 <usb_isr+0x684>
    4a0e:	2980      	cmp	r1, #128	; 0x80
    4a10:	f000 8377 	beq.w	5102 <usb_isr+0x85e>
    4a14:	2982      	cmp	r1, #130	; 0x82
    4a16:	f040 82fa 	bne.w	500e <usb_isr+0x76a>
    4a1a:	88a9      	ldrh	r1, [r5, #4]
    4a1c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    4a20:	2904      	cmp	r1, #4
    4a22:	f200 82f4 	bhi.w	500e <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    4a26:	485b      	ldr	r0, [pc, #364]	; (4b94 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    4a28:	4c5b      	ldr	r4, [pc, #364]	; (4b98 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    4a2a:	0089      	lsls	r1, r1, #2
    4a2c:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    4a2e:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    4a30:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    4a32:	7802      	ldrb	r2, [r0, #0]
    4a34:	0793      	lsls	r3, r2, #30
    4a36:	f140 8458 	bpl.w	52ea <usb_isr+0xa46>
    4a3a:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    4a3e:	f04f 0e02 	mov.w	lr, #2
    4a42:	e342      	b.n	50ca <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    4a44:	4f51      	ldr	r7, [pc, #324]	; (4b8c <usb_isr+0x2e8>)
    4a46:	683a      	ldr	r2, [r7, #0]
		if (data) {
    4a48:	b332      	cbz	r2, 4a98 <usb_isr+0x1f4>
			size = ep0_tx_len;
    4a4a:	4b54      	ldr	r3, [pc, #336]	; (4b9c <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a4c:	4e50      	ldr	r6, [pc, #320]	; (4b90 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4a4e:	4954      	ldr	r1, [pc, #336]	; (4ba0 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    4a50:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a52:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4a54:	780d      	ldrb	r5, [r1, #0]
    4a56:	2840      	cmp	r0, #64	; 0x40
    4a58:	4686      	mov	lr, r0
    4a5a:	f045 0802 	orr.w	r8, r5, #2
    4a5e:	bf28      	it	cs
    4a60:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a64:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    4a66:	f084 0401 	eor.w	r4, r4, #1
    4a6a:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    4a6c:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a70:	bf0c      	ite	eq
    4a72:	2488      	moveq	r4, #136	; 0x88
    4a74:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4a76:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    4a7a:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4a7c:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a80:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4a84:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    4a86:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4a88:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    4a8c:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4a8e:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    4a90:	2800      	cmp	r0, #0
    4a92:	f000 8145 	beq.w	4d20 <usb_isr+0x47c>
    4a96:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    4a98:	4b3b      	ldr	r3, [pc, #236]	; (4b88 <usb_isr+0x2e4>)
    4a9a:	881a      	ldrh	r2, [r3, #0]
    4a9c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    4aa0:	d10f      	bne.n	4ac2 <usb_isr+0x21e>
			setup.bRequest = 0;
    4aa2:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    4aa4:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    4aa6:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    4aa8:	4b3e      	ldr	r3, [pc, #248]	; (4ba4 <usb_isr+0x300>)
    4aaa:	701a      	strb	r2, [r3, #0]
    4aac:	e009      	b.n	4ac2 <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    4aae:	4a36      	ldr	r2, [pc, #216]	; (4b88 <usb_isr+0x2e4>)
    4ab0:	8810      	ldrh	r0, [r2, #0]
    4ab2:	f242 0221 	movw	r2, #8225	; 0x2021
    4ab6:	4290      	cmp	r0, r2
    4ab8:	f000 8137 	beq.w	4d2a <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4abc:	4a2d      	ldr	r2, [pc, #180]	; (4b74 <usb_isr+0x2d0>)
    4abe:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    4ac2:	4a39      	ldr	r2, [pc, #228]	; (4ba8 <usb_isr+0x304>)
    4ac4:	2301      	movs	r3, #1
    4ac6:	7013      	strb	r3, [r2, #0]
    4ac8:	e736      	b.n	4938 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4aca:	4a2a      	ldr	r2, [pc, #168]	; (4b74 <usb_isr+0x2d0>)
    4acc:	4b2a      	ldr	r3, [pc, #168]	; (4b78 <usb_isr+0x2d4>)
    4ace:	f019 0f08 	tst.w	r9, #8
    4ad2:	bf18      	it	ne
    4ad4:	4613      	movne	r3, r2
    4ad6:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    4ada:	e72d      	b.n	4938 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    4adc:	f000 fcd6 	bl	548c <usb_free>
				packet = tx_first[endpoint];
    4ae0:	4a32      	ldr	r2, [pc, #200]	; (4bac <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    4ae2:	4933      	ldr	r1, [pc, #204]	; (4bb0 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    4ae4:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    4ae8:	2b00      	cmp	r3, #0
    4aea:	f000 81d1 	beq.w	4e90 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    4aee:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    4af0:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    4af2:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    4af6:	f103 0208 	add.w	r2, r3, #8
    4afa:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    4afe:	2c03      	cmp	r4, #3
    4b00:	d805      	bhi.n	4b0e <usb_isr+0x26a>
    4b02:	e8df f004 	tbb	[pc, r4]
    4b06:	022c      	.short	0x022c
    4b08:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    4b0a:	2202      	movs	r2, #2
    4b0c:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    4b0e:	881a      	ldrh	r2, [r3, #0]
    4b10:	f019 0f08 	tst.w	r9, #8
    4b14:	bf0c      	ite	eq
    4b16:	2388      	moveq	r3, #136	; 0x88
    4b18:	23c8      	movne	r3, #200	; 0xc8
    4b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    4b1e:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    4b22:	e709      	b.n	4938 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    4b24:	07e0      	lsls	r0, r4, #31
    4b26:	f100 8181 	bmi.w	4e2c <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    4b2a:	0621      	lsls	r1, r4, #24
    4b2c:	f100 81f2 	bmi.w	4f14 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    4b30:	07a2      	lsls	r2, r4, #30
    4b32:	d506      	bpl.n	4b42 <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    4b34:	4a1f      	ldr	r2, [pc, #124]	; (4bb4 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    4b36:	4920      	ldr	r1, [pc, #128]	; (4bb8 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    4b38:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    4b3a:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    4b3c:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    4b3e:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    4b40:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    4b42:	06e3      	lsls	r3, r4, #27
    4b44:	d502      	bpl.n	4b4c <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    4b46:	4b1c      	ldr	r3, [pc, #112]	; (4bb8 <usb_isr+0x314>)
    4b48:	2210      	movs	r2, #16
    4b4a:	701a      	strb	r2, [r3, #0]
	}

}
    4b4c:	b007      	add	sp, #28
    4b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    4b52:	2204      	movs	r2, #4
    4b54:	558a      	strb	r2, [r1, r6]
						break;
    4b56:	e7da      	b.n	4b0e <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    4b58:	2205      	movs	r2, #5
    4b5a:	558a      	strb	r2, [r1, r6]
						break;
    4b5c:	e7d7      	b.n	4b0e <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    4b5e:	2203      	movs	r2, #3
    4b60:	558a      	strb	r2, [r1, r6]
						break;
    4b62:	e7d4      	b.n	4b0e <usb_isr+0x26a>
    4b64:	1fff8000 	.word	0x1fff8000
    4b68:	1fff8eb8 	.word	0x1fff8eb8
    4b6c:	1fff8e64 	.word	0x1fff8e64
    4b70:	1fff9108 	.word	0x1fff9108
    4b74:	004000c8 	.word	0x004000c8
    4b78:	00400088 	.word	0x00400088
    4b7c:	1fff8f40 	.word	0x1fff8f40
    4b80:	1fff8ec9 	.word	0x1fff8ec9
    4b84:	1fff8f48 	.word	0x1fff8f48
    4b88:	1fff8f2c 	.word	0x1fff8f2c
    4b8c:	1fff8e60 	.word	0x1fff8e60
    4b90:	1fff8ec8 	.word	0x1fff8ec8
    4b94:	400720c0 	.word	0x400720c0
    4b98:	1fff8f38 	.word	0x1fff8f38
    4b9c:	1fff8e74 	.word	0x1fff8e74
    4ba0:	1fff8f34 	.word	0x1fff8f34
    4ba4:	40072098 	.word	0x40072098
    4ba8:	40072094 	.word	0x40072094
    4bac:	1fff8f0c 	.word	0x1fff8f0c
    4bb0:	1fff8f44 	.word	0x1fff8f44
    4bb4:	40072088 	.word	0x40072088
    4bb8:	40072080 	.word	0x40072080
    4bbc:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4bc0:	f242 0021 	movw	r0, #8225	; 0x2021
    4bc4:	4281      	cmp	r1, r0
    4bc6:	f000 812a 	beq.w	4e1e <usb_isr+0x57a>
    4bca:	f200 80d8 	bhi.w	4d7e <usb_isr+0x4da>
    4bce:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    4bd2:	f000 8276 	beq.w	50c2 <usb_isr+0x81e>
    4bd6:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    4bda:	f040 8218 	bne.w	500e <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    4bde:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    4be0:	49b3      	ldr	r1, [pc, #716]	; (4eb0 <usb_isr+0x60c>)
    4be2:	78a8      	ldrb	r0, [r5, #2]
    4be4:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    4be6:	0612      	lsls	r2, r2, #24
    4be8:	f100 833a 	bmi.w	5260 <usb_isr+0x9bc>
    4bec:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    4bf0:	49b0      	ldr	r1, [pc, #704]	; (4eb4 <usb_isr+0x610>)
    4bf2:	0613      	lsls	r3, r2, #24
    4bf4:	f100 830c 	bmi.w	5210 <usb_isr+0x96c>
    4bf8:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    4bfc:	49ad      	ldr	r1, [pc, #692]	; (4eb4 <usb_isr+0x610>)
    4bfe:	0615      	lsls	r5, r2, #24
    4c00:	f100 8301 	bmi.w	5206 <usb_isr+0x962>
    4c04:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    4c08:	49aa      	ldr	r1, [pc, #680]	; (4eb4 <usb_isr+0x610>)
    4c0a:	0614      	lsls	r4, r2, #24
    4c0c:	f100 82f6 	bmi.w	51fc <usb_isr+0x958>
    4c10:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    4c14:	49a7      	ldr	r1, [pc, #668]	; (4eb4 <usb_isr+0x610>)
    4c16:	0610      	lsls	r0, r2, #24
    4c18:	f100 834a 	bmi.w	52b0 <usb_isr+0xa0c>
    4c1c:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    4c20:	49a4      	ldr	r1, [pc, #656]	; (4eb4 <usb_isr+0x610>)
    4c22:	0612      	lsls	r2, r2, #24
    4c24:	f100 833f 	bmi.w	52a6 <usb_isr+0xa02>
    4c28:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    4c2c:	49a1      	ldr	r1, [pc, #644]	; (4eb4 <usb_isr+0x610>)
    4c2e:	0613      	lsls	r3, r2, #24
    4c30:	f100 8334 	bmi.w	529c <usb_isr+0x9f8>
    4c34:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    4c38:	499e      	ldr	r1, [pc, #632]	; (4eb4 <usb_isr+0x610>)
    4c3a:	0615      	lsls	r5, r2, #24
    4c3c:	f100 8329 	bmi.w	5292 <usb_isr+0x9ee>
    4c40:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    4c44:	499b      	ldr	r1, [pc, #620]	; (4eb4 <usb_isr+0x610>)
    4c46:	0614      	lsls	r4, r2, #24
    4c48:	f100 831e 	bmi.w	5288 <usb_isr+0x9e4>
    4c4c:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    4c50:	4998      	ldr	r1, [pc, #608]	; (4eb4 <usb_isr+0x610>)
    4c52:	0610      	lsls	r0, r2, #24
    4c54:	f100 8313 	bmi.w	527e <usb_isr+0x9da>
    4c58:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    4c5c:	4995      	ldr	r1, [pc, #596]	; (4eb4 <usb_isr+0x610>)
    4c5e:	0612      	lsls	r2, r2, #24
    4c60:	f100 8308 	bmi.w	5274 <usb_isr+0x9d0>
    4c64:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    4c68:	4992      	ldr	r1, [pc, #584]	; (4eb4 <usb_isr+0x610>)
    4c6a:	0613      	lsls	r3, r2, #24
    4c6c:	f100 82fd 	bmi.w	526a <usb_isr+0x9c6>
    4c70:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    4c74:	498f      	ldr	r1, [pc, #572]	; (4eb4 <usb_isr+0x610>)
    4c76:	0615      	lsls	r5, r2, #24
    4c78:	f100 8331 	bmi.w	52de <usb_isr+0xa3a>
    4c7c:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    4c80:	498c      	ldr	r1, [pc, #560]	; (4eb4 <usb_isr+0x610>)
    4c82:	0614      	lsls	r4, r2, #24
    4c84:	f100 8325 	bmi.w	52d2 <usb_isr+0xa2e>
    4c88:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    4c8c:	4989      	ldr	r1, [pc, #548]	; (4eb4 <usb_isr+0x610>)
    4c8e:	0610      	lsls	r0, r2, #24
    4c90:	f100 8319 	bmi.w	52c6 <usb_isr+0xa22>
    4c94:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    4c98:	4986      	ldr	r1, [pc, #536]	; (4eb4 <usb_isr+0x610>)
    4c9a:	0612      	lsls	r2, r2, #24
    4c9c:	f100 830d 	bmi.w	52ba <usb_isr+0xa16>
    4ca0:	4885      	ldr	r0, [pc, #532]	; (4eb8 <usb_isr+0x614>)
    4ca2:	4a86      	ldr	r2, [pc, #536]	; (4ebc <usb_isr+0x618>)
    4ca4:	4986      	ldr	r1, [pc, #536]	; (4ec0 <usb_isr+0x61c>)
    4ca6:	9001      	str	r0, [sp, #4]
    4ca8:	4886      	ldr	r0, [pc, #536]	; (4ec4 <usb_isr+0x620>)
    4caa:	4d87      	ldr	r5, [pc, #540]	; (4ec8 <usb_isr+0x624>)
    4cac:	4c87      	ldr	r4, [pc, #540]	; (4ecc <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    4cae:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    4cb0:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    4cb2:	9605      	str	r6, [sp, #20]
    4cb4:	9502      	str	r5, [sp, #8]
    4cb6:	4680      	mov	r8, r0
    4cb8:	460f      	mov	r7, r1
    4cba:	4616      	mov	r6, r2
    4cbc:	461d      	mov	r5, r3
    4cbe:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    4cc0:	6830      	ldr	r0, [r6, #0]
			while (p) {
    4cc2:	b128      	cbz	r0, 4cd0 <usb_isr+0x42c>
				n = p->next;
    4cc4:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    4cc6:	f000 fbe1 	bl	548c <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    4cca:	4620      	mov	r0, r4
    4ccc:	2c00      	cmp	r4, #0
    4cce:	d1f9      	bne.n	4cc4 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    4cd0:	2300      	movs	r3, #0
    4cd2:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    4cd4:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    4cd6:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    4cd8:	461a      	mov	r2, r3
    4cda:	2300      	movs	r3, #0
    4cdc:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    4ce0:	b128      	cbz	r0, 4cee <usb_isr+0x44a>
				n = p->next;
    4ce2:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    4ce4:	f000 fbd2 	bl	548c <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    4ce8:	4620      	mov	r0, r4
    4cea:	2c00      	cmp	r4, #0
    4cec:	d1f9      	bne.n	4ce2 <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    4cee:	2200      	movs	r2, #0
    4cf0:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    4cf2:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    4cf4:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    4cf8:	4611      	mov	r1, r2
    4cfa:	2200      	movs	r2, #0
    4cfc:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    4d00:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    4d02:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    4d04:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    4d06:	f04f 0100 	mov.w	r1, #0
    4d0a:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    4d0e:	2b03      	cmp	r3, #3
    4d10:	f200 812b 	bhi.w	4f6a <usb_isr+0x6c6>
    4d14:	e8df f013 	tbh	[pc, r3, lsl #1]
    4d18:	01250170 	.word	0x01250170
    4d1c:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    4d20:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    4d24:	bf18      	it	ne
    4d26:	2200      	movne	r2, #0
    4d28:	e6b5      	b.n	4a96 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    4d2a:	4a69      	ldr	r2, [pc, #420]	; (4ed0 <usb_isr+0x62c>)
    4d2c:	780d      	ldrb	r5, [r1, #0]
    4d2e:	7848      	ldrb	r0, [r1, #1]
    4d30:	7015      	strb	r5, [r2, #0]
    4d32:	7050      	strb	r0, [r2, #1]
    4d34:	788d      	ldrb	r5, [r1, #2]
    4d36:	78c8      	ldrb	r0, [r1, #3]
    4d38:	7095      	strb	r5, [r2, #2]
    4d3a:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    4d3c:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    4d3e:	790d      	ldrb	r5, [r1, #4]
    4d40:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    4d42:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    4d44:	794d      	ldrb	r5, [r1, #5]
    4d46:	7989      	ldrb	r1, [r1, #6]
    4d48:	7155      	strb	r5, [r2, #5]
    4d4a:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    4d4c:	f000 819b 	beq.w	5086 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4d50:	4960      	ldr	r1, [pc, #384]	; (4ed4 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4d52:	4e61      	ldr	r6, [pc, #388]	; (4ed8 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4d54:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4d56:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4d58:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4d5c:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4d5e:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4d62:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4d64:	bf0c      	ite	eq
    4d66:	2188      	moveq	r1, #136	; 0x88
    4d68:	21c8      	movne	r1, #200	; 0xc8
    4d6a:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4d6e:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    4d72:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4d76:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    4d78:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4d7a:	6051      	str	r1, [r2, #4]
    4d7c:	e69e      	b.n	4abc <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4d7e:	f242 2021 	movw	r0, #8737	; 0x2221
    4d82:	4281      	cmp	r1, r0
    4d84:	f040 81cb 	bne.w	511e <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4d88:	4b54      	ldr	r3, [pc, #336]	; (4edc <usb_isr+0x638>)
    4d8a:	4c55      	ldr	r4, [pc, #340]	; (4ee0 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    4d8c:	4955      	ldr	r1, [pc, #340]	; (4ee4 <usb_isr+0x640>)
    4d8e:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4d90:	681d      	ldr	r5, [r3, #0]
    4d92:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    4d94:	f8cd e004 	str.w	lr, [sp, #4]
    4d98:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    4d9a:	2000      	movs	r0, #0
    4d9c:	9002      	str	r0, [sp, #8]
    4d9e:	4680      	mov	r8, r0
    4da0:	4684      	mov	ip, r0
    4da2:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4da4:	494b      	ldr	r1, [pc, #300]	; (4ed4 <usb_isr+0x630>)
    4da6:	780d      	ldrb	r5, [r1, #0]
    4da8:	f045 0e02 	orr.w	lr, r5, #2
    4dac:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    4db0:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4db2:	9b01      	ldr	r3, [sp, #4]
    4db4:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4db6:	9b03      	ldr	r3, [sp, #12]
    4db8:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4dba:	bf0c      	ite	eq
    4dbc:	2488      	moveq	r4, #136	; 0x88
    4dbe:	24c8      	movne	r4, #200	; 0xc8
    4dc0:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4dc4:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4dc8:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    4dcc:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    4dce:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4dd0:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 4eb4 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    4dd4:	4b40      	ldr	r3, [pc, #256]	; (4ed8 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    4dd6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 4ed4 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    4dda:	2800      	cmp	r0, #0
    4ddc:	f040 811e 	bne.w	501c <usb_isr+0x778>
    4de0:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    4de4:	d11b      	bne.n	4e1e <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4de6:	f044 0c02 	orr.w	ip, r4, #2
    4dea:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    4dee:	9c02      	ldr	r4, [sp, #8]
    4df0:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 4eb4 <usb_isr+0x610>
    4df4:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4df6:	2a00      	cmp	r2, #0
    4df8:	f040 8126 	bne.w	5048 <usb_isr+0x7a4>
    4dfc:	0402      	lsls	r2, r0, #16
    4dfe:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    4e02:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4e06:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4e0a:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    4e0c:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    4e0e:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4e10:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    4e12:	2840      	cmp	r0, #64	; 0x40
    4e14:	d103      	bne.n	4e1e <usb_isr+0x57a>
    4e16:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    4e18:	4a33      	ldr	r2, [pc, #204]	; (4ee8 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    4e1a:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    4e1c:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    4e1e:	4a33      	ldr	r2, [pc, #204]	; (4eec <usb_isr+0x648>)
    4e20:	2301      	movs	r3, #1
    4e22:	7013      	strb	r3, [r2, #0]
    4e24:	e64d      	b.n	4ac2 <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    4e26:	f000 fc9d 	bl	5764 <usb_serial_flush_callback>
    4e2a:	e5a5      	b.n	4978 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    4e2c:	4b21      	ldr	r3, [pc, #132]	; (4eb4 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    4e2e:	482f      	ldr	r0, [pc, #188]	; (4eec <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    4e30:	4928      	ldr	r1, [pc, #160]	; (4ed4 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    4e32:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    4e34:	f04f 0e02 	mov.w	lr, #2
    4e38:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4e3c:	4f2c      	ldr	r7, [pc, #176]	; (4ef0 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    4e3e:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    4e40:	492c      	ldr	r1, [pc, #176]	; (4ef4 <usb_isr+0x650>)
    4e42:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    4e44:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    4e46:	4e2c      	ldr	r6, [pc, #176]	; (4ef8 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    4e48:	4d2c      	ldr	r5, [pc, #176]	; (4efc <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    4e4a:	4c2d      	ldr	r4, [pc, #180]	; (4f00 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    4e4c:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4e4e:	210d      	movs	r1, #13
    4e50:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    4e52:	21ff      	movs	r1, #255	; 0xff
    4e54:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    4e56:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 4f10 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    4e5a:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    4e5c:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    4e5e:	4d29      	ldr	r5, [pc, #164]	; (4f04 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    4e60:	4a29      	ldr	r2, [pc, #164]	; (4f08 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    4e62:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    4e66:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    4e68:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    4e6a:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    4e6e:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    4e70:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    4e72:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    4e74:	b007      	add	sp, #28
    4e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    4e7a:	4a24      	ldr	r2, [pc, #144]	; (4f0c <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    4e7c:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    4e80:	7813      	ldrb	r3, [r2, #0]
    4e82:	3301      	adds	r3, #1
    4e84:	7013      	strb	r3, [r2, #0]
    4e86:	e557      	b.n	4938 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    4e88:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    4e8c:	4d0e      	ldr	r5, [pc, #56]	; (4ec8 <usb_isr+0x624>)
    4e8e:	e53a      	b.n	4906 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    4e90:	5d8b      	ldrb	r3, [r1, r6]
    4e92:	2b03      	cmp	r3, #3
    4e94:	f200 80f0 	bhi.w	5078 <usb_isr+0x7d4>
    4e98:	a201      	add	r2, pc, #4	; (adr r2, 4ea0 <usb_isr+0x5fc>)
    4e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4e9e:	bf00      	nop
    4ea0:	00004939 	.word	0x00004939
    4ea4:	00004939 	.word	0x00004939
    4ea8:	00004f5d 	.word	0x00004f5d
    4eac:	00004f57 	.word	0x00004f57
    4eb0:	1fff8f40 	.word	0x1fff8f40
    4eb4:	1fff8000 	.word	0x1fff8000
    4eb8:	1fff8f1c 	.word	0x1fff8f1c
    4ebc:	1fff8eb8 	.word	0x1fff8eb8
    4ec0:	1fff8f0c 	.word	0x1fff8f0c
    4ec4:	1fff8f44 	.word	0x1fff8f44
    4ec8:	1fff8e64 	.word	0x1fff8e64
    4ecc:	1fff9108 	.word	0x1fff9108
    4ed0:	1fff9110 	.word	0x1fff9110
    4ed4:	1fff8f34 	.word	0x1fff8f34
    4ed8:	1fff8ec8 	.word	0x1fff8ec8
    4edc:	1fff8e5c 	.word	0x1fff8e5c
    4ee0:	1fff9118 	.word	0x1fff9118
    4ee4:	1fff8f58 	.word	0x1fff8f58
    4ee8:	1fff8e74 	.word	0x1fff8e74
    4eec:	40072094 	.word	0x40072094
    4ef0:	400720c0 	.word	0x400720c0
    4ef4:	00400088 	.word	0x00400088
    4ef8:	40072088 	.word	0x40072088
    4efc:	40072080 	.word	0x40072080
    4f00:	40072098 	.word	0x40072098
    4f04:	1fff8e78 	.word	0x1fff8e78
    4f08:	1fff8ecc 	.word	0x1fff8ecc
    4f0c:	1fff8f35 	.word	0x1fff8f35
    4f10:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4f14:	49c1      	ldr	r1, [pc, #772]	; (521c <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    4f16:	4bc2      	ldr	r3, [pc, #776]	; (5220 <usb_isr+0x97c>)
    4f18:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4f1a:	200d      	movs	r0, #13
    4f1c:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    4f1e:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    4f20:	07a2      	lsls	r2, r4, #30
    4f22:	f57f ae0e 	bpl.w	4b42 <usb_isr+0x29e>
    4f26:	e605      	b.n	4b34 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4f28:	f240 3202 	movw	r2, #770	; 0x302
    4f2c:	4291      	cmp	r1, r2
    4f2e:	f040 80ee 	bne.w	510e <usb_isr+0x86a>
    4f32:	88a9      	ldrh	r1, [r5, #4]
    4f34:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    4f38:	2904      	cmp	r1, #4
    4f3a:	d868      	bhi.n	500e <usb_isr+0x76a>
    4f3c:	886a      	ldrh	r2, [r5, #2]
    4f3e:	2a00      	cmp	r2, #0
    4f40:	d165      	bne.n	500e <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    4f42:	48b6      	ldr	r0, [pc, #728]	; (521c <usb_isr+0x978>)
    4f44:	f8cd e004 	str.w	lr, [sp, #4]
    4f48:	0089      	lsls	r1, r1, #2
    4f4a:	4408      	add	r0, r1
    4f4c:	7801      	ldrb	r1, [r0, #0]
    4f4e:	f041 0102 	orr.w	r1, r1, #2
    4f52:	7001      	strb	r1, [r0, #0]
    4f54:	e721      	b.n	4d9a <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    4f56:	2301      	movs	r3, #1
    4f58:	558b      	strb	r3, [r1, r6]
						break;
    4f5a:	e4ed      	b.n	4938 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    4f5c:	2300      	movs	r3, #0
    4f5e:	558b      	strb	r3, [r1, r6]
						break;
    4f60:	e4ea      	b.n	4938 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    4f62:	f04f 0301 	mov.w	r3, #1
    4f66:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    4f6a:	3501      	adds	r5, #1
    4f6c:	2d04      	cmp	r5, #4
    4f6e:	f106 0604 	add.w	r6, r6, #4
    4f72:	f107 0704 	add.w	r7, r7, #4
    4f76:	f108 0801 	add.w	r8, r8, #1
    4f7a:	f47f aea1 	bne.w	4cc0 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    4f7e:	4ca9      	ldr	r4, [pc, #676]	; (5224 <usb_isr+0x980>)
			*reg = epconf;
    4f80:	4ba9      	ldr	r3, [pc, #676]	; (5228 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    4f82:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    4f84:	4da9      	ldr	r5, [pc, #676]	; (522c <usb_isr+0x988>)
    4f86:	9f04      	ldr	r7, [sp, #16]
    4f88:	9e05      	ldr	r6, [sp, #20]
    4f8a:	2100      	movs	r1, #0
    4f8c:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    4f8e:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4f90:	0713      	lsls	r3, r2, #28
    4f92:	f100 8105 	bmi.w	51a0 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    4f96:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    4f98:	49a5      	ldr	r1, [pc, #660]	; (5230 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4f9a:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 523c <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    4f9e:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4fa0:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4fa2:	f04f 0100 	mov.w	r1, #0
    4fa6:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    4faa:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4fae:	f100 80e0 	bmi.w	5172 <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    4fb2:	49a0      	ldr	r1, [pc, #640]	; (5234 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    4fb4:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    4fb6:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4fb8:	2100      	movs	r1, #0
    4fba:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    4fbe:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4fc2:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4fc4:	f8df 8274 	ldr.w	r8, [pc, #628]	; 523c <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4fc8:	f100 8101 	bmi.w	51ce <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    4fcc:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    4fce:	499a      	ldr	r1, [pc, #616]	; (5238 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4fd0:	4c9a      	ldr	r4, [pc, #616]	; (523c <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    4fd2:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4fd4:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4fd6:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4fd8:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    4fdc:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4fe0:	f100 80b0 	bmi.w	5144 <usb_isr+0x8a0>
    4fe4:	7833      	ldrb	r3, [r6, #0]
    4fe6:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4fe8:	2100      	movs	r1, #0
    4fea:	f083 0201 	eor.w	r2, r3, #1
    4fee:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    4ff2:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    4ff6:	e6d0      	b.n	4d9a <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    4ff8:	f04f 0300 	mov.w	r3, #0
    4ffc:	f888 3000 	strb.w	r3, [r8]
    5000:	e7b3      	b.n	4f6a <usb_isr+0x6c6>
    5002:	88a9      	ldrh	r1, [r5, #4]
    5004:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    5008:	2904      	cmp	r1, #4
    500a:	f240 808d 	bls.w	5128 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    500e:	4a83      	ldr	r2, [pc, #524]	; (521c <usb_isr+0x978>)
    5010:	230f      	movs	r3, #15
    5012:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    5014:	4a8a      	ldr	r2, [pc, #552]	; (5240 <usb_isr+0x99c>)
    5016:	2301      	movs	r3, #1
    5018:	7013      	strb	r3, [r2, #0]
    501a:	e552      	b.n	4ac2 <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    501c:	2840      	cmp	r0, #64	; 0x40
    501e:	f67f aee2 	bls.w	4de6 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5022:	f044 0402 	orr.w	r4, r4, #2
    5026:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    502a:	9e02      	ldr	r6, [sp, #8]
    502c:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    502e:	b1ba      	cbz	r2, 5060 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    5030:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5034:	4a83      	ldr	r2, [pc, #524]	; (5244 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    5036:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5038:	4633      	mov	r3, r6
    503a:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    503c:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5040:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5042:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    5046:	e6e7      	b.n	4e18 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    5048:	f89d 3004 	ldrb.w	r3, [sp, #4]
    504c:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    504e:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5050:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5052:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5054:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5058:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    505a:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    505e:	e6d8      	b.n	4e12 <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    5060:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5064:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5066:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5068:	4a77      	ldr	r2, [pc, #476]	; (5248 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    506a:	f888 5000 	strb.w	r5, [r8]
    506e:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5070:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5072:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    5076:	e6cf      	b.n	4e18 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    5078:	f019 0f08 	tst.w	r9, #8
    507c:	bf0c      	ite	eq
    507e:	2302      	moveq	r3, #2
    5080:	2303      	movne	r3, #3
    5082:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    5084:	e458      	b.n	4938 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    5086:	4a71      	ldr	r2, [pc, #452]	; (524c <usb_isr+0x9a8>)
    5088:	210f      	movs	r1, #15
    508a:	7011      	strb	r1, [r2, #0]
    508c:	e660      	b.n	4d50 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    508e:	4a70      	ldr	r2, [pc, #448]	; (5250 <usb_isr+0x9ac>)
    5090:	6854      	ldr	r4, [r2, #4]
    5092:	2c00      	cmp	r4, #0
    5094:	d0bb      	beq.n	500e <usb_isr+0x76a>
    5096:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    5098:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    509c:	e003      	b.n	50a6 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    509e:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    50a0:	6854      	ldr	r4, [r2, #4]
    50a2:	2c00      	cmp	r4, #0
    50a4:	d0b3      	beq.n	500e <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    50a6:	8813      	ldrh	r3, [r2, #0]
    50a8:	4283      	cmp	r3, r0
    50aa:	d1f8      	bne.n	509e <usb_isr+0x7fa>
    50ac:	8853      	ldrh	r3, [r2, #2]
    50ae:	4573      	cmp	r3, lr
    50b0:	d1f5      	bne.n	509e <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    50b2:	0a00      	lsrs	r0, r0, #8
    50b4:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    50b6:	bf0c      	ite	eq
    50b8:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    50bc:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    50c0:	e003      	b.n	50ca <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    50c2:	4a64      	ldr	r2, [pc, #400]	; (5254 <usb_isr+0x9b0>)
    50c4:	4c64      	ldr	r4, [pc, #400]	; (5258 <usb_isr+0x9b4>)
    50c6:	7812      	ldrb	r2, [r2, #0]
    50c8:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    50ca:	88e8      	ldrh	r0, [r5, #6]
    50cc:	4570      	cmp	r0, lr
    50ce:	f080 813f 	bcs.w	5350 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    50d2:	4962      	ldr	r1, [pc, #392]	; (525c <usb_isr+0x9b8>)
    50d4:	780d      	ldrb	r5, [r1, #0]
    50d6:	2840      	cmp	r0, #64	; 0x40
    50d8:	4684      	mov	ip, r0
    50da:	f045 0e02 	orr.w	lr, r5, #2
    50de:	bf28      	it	cs
    50e0:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    50e4:	eb04 030c 	add.w	r3, r4, ip
    50e8:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    50ec:	9302      	str	r3, [sp, #8]
    50ee:	2301      	movs	r3, #1
    50f0:	6054      	str	r4, [r2, #4]
    50f2:	ebcc 0000 	rsb	r0, ip, r0
    50f6:	ea4f 480c 	mov.w	r8, ip, lsl #16
    50fa:	2200      	movs	r2, #0
    50fc:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    50fe:	24c8      	movs	r4, #200	; 0xc8
    5100:	e65e      	b.n	4dc0 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    5102:	4c55      	ldr	r4, [pc, #340]	; (5258 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    5104:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    5108:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    510a:	7062      	strb	r2, [r4, #1]
    510c:	e7dd      	b.n	50ca <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    510e:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    5112:	f47f af7c 	bne.w	500e <usb_isr+0x76a>
    5116:	2301      	movs	r3, #1
    5118:	2200      	movs	r2, #0
    511a:	9301      	str	r3, [sp, #4]
    511c:	e63d      	b.n	4d9a <usb_isr+0x4f6>
    511e:	f242 3221 	movw	r2, #8993	; 0x2321
    5122:	4291      	cmp	r1, r2
    5124:	d0f7      	beq.n	5116 <usb_isr+0x872>
    5126:	e772      	b.n	500e <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    5128:	886a      	ldrh	r2, [r5, #2]
    512a:	2a00      	cmp	r2, #0
    512c:	f47f af6f 	bne.w	500e <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    5130:	483a      	ldr	r0, [pc, #232]	; (521c <usb_isr+0x978>)
    5132:	f8cd e004 	str.w	lr, [sp, #4]
    5136:	0089      	lsls	r1, r1, #2
    5138:	4408      	add	r0, r1
    513a:	7801      	ldrb	r1, [r0, #0]
    513c:	f021 0102 	bic.w	r1, r1, #2
    5140:	7001      	strb	r1, [r0, #0]
    5142:	e62a      	b.n	4d9a <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    5144:	f000 f982 	bl	544c <usb_malloc>
				if (p) {
    5148:	2800      	cmp	r0, #0
    514a:	f000 80ef 	beq.w	532c <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    514e:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5150:	4a3d      	ldr	r2, [pc, #244]	; (5248 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    5152:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5156:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    515a:	f000 f977 	bl	544c <usb_malloc>
				if (p) {
    515e:	2800      	cmp	r0, #0
    5160:	f000 80de 	beq.w	5320 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    5164:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5166:	4a37      	ldr	r2, [pc, #220]	; (5244 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    5168:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    516c:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    5170:	e738      	b.n	4fe4 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    5172:	f000 f96b 	bl	544c <usb_malloc>
				if (p) {
    5176:	2800      	cmp	r0, #0
    5178:	f000 80c0 	beq.w	52fc <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    517c:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    517e:	4a32      	ldr	r2, [pc, #200]	; (5248 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    5180:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5184:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    5188:	f000 f960 	bl	544c <usb_malloc>
				if (p) {
    518c:	2800      	cmp	r0, #0
    518e:	f000 80af 	beq.w	52f0 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    5192:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5194:	4a2b      	ldr	r2, [pc, #172]	; (5244 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    5196:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    519a:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    519e:	e708      	b.n	4fb2 <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    51a0:	f000 f954 	bl	544c <usb_malloc>
				if (p) {
    51a4:	2800      	cmp	r0, #0
    51a6:	f000 80cd 	beq.w	5344 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    51aa:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    51ac:	4a26      	ldr	r2, [pc, #152]	; (5248 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    51ae:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    51b2:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    51b6:	f000 f949 	bl	544c <usb_malloc>
				if (p) {
    51ba:	2800      	cmp	r0, #0
    51bc:	f000 80bc 	beq.w	5338 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    51c0:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    51c2:	4a20      	ldr	r2, [pc, #128]	; (5244 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    51c4:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    51c8:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    51cc:	e6e3      	b.n	4f96 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    51ce:	f000 f93d 	bl	544c <usb_malloc>
				if (p) {
    51d2:	2800      	cmp	r0, #0
    51d4:	f000 809e 	beq.w	5314 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    51d8:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    51da:	4a1b      	ldr	r2, [pc, #108]	; (5248 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    51dc:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    51e0:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    51e4:	f000 f932 	bl	544c <usb_malloc>
				if (p) {
    51e8:	2800      	cmp	r0, #0
    51ea:	f000 808d 	beq.w	5308 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    51ee:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    51f0:	4a14      	ldr	r2, [pc, #80]	; (5244 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    51f2:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    51f6:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    51fa:	e6e7      	b.n	4fcc <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    51fc:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    51fe:	3808      	subs	r0, #8
    5200:	f000 f944 	bl	548c <usb_free>
    5204:	e504      	b.n	4c10 <usb_isr+0x36c>
    5206:	6b48      	ldr	r0, [r1, #52]	; 0x34
    5208:	3808      	subs	r0, #8
    520a:	f000 f93f 	bl	548c <usb_free>
    520e:	e4f9      	b.n	4c04 <usb_isr+0x360>
    5210:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    5212:	3808      	subs	r0, #8
    5214:	f000 f93a 	bl	548c <usb_free>
    5218:	e4ee      	b.n	4bf8 <usb_isr+0x354>
    521a:	bf00      	nop
    521c:	400720c0 	.word	0x400720c0
    5220:	40072080 	.word	0x40072080
    5224:	00007eec 	.word	0x00007eec
    5228:	400720c4 	.word	0x400720c4
    522c:	1fff8f35 	.word	0x1fff8f35
    5230:	400720c8 	.word	0x400720c8
    5234:	400720cc 	.word	0x400720cc
    5238:	400720d0 	.word	0x400720d0
    523c:	1fff8000 	.word	0x1fff8000
    5240:	40072094 	.word	0x40072094
    5244:	004000c8 	.word	0x004000c8
    5248:	00400088 	.word	0x00400088
    524c:	1fff8ec9 	.word	0x1fff8ec9
    5250:	00007ef0 	.word	0x00007ef0
    5254:	1fff8f40 	.word	0x1fff8f40
    5258:	1fff8f38 	.word	0x1fff8f38
    525c:	1fff8f34 	.word	0x1fff8f34
    5260:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5262:	3808      	subs	r0, #8
    5264:	f000 f912 	bl	548c <usb_free>
    5268:	e4c0      	b.n	4bec <usb_isr+0x348>
    526a:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    526c:	3808      	subs	r0, #8
    526e:	f000 f90d 	bl	548c <usb_free>
    5272:	e4fd      	b.n	4c70 <usb_isr+0x3cc>
    5274:	6f48      	ldr	r0, [r1, #116]	; 0x74
    5276:	3808      	subs	r0, #8
    5278:	f000 f908 	bl	548c <usb_free>
    527c:	e4f2      	b.n	4c64 <usb_isr+0x3c0>
    527e:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    5280:	3808      	subs	r0, #8
    5282:	f000 f903 	bl	548c <usb_free>
    5286:	e4e7      	b.n	4c58 <usb_isr+0x3b4>
    5288:	6e48      	ldr	r0, [r1, #100]	; 0x64
    528a:	3808      	subs	r0, #8
    528c:	f000 f8fe 	bl	548c <usb_free>
    5290:	e4dc      	b.n	4c4c <usb_isr+0x3a8>
    5292:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    5294:	3808      	subs	r0, #8
    5296:	f000 f8f9 	bl	548c <usb_free>
    529a:	e4d1      	b.n	4c40 <usb_isr+0x39c>
    529c:	6d48      	ldr	r0, [r1, #84]	; 0x54
    529e:	3808      	subs	r0, #8
    52a0:	f000 f8f4 	bl	548c <usb_free>
    52a4:	e4c6      	b.n	4c34 <usb_isr+0x390>
    52a6:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    52a8:	3808      	subs	r0, #8
    52aa:	f000 f8ef 	bl	548c <usb_free>
    52ae:	e4bb      	b.n	4c28 <usb_isr+0x384>
    52b0:	6c48      	ldr	r0, [r1, #68]	; 0x44
    52b2:	3808      	subs	r0, #8
    52b4:	f000 f8ea 	bl	548c <usb_free>
    52b8:	e4b0      	b.n	4c1c <usb_isr+0x378>
    52ba:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    52be:	3808      	subs	r0, #8
    52c0:	f000 f8e4 	bl	548c <usb_free>
    52c4:	e4ec      	b.n	4ca0 <usb_isr+0x3fc>
    52c6:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    52ca:	3808      	subs	r0, #8
    52cc:	f000 f8de 	bl	548c <usb_free>
    52d0:	e4e0      	b.n	4c94 <usb_isr+0x3f0>
    52d2:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    52d6:	3808      	subs	r0, #8
    52d8:	f000 f8d8 	bl	548c <usb_free>
    52dc:	e4d4      	b.n	4c88 <usb_isr+0x3e4>
    52de:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    52e2:	3808      	subs	r0, #8
    52e4:	f000 f8d2 	bl	548c <usb_free>
    52e8:	e4c8      	b.n	4c7c <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    52ea:	f04f 0e02 	mov.w	lr, #2
    52ee:	e6ec      	b.n	50ca <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    52f0:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    52f2:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    52f6:	3201      	adds	r2, #1
    52f8:	702a      	strb	r2, [r5, #0]
    52fa:	e65a      	b.n	4fb2 <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    52fc:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    52fe:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    5302:	3201      	adds	r2, #1
    5304:	702a      	strb	r2, [r5, #0]
    5306:	e73f      	b.n	5188 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5308:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    530a:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    530e:	3201      	adds	r2, #1
    5310:	702a      	strb	r2, [r5, #0]
    5312:	e65b      	b.n	4fcc <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5314:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5316:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    531a:	3201      	adds	r2, #1
    531c:	702a      	strb	r2, [r5, #0]
    531e:	e761      	b.n	51e4 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5320:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5322:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    5326:	3201      	adds	r2, #1
    5328:	702a      	strb	r2, [r5, #0]
    532a:	e65b      	b.n	4fe4 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    532c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    532e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    5332:	3201      	adds	r2, #1
    5334:	702a      	strb	r2, [r5, #0]
    5336:	e710      	b.n	515a <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5338:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    533a:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    533e:	3201      	adds	r2, #1
    5340:	702a      	strb	r2, [r5, #0]
    5342:	e628      	b.n	4f96 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5344:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5346:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    534a:	3201      	adds	r2, #1
    534c:	702a      	strb	r2, [r5, #0]
    534e:	e732      	b.n	51b6 <usb_isr+0x912>
    5350:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    5354:	46f4      	mov	ip, lr
    5356:	bf28      	it	cs
    5358:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    535c:	eb04 030c 	add.w	r3, r4, ip
    5360:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    5362:	2301      	movs	r3, #1
    5364:	ebcc 000e 	rsb	r0, ip, lr
    5368:	ea4f 480c 	mov.w	r8, ip, lsl #16
    536c:	2200      	movs	r2, #0
    536e:	9301      	str	r3, [sp, #4]
    5370:	e518      	b.n	4da4 <usb_isr+0x500>
    5372:	bf00      	nop

00005374 <usb_init>:
}



void usb_init(void)
{
    5374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    5376:	f000 fd9b 	bl	5eb0 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    537a:	4b29      	ldr	r3, [pc, #164]	; (5420 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    537c:	4829      	ldr	r0, [pc, #164]	; (5424 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    537e:	4c2a      	ldr	r4, [pc, #168]	; (5428 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5380:	4f2a      	ldr	r7, [pc, #168]	; (542c <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5382:	4d2b      	ldr	r5, [pc, #172]	; (5430 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    5384:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 5444 <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    5388:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 5448 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    538c:	4e29      	ldr	r6, [pc, #164]	; (5434 <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    538e:	2200      	movs	r2, #0
    5390:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    5392:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5394:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    5396:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5398:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    539a:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    539c:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    539e:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    53a0:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    53a2:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    53a4:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    53a6:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    53a8:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    53aa:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    53ac:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    53ae:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    53b0:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    53b2:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    53b4:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    53b6:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    53b8:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    53ba:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    53bc:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    53be:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    53c0:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    53c2:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    53c4:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    53c6:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    53c8:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    53ca:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    53cc:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    53ce:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    53d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    53d4:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    53d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    53da:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    53de:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    53e0:	f3c3 2107 	ubfx	r1, r3, #8, #8
    53e4:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    53e6:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    53ea:	4913      	ldr	r1, [pc, #76]	; (5438 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    53ec:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    53ee:	0e1b      	lsrs	r3, r3, #24
    53f0:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    53f2:	23ff      	movs	r3, #255	; 0xff
    53f4:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    53f8:	4d10      	ldr	r5, [pc, #64]	; (543c <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    53fa:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    53fe:	4810      	ldr	r0, [pc, #64]	; (5440 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    5400:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    5402:	2301      	movs	r3, #1
    5404:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    5406:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    540a:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    540c:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    5410:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    5412:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    5416:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    5418:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    541a:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    541e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5420:	1fff8000 	.word	0x1fff8000
    5424:	40048034 	.word	0x40048034
    5428:	4007209c 	.word	0x4007209c
    542c:	400720b0 	.word	0x400720b0
    5430:	400720b4 	.word	0x400720b4
    5434:	40072094 	.word	0x40072094
    5438:	40072010 	.word	0x40072010
    543c:	e000e449 	.word	0xe000e449
    5440:	e000e108 	.word	0xe000e108
    5444:	40072080 	.word	0x40072080
    5448:	40072088 	.word	0x40072088

0000544c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    544c:	b672      	cpsid	i
	avail = usb_buffer_available;
    544e:	480d      	ldr	r0, [pc, #52]	; (5484 <usb_malloc+0x38>)
    5450:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    5452:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    5456:	2b0b      	cmp	r3, #11
    5458:	dc10      	bgt.n	547c <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    545a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    545e:	40d9      	lsrs	r1, r3
    5460:	ea22 0201 	bic.w	r2, r2, r1
    5464:	6002      	str	r2, [r0, #0]
	__enable_irq();
    5466:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    5468:	4807      	ldr	r0, [pc, #28]	; (5488 <usb_malloc+0x3c>)
    546a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    546e:	00db      	lsls	r3, r3, #3
    5470:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    5472:	2100      	movs	r1, #0
    5474:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    5476:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    5478:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    547a:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    547c:	b662      	cpsie	i
		return NULL;
    547e:	2000      	movs	r0, #0
    5480:	4770      	bx	lr
    5482:	bf00      	nop
    5484:	1fff8760 	.word	0x1fff8760
    5488:	1fff83bc 	.word	0x1fff83bc

0000548c <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    548c:	4b0d      	ldr	r3, [pc, #52]	; (54c4 <usb_free+0x38>)
    548e:	4a0e      	ldr	r2, [pc, #56]	; (54c8 <usb_free+0x3c>)
    5490:	1ac3      	subs	r3, r0, r3
    5492:	fba2 2303 	umull	r2, r3, r2, r3
    5496:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    5498:	2b0b      	cmp	r3, #11
    549a:	d80c      	bhi.n	54b6 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    549c:	4a0b      	ldr	r2, [pc, #44]	; (54cc <usb_free+0x40>)
    549e:	7812      	ldrb	r2, [r2, #0]
    54a0:	b952      	cbnz	r2, 54b8 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    54a2:	b672      	cpsid	i
	usb_buffer_available |= mask;
    54a4:	480a      	ldr	r0, [pc, #40]	; (54d0 <usb_free+0x44>)
    54a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    54aa:	6802      	ldr	r2, [r0, #0]
    54ac:	fa21 f303 	lsr.w	r3, r1, r3
    54b0:	431a      	orrs	r2, r3
    54b2:	6002      	str	r2, [r0, #0]
	__enable_irq();
    54b4:	b662      	cpsie	i
    54b6:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    54b8:	4a06      	ldr	r2, [pc, #24]	; (54d4 <usb_free+0x48>)
    54ba:	7812      	ldrb	r2, [r2, #0]
    54bc:	2a00      	cmp	r2, #0
    54be:	d0f0      	beq.n	54a2 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    54c0:	f7ff b94a 	b.w	4758 <usb_rx_memory>
    54c4:	1fff83bc 	.word	0x1fff83bc
    54c8:	38e38e39 	.word	0x38e38e39
    54cc:	1fff8f35 	.word	0x1fff8f35
    54d0:	1fff8760 	.word	0x1fff8760
    54d4:	1fff8f40 	.word	0x1fff8f40

000054d8 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    54d8:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    54da:	4d0f      	ldr	r5, [pc, #60]	; (5518 <usb_serial_getchar+0x40>)
    54dc:	6828      	ldr	r0, [r5, #0]
    54de:	b178      	cbz	r0, 5500 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    54e0:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    54e2:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    54e4:	18c1      	adds	r1, r0, r3
    54e6:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    54e8:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    54ea:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    54ec:	d202      	bcs.n	54f4 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    54ee:	8043      	strh	r3, [r0, #2]
	}
	return c;
    54f0:	4620      	mov	r0, r4
}
    54f2:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    54f4:	f7ff ffca 	bl	548c <usb_free>
		rx_packet = NULL;
    54f8:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    54fa:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    54fc:	602b      	str	r3, [r5, #0]
    54fe:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5500:	4b06      	ldr	r3, [pc, #24]	; (551c <usb_serial_getchar+0x44>)
    5502:	781b      	ldrb	r3, [r3, #0]
    5504:	b12b      	cbz	r3, 5512 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    5506:	2003      	movs	r0, #3
    5508:	f7ff f8f2 	bl	46f0 <usb_rx>
    550c:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    550e:	2800      	cmp	r0, #0
    5510:	d1e6      	bne.n	54e0 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5512:	f04f 30ff 	mov.w	r0, #4294967295
    5516:	bd38      	pop	{r3, r4, r5, pc}
    5518:	1fff8f54 	.word	0x1fff8f54
    551c:	1fff8f40 	.word	0x1fff8f40

00005520 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    5520:	b510      	push	{r4, lr}
	if (!rx_packet) {
    5522:	4c09      	ldr	r4, [pc, #36]	; (5548 <usb_serial_peekchar+0x28>)
    5524:	6820      	ldr	r0, [r4, #0]
    5526:	b118      	cbz	r0, 5530 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    5528:	8843      	ldrh	r3, [r0, #2]
    552a:	4418      	add	r0, r3
    552c:	7a00      	ldrb	r0, [r0, #8]
}
    552e:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5530:	4b06      	ldr	r3, [pc, #24]	; (554c <usb_serial_peekchar+0x2c>)
    5532:	781b      	ldrb	r3, [r3, #0]
    5534:	b12b      	cbz	r3, 5542 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    5536:	2003      	movs	r0, #3
    5538:	f7ff f8da 	bl	46f0 <usb_rx>
    553c:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    553e:	2800      	cmp	r0, #0
    5540:	d1f2      	bne.n	5528 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5542:	f04f 30ff 	mov.w	r0, #4294967295
    5546:	bd10      	pop	{r4, pc}
    5548:	1fff8f54 	.word	0x1fff8f54
    554c:	1fff8f40 	.word	0x1fff8f40

00005550 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    5550:	4b04      	ldr	r3, [pc, #16]	; (5564 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    5552:	4a05      	ldr	r2, [pc, #20]	; (5568 <usb_serial_available+0x18>)
    5554:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    5556:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    5558:	b11b      	cbz	r3, 5562 <usb_serial_available+0x12>
    555a:	881a      	ldrh	r2, [r3, #0]
    555c:	885b      	ldrh	r3, [r3, #2]
    555e:	1ad3      	subs	r3, r2, r3
    5560:	4418      	add	r0, r3
	return count;
}
    5562:	4770      	bx	lr
    5564:	1fff8f54 	.word	0x1fff8f54
    5568:	1fff9108 	.word	0x1fff9108

0000556c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    556c:	4b0b      	ldr	r3, [pc, #44]	; (559c <usb_serial_flush_input+0x30>)
    556e:	781b      	ldrb	r3, [r3, #0]
    5570:	b19b      	cbz	r3, 559a <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    5572:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    5574:	4c0a      	ldr	r4, [pc, #40]	; (55a0 <usb_serial_flush_input+0x34>)
    5576:	6820      	ldr	r0, [r4, #0]
    5578:	b148      	cbz	r0, 558e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    557a:	f7ff ff87 	bl	548c <usb_free>
		rx_packet = NULL;
    557e:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5580:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    5582:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5584:	f7ff f8b4 	bl	46f0 <usb_rx>
		if (!rx) break;
    5588:	b130      	cbz	r0, 5598 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    558a:	f7ff ff7f 	bl	548c <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    558e:	2003      	movs	r0, #3
    5590:	f7ff f8ae 	bl	46f0 <usb_rx>
		if (!rx) break;
    5594:	2800      	cmp	r0, #0
    5596:	d1f8      	bne.n	558a <usb_serial_flush_input+0x1e>
    5598:	bd10      	pop	{r4, pc}
    559a:	4770      	bx	lr
    559c:	1fff8f40 	.word	0x1fff8f40
    55a0:	1fff8f54 	.word	0x1fff8f54

000055a4 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    55a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    55a8:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 56a4 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    55ac:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    55ae:	2201      	movs	r2, #1
    55b0:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    55b4:	9101      	str	r1, [sp, #4]
    55b6:	b369      	cbz	r1, 5614 <usb_serial_write+0x70>
    55b8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 56a8 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    55bc:	4f36      	ldr	r7, [pc, #216]	; (5698 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    55be:	9e01      	ldr	r6, [sp, #4]
    55c0:	4683      	mov	fp, r0
		if (!tx_packet) {
    55c2:	f8d8 0000 	ldr.w	r0, [r8]
    55c6:	b3b0      	cbz	r0, 5636 <usb_serial_write+0x92>
    55c8:	4d34      	ldr	r5, [pc, #208]	; (569c <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    55ca:	8844      	ldrh	r4, [r0, #2]
    55cc:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    55d0:	42b1      	cmp	r1, r6
    55d2:	bf28      	it	cs
    55d4:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    55d6:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    55da:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    55dc:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    55e0:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    55e2:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    55e4:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    55e8:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    55ec:	b151      	cbz	r1, 5604 <usb_serial_write+0x60>
    55ee:	3c01      	subs	r4, #1
    55f0:	4422      	add	r2, r4
    55f2:	4459      	add	r1, fp
    55f4:	f81b 4b01 	ldrb.w	r4, [fp], #1
    55f8:	f802 4f01 	strb.w	r4, [r2, #1]!
    55fc:	458b      	cmp	fp, r1
    55fe:	d1f9      	bne.n	55f4 <usb_serial_write+0x50>
    5600:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    5604:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    5608:	d80b      	bhi.n	5622 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    560a:	4a25      	ldr	r2, [pc, #148]	; (56a0 <usb_serial_write+0xfc>)
    560c:	2105      	movs	r1, #5
    560e:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    5610:	2e00      	cmp	r6, #0
    5612:	d1d6      	bne.n	55c2 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    5614:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    5616:	2300      	movs	r3, #0
    5618:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    561c:	b003      	add	sp, #12
    561e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    5622:	2240      	movs	r2, #64	; 0x40
    5624:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5626:	4601      	mov	r1, r0
    5628:	2004      	movs	r0, #4
    562a:	f7ff f8f9 	bl	4820 <usb_tx>
			tx_packet = NULL;
    562e:	2200      	movs	r2, #0
    5630:	f8c8 2000 	str.w	r2, [r8]
    5634:	e7e9      	b.n	560a <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5636:	783a      	ldrb	r2, [r7, #0]
    5638:	b32a      	cbz	r2, 5686 <usb_serial_write+0xe2>
    563a:	4d18      	ldr	r5, [pc, #96]	; (569c <usb_serial_write+0xf8>)
    563c:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    5640:	f04f 0a01 	mov.w	sl, #1
    5644:	e007      	b.n	5656 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5646:	3c01      	subs	r4, #1
    5648:	d016      	beq.n	5678 <usb_serial_write+0xd4>
    564a:	782a      	ldrb	r2, [r5, #0]
    564c:	b9a2      	cbnz	r2, 5678 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    564e:	f000 fa13 	bl	5a78 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5652:	783a      	ldrb	r2, [r7, #0]
    5654:	b1ba      	cbz	r2, 5686 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    5656:	2004      	movs	r0, #4
    5658:	f7ff f868 	bl	472c <usb_tx_packet_count>
    565c:	2807      	cmp	r0, #7
    565e:	d8f2      	bhi.n	5646 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    5660:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    5664:	f7ff fef2 	bl	544c <usb_malloc>
    5668:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    566c:	2800      	cmp	r0, #0
    566e:	d1ac      	bne.n	55ca <usb_serial_write+0x26>
					tx_noautoflush = 0;
    5670:	4b0c      	ldr	r3, [pc, #48]	; (56a4 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5672:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    5674:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5676:	d1e8      	bne.n	564a <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    5678:	2301      	movs	r3, #1
					return -1;
    567a:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    567e:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    5680:	b003      	add	sp, #12
    5682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    5686:	2300      	movs	r3, #0
					return -1;
    5688:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    568c:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    5690:	b003      	add	sp, #12
    5692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5696:	bf00      	nop
    5698:	1fff8f40 	.word	0x1fff8f40
    569c:	1fff8f50 	.word	0x1fff8f50
    56a0:	1fff8f48 	.word	0x1fff8f48
    56a4:	1fff8f49 	.word	0x1fff8f49
    56a8:	1fff8f4c 	.word	0x1fff8f4c

000056ac <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    56ac:	b500      	push	{lr}
    56ae:	b083      	sub	sp, #12
    56b0:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    56b2:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    56b4:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    56b8:	4618      	mov	r0, r3
    56ba:	f7ff ff73 	bl	55a4 <usb_serial_write>
}
    56be:	b003      	add	sp, #12
    56c0:	f85d fb04 	ldr.w	pc, [sp], #4

000056c4 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    56c4:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    56c6:	4d0e      	ldr	r5, [pc, #56]	; (5700 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    56c8:	4c0e      	ldr	r4, [pc, #56]	; (5704 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    56ca:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    56cc:	2301      	movs	r3, #1
    56ce:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    56d0:	b128      	cbz	r0, 56de <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    56d2:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    56d4:	2300      	movs	r3, #0
    56d6:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    56d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    56dc:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    56de:	4b0a      	ldr	r3, [pc, #40]	; (5708 <usb_serial_write_buffer_free+0x44>)
    56e0:	781b      	ldrb	r3, [r3, #0]
    56e2:	b913      	cbnz	r3, 56ea <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    56e4:	2000      	movs	r0, #0
    56e6:	7020      	strb	r0, [r4, #0]
			return 0;
    56e8:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    56ea:	2004      	movs	r0, #4
    56ec:	f7ff f81e 	bl	472c <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    56f0:	2807      	cmp	r0, #7
    56f2:	d8f7      	bhi.n	56e4 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    56f4:	f7ff feaa 	bl	544c <usb_malloc>
    56f8:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    56fa:	2800      	cmp	r0, #0
    56fc:	d1e9      	bne.n	56d2 <usb_serial_write_buffer_free+0xe>
    56fe:	e7f1      	b.n	56e4 <usb_serial_write_buffer_free+0x20>
    5700:	1fff8f4c 	.word	0x1fff8f4c
    5704:	1fff8f49 	.word	0x1fff8f49
    5708:	1fff8f40 	.word	0x1fff8f40

0000570c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    570e:	4b11      	ldr	r3, [pc, #68]	; (5754 <usb_serial_flush_output+0x48>)
    5710:	781b      	ldrb	r3, [r3, #0]
    5712:	b18b      	cbz	r3, 5738 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    5714:	4e10      	ldr	r6, [pc, #64]	; (5758 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    5716:	4d11      	ldr	r5, [pc, #68]	; (575c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    5718:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    571a:	2701      	movs	r7, #1
    571c:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    571e:	b164      	cbz	r4, 573a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    5720:	4a0f      	ldr	r2, [pc, #60]	; (5760 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    5722:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    5724:	2700      	movs	r7, #0
    5726:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5728:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    572a:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    572c:	2004      	movs	r0, #4
    572e:	f7ff f877 	bl	4820 <usb_tx>
		tx_packet = NULL;
    5732:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    5734:	2300      	movs	r3, #0
    5736:	702b      	strb	r3, [r5, #0]
    5738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    573a:	f7ff fe87 	bl	544c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    573e:	4b08      	ldr	r3, [pc, #32]	; (5760 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    5740:	b128      	cbz	r0, 574e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    5742:	4601      	mov	r1, r0
    5744:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    5746:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    5748:	f7ff f86a 	bl	4820 <usb_tx>
    574c:	e7f2      	b.n	5734 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    574e:	701f      	strb	r7, [r3, #0]
    5750:	e7f0      	b.n	5734 <usb_serial_flush_output+0x28>
    5752:	bf00      	nop
    5754:	1fff8f40 	.word	0x1fff8f40
    5758:	1fff8f4c 	.word	0x1fff8f4c
    575c:	1fff8f49 	.word	0x1fff8f49
    5760:	1fff8f48 	.word	0x1fff8f48

00005764 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    5764:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    5766:	4b0e      	ldr	r3, [pc, #56]	; (57a0 <usb_serial_flush_callback+0x3c>)
    5768:	781b      	ldrb	r3, [r3, #0]
    576a:	b973      	cbnz	r3, 578a <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    576c:	4c0d      	ldr	r4, [pc, #52]	; (57a4 <usb_serial_flush_callback+0x40>)
    576e:	6821      	ldr	r1, [r4, #0]
    5770:	b161      	cbz	r1, 578c <usb_serial_flush_callback+0x28>
    5772:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    5776:	884b      	ldrh	r3, [r1, #2]
    5778:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    577a:	2004      	movs	r0, #4
    577c:	f7ff f850 	bl	4820 <usb_tx>
		tx_packet = NULL;
    5780:	6025      	str	r5, [r4, #0]
    5782:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    5784:	4b08      	ldr	r3, [pc, #32]	; (57a8 <usb_serial_flush_callback+0x44>)
    5786:	2201      	movs	r2, #1
    5788:	701a      	strb	r2, [r3, #0]
    578a:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    578c:	f7ff fe5e 	bl	544c <usb_malloc>
		if (tx) {
    5790:	2800      	cmp	r0, #0
    5792:	d0f7      	beq.n	5784 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    5794:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    5796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    579a:	2004      	movs	r0, #4
    579c:	f7ff b840 	b.w	4820 <usb_tx>
    57a0:	1fff8f49 	.word	0x1fff8f49
    57a4:	1fff8f4c 	.word	0x1fff8f4c
    57a8:	1fff8f48 	.word	0x1fff8f48

000057ac <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    57ac:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    57ae:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    57b2:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    57b4:	7f43      	ldrb	r3, [r0, #29]
    57b6:	b933      	cbnz	r3, 57c6 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    57b8:	7f01      	ldrb	r1, [r0, #28]
    57ba:	2901      	cmp	r1, #1
    57bc:	d007      	beq.n	57ce <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    57be:	2903      	cmp	r1, #3
    57c0:	d00f      	beq.n	57e2 <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    57c2:	2301      	movs	r3, #1
    57c4:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    57c6:	b902      	cbnz	r2, 57ca <EventResponder::triggerEventNotImmediate()+0x1e>
    57c8:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    57ca:	bc10      	pop	{r4}
    57cc:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    57ce:	4c12      	ldr	r4, [pc, #72]	; (5818 <EventResponder::triggerEventNotImmediate()+0x6c>)
    57d0:	6821      	ldr	r1, [r4, #0]
    57d2:	b1a1      	cbz	r1, 57fe <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    57d4:	4911      	ldr	r1, [pc, #68]	; (581c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    57d6:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    57d8:	680b      	ldr	r3, [r1, #0]
    57da:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    57dc:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    57de:	6158      	str	r0, [r3, #20]
    57e0:	e7ef      	b.n	57c2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    57e2:	4c0f      	ldr	r4, [pc, #60]	; (5820 <EventResponder::triggerEventNotImmediate()+0x74>)
    57e4:	6821      	ldr	r1, [r4, #0]
    57e6:	b181      	cbz	r1, 580a <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    57e8:	490e      	ldr	r1, [pc, #56]	; (5824 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    57ea:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    57ec:	680b      	ldr	r3, [r1, #0]
    57ee:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    57f0:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    57f2:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    57f4:	4b0c      	ldr	r3, [pc, #48]	; (5828 <EventResponder::triggerEventNotImmediate()+0x7c>)
    57f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    57fa:	6019      	str	r1, [r3, #0]
    57fc:	e7e1      	b.n	57c2 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    57fe:	4b07      	ldr	r3, [pc, #28]	; (581c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    5800:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    5802:	6181      	str	r1, [r0, #24]
				firstYield = this;
    5804:	6020      	str	r0, [r4, #0]
				lastYield = this;
    5806:	6018      	str	r0, [r3, #0]
    5808:	e7db      	b.n	57c2 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    580a:	4b06      	ldr	r3, [pc, #24]	; (5824 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    580c:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    580e:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    5810:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    5812:	6018      	str	r0, [r3, #0]
    5814:	e7ee      	b.n	57f4 <EventResponder::triggerEventNotImmediate()+0x48>
    5816:	bf00      	nop
    5818:	1fff8f6c 	.word	0x1fff8f6c
    581c:	1fff8f68 	.word	0x1fff8f68
    5820:	1fff8f5c 	.word	0x1fff8f5c
    5824:	1fff8f60 	.word	0x1fff8f60
    5828:	e000ed04 	.word	0xe000ed04

0000582c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    582c:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    582e:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    5830:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    5832:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    5834:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    5836:	d002      	beq.n	583e <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    5838:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    583a:	f7ff bfb7 	b.w	57ac <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    583e:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    5840:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    5842:	4718      	bx	r3

00005844 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    5844:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5846:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    584a:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    584c:	4c0c      	ldr	r4, [pc, #48]	; (5880 <EventResponder::runFromInterrupt()+0x3c>)
    584e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    5850:	b180      	cbz	r0, 5874 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    5852:	4e0c      	ldr	r6, [pc, #48]	; (5884 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    5854:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    5856:	6943      	ldr	r3, [r0, #20]
    5858:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    585a:	b173      	cbz	r3, 587a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    585c:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    585e:	b902      	cbnz	r2, 5862 <EventResponder::runFromInterrupt()+0x1e>
    5860:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    5862:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    5864:	6883      	ldr	r3, [r0, #8]
    5866:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5868:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    586c:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    586e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    5870:	2800      	cmp	r0, #0
    5872:	d1f0      	bne.n	5856 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5874:	b902      	cbnz	r2, 5878 <EventResponder::runFromInterrupt()+0x34>
    5876:	b662      	cpsie	i
    5878:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    587a:	6033      	str	r3, [r6, #0]
    587c:	e7ef      	b.n	585e <EventResponder::runFromInterrupt()+0x1a>
    587e:	bf00      	nop
    5880:	1fff8f5c 	.word	0x1fff8f5c
    5884:	1fff8f60 	.word	0x1fff8f60

00005888 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    5888:	f7ff bfdc 	b.w	5844 <EventResponder::runFromInterrupt()>

0000588c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    588c:	4a18      	ldr	r2, [pc, #96]	; (58f0 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    588e:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    5890:	6814      	ldr	r4, [r2, #0]
    5892:	2c00      	cmp	r4, #0
    5894:	d027      	beq.n	58e6 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    5896:	6803      	ldr	r3, [r0, #0]
    5898:	6821      	ldr	r1, [r4, #0]
    589a:	428b      	cmp	r3, r1
    589c:	d20e      	bcs.n	58bc <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    589e:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    58a0:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    58a2:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    58a4:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    58a6:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    58a8:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    58aa:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    58ac:	2302      	movs	r3, #2
    58ae:	7503      	strb	r3, [r0, #20]
}
    58b0:	bc30      	pop	{r4, r5}
    58b2:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    58b4:	6811      	ldr	r1, [r2, #0]
    58b6:	428b      	cmp	r3, r1
    58b8:	4614      	mov	r4, r2
    58ba:	d308      	bcc.n	58ce <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    58bc:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    58be:	1a5b      	subs	r3, r3, r1
    58c0:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    58c2:	2a00      	cmp	r2, #0
    58c4:	d1f6      	bne.n	58b4 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    58c6:	6082      	str	r2, [r0, #8]
		_prev = timer;
    58c8:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    58ca:	60a0      	str	r0, [r4, #8]
    58cc:	e7ee      	b.n	58ac <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    58ce:	68d2      	ldr	r2, [r2, #12]
    58d0:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    58d2:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    58d4:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    58d6:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    58d8:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    58da:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    58dc:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    58de:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    58e0:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    58e2:	bc30      	pop	{r4, r5}
    58e4:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    58e6:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    58e8:	60c4      	str	r4, [r0, #12]
		listActive = this;
    58ea:	6010      	str	r0, [r2, #0]
    58ec:	e7de      	b.n	58ac <MillisTimer::addToActiveList()+0x20>
    58ee:	bf00      	nop
    58f0:	1fff8f64 	.word	0x1fff8f64

000058f4 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    58f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    58f6:	4e22      	ldr	r6, [pc, #136]	; (5980 <MillisTimer::runFromTimer()+0x8c>)
    58f8:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    58fa:	b32c      	cbz	r4, 5948 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    58fc:	6823      	ldr	r3, [r4, #0]
    58fe:	2b00      	cmp	r3, #0
    5900:	d13a      	bne.n	5978 <MillisTimer::runFromTimer()+0x84>
    5902:	4f20      	ldr	r7, [pc, #128]	; (5984 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    5904:	461d      	mov	r5, r3
    5906:	e004      	b.n	5912 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    5908:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    590a:	b1ec      	cbz	r4, 5948 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    590c:	6823      	ldr	r3, [r4, #0]
    590e:	2b00      	cmp	r3, #0
    5910:	d132      	bne.n	5978 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    5912:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    5914:	b103      	cbz	r3, 5918 <MillisTimer::runFromTimer()+0x24>
    5916:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    5918:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    591a:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    591c:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    591e:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    5920:	681b      	ldr	r3, [r3, #0]
    5922:	42bb      	cmp	r3, r7
    5924:	d121      	bne.n	596a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    5926:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    5928:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    592a:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    592c:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    592e:	d020      	beq.n	5972 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    5930:	f7ff ff3c 	bl	57ac <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    5934:	6863      	ldr	r3, [r4, #4]
    5936:	2b00      	cmp	r3, #0
    5938:	d0e6      	beq.n	5908 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    593a:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    593c:	4620      	mov	r0, r4
    593e:	f7ff ffa5 	bl	588c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    5942:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    5944:	2c00      	cmp	r4, #0
    5946:	d1e1      	bne.n	590c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5948:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    594c:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    594e:	4a0e      	ldr	r2, [pc, #56]	; (5988 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    5950:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    5952:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    5954:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    5956:	b903      	cbnz	r3, 595a <MillisTimer::runFromTimer()+0x66>
    5958:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    595a:	b128      	cbz	r0, 5968 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    595c:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    595e:	f7ff ff95 	bl	588c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    5962:	4620      	mov	r0, r4
    5964:	2800      	cmp	r0, #0
    5966:	d1f9      	bne.n	595c <MillisTimer::runFromTimer()+0x68>
    5968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    596a:	4622      	mov	r2, r4
    596c:	2100      	movs	r1, #0
    596e:	4798      	blx	r3
    5970:	e7e0      	b.n	5934 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    5972:	6883      	ldr	r3, [r0, #8]
    5974:	4798      	blx	r3
    5976:	e7dd      	b.n	5934 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    5978:	3b01      	subs	r3, #1
    597a:	6023      	str	r3, [r4, #0]
			break;
    597c:	e7e4      	b.n	5948 <MillisTimer::runFromTimer()+0x54>
    597e:	bf00      	nop
    5980:	1fff8f64 	.word	0x1fff8f64
    5984:	0000582d 	.word	0x0000582d
    5988:	1fff8f74 	.word	0x1fff8f74

0000598c <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    598c:	4a02      	ldr	r2, [pc, #8]	; (5998 <systick_isr+0xc>)
    598e:	6813      	ldr	r3, [r2, #0]
    5990:	3301      	adds	r3, #1
    5992:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    5994:	f7ff bfae 	b.w	58f4 <MillisTimer::runFromTimer()>
    5998:	1fff8e5c 	.word	0x1fff8e5c

0000599c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    599c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    599e:	f7fd fb37 	bl	3010 <setup>
	while (1) {
		loop();
    59a2:	f7fd fc4f 	bl	3244 <loop>
		yield();
    59a6:	f000 f867 	bl	5a78 <yield>
    59aa:	e7fa      	b.n	59a2 <main+0x6>

000059ac <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    59ac:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    59ae:	4a06      	ldr	r2, [pc, #24]	; (59c8 <Print::println()+0x1c>)
	return write(buf, 2);
    59b0:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    59b2:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    59b4:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    59b6:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    59b8:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    59ba:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    59be:	2202      	movs	r2, #2
    59c0:	4798      	blx	r3
}
    59c2:	b003      	add	sp, #12
    59c4:	f85d fb04 	ldr.w	pc, [sp], #4
    59c8:	00007ec0 	.word	0x00007ec0

000059cc <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    59cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    59ce:	4607      	mov	r7, r0
    59d0:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    59d2:	2a00      	cmp	r2, #0
    59d4:	d033      	beq.n	5a3e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    59d6:	2a01      	cmp	r2, #1
    59d8:	bf08      	it	eq
    59da:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    59dc:	b351      	cbz	r1, 5a34 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    59de:	2421      	movs	r4, #33	; 0x21
    59e0:	e000      	b.n	59e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    59e2:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    59e4:	fbb1 f5f2 	udiv	r5, r1, r2
    59e8:	fb02 1115 	mls	r1, r2, r5, r1
    59ec:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    59ee:	2909      	cmp	r1, #9
    59f0:	f100 0130 	add.w	r1, r0, #48	; 0x30
    59f4:	bf98      	it	ls
    59f6:	b2c8      	uxtbls	r0, r1
    59f8:	a90a      	add	r1, sp, #40	; 0x28
    59fa:	bf88      	it	hi
    59fc:	3037      	addhi	r0, #55	; 0x37
    59fe:	4421      	add	r1, r4
    5a00:	bf88      	it	hi
    5a02:	b2c0      	uxtbhi	r0, r0
    5a04:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    5a08:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    5a0a:	4629      	mov	r1, r5
    5a0c:	2d00      	cmp	r5, #0
    5a0e:	d1e8      	bne.n	59e2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    5a10:	b133      	cbz	r3, 5a20 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    5a12:	3c01      	subs	r4, #1
    5a14:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    5a16:	ab0a      	add	r3, sp, #40	; 0x28
    5a18:	4423      	add	r3, r4
    5a1a:	222d      	movs	r2, #45	; 0x2d
    5a1c:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    5a20:	683b      	ldr	r3, [r7, #0]
    5a22:	aa01      	add	r2, sp, #4
    5a24:	1911      	adds	r1, r2, r4
    5a26:	685b      	ldr	r3, [r3, #4]
    5a28:	4638      	mov	r0, r7
    5a2a:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    5a2e:	4798      	blx	r3
}
    5a30:	b00b      	add	sp, #44	; 0x2c
    5a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    5a34:	2230      	movs	r2, #48	; 0x30
    5a36:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    5a3a:	2421      	movs	r4, #33	; 0x21
    5a3c:	e7e8      	b.n	5a10 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    5a3e:	6803      	ldr	r3, [r0, #0]
    5a40:	b2c9      	uxtb	r1, r1
    5a42:	681b      	ldr	r3, [r3, #0]
    5a44:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    5a46:	b00b      	add	sp, #44	; 0x2c
    5a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a4a:	bf00      	nop

00005a4c <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    5a4c:	f7ff bd8e 	b.w	556c <usb_serial_flush_input>

00005a50 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    5a50:	f7ff bd66 	b.w	5520 <usb_serial_peekchar>

00005a54 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    5a54:	f7ff bd40 	b.w	54d8 <usb_serial_getchar>

00005a58 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    5a58:	f7ff bd7a 	b.w	5550 <usb_serial_available>

00005a5c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    5a5c:	f7ff be56 	b.w	570c <usb_serial_flush_output>

00005a60 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    5a60:	f7ff be30 	b.w	56c4 <usb_serial_write_buffer_free>

00005a64 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5a64:	4608      	mov	r0, r1
    5a66:	4611      	mov	r1, r2
    5a68:	f7ff bd9c 	b.w	55a4 <usb_serial_write>

00005a6c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    5a6c:	4608      	mov	r0, r1
    5a6e:	f7ff be1d 	b.w	56ac <usb_serial_putchar>
    5a72:	bf00      	nop

00005a74 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    5a74:	4770      	bx	lr
    5a76:	bf00      	nop

00005a78 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    5a78:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    5a7a:	4c22      	ldr	r4, [pc, #136]	; (5b04 <yield+0x8c>)
    5a7c:	7823      	ldrb	r3, [r4, #0]
    5a7e:	b103      	cbz	r3, 5a82 <yield+0xa>
    5a80:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    5a82:	2301      	movs	r3, #1
    5a84:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    5a86:	f7ff fd63 	bl	5550 <usb_serial_available>
	if (Serial.available()) serialEvent();
    5a8a:	bb70      	cbnz	r0, 5aea <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    5a8c:	f000 f868 	bl	5b60 <serial_available>
	if (Serial1.available()) serialEvent1();
    5a90:	bb40      	cbnz	r0, 5ae4 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    5a92:	f000 f8fb 	bl	5c8c <serial2_available>
	if (Serial2.available()) serialEvent2();
    5a96:	bb10      	cbnz	r0, 5ade <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    5a98:	f000 f98e 	bl	5db8 <serial3_available>
	if (Serial3.available()) serialEvent3();
    5a9c:	b9e0      	cbnz	r0, 5ad8 <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    5a9e:	2300      	movs	r3, #0
    5aa0:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    5aa2:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	d1ea      	bne.n	5a80 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5aaa:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    5aae:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    5ab0:	4b15      	ldr	r3, [pc, #84]	; (5b08 <yield+0x90>)
    5ab2:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    5ab4:	b1e0      	cbz	r0, 5af0 <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    5ab6:	4c15      	ldr	r4, [pc, #84]	; (5b0c <yield+0x94>)
    5ab8:	7822      	ldrb	r2, [r4, #0]
    5aba:	b9ca      	cbnz	r2, 5af0 <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    5abc:	6945      	ldr	r5, [r0, #20]
    5abe:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    5ac0:	2301      	movs	r3, #1
    5ac2:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    5ac4:	b1c5      	cbz	r5, 5af8 <yield+0x80>
			firstYield->_prev = nullptr;
    5ac6:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5ac8:	b901      	cbnz	r1, 5acc <yield+0x54>
    5aca:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    5acc:	2500      	movs	r5, #0
    5ace:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    5ad0:	6883      	ldr	r3, [r0, #8]
    5ad2:	4798      	blx	r3
		runningFromYield = false;
    5ad4:	7025      	strb	r5, [r4, #0]
    5ad6:	e7d3      	b.n	5a80 <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    5ad8:	f000 fa30 	bl	5f3c <serialEvent3()>
    5adc:	e7df      	b.n	5a9e <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    5ade:	f000 fa2b 	bl	5f38 <serialEvent2()>
    5ae2:	e7d9      	b.n	5a98 <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    5ae4:	f000 fa26 	bl	5f34 <serialEvent1()>
    5ae8:	e7d3      	b.n	5a92 <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    5aea:	f7ff ffc3 	bl	5a74 <serialEvent()>
    5aee:	e7cd      	b.n	5a8c <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5af0:	2900      	cmp	r1, #0
    5af2:	d1c5      	bne.n	5a80 <yield+0x8>
    5af4:	b662      	cpsie	i
    5af6:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    5af8:	4b05      	ldr	r3, [pc, #20]	; (5b10 <yield+0x98>)
    5afa:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5afc:	2900      	cmp	r1, #0
    5afe:	d1e5      	bne.n	5acc <yield+0x54>
    5b00:	e7e3      	b.n	5aca <yield+0x52>
    5b02:	bf00      	nop
    5b04:	1fff8f78 	.word	0x1fff8f78
    5b08:	1fff8f6c 	.word	0x1fff8f6c
    5b0c:	1fff8f70 	.word	0x1fff8f70
    5b10:	1fff8f68 	.word	0x1fff8f68

00005b14 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    5b14:	b4f0      	push	{r4, r5, r6, r7}
    5b16:	1e4d      	subs	r5, r1, #1
    5b18:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    5b1a:	2400      	movs	r4, #0
    5b1c:	e000      	b.n	5b20 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    5b1e:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    5b20:	fbb0 f3f2 	udiv	r3, r0, r2
    5b24:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    5b28:	2809      	cmp	r0, #9
    5b2a:	f100 0730 	add.w	r7, r0, #48	; 0x30
    5b2e:	bf8a      	itet	hi
    5b30:	3037      	addhi	r0, #55	; 0x37
    5b32:	b2f8      	uxtbls	r0, r7
    5b34:	b2c0      	uxtbhi	r0, r0
    5b36:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    5b3a:	4618      	mov	r0, r3
    5b3c:	2b00      	cmp	r3, #0
    5b3e:	d1ee      	bne.n	5b1e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    5b40:	190a      	adds	r2, r1, r4
    5b42:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    5b44:	b14c      	cbz	r4, 5b5a <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    5b46:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    5b48:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    5b4c:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    5b4e:	3301      	adds	r3, #1
    5b50:	1ae0      	subs	r0, r4, r3
    5b52:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    5b54:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    5b58:	dbf5      	blt.n	5b46 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    5b5a:	4608      	mov	r0, r1
    5b5c:	bcf0      	pop	{r4, r5, r6, r7}
    5b5e:	4770      	bx	lr

00005b60 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5b60:	4a05      	ldr	r2, [pc, #20]	; (5b78 <serial_available+0x18>)
	tail = rx_buffer_tail;
    5b62:	4b06      	ldr	r3, [pc, #24]	; (5b7c <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5b64:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    5b66:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5b68:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    5b6a:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    5b6c:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    5b6e:	bf38      	it	cc
    5b70:	3040      	addcc	r0, #64	; 0x40
    5b72:	1ac0      	subs	r0, r0, r3
}
    5b74:	4770      	bx	lr
    5b76:	bf00      	nop
    5b78:	1fff8f80 	.word	0x1fff8f80
    5b7c:	1fff8f81 	.word	0x1fff8f81

00005b80 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    5b80:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    5b82:	4b38      	ldr	r3, [pc, #224]	; (5c64 <uart0_status_isr+0xe4>)
    5b84:	791a      	ldrb	r2, [r3, #4]
    5b86:	f012 0f30 	tst.w	r2, #48	; 0x30
    5b8a:	d02c      	beq.n	5be6 <uart0_status_isr+0x66>
		__disable_irq();
    5b8c:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    5b8e:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    5b90:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    5b94:	2900      	cmp	r1, #0
    5b96:	d03d      	beq.n	5c14 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    5b98:	b662      	cpsie	i
			head = rx_buffer_head;
    5b9a:	4f33      	ldr	r7, [pc, #204]	; (5c68 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    5b9c:	4933      	ldr	r1, [pc, #204]	; (5c6c <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    5b9e:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    5ba0:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    5ba2:	4e33      	ldr	r6, [pc, #204]	; (5c70 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    5ba4:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    5ba6:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    5ba8:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    5baa:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    5bac:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    5bae:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    5bb0:	bf28      	it	cs
    5bb2:	2300      	movcs	r3, #0
				if (newhead != tail) {
    5bb4:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    5bb6:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    5bba:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    5bbc:	bf1c      	itt	ne
    5bbe:	54f1      	strbne	r1, [r6, r3]
    5bc0:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    5bc2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    5bc6:	d1f0      	bne.n	5baa <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    5bc8:	4b2a      	ldr	r3, [pc, #168]	; (5c74 <uart0_status_isr+0xf4>)
    5bca:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    5bcc:	b2c2      	uxtb	r2, r0
    5bce:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    5bd0:	b14b      	cbz	r3, 5be6 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    5bd2:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    5bd4:	bf36      	itet	cc
    5bd6:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    5bda:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    5bdc:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    5bde:	2827      	cmp	r0, #39	; 0x27
    5be0:	bfc4      	itt	gt
    5be2:	2201      	movgt	r2, #1
    5be4:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    5be6:	491f      	ldr	r1, [pc, #124]	; (5c64 <uart0_status_isr+0xe4>)
    5be8:	78ca      	ldrb	r2, [r1, #3]
    5bea:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    5bec:	0615      	lsls	r5, r2, #24
    5bee:	d416      	bmi.n	5c1e <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    5bf0:	0652      	lsls	r2, r2, #25
    5bf2:	d50d      	bpl.n	5c10 <uart0_status_isr+0x90>
    5bf4:	4b1b      	ldr	r3, [pc, #108]	; (5c64 <uart0_status_isr+0xe4>)
    5bf6:	791b      	ldrb	r3, [r3, #4]
    5bf8:	065b      	lsls	r3, r3, #25
    5bfa:	d509      	bpl.n	5c10 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    5bfc:	4b1e      	ldr	r3, [pc, #120]	; (5c78 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    5bfe:	491f      	ldr	r1, [pc, #124]	; (5c7c <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    5c00:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    5c02:	2200      	movs	r2, #0
    5c04:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    5c06:	b103      	cbz	r3, 5c0a <uart0_status_isr+0x8a>
    5c08:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    5c0a:	4b16      	ldr	r3, [pc, #88]	; (5c64 <uart0_status_isr+0xe4>)
    5c0c:	223c      	movs	r2, #60	; 0x3c
    5c0e:	70da      	strb	r2, [r3, #3]
	}
}
    5c10:	bcf0      	pop	{r4, r5, r6, r7}
    5c12:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    5c14:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    5c16:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    5c18:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    5c1a:	b662      	cpsie	i
    5c1c:	e7e3      	b.n	5be6 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    5c1e:	790b      	ldrb	r3, [r1, #4]
    5c20:	061c      	lsls	r4, r3, #24
    5c22:	d5e5      	bpl.n	5bf0 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    5c24:	4b16      	ldr	r3, [pc, #88]	; (5c80 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    5c26:	4e17      	ldr	r6, [pc, #92]	; (5c84 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    5c28:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    5c2a:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    5c2c:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    5c2e:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    5c30:	429c      	cmp	r4, r3
    5c32:	d00e      	beq.n	5c52 <uart0_status_isr+0xd2>
    5c34:	4d14      	ldr	r5, [pc, #80]	; (5c88 <uart0_status_isr+0x108>)
    5c36:	e001      	b.n	5c3c <uart0_status_isr+0xbc>
    5c38:	42a3      	cmp	r3, r4
    5c3a:	d00a      	beq.n	5c52 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    5c3c:	3301      	adds	r3, #1
    5c3e:	2b40      	cmp	r3, #64	; 0x40
    5c40:	bf28      	it	cs
    5c42:	2300      	movcs	r3, #0
			avail = UART0_S1;
    5c44:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    5c46:	5ce8      	ldrb	r0, [r5, r3]
    5c48:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    5c4a:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    5c4c:	7d08      	ldrb	r0, [r1, #20]
    5c4e:	2807      	cmp	r0, #7
    5c50:	d9f2      	bls.n	5c38 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    5c52:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    5c54:	4903      	ldr	r1, [pc, #12]	; (5c64 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    5c56:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    5c58:	790b      	ldrb	r3, [r1, #4]
    5c5a:	0618      	lsls	r0, r3, #24
    5c5c:	bf44      	itt	mi
    5c5e:	237c      	movmi	r3, #124	; 0x7c
    5c60:	70cb      	strbmi	r3, [r1, #3]
    5c62:	e7c5      	b.n	5bf0 <uart0_status_isr+0x70>
    5c64:	4006a000 	.word	0x4006a000
    5c68:	1fff8f80 	.word	0x1fff8f80
    5c6c:	1fff8f81 	.word	0x1fff8f81
    5c70:	1fff8fc4 	.word	0x1fff8fc4
    5c74:	1fff8f7c 	.word	0x1fff8f7c
    5c78:	1fff9008 	.word	0x1fff9008
    5c7c:	1fff9004 	.word	0x1fff9004
    5c80:	1fff900c 	.word	0x1fff900c
    5c84:	1fff9005 	.word	0x1fff9005
    5c88:	1fff8f84 	.word	0x1fff8f84

00005c8c <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5c8c:	4a05      	ldr	r2, [pc, #20]	; (5ca4 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    5c8e:	4b06      	ldr	r3, [pc, #24]	; (5ca8 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5c90:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    5c92:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5c94:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    5c96:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    5c98:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    5c9a:	bf38      	it	cc
    5c9c:	3040      	addcc	r0, #64	; 0x40
    5c9e:	1ac0      	subs	r0, r0, r3
}
    5ca0:	4770      	bx	lr
    5ca2:	bf00      	nop
    5ca4:	1fff9080 	.word	0x1fff9080
    5ca8:	1fff9015 	.word	0x1fff9015

00005cac <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    5cac:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    5cae:	4b38      	ldr	r3, [pc, #224]	; (5d90 <uart1_status_isr+0xe4>)
    5cb0:	791a      	ldrb	r2, [r3, #4]
    5cb2:	f012 0f30 	tst.w	r2, #48	; 0x30
    5cb6:	d02c      	beq.n	5d12 <uart1_status_isr+0x66>
		__disable_irq();
    5cb8:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    5cba:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    5cbc:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    5cc0:	2900      	cmp	r1, #0
    5cc2:	d03d      	beq.n	5d40 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    5cc4:	b662      	cpsie	i
			head = rx_buffer_head;
    5cc6:	4f33      	ldr	r7, [pc, #204]	; (5d94 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    5cc8:	4933      	ldr	r1, [pc, #204]	; (5d98 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    5cca:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    5ccc:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    5cce:	4e33      	ldr	r6, [pc, #204]	; (5d9c <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    5cd0:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    5cd2:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    5cd4:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    5cd6:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    5cd8:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    5cda:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    5cdc:	bf28      	it	cs
    5cde:	2300      	movcs	r3, #0
				if (newhead != tail) {
    5ce0:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    5ce2:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    5ce6:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    5ce8:	bf1c      	itt	ne
    5cea:	54f1      	strbne	r1, [r6, r3]
    5cec:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    5cee:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    5cf2:	d1f0      	bne.n	5cd6 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    5cf4:	4b2a      	ldr	r3, [pc, #168]	; (5da0 <uart1_status_isr+0xf4>)
    5cf6:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    5cf8:	b2c2      	uxtb	r2, r0
    5cfa:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    5cfc:	b14b      	cbz	r3, 5d12 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    5cfe:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    5d00:	bf36      	itet	cc
    5d02:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    5d06:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    5d08:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    5d0a:	2827      	cmp	r0, #39	; 0x27
    5d0c:	bfc4      	itt	gt
    5d0e:	2201      	movgt	r2, #1
    5d10:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    5d12:	491f      	ldr	r1, [pc, #124]	; (5d90 <uart1_status_isr+0xe4>)
    5d14:	78ca      	ldrb	r2, [r1, #3]
    5d16:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    5d18:	0615      	lsls	r5, r2, #24
    5d1a:	d416      	bmi.n	5d4a <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    5d1c:	0652      	lsls	r2, r2, #25
    5d1e:	d50d      	bpl.n	5d3c <uart1_status_isr+0x90>
    5d20:	4b1b      	ldr	r3, [pc, #108]	; (5d90 <uart1_status_isr+0xe4>)
    5d22:	791b      	ldrb	r3, [r3, #4]
    5d24:	065b      	lsls	r3, r3, #25
    5d26:	d509      	bpl.n	5d3c <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    5d28:	4b1e      	ldr	r3, [pc, #120]	; (5da4 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    5d2a:	491f      	ldr	r1, [pc, #124]	; (5da8 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    5d2c:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    5d2e:	2200      	movs	r2, #0
    5d30:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    5d32:	b103      	cbz	r3, 5d36 <uart1_status_isr+0x8a>
    5d34:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    5d36:	4b16      	ldr	r3, [pc, #88]	; (5d90 <uart1_status_isr+0xe4>)
    5d38:	223c      	movs	r2, #60	; 0x3c
    5d3a:	70da      	strb	r2, [r3, #3]
	}
}
    5d3c:	bcf0      	pop	{r4, r5, r6, r7}
    5d3e:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    5d40:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    5d42:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    5d44:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    5d46:	b662      	cpsie	i
    5d48:	e7e3      	b.n	5d12 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    5d4a:	790b      	ldrb	r3, [r1, #4]
    5d4c:	061c      	lsls	r4, r3, #24
    5d4e:	d5e5      	bpl.n	5d1c <uart1_status_isr+0x70>
		head = tx_buffer_head;
    5d50:	4b16      	ldr	r3, [pc, #88]	; (5dac <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    5d52:	4e17      	ldr	r6, [pc, #92]	; (5db0 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    5d54:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    5d56:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    5d58:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    5d5a:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    5d5c:	429c      	cmp	r4, r3
    5d5e:	d00e      	beq.n	5d7e <uart1_status_isr+0xd2>
    5d60:	4d14      	ldr	r5, [pc, #80]	; (5db4 <uart1_status_isr+0x108>)
    5d62:	e001      	b.n	5d68 <uart1_status_isr+0xbc>
    5d64:	42a3      	cmp	r3, r4
    5d66:	d00a      	beq.n	5d7e <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    5d68:	3301      	adds	r3, #1
    5d6a:	2b28      	cmp	r3, #40	; 0x28
    5d6c:	bf28      	it	cs
    5d6e:	2300      	movcs	r3, #0
			avail = UART1_S1;
    5d70:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    5d72:	5ce8      	ldrb	r0, [r5, r3]
    5d74:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    5d76:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    5d78:	7d08      	ldrb	r0, [r1, #20]
    5d7a:	2807      	cmp	r0, #7
    5d7c:	d9f2      	bls.n	5d64 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    5d7e:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    5d80:	4903      	ldr	r1, [pc, #12]	; (5d90 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    5d82:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    5d84:	790b      	ldrb	r3, [r1, #4]
    5d86:	0618      	lsls	r0, r3, #24
    5d88:	bf44      	itt	mi
    5d8a:	237c      	movmi	r3, #124	; 0x7c
    5d8c:	70cb      	strbmi	r3, [r1, #3]
    5d8e:	e7c5      	b.n	5d1c <uart1_status_isr+0x70>
    5d90:	4006b000 	.word	0x4006b000
    5d94:	1fff9080 	.word	0x1fff9080
    5d98:	1fff9015 	.word	0x1fff9015
    5d9c:	1fff9040 	.word	0x1fff9040
    5da0:	1fff9010 	.word	0x1fff9010
    5da4:	1fff9084 	.word	0x1fff9084
    5da8:	1fff9014 	.word	0x1fff9014
    5dac:	1fff9088 	.word	0x1fff9088
    5db0:	1fff9081 	.word	0x1fff9081
    5db4:	1fff9018 	.word	0x1fff9018

00005db8 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5db8:	4a05      	ldr	r2, [pc, #20]	; (5dd0 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    5dba:	4b06      	ldr	r3, [pc, #24]	; (5dd4 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5dbc:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    5dbe:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5dc0:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    5dc2:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    5dc4:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    5dc6:	bf38      	it	cc
    5dc8:	3040      	addcc	r0, #64	; 0x40
    5dca:	1ac0      	subs	r0, r0, r3
}
    5dcc:	4770      	bx	lr
    5dce:	bf00      	nop
    5dd0:	1fff9090 	.word	0x1fff9090
    5dd4:	1fff9091 	.word	0x1fff9091

00005dd8 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    5dd8:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    5dda:	4b2b      	ldr	r3, [pc, #172]	; (5e88 <uart2_status_isr+0xb0>)
    5ddc:	791a      	ldrb	r2, [r3, #4]
    5dde:	0694      	lsls	r4, r2, #26
    5de0:	d51f      	bpl.n	5e22 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    5de2:	482a      	ldr	r0, [pc, #168]	; (5e8c <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    5de4:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    5de6:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    5de8:	4929      	ldr	r1, [pc, #164]	; (5e90 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    5dea:	3301      	adds	r3, #1
    5dec:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    5dee:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    5df0:	bfc8      	it	gt
    5df2:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    5df4:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    5df6:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    5df8:	d003      	beq.n	5e02 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    5dfa:	4c26      	ldr	r4, [pc, #152]	; (5e94 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    5dfc:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    5dfe:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    5e00:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    5e02:	4a25      	ldr	r2, [pc, #148]	; (5e98 <uart2_status_isr+0xc0>)
    5e04:	6811      	ldr	r1, [r2, #0]
    5e06:	b161      	cbz	r1, 5e22 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    5e08:	4a24      	ldr	r2, [pc, #144]	; (5e9c <uart2_status_isr+0xc4>)
    5e0a:	7812      	ldrb	r2, [r2, #0]
    5e0c:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    5e0e:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    5e10:	bf36      	itet	cc
    5e12:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    5e16:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    5e18:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    5e1a:	2b27      	cmp	r3, #39	; 0x27
    5e1c:	bfc4      	itt	gt
    5e1e:	2301      	movgt	r3, #1
    5e20:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    5e22:	4a19      	ldr	r2, [pc, #100]	; (5e88 <uart2_status_isr+0xb0>)
    5e24:	78d3      	ldrb	r3, [r2, #3]
    5e26:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    5e28:	0618      	lsls	r0, r3, #24
    5e2a:	d411      	bmi.n	5e50 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    5e2c:	065a      	lsls	r2, r3, #25
    5e2e:	d50d      	bpl.n	5e4c <uart2_status_isr+0x74>
    5e30:	4b15      	ldr	r3, [pc, #84]	; (5e88 <uart2_status_isr+0xb0>)
    5e32:	791b      	ldrb	r3, [r3, #4]
    5e34:	065b      	lsls	r3, r3, #25
    5e36:	d509      	bpl.n	5e4c <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    5e38:	4b19      	ldr	r3, [pc, #100]	; (5ea0 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    5e3a:	491a      	ldr	r1, [pc, #104]	; (5ea4 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    5e3c:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    5e3e:	2200      	movs	r2, #0
    5e40:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    5e42:	b103      	cbz	r3, 5e46 <uart2_status_isr+0x6e>
    5e44:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    5e46:	4b10      	ldr	r3, [pc, #64]	; (5e88 <uart2_status_isr+0xb0>)
    5e48:	222c      	movs	r2, #44	; 0x2c
    5e4a:	70da      	strb	r2, [r3, #3]
	}
}
    5e4c:	bc30      	pop	{r4, r5}
    5e4e:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    5e50:	7911      	ldrb	r1, [r2, #4]
    5e52:	0609      	lsls	r1, r1, #24
    5e54:	d5ea      	bpl.n	5e2c <uart2_status_isr+0x54>
		head = tx_buffer_head;
    5e56:	4914      	ldr	r1, [pc, #80]	; (5ea8 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    5e58:	4810      	ldr	r0, [pc, #64]	; (5e9c <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    5e5a:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    5e5c:	7801      	ldrb	r1, [r0, #0]
    5e5e:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    5e60:	428c      	cmp	r4, r1
    5e62:	d00d      	beq.n	5e80 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    5e64:	1c4a      	adds	r2, r1, #1
    5e66:	2a27      	cmp	r2, #39	; 0x27
    5e68:	bf84      	itt	hi
    5e6a:	2100      	movhi	r1, #0
    5e6c:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    5e6e:	4d0f      	ldr	r5, [pc, #60]	; (5eac <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    5e70:	4c05      	ldr	r4, [pc, #20]	; (5e88 <uart2_status_isr+0xb0>)
    5e72:	bf98      	it	ls
    5e74:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    5e76:	5caa      	ldrb	r2, [r5, r2]
    5e78:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    5e7a:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    5e7c:	7001      	strb	r1, [r0, #0]
    5e7e:	e7d5      	b.n	5e2c <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    5e80:	216c      	movs	r1, #108	; 0x6c
    5e82:	70d1      	strb	r1, [r2, #3]
    5e84:	e7d2      	b.n	5e2c <uart2_status_isr+0x54>
    5e86:	bf00      	nop
    5e88:	4006c000 	.word	0x4006c000
    5e8c:	1fff9090 	.word	0x1fff9090
    5e90:	1fff9091 	.word	0x1fff9091
    5e94:	1fff90bc 	.word	0x1fff90bc
    5e98:	1fff908c 	.word	0x1fff908c
    5e9c:	1fff90fd 	.word	0x1fff90fd
    5ea0:	1fff9100 	.word	0x1fff9100
    5ea4:	1fff90fc 	.word	0x1fff90fc
    5ea8:	1fff9104 	.word	0x1fff9104
    5eac:	1fff9094 	.word	0x1fff9094

00005eb0 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    5eb0:	b570      	push	{r4, r5, r6, lr}
    5eb2:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    5eb4:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    5eb6:	4b19      	ldr	r3, [pc, #100]	; (5f1c <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    5eb8:	4d19      	ldr	r5, [pc, #100]	; (5f20 <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    5eba:	481a      	ldr	r0, [pc, #104]	; (5f24 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    5ebc:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    5ebe:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    5ec0:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    5ec2:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    5ec4:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    5ec6:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    5ec8:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    5eca:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    5ecc:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    5ece:	7813      	ldrb	r3, [r2, #0]
    5ed0:	061b      	lsls	r3, r3, #24
    5ed2:	d5fc      	bpl.n	5ece <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    5ed4:	4b14      	ldr	r3, [pc, #80]	; (5f28 <usb_init_serialnumber+0x78>)
    5ed6:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    5ed8:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    5eda:	4b14      	ldr	r3, [pc, #80]	; (5f2c <usb_init_serialnumber+0x7c>)
    5edc:	4c14      	ldr	r4, [pc, #80]	; (5f30 <usb_init_serialnumber+0x80>)
    5ede:	4298      	cmp	r0, r3
    5ee0:	bf98      	it	ls
    5ee2:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    5ee6:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    5ee8:	bf98      	it	ls
    5eea:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    5eec:	220a      	movs	r2, #10
    5eee:	f7ff fe11 	bl	5b14 <ultoa>
    5ef2:	a901      	add	r1, sp, #4
    5ef4:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    5ef6:	2300      	movs	r3, #0
		char c = buf[i];
    5ef8:	f811 2b01 	ldrb.w	r2, [r1], #1
    5efc:	3301      	adds	r3, #1
		if (!c) break;
    5efe:	b13a      	cbz	r2, 5f10 <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    5f00:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    5f02:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    5f06:	d1f7      	bne.n	5ef8 <usb_init_serialnumber+0x48>
    5f08:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    5f0a:	7023      	strb	r3, [r4, #0]
}
    5f0c:	b004      	add	sp, #16
    5f0e:	bd70      	pop	{r4, r5, r6, pc}
    5f10:	005b      	lsls	r3, r3, #1
    5f12:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    5f14:	7023      	strb	r3, [r4, #0]
}
    5f16:	b004      	add	sp, #16
    5f18:	bd70      	pop	{r4, r5, r6, pc}
    5f1a:	bf00      	nop
    5f1c:	40020000 	.word	0x40020000
    5f20:	40020007 	.word	0x40020007
    5f24:	40020006 	.word	0x40020006
    5f28:	40020008 	.word	0x40020008
    5f2c:	0098967f 	.word	0x0098967f
    5f30:	1fff8800 	.word	0x1fff8800

00005f34 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    5f34:	4770      	bx	lr
    5f36:	bf00      	nop

00005f38 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    5f38:	4770      	bx	lr
    5f3a:	bf00      	nop

00005f3c <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    5f3c:	4770      	bx	lr
    5f3e:	bf00      	nop

00005f40 <__libc_init_array>:
    5f40:	b570      	push	{r4, r5, r6, lr}
    5f42:	4e0f      	ldr	r6, [pc, #60]	; (5f80 <__libc_init_array+0x40>)
    5f44:	4d0f      	ldr	r5, [pc, #60]	; (5f84 <__libc_init_array+0x44>)
    5f46:	1b76      	subs	r6, r6, r5
    5f48:	10b6      	asrs	r6, r6, #2
    5f4a:	bf18      	it	ne
    5f4c:	2400      	movne	r4, #0
    5f4e:	d005      	beq.n	5f5c <__libc_init_array+0x1c>
    5f50:	3401      	adds	r4, #1
    5f52:	f855 3b04 	ldr.w	r3, [r5], #4
    5f56:	4798      	blx	r3
    5f58:	42a6      	cmp	r6, r4
    5f5a:	d1f9      	bne.n	5f50 <__libc_init_array+0x10>
    5f5c:	4e0a      	ldr	r6, [pc, #40]	; (5f88 <__libc_init_array+0x48>)
    5f5e:	4d0b      	ldr	r5, [pc, #44]	; (5f8c <__libc_init_array+0x4c>)
    5f60:	1b76      	subs	r6, r6, r5
    5f62:	f001 ffef 	bl	7f44 <_init>
    5f66:	10b6      	asrs	r6, r6, #2
    5f68:	bf18      	it	ne
    5f6a:	2400      	movne	r4, #0
    5f6c:	d006      	beq.n	5f7c <__libc_init_array+0x3c>
    5f6e:	3401      	adds	r4, #1
    5f70:	f855 3b04 	ldr.w	r3, [r5], #4
    5f74:	4798      	blx	r3
    5f76:	42a6      	cmp	r6, r4
    5f78:	d1f9      	bne.n	5f6e <__libc_init_array+0x2e>
    5f7a:	bd70      	pop	{r4, r5, r6, pc}
    5f7c:	bd70      	pop	{r4, r5, r6, pc}
    5f7e:	bf00      	nop
    5f80:	00007f50 	.word	0x00007f50
    5f84:	00007f50 	.word	0x00007f50
    5f88:	00007f64 	.word	0x00007f64
    5f8c:	00007f50 	.word	0x00007f50

00005f90 <register_fini>:
    5f90:	4b02      	ldr	r3, [pc, #8]	; (5f9c <register_fini+0xc>)
    5f92:	b113      	cbz	r3, 5f9a <register_fini+0xa>
    5f94:	4802      	ldr	r0, [pc, #8]	; (5fa0 <register_fini+0x10>)
    5f96:	f7fd bdc7 	b.w	3b28 <atexit>
    5f9a:	4770      	bx	lr
    5f9c:	00000000 	.word	0x00000000
    5fa0:	00005fa5 	.word	0x00005fa5

00005fa4 <__libc_fini_array>:
    5fa4:	b538      	push	{r3, r4, r5, lr}
    5fa6:	4d07      	ldr	r5, [pc, #28]	; (5fc4 <__libc_fini_array+0x20>)
    5fa8:	4c07      	ldr	r4, [pc, #28]	; (5fc8 <__libc_fini_array+0x24>)
    5faa:	1b2c      	subs	r4, r5, r4
    5fac:	10a4      	asrs	r4, r4, #2
    5fae:	d005      	beq.n	5fbc <__libc_fini_array+0x18>
    5fb0:	3c01      	subs	r4, #1
    5fb2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    5fb6:	4798      	blx	r3
    5fb8:	2c00      	cmp	r4, #0
    5fba:	d1f9      	bne.n	5fb0 <__libc_fini_array+0xc>
    5fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5fc0:	f001 bfd0 	b.w	7f64 <__init_array_end>
	...

00005fcc <vtable for APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>>:
	...
    5fd4:	17c1 0000 16fd 0000 0491 0000 04dd 0000     ................
    5fe4:	046d 0000 0471 0000 0b4d 0000               m...q...M...

00005ff0 <Fire_1_gp>:
    5ff0:	ff00 0000 ff7f 0037 ffff 00ff               ......7.....

00005ffc <b_gp>:
    5ffc:	0000 0000 003f ff00 ff7f 0000 ffbf 00ff     ....?...........
    600c:	ffff ffff                                   ....

00006010 <es_pinksplash_08_gp>:
    6010:	7e00 ff0b c57f 1601 d2af ac9d 9ddd 7003     .~.............p
    6020:	9dff 7003                                   ...p

00006024 <hallows_gp>:
    6024:	0100 0101 f714 011c ea19 0388 0123 0101     ............#...
    6034:	f730 011c ea33 0388 013d 0101 f74c 011c     0...3...=...L...
    6044:	f45b 01b0 ea6b 0388 017a 0101 ea8c 0388     [...k...z.......
    6054:	f499 01b0 f7a8 011c 01ba 0101 f7c4 011c     ................
    6064:	eacc 0388 01d8 0101 eae5 0388 f7ef 011c     ................
    6074:	01f9 0101 01ff 0101                         ........

0000607c <scoutie_gp>:
    607c:	ff00 009c 007f 12c3 01d8 2700 01ff 2700     ...........'...'

0000608c <Cyan_Magenta_Blue_gp>:
    608c:	0000 ffff 2a3f ff37 ff7f ff00 2abf ff00     ....?*7......*..
    609c:	00ff ff00                                   ....

000060a0 <purple_flower_gp>:
    60a0:	0000 0000 1442 2d04 7984 ff14 b3b4 ff49     ....B..-.y....I.
    60b0:	ffe4 ffa4 fff1 ffcf ffff ffff               ............

000060bc <sea_treasure_gp>:
    60bc:	0100 050d 0319 1939 122d acbf 023d 0c1d     ......9.-...=...
    60cc:	034c 1939 1265 acbf 0a7c 1436 0199 0c1e     L.9.e...|.6.....
    60dc:	0ab2 160e 09d1 2f5d 08e8 1637 01ff 050d     ......]/..7.....

000060ec <Orange_to_Purple_gp>:
    60ec:	d000 0132 927f 2d1b 61ff b20c               ..2....-.a..

000060f8 <Magenta_Evening_gp>:
    60f8:	4700 271b 821f 330b d53f 4002 e846 4201     .G.'...3?..@F..B
    6108:	fc4c 4501 7b6c 3302 2eff 2309               L..El{.3...#

00006114 <vibrant_gp>:
    6114:	ff00 ffff 011e 1d90 e547 0cf6 ff77 0801     ........G...w...
    6124:	b8a5 cb01 03d6 fa1c 00ff 0000               ............

00006130 <Complementary_01a_gp>:
    6130:	0000 ff21 2a7f 2d21 ffff 0021               ..!..*!-..!.

0000613c <a_gp>:
    613c:	0000 0000 001f 0037 003f 2dff ff7f ff00     ......7.?..-....
    614c:	ffa3 2d00 ffc4 0000 ffff 00ff               ...-........

00006158 <RedsandCyans_gp>:
    6158:	0f00 8760 284e 4a57 5366 2250 7172 1d47     ..`.N(WJfSP"rqG.
    6168:	967f 193f 3c8f 424f 0fb6 8760 0fdf 8760     ..?..<OB..`...`.
    6178:	0fff 8760                                   ..`.

0000617c <es_pinksplash_07_gp>:
    617c:	e500 0101 f23d 3f04 ff65 ff0c f97f fc51     ....=..?e.....Q.
    618c:	ff99 eb0b f4c1 4405 e8ff 0501               .......D....

00006198 <es_seadreams_09_gp>:
    6198:	7900 7d88 223a a661 0265 d442 0277 b61d     .y.}:"a.e.B.w...
    61a8:	0399 9908 52ff b26b 6172 6e69 6f62 5f77     .....Rk.rainbow_
    61b8:	616d 6372 0068 0000 6f63 666e 7465 6974     march...confetti
    61c8:	0000 0000 6966 6572 0000 0000 756a 6767     ....fire....jugg
    61d8:	656c 705f 6c61 6f5f 646e 6965 0072 0000     le_pal_ondeir...
    61e8:	6966 6572 6d5f 7269 6f72 0072 756a 6767     fire_mirror.jugg
    61f8:	656c 705f 6c61 0000 7270 6469 0065 0000     le_pal..pride...
    6208:	6f63 6f6c 7772 7661 0065 0000 6973 656e     colorwave...sine
    6218:	6f6c 5f6e 6f62 6e75 6963 676e 0000 0000     lon_bouncing....
    6228:	6973 656e 6f6c 006e 6973 656e 6f6c 5f6e     sinelon.sinelon_
    6238:	7173 6975 6767 656c 0000 0000 6966 6572     squiggle....fire
    6248:	705f 6c61 0000 0000 6966 6572 6d5f 7269     _pal....fire_mir
    6258:	6f72 5f72 6170 006c 6172 6e69 6f62 5f77     ror_pal.rainbow_
    6268:	7073 696c 0074 0000 7566 6c6c 735f 6568     split...full_she
    6278:	766c 7365 0000 0000 7566 6c6c 735f 6568     lves....full_she
    6288:	766c 7365 665f 6461 6e69 0067 7566 6c6c     lves_fading.full
    6298:	735f 6568 766c 7365 705f 6c61 7465 6574     _shelves_palette
    62a8:	0000 0000 6c61 5f6c 6873 6c65 6576 0073     ....all_shelves.
    62b8:	4d56 5044 5f56 7c31 5f31 4d56 5044 0a56     VMDPV_1|1_VMDPV.
    62c8:	0000 0000 007c ffff                         ....|...

000062d0 <ultraviolet_mold_gp>:
    62d0:	0000 0000 0102 0101 0105 0101 0107 0101     ................
    62e0:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    62f0:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    6300:	011e 0101 0120 0102 0123 0102 0125 0202     .... ...#...%...
    6310:	0228 0203 022a 0203 022d 0303 032f 0304     (...*...-.../...
    6320:	0332 0404 0335 0504 0437 0505 043a 0605     2...5...7...:...
    6330:	043c 0705 053f 0706 0541 0806 0544 0907     <...?...A...D...
    6340:	0546 0a07 0649 0b08 064b 0c08 064e 0d08     F...I...K...N...
    6350:	0650 0e09 0653 0f09 0655 1009 0783 3034     P...S...U.....40
    6360:	0785 3339 0788 343f 078a 3443 078d 3245     ..93..?4..C4..E2
    6370:	078f 3048 0792 2e4a 0794 2b4e 0697 2950     ..H0..J...N+..P)
    6380:	069a 2554 069c 2257 069f 1f5a 06a1 1c5d     ..T%..W"..Z...].
    6390:	05a4 1960 05a6 1664 05a9 1267 05ab 0f6b     ..`...d...g...k.
    63a0:	05ae 0d6d 05b0 0a72 04b3 0775 04b5 0579     ..m...r...u...y.
    63b0:	05b8 057c 07ba 0480 09bd 0483 0cbf 0488     ..|.............
    63c0:	10c2 048b 14c4 0390 19c7 0393 1ec9 0398     ................
    63d0:	26cc 039d 2ecf 02a1 37d1 02a6 43d4 02a9     .&.......7...C..
    63e0:	50d6 02af 5fd9 01b2 71db 01b8 85de 01bb     .P..._...q......
    63f0:	9de0 01c1 b8e3 01c5 c2e5 01b8 c7e8 01a8     ................
    6400:	ceea 0198 d2ed 0187 d9ef 0177 def2 0167     ..........w...g.
    6410:	e5f4 0158 eaf7 0149 f2f9 013b f7fc 012f     ..X...I...;.../.
    6420:	ffff 0124                                   ..$.

00006424 <faint_rainbow_gp>:
    6424:	4300 4700 4502 4101 4805 3b01 4a07 3501     .C.G.E.A.H.;.J.5
    6434:	4d0a 3001 4e0c 2b01 500f 2601 5311 2201     .M.0.N.+.P.&.S."
    6444:	5614 1d01 5816 1901 5b19 1601 5e1b 1201     .V...X...[...^..
    6454:	611e 0f01 6220 0c01 6523 0a01 6825 0701     .a.. b..#e..%h..
    6464:	6b28 0501 6e2a 0401 712d 0201 752f 0101     (k..*n..-q../u..
    6474:	7832 0101 7935 0101 7d37 0101 803a 0101     2x..5y..7}..:...
    6484:	843c 0103 873f 0105 8b41 0108 8e44 010c     <...?...A...D...
    6494:	9046 010e 9049 0110 924b 0111 944e 0113     F...I...K...N...
    64a4:	9450 0116 9653 0117 9855 011a af83 0158     P...S...U.....X.
    64b4:	b185 015d b388 0163 b38a 0168 b68d 016c     ..]...c...h...l.
    64c4:	b88f 0172 b892 0177 ba94 017d bc97 0183     ..r...w...}.....
    64d4:	bc9a 018a be9c 0190 c09f 0197 c0a1 019d     ................
    64e4:	c2a4 01a4 c5a6 01ab c7a9 01b2 c7ab 01ba     ................
    64f4:	c9ae 01c1 cbb0 02c9 cbb3 02d1 c9b5 02d5     ................
    6504:	c5b8 02d7 beba 02d7 b8bd 02d9 b3bf 02db     ................
    6514:	adc2 02db a7c4 02dd a1c7 02df 9dc9 02df     ................
    6524:	98cc 02e1 92cf 02e3 8ed1 02e5 89d4 02e5     ................
    6534:	84d6 03e7 7ed9 03e9 79db 03e9 76de 03eb     .....~...y...v..
    6544:	71e0 03ed 6de3 03ed 68e5 03ef 65e8 03f1     .q...m...h...e..
    6554:	61ea 03f1 5ced 03f4 58ef 03f6 54f2 04f8     .a...\...X...T..
    6564:	50f4 04f8 4ef7 04fa 4af9 04fc 47fc 04fc     .P...N...J...G..
    6574:	43ff 04ff                                   .C..

00006578 <bhw2_10_gp>:
    6578:	0000 000c 993d 70ef 007f 000c 6aa5 02ef     ....=..p.....j..
    6588:	a7c4 47e5 6ae5 02ef 00ff 000c               ...G.j......

00006594 <rgi_15_gp>:
    6594:	0400 1f01 371f 1001 c53f 0703 3b5f 1102     .....7..?..._;..
    65a4:	067f 2202 279f 2106 70bf 200d 38df 2309     ...".'.!.p. .8.#
    65b4:	16ff 2606                                   ...&

000065b8 <es_ocean_breeze_068_gp>:
    65b8:	6400 999c 0133 8963 0165 5444 2368 a88e     .d..3.c.e.DTh#..
    65c8:	00b2 753f 01ff 0a0a                         ..?u....

000065d0 <fire_gp>:
    65d0:	0100 0001 204c 0005 c092 0018 dcc5 0569     ....L ........i.
    65e0:	fcf0 1fff fcfa 6fff ffff ffff               .......o....

000065ec <blueice_gp>:
    65ec:	0000 0000 011f 0f02 013f 590a 0142 5d0c     ........?..YB..]
    65fc:	0144 600d 0147 640f 0149 6910 014c 6c12     D..`G..dI..iL..l
    660c:	014e 7014 0151 7316 0153 7817 0156 7b1a     N..pQ..sS..xV..{
    661c:	0158 801d 015b 841f 015d 8921 0160 8c24     X...[...].!.`.$.
    662c:	0162 9128 0165 972b 0167 9b2e 016a a032     b.(.e.+.g...j.2.
    663c:	016c a436 016f a638 0171 aa3c 0174 ac41     l.6.o.8.q.<.t.A.
    664c:	0176 ae45 0179 b248 017b b44d 017e b651     v.E.y.H.{.M.~.Q.
    665c:	0180 b856 0183 bc5b 0186 be60 0188 c065     ..V...[...`...e.
    666c:	018b c56b 018d c770 0190 c976 0192 cb7c     ..k...p...v...|.
    667c:	0195 cf82 0197 d28a 019a d490 019c d697     ................
    668c:	019f db9f 01a1 dda6 01a4 dfad 01a6 e4b6     ................
    669c:	01a9 e6bd 01ab e9c7 01ae ebcf 01b0 f0d9     ................
    66ac:	01b3 f2e1 01b5 f5eb 02b8 f7f6 02ba f7fc     ................
    66bc:	02bd f2ff 3dde f7ff ffff ffff               .....=......

000066c8 <BlacK_Blue_Magenta_White_gp>:
    66c8:	0000 0000 002a 2d00 0054 ff00 2a7f ff00     ....*..-T....*..
    66d8:	ffaa ff00 ffd4 ff37 ffff ffff               ......7.....

000066e4 <bhw3_61_gp>:
    66e4:	0e00 1b01 1130 5801 0168 9c58 01a0 2a36     ....0..Xh.X...6*
    66f4:	09db 34eb 8bff e9eb                         ...4....

000066fc <es_landscape_33_gp>:
    66fc:	0100 0005 2013 0117 a126 0137 e53f 0190     ..... ..&.7.?...
    670c:	2742 4a8e 01ff 0104                         B'.J....

00006714 <froth316_gp>:
    6714:	f700 0000 f711 0000 9d11 0000 9d21 0000     ............!...
    6724:	5621 0000 5633 0000 2733 0000 2744 0000     !V..3V..3'..D'..
    6734:	0c44 0000 0c54 0000 0054 00f8 0066 00f8     D...T...T...f...
    6744:	0066 00a9 0077 00a9 0077 0065 0087 0065     f...w...w.e...e.
    6754:	0087 0034 0099 0034 0099 0013 00aa 0013     ..4...4.........
    6764:	00aa f700 00ba f700 00ba a000 00cc a000     ................
    6774:	00cc 5900 00dd 5900 00dd 2a00 00ed 2a00     ...Y...Y...*...*
    6784:	00ed 0e00 00ff 0e00                         ........

0000678c <Skydye11_gp>:
    678c:	0800 0400 0801 0400 0c02 0800 1003 0c00     ................
    679c:	1404 0c00 1405 1000 1806 1000 1c07 1400     ................
    67ac:	1c09 1400 200a 1800 240b 1800 240c 1c00     ..... ...$...$..
    67bc:	280d 1c00 2c0e 2000 300f 2400 3410 2400     .(...,. .0.$.4.$
    67cc:	3811 2800 3c12 2c00 3c14 2c00 4015 3000     .8.(.<.,.<.,.@.0
    67dc:	4416 3400 4817 3400 4c18 3800 4c19 3804     .D.4.H.4.L.8.L.8
    67ec:	501a 3c04 541b 3c04 581c 4004 5c1d 4404     .P.<.T.<.X.@.\.D
    67fc:	601e 4808 601f 4c08 5c20 5008 5821 5408     .`.H.`.L \.P!X.T
    680c:	5422 5c08 5423 6008 5024 6808 4c25 6c08     "T.\#T.`$P.h%L.l
    681c:	4826 7008 4827 7808 4428 7c08 4029 8408     &H.p'H.x(D.|)@..
    682c:	3c2a 8808 3c2b 9008 382c 9408 342d 9808     *<..+<..,8..-4..
    683c:	302e a008 302f a404 2c30 ac04 2831 b004     .0../0..0,..1(..
    684c:	2432 b404 2433 bc04 2034 c004 1c35 c804     2$..3$..4 ..5...
    685c:	1836 cc04 1837 d404 1438 d804 1039 dc04     6...7...8...9...
    686c:	0c3a e404 0c3b e804 083c f004 043d f404     :...;...<...=...
    687c:	003e fc00 003f f804 0040 f40c 0041 f014     >...?...@...A...
    688c:	0042 ec1c 0043 e824 0044 e42c 0045 e034     B...C.$.D.,.E.4.
    689c:	0046 dc3c 0047 d844 0048 d44c 0049 d054     F.<.G.D.H.L.I.T.
    68ac:	004a cc5c 004b c864 004c c46c 004d c074     J.\.K.d.L.l.M.t.
    68bc:	004e bc7c 004f b884 0050 b48c 0051 b094     N.|.O...P...Q...
    68cc:	0052 ac9c 0053 a8a4 0054 a4ac 0055 a0b4     R...S...T...U...
    68dc:	0056 9cbc 0057 98c4 0058 94cc 0059 90d4     V...W...X...Y...
    68ec:	005a 8cdc 005b 88e4 005c 84ec 005d 7ce8     Z...[...\...]..|
    68fc:	005e 78e0 005f 70dc 0060 68d8 0061 60d0     ^..x_..p`..ha..`
    690c:	0062 5cc8 0063 58c0 0064 50b8 0065 4cac     b..\c..Xd..Pe..L
    691c:	0066 44a4 0067 409c 0068 3894 0069 348c     f..Dg..@h..8i..4
    692c:	006a 2c80 006b 2878 006c 2070 006d 1c68     j..,k.x(l.p m.h.
    693c:	006e 145c 006f 1054 0070 084c 0071 0040     n.\.o.T.p.L.q.@.
    694c:	0072 003c 0073 0038 0074 0034 0075 0030     r.<.s.8.t.4.u.0.
    695c:	0076 002c 0077 0028 0078 0024 0479 0020     v.,.w.(.x.$.y. .
    696c:	047a 001c 047b 0018 047c 0014 047d 0010     z...{...|...}...
    697c:	047e 000c 047f 0008 0480 0004 0881 0400     ~...............
    698c:	0c82 0800 1083 0c00 1484 0c00 1485 1000     ................
    699c:	1886 1000 1c87 1400 2088 1400 2089 1800     ......... ... ..
    69ac:	248a 1800 288b 1c00 2c8c 2000 308d 2400     .$...(...,. .0.$
    69bc:	348e 2404 388f 2804 3891 2804 3c92 2c04     .4.$.8.(.8.(.<.,
    69cc:	4093 3004 4494 3004 4495 3404 4896 3404     .@.0.D.0.D.4.H.4
    69dc:	4c97 3804 5098 3804 5099 3c04 549a 3c04     .L.8.P.8.P.<.T.<
    69ec:	589b 4004 5c9c 4404 609d 4808 609e 4c08     .X.@.\.D.`.H.`.L
    69fc:	689f 4808 70a0 4408 7ca1 4008 84a2 3c08     .h.H.p.D.|.@...<
    6a0c:	90a3 3408 98a4 3008 a4a5 2c08 aca6 2808     ...4...0...,...(
    6a1c:	b4a7 2404 c0a8 2004 c8a9 1c04 d4aa 1404     ...$... ........
    6a2c:	dcab 1004 e8ac 0c04 f0ad 0804 fcae 0000     ................
    6a3c:	fcaf 0008 fcb0 0014 fcb1 001c fcb2 0028     ..............(.
    6a4c:	fcb3 0030 fcb4 003c fcb5 0044 fcb6 0050     ..0...<...D...P.
    6a5c:	fcb7 0058 fcb8 0064 fcb9 006c fcba 0078     ..X...d...l...x.
    6a6c:	fcbb 0084 fcbc 008c fcbd 0098 fcbe 00a0     ................
    6a7c:	fcbf 00ac fcc0 00b4 fcc1 00c0 fcc2 00c8     ................
    6a8c:	fcc3 00d4 fcc4 00dc fcc5 00e8 fcc6 00f0     ................
    6a9c:	fcc7 00fc fcc8 00f0 fcc9 00e8 fcca 00dc     ................
    6aac:	fccb 00d0 fccc 00c4 fccd 00bc fcce 00b0     ................
    6abc:	fccf 00a4 fcd0 0098 fcd1 0090 fcd2 0084     ................
    6acc:	fcd3 0078 fcd4 0070 fcd5 0064 fcd6 0058     ..x...p...d...X.
    6adc:	fcd7 004c fcd8 0044 fcd9 0038 fcda 002c     ..L...D...8...,.
    6aec:	fcdb 0020 fcdc 0018 fcdd 000c fcde 0000     .. .............
    6afc:	f4df 0400 ece0 0800 e0e1 0c00 d8e2 1000     ................
    6b0c:	cce3 1800 c4e4 1c00 b8e5 2000 b0e6 2404     ........... ...$
    6b1c:	a8e7 2804 9ce8 2c04 94e9 3004 88ea 3804     ...(...,...0...8
    6b2c:	80eb 3c04 74ec 4004 6ced 4404 60ee 4c08     ...<.t.@.l.D.`.L
    6b3c:	5cef 4808 54f0 4408 50f1 4008 48f2 3808     .\.H.T.D.P.@.H.8
    6b4c:	44f3 3404 3cf4 3004 38f5 2c04 30f6 2804     .D.4.<.0.8.,.0.(
    6b5c:	2cf7 2004 24f8 1c04 20f9 1804 18fa 1404     .,. .$... ......
    6b6c:	14fb 1000 0cfc 0800 00fd 0000 04fe 0400     ................
    6b7c:	04ff 0400                                   ....

00006b80 <fierce_ice_gp>:
    6b80:	0000 0000 003b 2d07 0077 ff21 0395 ff52     ....;..-w.!...R.
    6b90:	17b4 ff9c 64d9 ffcb ffff ffff               .....d......

00006b9c <lava_gp>:
    6b9c:	0000 0000 122e 0000 7160 0000 8e6c 0103     ........`q..l...
    6bac:	af77 0111 d592 022c ffae 0452 ffbc 0473     w.....,...R...s.
    6bbc:	ffca 049c ffda 04cb ffea 04ff fff4 47ff     ...............G
    6bcc:	ffff ffff                                   ....

00006bd0 <Sunset_Real_gp>:
    6bd0:	7800 0000 b316 0016 ff33 0068 a755 1216     .x......3.h.U...
    6be0:	6487 6700 10c6 8200 00ff a000               .d.g........

00006bec <Fuschia_7_gp>:
    6bec:	2b00 9903 643f 6704 bc7f 4205 a1bf 730b     .+..?d.g...B...s
    6bfc:	87ff b614                                   ....

00006c00 <Colorfull_gp>:
    6c00:	0a00 0555 1d19 126d 3b3c 2a8a 535d 3463     ..U...m.<;.*]Sc4
    6c10:	6e6a 4042 7b6d 4131 8b71 4223 c074 6275     jnB@m{1Aq.#Bt.ub
    6c20:	ff7c 89ff 64a8 9bb4 16ff ae79               |....d....y.

00006c2c <Split_03_gp>:
    6c2c:	0000 7b12 003f 1d4b 007f 01b2 1bbf 0130     ...{?.K.......0.
    6c3c:	a7ff 0201                                   ....

00006c40 <GMT_drywet_gp>:
    6c40:	2f00 021e d52a 1893 6754 34db 037f cfdb     ./..*...Tg.4....
    6c50:	01aa d630 01d4 6f01 01ff 2107               ..0....o...!

00006c5c <cloudcolors_gp>:
    6c5c:	0000 ff00 000f 8b00 006f 8b00 007f ff00     ........o.......
    6c6c:	008f 8b00 879f face 87af face adbf e6d8     ................
    6c7c:	c8cf c8c8 addf e6d8 87ef ebce 00ff ffbf     ................

00006c8c <cw1_029_gp>:
    6c8c:	0c00 d250 ff7f 13eb e0ff 0f42               ..P.......B.

00006c98 <BlacK_Red_Magenta_Yellow_gp>:
    6c98:	0000 0000 2a2a 0000 ff54 0000 ff7f 2d00     ....**..T......-
    6ca8:	ffaa ff00 ffd4 2d37 ffff 00ff               ......7-....

00006cb4 <bhw4_009_gp>:
    6cb4:	4200 c0ba 012b 4716 024f 8e68 4275 c0ba     .B..+..GO.h.uB..
    6cc4:	0293 8e68 01ba 4716 02e0 8e68 04ff 1c1b     ..h....G..h.....

00006cd4 <bhw3_13_gp>:
    6cd4:	0300 4806 0c26 bc32 d96d 0123 f287 0caf     ...H&.2.m.#.....
    6ce4:	a1b2 5720 18ff 6c06                         .. W...l

00006cec <GMT_cool_gp>:
    6cec:	0000 ffff ffff ff00                         ........

00006cf4 <es_landscape_64_gp>:
    6cf4:	0000 0000 0225 0119 0f4c 0573 4f7f 01d5     ....%...L.s..O..
    6d04:	7e80 2fd3 bc82 f7d1 9099 cdb6 3bcc fa75     .~./.........;u.
    6d14:	01ff c025                                   ..%.

00006d18 <es_emerald_dragon_01_gp>:
    6d18:	0100 0101 014f 0713 0182 193b 1ce5 ffff     ....O.....;.....
    6d28:	1cff ffff                                   ....

00006d2c <alarm_p4_0_2_gp>:
    6d2c:	e300 dfff ff0c 0424 ff19 0102 ff26 1001     ......$.....&...
    6d3c:	ff33 6201 ff3f e601 8c4c ff01 3f59 ff01     3..b?...L...Y?..
    6d4c:	1866 ff01 0572 ff01 017f ff01 018c ff04     f...r...........
    6d5c:	0199 ff10 01a5 ff24 01b2 ff3e 01bf ff5f     ......$...>..._.
    6d6c:	01cc ff83 01d8 ffad 01e5 ffdd 01f2 ebff     ................
    6d7c:	01ff baff                                   ....

00006d80 <water1_gp>:
    6d80:	0100 2e01 4f1c be88 1035 b851 4f49 be88     .....O..5.Q.IO..
    6d90:	4b63 e9c9 067c 670c 4b9e e9c9 54ba 6c6d     cK..|..g.K...Tml
    6da0:	10c6 b851 4fe8 be88 01ff 2e01               ..Q..O......

00006dac <bhw1_28_gp>:
    6dac:	4b00 dd01 fc1e ff49 a930 f200 0077 f295     .K....I.0...w...
    6dbc:	2baa f200 fcce ff49 4ee8 d60c 00ff f295     .+....I..N......

00006dcc <es_vintage_01_gp>:
    6dcc:	0400 0101 1033 0100 614c 0368 ff65 1383     ....3...Lah.e...
    6ddc:	437f 0409 1099 0100 04e5 0101 04ff 0101     .C..............

00006dec <rainbow_gp>:
    6dec:	ff00 0000 ab20 0055 ab40 00ab 0060 00ff     .... .U.@...`...
    6dfc:	0080 55ab 00a0 ff00 55c0 ab00 abe0 5500     ...U.....U.....U
    6e0c:	ffff 0000                                   ....

00006e10 <Coral_reef_gp>:
    6e10:	2800 c5c7 0a32 9b98 0160 786f 2b60 a27f     .(..2...`.ox`+..
    6e20:	0a8b 6f49 01ff 4722                         ..Io.."G

00006e28 <Pink_Purple_gp>:
    6e28:	1300 2702 1a19 2d04 2133 3406 444c 7d3e     ...'...-3!.4LD>}
    6e38:	7666 f0bb a36d f7d7 d972 fff4 9f7a dd95     fv..m...r...z...
    6e48:	7195 bc4e 80b7 9b39 92ff 7b28               .qN...9...({

00006e54 <sin16_C(unsigned short)::slope>:
    6e54:	3031 262c 171f 040e                         10,&....

00006e5c <bhw2_23_gp>:
    6e5c:	0000 0000 3942 e9e3 ff60 08ff ff7c ffff     ....B9..`...|...
    6e6c:	ff99 08ff 39bc e9e3 00ff 0000               .....9......

00006e78 <bhw1_05_gp>:
    6e78:	0100 35dd 49ff b203                         ...5.I..

00006e80 <g_gradient_palettes>:
    6e80:	7b64 0000 7c38 0000 6dcc 0000 77c0 0000     d{..8|...m...w..
    6e90:	6594 0000 7b74 0000 7688 0000 6010 0000     .e..t{...v...`..
    6ea0:	617c 0000 6e10 0000 65b8 0000 77b0 0000     |a...n...e...w..
    6eb0:	7b7c 0000 6cf4 0000 66fc 0000 7bd0 0000     |{...l...f...{..
    6ec0:	7c4c 0000 7a88 0000 6c40 0000 78f4 0000     L|...z..@l...x..
    6ed0:	6bec 0000 769c 0000 6b9c 0000 65d0 0000     .k...v...k...e..
    6ee0:	6c00 0000 60f8 0000 6e28 0000 6bd0 0000     .l...`..(n...k..
    6ef0:	7600 0000 66c8 0000 7cd0 0000 6c98 0000     .v...f...|...l..
    6f00:	7d00 0000 7cbc 0000 7abc 0000 6dac 0000     .}...|...z...m..
    6f10:	6e5c 0000 7650 0000 75e4 0000 6578 0000     \n..Pv...u..xe..
    6f20:	7880 0000 7a64 0000 7c88 0000 6114 0000     .x..dz...|...a..
    6f30:	6c8c 0000 6d2c 0000 7664 0000 60ec 0000     .l..,m..dv...`..
    6f40:	5ff0 0000 76ac 0000 613c 0000 5ffc 0000     ._...v..<a..._..
    6f50:	6d18 0000 7c1c 0000 6198 0000 6714 0000     .m...|...a...g..
    6f60:	678c 0000 719c 0000 7af0 0000 75c4 0000     .g...q...z...u..
    6f70:	7804 0000 6024 0000 60bc 0000 7bac 0000     .x..$`...`...{..
    6f80:	6c2c 0000 789c 0000 6dec 0000 6c5c 0000     ,l...x...m..\l..
    6f90:	7c64 0000 60a0 0000 6b80 0000 65ec 0000     d|...`...k...e..
    6fa0:	790c 0000 7c00 0000 62d0 0000 7044 0000     .y...|...b..Dp..
    6fb0:	6424 0000 7bc0 0000 7bec 0000 607c 0000     $d...{...{..|`..
    6fc0:	77d4 0000 6cec 0000 77f4 0000 6e78 0000     .w...l...w..xn..
    6fd0:	7634 0000 6cd4 0000 66e4 0000 6cb4 0000     4v...l...f...l..
    6fe0:	7028 0000 7018 0000 7ce4 0000 6d80 0000     (p...p...|...m..
    6ff0:	76c4 0000 6158 0000 608c 0000 6130 0000     .v..Xa...`..0a..
    7000:	7aa8 0000 759c 0000                         .z...u..

00007008 <sin16_C(unsigned short)::base>:
    7008:	0000 18f9 30fb 471c 5a82 6a6d 7641 7d89     .....0.G.ZmjAv.}

00007018 <es_emerald_dragon_09_gp>:
    7018:	0100 0101 014c 0102 0a99 012f 61ff 01ff     ....L...../..a..

00007028 <bhw3_34_gp>:
    7028:	1d00 cd70 5c30 faff 345b 0cdf 047c 150d     ..p.0\..[4..|...
    7038:	09b7 0f67 0ad8 0250 26ff 34ff               ..g...P..&.4

00007044 <apple_green_gp>:
    7044:	0000 0000 0102 0101 0104 0101 0107 0101     ................
    7054:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    7064:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    7074:	011e 0102 0120 0102 0123 0103 0125 0103     .... ...#...%...
    7084:	0128 0104 012a 0105 012d 0105 012f 0106     (...*...-.../...
    7094:	0132 0107 0134 0108 0137 0108 0139 0209     2...4...7...9...
    70a4:	013c 020a 013e 030b 0141 040c 0143 050d     <...>...A...C...
    70b4:	0146 070e 0148 0710 014b 0811 014d 0812     F...H...K...M...
    70c4:	0150 0813 0152 0915 0155 0916 0157 0918     P...R...U...W...
    70d4:	0182 083a 0185 073c 0187 073f 018a 0642     ..:...<...?...B.
    70e4:	018d 0645 018f 0547 0192 054a 0194 044e     ..E...G...J...N.
    70f4:	0197 0450 0199 0354 019c 0356 019e 025a     ..P...T...V...Z.
    7104:	01a1 025c 01a3 0160 01a6 0163 01a8 0167     ..\...`...c...g.
    7114:	01ab 0169 02ad 016d 02b0 0170 03b3 0175     ..i...m...p...u.
    7124:	03b5 0177 04b8 017c 05ba 0180 05bd 0183     ..w...|.........
    7134:	06bf 0188 07c2 018b 09c4 0190 0ac7 0193     ................
    7144:	0bc9 0198 0dcc 019c 0fce 01a1 11d1 01a4     ................
    7154:	13d3 01a9 16d6 01ad 18d9 01b2 1bdb 01b8     ................
    7164:	1fde 01bb 23e0 01c1 27e3 01c5 2ce5 01cb     .....#...'...,..
    7174:	31e8 01cf 36ea 01d5 3ced 01d9 43ef 01df     .1...6...<...C..
    7184:	4af2 01e3 52f4 01e9 5bf7 01ed 64f9 01f4     .J...R...[...d..
    7194:	6efc 01f8 79ff 00ff                         .n...y..

0000719c <Wizzl019_gp>:
    719c:	8c00 ac14 8c01 ac14 9402 b814 a003 c810     ................
    71ac:	9c04 c410 9805 bc10 9406 b410 8c07 ac0c     ................
    71bc:	8808 a40c 8409 9c0c 800a 940c 780b 8c08     .............x..
    71cc:	740c 8808 700d 8008 6c0e 7808 640f 7004     .t...p...l.x.d.p
    71dc:	6010 6804 5c11 6004 5812 5804 5013 5000     .`.h.\.`.X.X.P.P
    71ec:	5414 4c04 5c15 480c 6416 4414 6c17 3c1c     .T.L.\.H.d.D.l.<
    71fc:	7418 3824 7c19 342c 841a 3034 8c1b 283c     .t$8.|,4..40..<(
    720c:	901c 2440 981d 2048 a01e 1c50 a81f 1458     ..@$..H ..P...X.
    721c:	b020 1060 b821 0c68 c022 0870 c823 0078      .`.!.h.".p.#.x.
    722c:	c424 0074 bc25 0070 b426 006c ac27 0064     $.t.%.p.&.l.'.d.
    723c:	a428 0060 9c29 005c 942a 0058 8c2b 0050     (.`.).\.*.X.+.P.
    724c:	882c 004c 802d 0048 782e 0044 702f 003c     ,.L.-.H..xD./p<.
    725c:	6830 0038 6031 0034 5832 0030 5033 0028     0h8.1`4.2X0.3P(.
    726c:	4c34 0430 4835 083c 4436 0c44 3c37 1450     4L0.5H<.6DD.7<P.
    727c:	3838 1858 3439 1c64 303a 206c 283b 2878     88X.94d.:0l ;(x(
    728c:	243c 2c80 203d 308c 1c3e 3494 143f 3ca0     <$.,= .0>..4?..<
    729c:	1040 40a8 0c41 44b4 0842 48bc 0043 50c8     @..@A..DB..HC..P
    72ac:	0044 4cc0 0045 48b4 0046 44ac 0047 3ca0     D..LE..HF..DG..<
    72bc:	0048 3898 0049 348c 004a 3084 004b 2878     H..8I..4J..0K.x(
    72cc:	004c 2470 004d 2064 004e 1c5c 004f 1450     L.p$M.d N.\.O.P.
    72dc:	0050 1048 0051 0c3c 0052 0834 0053 0028     P.H.Q.<.R.4.S.(.
    72ec:	0054 0c28 0455 1c24 0456 2c24 0857 3c20     T.(.U.$.V.$,W. <
    72fc:	0c58 481c 0c59 581c 105a 6818 145b 7814     X..HY..XZ..h[..x
    730c:	145c 8414 185d 9410 185e a410 1c5f b40c     \...]...^..._...
    731c:	2060 c008 2061 d008 2462 e004 2863 f000     ` ..a ..b$..c(..
    732c:	2864 e800 2465 dc00 2466 d400 2067 c800     d(..e$..f$..g ..
    733c:	1c68 c000 1c69 b400 186a ac00 146b a000     h...i...j...k...
    734c:	146c 9800 106d 8c00 106e 8400 0c6f 7800     l...m...n...o..x
    735c:	0870 7000 0871 6400 0472 5c00 0073 5000     p..pq..dr..\s..P
    736c:	0c74 5400 1875 5c00 2476 6400 3077 6c00     t..Tu..\v$.dw0.l
    737c:	3c78 7400 4879 7c00 547a 8400 647b 8c00     x<.tyH.|zT..{d..
    738c:	707c 9000 7c7d 9800 887e a000 947f a800     |p..}|..~.......
    739c:	a080 b000 ac81 b800 b882 c000 c883 c800     ................
    73ac:	c084 c000 b485 b400 ac86 ac00 a087 a000     ................
    73bc:	9888 9800 8c89 8c00 848a 8400 788b 7800     .............x.x
    73cc:	708c 7000 648d 6400 5c8e 5c00 508f 5000     .p.p.d.d.\.\.P.P
    73dc:	4890 4800 3c91 3c00 3492 3400 2893 2800     .H.H.<.<.4.4.(.(
    73ec:	3494 2800 4095 2800 4c96 2800 5897 2800     .4.(.@.(.L.(.X.(
    73fc:	6498 2800 7099 2800 7c9a 2800 8c9b 2400     .d.(.p.(.|.(...$
    740c:	989c 2400 a49d 2400 b09e 2400 bc9f 2400     ...$...$...$...$
    741c:	c8a0 2400 d4a1 2400 e0a2 2400 f0a3 2000     ...$...$...$... 
    742c:	e8a4 2000 dca5 1c00 d4a6 1c00 c8a7 1800     ... ............
    743c:	c0a8 1800 b4a9 1400 acaa 1400 a0ab 1000     ................
    744c:	98ac 1000 8cad 0c00 84ae 0c00 78af 0800     .............x..
    745c:	70b0 0800 64b1 0400 5cb2 0400 50b3 0000     .p...d...\...P..
    746c:	58b4 0008 60b5 0010 68b6 0018 74b7 0020     .X...`...h...t .
    747c:	7cb8 0028 84b9 0030 8cba 0038 98bb 0040     .|(...0...8...@.
    748c:	a0bc 0048 a8bd 0050 b0be 0058 bcbf 0060     ..H...P...X...`.
    749c:	c4c0 0068 ccc1 0070 d4c2 0078 e0c3 0080     ..h...p...x.....
    74ac:	d8c4 007c ccc5 0074 c0c6 0070 b4c7 0068     ..|...t...p...h.
    74bc:	a8c8 0064 a0c9 005c 94ca 0058 88cb 0050     ..d...\...X...P.
    74cc:	7ccc 0048 70cd 0044 68ce 003c 5ccf 0038     .|H..pD..h<..\8.
    74dc:	50d0 0030 44d1 002c 38d2 0024 40d3 0824     .P0..D,..8$..@$.
    74ec:	4cd4 1424 58d5 1c24 64d6 2820 70d7 3020     .L$..X$..d (.p 0
    74fc:	7cd8 3c20 88d9 4420 94da 501c 9cdb 581c     .| <.. D...P...X
    750c:	a8dc 641c b4dd 6c1c c0de 7818 ccdf 8018     ...d...l...x....
    751c:	d8e0 8c18 e4e1 9418 f0e2 a014 e4e3 9814     ................
    752c:	d4e4 8c14 c4e5 8418 b4e6 7818 a8e7 7018     ...........x...p
    753c:	98e8 641c 88e9 5c1c 78ea 5020 6ceb 4820     ...d...\.x P.l H
    754c:	5cec 3c20 4ced 3424 3cee 2824 30ef 2024     .\ <.L$4.<$(.0$ 
    755c:	20f0 1428 10f1 0c28 00f2 002c 08f3 0c2c     . (...(...,...,.
    756c:	14f4 182c 1cf5 2428 28f6 3028 30f7 3c24     ..,...($.((0.0$<
    757c:	3cf8 4824 44f9 5420 50fa 6420 58fb 7020     .<$H.D T.P d.X p
    758c:	64fc 7c1c 6cfd 881c 78fe 9418 80ff a018     .d.|.l...x......

0000759c <blade_runner_2049_gp>:
    759c:	c900 ad50 ab19 9b39 6832 7323 5e4b 6e21     ..P...9.2h#sK^!n
    75ac:	7f64 ac78 4d7d a98d 74a0 b255 14aa 731b     d.x.}M...tU....s
    75bc:	4bc8 4915 2cff 2a09                         .K.I.,.*

000075c4 <slope_gp>:
    75c4:	ff00 ffff ff05 00ff 000e 00ff 001c ffff     ................
    75d4:	002a ff00 ff54 ff00 ff8d 0000 00ff 0000     *...T...........

000075e4 <bhw2_49_gp>:
    75e4:	0900 0f0f 0028 2d37 0956 0f0f 1d82 3e29     ....(.7-V.....)>
    75f4:	09aa 0f0f 40d3 c708 06ff 1601               .....@......

00007600 <es_autumn_19_gp>:
    7600:	1a00 0101 4333 0104 7654 010e 8968 3498     ....3C..Tv..h..4
    7610:	7170 0141 857a 3b95 897c 3498 7187 0141     pqA.z..;|..4.qA.
    7620:	8b8e 2e9a 71a3 010d 37cc 0103 11f9 0101     .....q...7......
    7630:	11ff 0101                                   ....

00007634 <bhw2_turq_gp>:
    7634:	0100 5f21 0126 256b 2a4c 2dff ff7f 2dff     ..!_&.k%L*.-...-
    7644:	2ab2 2dff 01d8 256b 01ff 5f21               .*.-..k%..!_

00007650 <bhw2_22_gp>:
    7650:	0000 0000 e363 0101 f982 5fc7 e39b 0101     ....c......_....
    7660:	00ff 0000                                   ....

00007664 <Ribbon_Colors_gp>:
    7664:	e300 0902 c21f 0933 a73f 08af 1b5f 4ed1     ......3.?..._..N
    7674:	017f f7f8 019f a64e 01bf 6605 2adf 124f     ......N....f.*O.
    7684:	ffff 00ff                                   ....

00007688 <Analogous_1_gp>:
    7688:	0300 ff00 173f ff00 437f ff00 8ebf 2d00     ....?....C.....-
    7698:	ffff 0000                                   ....

0000769c <es_emerald_dragon_08_gp>:
    769c:	6100 01ff 2f65 0185 0db2 012b 02ff 010a     .a..e/....+.....

000076ac <standard_gp>:
    76ac:	0000 0000 0a54 ff11 0054 0011 0aa9 0cff     ....T...T.......
    76bc:	0aa9 0000 ffff 0c11                         ........

000076c4 <stratosphere_sunset_gp>:
    76c4:	0100 0902 0104 0902 0108 0a02 010d 0b02     ................
    76d4:	0111 0b02 0115 0d03 011a 0f03 011e 1003     ................
    76e4:	0123 1204 0127 1304 012b 1504 0130 1705     #...'...+...0...
    76f4:	0134 1b05 0139 2006 013d 2607 0141 3109     4...9.. =..&A..1
    7704:	0146 3d0b 014a 5011 014f 6717 0153 871f     F..=J..PO..gS...
    7714:	0257 ac2a 045c be30 0960 d236 0b65 d637     W.*.\.0.`.6.e.7.
    7724:	0d69 dd3a 106d db3c 1372 d83e 1876 d242     i.:.m.<.r.>.v.B.
    7734:	1e7b c945 237f b446 2783 a246 4088 9054     {.E..#F..'F..@T.
    7744:	618c 8061 9491 7b79 d295 7792 b899 5c7a     .aa...y{...w..z\
    7754:	9f9e 4564 85a2 2144 6ea7 0b2a 98ab 0635     ..dE..D!.n*...5.
    7764:	cbaf 0341 deb4 0563 f2b8 078e debd 057a     ..A...c.......z.
    7774:	cbc1 0369 d0c5 0149 d2ca 0130 dece 012d     ..i...I...0...-.
    7784:	ead3 012a 96d7 0117 56db 010a 23e0 0103     ..*......V...#..
    7794:	09e4 0101 04e9 0101 01ed 0101 01f1 0101     ................
    77a4:	01f6 0101 01fa 0101 01ff 0101               ............

000077b0 <es_ocean_breeze_036_gp>:
    77b0:	0100 0706 0159 6f63 9099 ffd1 00ff 5249     ....Y.co......IR

000077c0 <es_rivendell_15_gp>:
    77c0:	0100 050e 1065 0e24 38a5 1e44 96f2 639c     ....e.$..8D....c
    77d0:	96ff 639c                                   ...c

000077d4 <sunlitwave_gp>:
    77d4:	0500 5409 252d 6f18 1051 3b05 1870 1401     ...T-%.oQ..;p...
    77e4:	2296 0201 afc6 0724 d0ed 1068 efff 9ed3     ."....$...h.....

000077f4 <bhw1_sunconure_gp>:
    77f4:	1400 0ddf e8a0 0141 e8fc 0105 e8ff 0105     ......A.........

00007804 <ofaurora_gp>:
    7804:	ff00 f2f1 ed0a 0901 2a0f 0201 0116 0101     .........*......
    7814:	ed23 0901 ff30 f2f1 ef3a 0139 0142 0101     #...0...:.9.B...
    7824:	ef4c 0139 ff54 f2f1 f25e 01d9 0165 0101     L.9.T...^...e...
    7834:	f26d 01d9 ff77 f2f1 097f 2490 0184 0101     m...w......$....
    7844:	098c 2490 ff93 f2f1 019e ba9c 01a8 0101     ...$............
    7854:	01b2 ba9c ffba f2f1 10c6 ff0d 01ce 0101     ................
    7864:	10d8 ff0d ffe0 f2f1 4eea 9c01 0eed 1e01     .........N......
    7874:	01ef 0101 4ef4 9c01 ffff f2f1               .....N......

00007880 <bhw2_14_gp>:
    7880:	0000 0800 002d 2d00 074f ff0c 2a77 ff37     ....-..-O...w*7.
    7890:	079e ff0c 00d1 2d00 00ff 0800               .......-....

0000789c <GMT_seafloor_gp>:
    789c:	1900 6d00 1c0a 7700 2015 7f00 231f 8c00     ...m...w. ...#..
    78ac:	1b2a 9101 1435 9701 0e4a 9c04 0954 a409     *...5...J...T...
    78bc:	055f aa0f 026a b018 0174 b623 018a bc31     _...j...t.#...1.
    78cc:	0094 c542 019f cb4f 03aa d25d 0ab4 d86d     ..B...O...]...m.
    78dc:	18bf df80 2bd4 e695 48df f0ad 70e9 f7c5     .....+...H...p..
    78ec:	a3f4 ffe1 dcff fff8                         ........

000078f4 <ib15_gp>:
    78f4:	7100 935b 9d48 4e58 d059 2155 ff6b 0b1d     .q[.H.XNY.U!k...
    7904:	898d 271f 3bff 5921                         ...'.;!Y

0000790c <twilight_gp>:
    790c:	0000 0000 0102 0101 0105 0101 0107 0101     ................
    791c:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    792c:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    793c:	011e 0101 0120 0102 0123 0102 0125 0102     .... ...#...%...
    794c:	0228 0203 022a 0203 022d 0203 032f 0304     (...*...-.../...
    795c:	0332 0304 0435 0405 0437 0405 053a 0505     2...5...7...:...
    796c:	063c 0606 063f 0606 0741 0707 0844 0807     <...?...A...D...
    797c:	0946 0908 0949 0a08 0a4b 0b08 0b4e 0d09     F...I...K...N...
    798c:	0c50 0e09 0d53 0f09 0e55 100a 0e58 110a     P...S...U...X...
    799c:	1185 330e 1088 340e 0f8a 370e 0e8d 390e     ...3...4...7...9
    79ac:	0d8f 3d0e 0c92 3f0e 0c95 420e 0a97 450d     ...=...?...B...E
    79bc:	0a9a 480d 099c 4b0d 089f 4e0d 07a1 520e     ...H...K...N...R
    79cc:	07a4 5410 07a6 5811 07a9 5b13 07ab 5f15     ...T...X...[..._
    79dc:	07ae 6216 07b0 6619 06b3 691b 06b5 6d1d     ...b...f...i...m
    79ec:	06b8 7020 07ba 7525 08bd 782a 09bf 7d2f     .. p..%u..*x../}
    79fc:	0ac2 8036 0bc4 843b 0cc7 8942 0ec9 8c49     ..6...;...B...I.
    7a0c:	10cc 9150 12ce 9557 14d0 995f 16d3 9e67     ..P...W..._...g.
    7a1c:	18d5 a26f 1bd8 a877 1eda ac80 20dd b08a     ..o...w...... ..
    7a2c:	23df b693 27e2 ba9c 2ae4 c0a6 2ee7 c5b0     .#...'...*......
    7a3c:	34e9 c9b6 3aeb cfbb 41ee d4c1 49f0 dbc7     .4...:...A...I..
    7a4c:	50f2 dfcd 5af5 e6d5 64f7 ebdb 6dfa f2e1     .P...Z...d...m..
    7a5c:	78fc f7e7 84ff ffed                         .x......

00007a64 <bhw3_21_gp>:
    7a64:	0100 6228 0130 4441 024c 60a1 0068 1951     ..(b0.ADL..`h.Q.
    7a74:	4182 52b6 0099 aa56 11b5 b6cf 11cc b6cf     .A.R..V.........
    7a84:	01ff 2e17                                   ....

00007a88 <gr64_hult_gp>:
    7a88:	0100 6d7c 0142 4f5d 3468 0141 7382 017f     ..|mB.]Oh4A..s..
    7a98:	3496 0141 01c9 4856 00ef 2d37 00ff 2d37     .4A...VH..7-..7-

00007aa8 <cyberpunk_neon_gp>:
    7aa8:	7100 911c ea3f d900 0a7f c6bd 13bf 7c3e     .q..?.........>|
    7ab8:	09ff 3318                                   ...3

00007abc <bhw1_26_gp>:
    7abc:	6b00 cd01 ff23 ffff 6b49 cd01 0a6b d295     .k..#...Ik..k...
    7acc:	ff82 ffff 0a99 d295 1baa 77af 35c6 38cb     ...........w.5.8
    7adc:	84cf 87e5 ffdb ffff 84e7 87e5 35fc 38cb     .............5.8
    7aec:	35ff 38cb                                   .5.8

00007af0 <Tropical_Colors_gp>:
    7af0:	0100 0104 010e 010a 0115 0013 0123 012a     ............#.*.
    7b00:	0331 014b 383b 0167 d046 0487 d954 0236     1.K.;8g.F...T.6.
    7b10:	e062 010a 7582 030f 308d 0614 2a9b 4d12     b....u...0...*.M
    7b20:	24aa ff11 37c5 f261 50d2 e4ff 2fdc 4ddb     .$...7a..P.../.M
    7b30:	18e1 0abb 18e4 09b4 18e6 08ab 17e8 06a1     ................
    7b40:	17eb 0595 16ed 0488 16f0 027c 15f2 0170     ..........|...p.
    7b50:	15f5 0164 14f7 0158 13fa 014d 13fc 0142     ..d...X...M...B.
    7b60:	12ff 0037                                   ..7.

00007b64 <ib_jul01_gp>:
    7b64:	c200 0101 015e 121d 3984 1c83 71ff 0101     ....^....9...q..

00007b74 <retro2_16_gp>:
    7b74:	bc00 0187 2eff 0107                         ........

00007b7c <departure_gp>:
    7b7c:	0800 0003 172a 0007 4b3f 0626 a954 2663     ....*...?K&.T.c&
    7b8c:	d56a 77a9 ff74 ffff 878a 8aff 1694 18ff     j..wt...........
    7b9c:	00aa 00ff 00bf 0088 00d4 0037 00ff 0037     ..........7...7.

00007bac <Secondary_01a_gp>:
    7bac:	0300 ff00 433f 2d07 ff7f 0021 2abf 0173     ....?C.-..!..*s.
    7bbc:	00ff 01ff                                   ....

00007bc0 <otis_gp>:
    7bc0:	1a00 5901 117f 00c1 00d8 6222 00ff 6222     ...Y......"b.."b

00007bd0 <rainbowsherbet_gp>:
    7bd0:	ff00 0421 ff2b 1944 ff56 1907 ff7f 6752     ..!.+.D.V.....Rg
    7be0:	ffaa f2ff 2ad1 16ff 57ff 41ff               .....*...W.A

00007bec <parrot_gp>:
    7bec:	7e00 0100 c572 10a8 c58c 10a8 00d8 2002     .~..r.......... 
    7bfc:	00ff 2002                                   ... 

00007c00 <green_gp>:
    7c00:	0000 0000 003f 0011 007e 0052 009b 0080     ....?...~.R.....
    7c10:	00b8 00ba 2adb 2ddb ffff ffff               .....*.-....

00007c1c <es_landscape_59_gp>:
    7c1c:	d700 0972 ff33 22b6 ff59 30cd d55e d2e5     ..r.3.."Y..0^...
    7c2c:	6a99 91a1 14cc 6f65 01ff 4b30               .j....eo..0K

00007c38 <es_vintage_57_gp>:
    7c38:	0200 0101 1235 0001 4568 011d a799 0a87     ....5...hE......
    7c48:	2eff 0438                                   ..8.

00007c4c <gr65_hult_gp>:
    7c4c:	f700 f7b0 ff30 ff88 dc59 e21d 07a0 b252     ....0...Y.....R.
    7c5c:	01d8 6d7c 01ff 6d7c                         ..|m..|m

00007c64 <cequal_gp>:
    7c64:	0100 0101 0124 0103 014c 7b29 3b70 fc01     ....$...L.){p;..
    7c74:	757f b401 efac 0151 fcc3 01b4 fcde 93fa     .u....Q.........
    7c84:	fcff fcfc                                   ....

00007c88 <bhw3_30_gp>:
    7c88:	0100 0104 010c 021c 101c 0b44 123a 1c0b     ..........D.:...
    7c98:	1f4f 301b 0260 220d 1e75 7b56 0287 3e2a     O..0`.."u.V{..*>
    7ca8:	4a99 9b80 3cb5 291f a7d6 dfd3 b3ed 4e46     .J...<.)......FN
    7cb8:	39ff 0702                                   .9..

00007cbc <bhw1_greeny_gp>:
    7cbc:	0000 0000 0727 0837 2a63 2dff 0799 0837     ....'.7.c*.-..7.
    7ccc:	00ff 0000                                   ....

00007cd0 <BlacK_Magenta_Red_gp>:
    7cd0:	0000 0000 2a3f 2d00 ff7f ff00 ffbf 2d00     ....?*.-.......-
    7ce0:	ffff 0000                                   ....

00007ce4 <xanidu_2_gp>:
    7ce4:	7600 e2a1 4f35 a201 435e 0701 0184 9c37     .v..5O..^C....7.
    7cf4:	01ad 3d7f 27d3 482d 76ff e2a1               ...=.'-H.v..

00007d00 <Blue_Cyan_Yellow_gp>:
    7d00:	0000 ff00 003f ff37 007f ffff 2abf 2dff     ....?.7......*.-
    7d10:	ffff 00ff 4d56 5044 5f45 0000 323a 003a     ....VMDPE_..:2:.
    7d20:	003a 0000 565f 444d 4550 0000 4d56 5044     :..._VMDPE..VMDP
    7d30:	5f43 0000 565f 444d 4350 0000 7245 6f72     C_.._VMDPC..Erro
    7d40:	3a72 4120 7474 6d65 7470 7420 206f 6573     r: Attempt to se
    7d50:	2074 2061 6572 6461 6f2d 6c6e 2079 6176     t a read-only va
    7d60:	6972 6261 656c 6f20 2072 6164 6174 7420     riable or data t
    7d70:	7079 2065 6f6e 2074 7573 7070 726f 6574     ype not supporte
    7d80:	0d64 000a                                   d...

00007d84 <pin2sc1a>:
    7d84:	0e05 0908 0c0d 0706 040f 1300 9303 0e05     ................
    7d94:	0908 0c0d 0706 040f ffff 85c5 8684 c487     ................
    7da4:	ffff 1300 9303 921a ff17 ffff               ............

00007db0 <digital_pin_to_info_PGM>:
    7db0:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
    7dc0:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
    7dd0:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
    7de0:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
    7df0:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
    7e00:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
    7e10:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
    7e20:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
    7e30:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
    7e40:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
    7e50:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
    7e60:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
    7e70:	0014 43fe 9014 4004 084c 43fe a04c 4004     ...C...@L..CL..@
    7e80:	2004 43fe d004 4004 1024 43fe b024 4004     . .C...@$..C$..@
    7e90:	1020 43fe b020 4004 1028 43fe b028 4004      ..C ..@(..C(..@
    7ea0:	102c 43fe b02c 4004 2000 43fe d000 4004     ,..C,..@. .C...@
    7eb0:	0848 43fe a048 4004 0010 43fe 9010 4004     H..CH..@...C...@
    7ec0:	0a0d ffff                                   ....

00007ec4 <vtable for usb_serial_class>:
	...
    7ecc:	5a6d 0000 5a65 0000 5a61 0000 5a5d 0000     mZ..eZ..aZ..]Z..
    7edc:	5a59 0000 5a55 0000 5a51 0000 5a4d 0000     YZ..UZ..QZ..MZ..

00007eec <usb_endpoint_config_table>:
    7eec:	1500 1519                                   ....

00007ef0 <usb_descriptor_list>:
    7ef0:	0100 0000 8774 1fff 0012 0000 0200 0000     ....t...........
    7f00:	87a0 1fff 0043 0000 0300 0000 87fc 1fff     ....C...........
    7f10:	0000 0000 0301 0409 8788 1fff 0000 0000     ................
    7f20:	0302 0409 87e4 1fff 0000 0000 0303 0409     ................
    7f30:	8800 1fff 0000 0000 0000 0000 0000 0000     ................
    7f40:	0000 0000                                   ....

00007f44 <_init>:
    7f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f46:	bf00      	nop
    7f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7f4a:	bc08      	pop	{r3}
    7f4c:	469e      	mov	lr, r3
    7f4e:	4770      	bx	lr

00007f50 <__init_array_start>:
    7f50:	00005f91 	.word	0x00005f91

00007f54 <__frame_dummy_init_array_entry>:
    7f54:	00000435 00003679 00003b2d 000040e1     5...y6..-;...@..

Disassembly of section .fini:

00007f64 <_fini>:
    7f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f66:	bf00      	nop
