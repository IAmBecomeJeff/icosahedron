
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\shelf_layers\teensy31\Debug/shelf_layers.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 85 4c 00 00 3d 4c 00 00     ... .....L..=L..
      10:	3d 4c 00 00 3d 4c 00 00 3d 4c 00 00 3d 4c 00 00     =L..=L..=L..=L..
      20:	3d 4c 00 00 3d 4c 00 00 3d 4c 00 00 85 4c 00 00     =L..=L..=L...L..
      30:	85 4c 00 00 3d 4c 00 00 b1 60 00 00 b5 61 00 00     .L..=L...`...a..
      40:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
      50:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
      60:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
      70:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
      80:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
      90:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
      a0:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
      b0:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
      c0:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
      d0:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
      e0:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
      f0:	85 4c 00 00 a9 63 00 00 85 4c 00 00 d5 64 00 00     .L...c...L...d..
     100:	85 4c 00 00 01 66 00 00 85 4c 00 00 85 4c 00 00     .L...f...L...L..
     110:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
     120:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
     130:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
     140:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
     150:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
     160:	85 4c 00 00 cd 50 00 00 85 4c 00 00 85 4c 00 00     .L...P...L...L..
     170:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
     180:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
     190:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
     1a0:	85 4c 00 00 85 4c 00 00 85 4c 00 00 85 4c 00 00     .L...L...L...L..
     1b0:	85 4c 00 00 85 4c 00 00 85 4c 00 00                 .L...L...L..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f004 fd5c 	bl	4c8c <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f004 fdb0 	bl	4e38 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f004 fd21 	bl	4d28 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f004 fd12 	bl	4d28 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f006 fcac 	bl	6c64 <__libc_init_array>

	startup_late_hook();
     30c:	f004 fcc4 	bl	4c98 <startup_late_hook>
	main();
     310:	f005 ff58 	bl	61c4 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8828 	.word	0x1fff8828
     33c:	00008c74 	.word	0x00008c74
     340:	1fff871c 	.word	0x1fff871c
     344:	1fff8828 	.word	0x1fff8828
     348:	1fff9328 	.word	0x1fff9328
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e15fae9 	.word	0x5e15fae9
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8828 	.word	0x1fff8828
     42c:	00000000 	.word	0x00000000
     430:	00008c78 	.word	0x00008c78

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff882c 	.word	0x1fff882c
     460:	00008c78 	.word	0x00008c78
     464:	1fff8828 	.word	0x1fff8828
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     474:	6842      	ldr	r2, [r0, #4]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <brighten_randomly()>:

// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		cooling = random8(50, 120);
     494:	f8df 8224 	ldr.w	r8, [pc, #548]	; 6bc <brighten_randomly()+0x22c>

// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     498:	f898 3000 	ldrb.w	r3, [r8]
		cooling = random8(50, 120);
     49c:	b085      	sub	sp, #20
     49e:	2b00      	cmp	r3, #0
     4a0:	f000 80c1 	beq.w	626 <brighten_randomly()+0x196>
     4a4:	4878      	ldr	r0, [pc, #480]	; (688 <brighten_randomly()+0x1f8>)
     4a6:	4c79      	ldr	r4, [pc, #484]	; (68c <brighten_randomly()+0x1fc>)

// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
     4a8:	4a79      	ldr	r2, [pc, #484]	; (690 <brighten_randomly()+0x200>)
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     4aa:	497a      	ldr	r1, [pc, #488]	; (694 <brighten_randomly()+0x204>)
     4ac:	8823      	ldrh	r3, [r4, #0]
     4ae:	4f7a      	ldr	r7, [pc, #488]	; (698 <brighten_randomly()+0x208>)
     4b0:	4d7a      	ldr	r5, [pc, #488]	; (69c <brighten_randomly()+0x20c>)
     4b2:	260a      	movs	r6, #10
		cooling = random8(50, 120);
		use_palette = 1;
		this_dir = random8(2);
     4b4:	6006      	str	r6, [r0, #0]
     4b6:	2001      	movs	r0, #1
		this_delay = 15;
		use_all_shelves = random8(2);
     4b8:	7010      	strb	r0, [r2, #0]
     4ba:	2000      	movs	r0, #0
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 1;
     4bc:	f101 0ebc 	add.w	lr, r1, #188	; 0xbc
		this_dir = random8(2);
		this_delay = 15;
		use_all_shelves = random8(2);
     4c0:	f888 0000 	strb.w	r0, [r8]
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 1;
		this_dir = random8(2);
     4c4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 1;
     4c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		this_dir = random8(2);
		this_delay = 15;
     4cc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600


// fire mirrored from ends or center using palette
void fire_mirror_pal() {
	if (mode_change) {
		mode_change = 0;
     4d0:	3319      	adds	r3, #25
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     4d2:	f801 0f01 	strb.w	r0, [r1, #1]!
     4d6:	b29b      	uxth	r3, r3
     4d8:	eb03 2213 	add.w	r2, r3, r3, lsr #8
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     4dc:	4571      	cmp	r1, lr
     4de:	f805 2f01 	strb.w	r2, [r5, #1]!
     4e2:	f807 0f01 	strb.w	r0, [r7, #1]!
     4e6:	f04f 0200 	mov.w	r2, #0
     4ea:	d1eb      	bne.n	4c4 <brighten_randomly()+0x34>
     4ec:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     4f0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     4f4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     4f8:	3319      	adds	r3, #25
     4fa:	b29b      	uxth	r3, r3
     4fc:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     500:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     504:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
     508:	3119      	adds	r1, #25
     50a:	b289      	uxth	r1, r1
     50c:	eb01 2041 	add.w	r0, r1, r1, lsl #9
     510:	eb01 0080 	add.w	r0, r1, r0, lsl #2
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     514:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     518:	eb03 2313 	add.w	r3, r3, r3, lsr #8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     51c:	3019      	adds	r0, #25
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     51e:	eb01 2111 	add.w	r1, r1, r1, lsr #8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     522:	b280      	uxth	r0, r0
		for (uint8_t i = 0; i < NUM_LEDS; i++) {
			PixelState[i] = 0;
			PixelBright[i] = 0;
			PixelColorIndex[i] = random8();
		}
		chance_of_brighten = random8(2,20);
     524:	b2db      	uxtb	r3, r3
		delta_bright = random8(1, 6);
     526:	b2c9      	uxtb	r1, r1
		full_count = 0;
		hold_counter = 0;
		hold_time = random16(10, 1000);
     528:	f240 35de 	movw	r5, #990	; 0x3de
     52c:	fb05 f500 	mul.w	r5, r5, r0
		for (uint8_t i = 0; i < NUM_LEDS; i++) {
			PixelState[i] = 0;
			PixelBright[i] = 0;
			PixelColorIndex[i] = random8();
		}
		chance_of_brighten = random8(2,20);
     530:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
		delta_bright = random8(1, 6);
     534:	eb01 0181 	add.w	r1, r1, r1, lsl #2
     538:	8020      	strh	r0, [r4, #0]
		for (uint8_t i = 0; i < NUM_LEDS; i++) {
			PixelState[i] = 0;
			PixelBright[i] = 0;
			PixelColorIndex[i] = random8();
		}
		chance_of_brighten = random8(2,20);
     53a:	11db      	asrs	r3, r3, #7
		delta_bright = random8(1, 6);
		full_count = 0;
		hold_counter = 0;
		hold_time = random16(10, 1000);
     53c:	0c28      	lsrs	r0, r5, #16
		for (uint8_t i = 0; i < NUM_LEDS; i++) {
			PixelState[i] = 0;
			PixelBright[i] = 0;
			PixelColorIndex[i] = random8();
		}
		chance_of_brighten = random8(2,20);
     53e:	4f58      	ldr	r7, [pc, #352]	; (6a0 <brighten_randomly()+0x210>)
		delta_bright = random8(1, 6);
		full_count = 0;
		hold_counter = 0;
		hold_time = random16(10, 1000);
     540:	4e58      	ldr	r6, [pc, #352]	; (6a4 <brighten_randomly()+0x214>)
			PixelState[i] = 0;
			PixelBright[i] = 0;
			PixelColorIndex[i] = random8();
		}
		chance_of_brighten = random8(2,20);
		delta_bright = random8(1, 6);
     542:	4d59      	ldr	r5, [pc, #356]	; (6a8 <brighten_randomly()+0x218>)
		full_count = 0;
     544:	f8df b178 	ldr.w	fp, [pc, #376]	; 6c0 <brighten_randomly()+0x230>
		hold_counter = 0;
     548:	4c58      	ldr	r4, [pc, #352]	; (6ac <brighten_randomly()+0x21c>)
			PixelBright[i] = 0;
			PixelColorIndex[i] = random8();
		}
		chance_of_brighten = random8(2,20);
		delta_bright = random8(1, 6);
		full_count = 0;
     54a:	f88b 2000 	strb.w	r2, [fp]
			PixelState[i] = 0;
			PixelBright[i] = 0;
			PixelColorIndex[i] = random8();
		}
		chance_of_brighten = random8(2,20);
		delta_bright = random8(1, 6);
     54e:	1209      	asrs	r1, r1, #8
		for (uint8_t i = 0; i < NUM_LEDS; i++) {
			PixelState[i] = 0;
			PixelBright[i] = 0;
			PixelColorIndex[i] = random8();
		}
		chance_of_brighten = random8(2,20);
     550:	3302      	adds	r3, #2
		delta_bright = random8(1, 6);
     552:	3101      	adds	r1, #1
		full_count = 0;
		hold_counter = 0;
		hold_time = random16(10, 1000);
     554:	300a      	adds	r0, #10
		for (uint8_t i = 0; i < NUM_LEDS; i++) {
			PixelState[i] = 0;
			PixelBright[i] = 0;
			PixelColorIndex[i] = random8();
		}
		chance_of_brighten = random8(2,20);
     556:	703b      	strb	r3, [r7, #0]
		delta_bright = random8(1, 6);
		full_count = 0;
		hold_counter = 0;
		hold_time = random16(10, 1000);
     558:	8030      	strh	r0, [r6, #0]
			PixelState[i] = 0;
			PixelBright[i] = 0;
			PixelColorIndex[i] = random8();
		}
		chance_of_brighten = random8(2,20);
		delta_bright = random8(1, 6);
     55a:	7029      	strb	r1, [r5, #0]
		full_count = 0;
		hold_counter = 0;
     55c:	8022      	strh	r2, [r4, #0]
     55e:	4c4d      	ldr	r4, [pc, #308]	; (694 <brighten_randomly()+0x204>)
     560:	4e53      	ldr	r6, [pc, #332]	; (6b0 <brighten_randomly()+0x220>)
     562:	4d54      	ldr	r5, [pc, #336]	; (6b4 <brighten_randomly()+0x224>)
     564:	f8df 815c 	ldr.w	r8, [pc, #348]	; 6c4 <brighten_randomly()+0x234>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     568:	f8df a120 	ldr.w	sl, [pc, #288]	; 68c <brighten_randomly()+0x1fc>
     56c:	f104 09bc 	add.w	r9, r4, #188	; 0xbc
     570:	1c77      	adds	r7, r6, #1
     572:	e01e      	b.n	5b2 <brighten_randomly()+0x122>
     574:	f8ba 3000 	ldrh.w	r3, [sl]
	}
	
	if (full_count < NUM_LEDS) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			if (PixelState[i] == 0) {						// 0 means dark, so maybe get brighter
				if (random8() < chance_of_brighten) {
     578:	7811      	ldrb	r1, [r2, #0]
     57a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     57e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     582:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     586:	3319      	adds	r3, #25
     588:	b29b      	uxth	r3, r3
     58a:	eb03 2213 	add.w	r2, r3, r3, lsr #8
     58e:	b2d2      	uxtb	r2, r2
     590:	4291      	cmp	r1, r2
     592:	f8aa 3000 	strh.w	r3, [sl]
					PixelState[i] = 1;
     596:	f04f 0301 	mov.w	r3, #1
	}
	
	if (full_count < NUM_LEDS) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			if (PixelState[i] == 0) {						// 0 means dark, so maybe get brighter
				if (random8() < chance_of_brighten) {
     59a:	d900      	bls.n	59e <brighten_randomly()+0x10e>
					PixelState[i] = 1;
     59c:	7023      	strb	r3, [r4, #0]
		hold_counter = 0;
		hold_time = random16(10, 1000);
	}
	
	if (full_count < NUM_LEDS) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
     59e:	45a1      	cmp	r9, r4
     5a0:	f105 0501 	add.w	r5, r5, #1
     5a4:	f108 0801 	add.w	r8, r8, #1
     5a8:	f106 0603 	add.w	r6, r6, #3
     5ac:	f107 0703 	add.w	r7, r7, #3
     5b0:	d067      	beq.n	682 <brighten_randomly()+0x1f2>
			if (PixelState[i] == 0) {						// 0 means dark, so maybe get brighter
     5b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
				if (random8() < chance_of_brighten) {
     5b6:	4a3a      	ldr	r2, [pc, #232]	; (6a0 <brighten_randomly()+0x210>)
		hold_time = random16(10, 1000);
	}
	
	if (full_count < NUM_LEDS) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			if (PixelState[i] == 0) {						// 0 means dark, so maybe get brighter
     5b8:	2b00      	cmp	r3, #0
     5ba:	d0db      	beq.n	574 <brighten_randomly()+0xe4>
				if (random8() < chance_of_brighten) {
					PixelState[i] = 1;
				}
			}
			else if (PixelState[i] == 1) {					// 1 means we're brightening
     5bc:	2b01      	cmp	r3, #1
     5be:	d015      	beq.n	5ec <brighten_randomly()+0x15c>
				else {
					PixelBright[i] += delta_bright;
					leds[i] = ColorFromPalette(current_palette, PixelColorIndex[i], PixelBright[i]);
				}
			}
			else if (PixelState[i] == 2) {					// 2 means at full brightness
     5c0:	2b02      	cmp	r3, #2
     5c2:	d1ec      	bne.n	59e <brighten_randomly()+0x10e>
				leds[i] = ColorFromPalette(current_palette, PixelColorIndex[i], PixelBright[i]);
     5c4:	2001      	movs	r0, #1
     5c6:	493c      	ldr	r1, [pc, #240]	; (6b8 <brighten_randomly()+0x228>)
     5c8:	782b      	ldrb	r3, [r5, #0]
     5ca:	f898 2000 	ldrb.w	r2, [r8]
     5ce:	9000      	str	r0, [sp, #0]
     5d0:	a803      	add	r0, sp, #12
     5d2:	f003 fd81 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5d6:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
     5da:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
     5de:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5e2:	f807 1c01 	strb.w	r1, [r7, #-1]
        g = rhs.g;
     5e6:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
     5e8:	70b3      	strb	r3, [r6, #2]
     5ea:	e7d8      	b.n	59e <brighten_randomly()+0x10e>
				if (random8() < chance_of_brighten) {
					PixelState[i] = 1;
				}
			}
			else if (PixelState[i] == 1) {					// 1 means we're brightening
				if (PixelBright[i] >= 255 - delta_bright - 1) {
     5ec:	4a2e      	ldr	r2, [pc, #184]	; (6a8 <brighten_randomly()+0x218>)
     5ee:	7828      	ldrb	r0, [r5, #0]
     5f0:	7812      	ldrb	r2, [r2, #0]
     5f2:	f1c2 01fe 	rsb	r1, r2, #254	; 0xfe
     5f6:	4288      	cmp	r0, r1
					PixelBright[i] = 255;
     5f8:	f04f 0eff 	mov.w	lr, #255	; 0xff
					PixelState[i] = 2;
     5fc:	f04f 0102 	mov.w	r1, #2
				if (random8() < chance_of_brighten) {
					PixelState[i] = 1;
				}
			}
			else if (PixelState[i] == 1) {					// 1 means we're brightening
				if (PixelBright[i] >= 255 - delta_bright - 1) {
     600:	db08      	blt.n	614 <brighten_randomly()+0x184>
					PixelBright[i] = 255;
					PixelState[i] = 2;
					full_count++;
     602:	f89b 3000 	ldrb.w	r3, [fp]
					PixelState[i] = 1;
				}
			}
			else if (PixelState[i] == 1) {					// 1 means we're brightening
				if (PixelBright[i] >= 255 - delta_bright - 1) {
					PixelBright[i] = 255;
     606:	f885 e000 	strb.w	lr, [r5]
					PixelState[i] = 2;
					full_count++;
     60a:	3301      	adds	r3, #1
				}
			}
			else if (PixelState[i] == 1) {					// 1 means we're brightening
				if (PixelBright[i] >= 255 - delta_bright - 1) {
					PixelBright[i] = 255;
					PixelState[i] = 2;
     60c:	7021      	strb	r1, [r4, #0]
					full_count++;
     60e:	f88b 3000 	strb.w	r3, [fp]
     612:	e7c4      	b.n	59e <brighten_randomly()+0x10e>
				}
				else {
					PixelBright[i] += delta_bright;
     614:	4410      	add	r0, r2
     616:	b2c0      	uxtb	r0, r0
					leds[i] = ColorFromPalette(current_palette, PixelColorIndex[i], PixelBright[i]);
     618:	f898 2000 	ldrb.w	r2, [r8]
     61c:	4926      	ldr	r1, [pc, #152]	; (6b8 <brighten_randomly()+0x228>)
     61e:	9300      	str	r3, [sp, #0]
     620:	4603      	mov	r3, r0
					PixelBright[i] = 255;
					PixelState[i] = 2;
					full_count++;
				}
				else {
					PixelBright[i] += delta_bright;
     622:	7028      	strb	r0, [r5, #0]
     624:	e7d4      	b.n	5d0 <brighten_randomly()+0x140>
		full_count = 0;
		hold_counter = 0;
		hold_time = random16(10, 1000);
	}
	
	if (full_count < NUM_LEDS) {
     626:	f8df b098 	ldr.w	fp, [pc, #152]	; 6c0 <brighten_randomly()+0x230>
     62a:	f89b 3000 	ldrb.w	r3, [fp]
     62e:	2bbb      	cmp	r3, #187	; 0xbb
     630:	d995      	bls.n	55e <brighten_randomly()+0xce>
     632:	4d1a      	ldr	r5, [pc, #104]	; (69c <brighten_randomly()+0x20c>)
     634:	4f18      	ldr	r7, [pc, #96]	; (698 <brighten_randomly()+0x208>)
     636:	4c1e      	ldr	r4, [pc, #120]	; (6b0 <brighten_randomly()+0x220>)
     638:	f105 09bc 	add.w	r9, r5, #188	; 0xbc
			}
		}
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			leds[i] = ColorFromPalette(current_palette, PixelColorIndex[i], PixelBright[i]);
     63c:	2601      	movs	r6, #1
     63e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
     642:	f817 3f01 	ldrb.w	r3, [r7, #1]!
     646:	491c      	ldr	r1, [pc, #112]	; (6b8 <brighten_randomly()+0x228>)
     648:	9600      	str	r6, [sp, #0]
     64a:	a803      	add	r0, sp, #12
     64c:	f003 fd44 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
     650:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     654:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
     658:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
     65c:	70a3      	strb	r3, [r4, #2]
				leds[i] = ColorFromPalette(current_palette, PixelColorIndex[i], PixelBright[i]);
			}
		}
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
     65e:	454d      	cmp	r5, r9
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     660:	7021      	strb	r1, [r4, #0]
        g = rhs.g;
     662:	7062      	strb	r2, [r4, #1]
			leds[i] = ColorFromPalette(current_palette, PixelColorIndex[i], PixelBright[i]);
     664:	f04f 0301 	mov.w	r3, #1
     668:	f104 0403 	add.w	r4, r4, #3
				leds[i] = ColorFromPalette(current_palette, PixelColorIndex[i], PixelBright[i]);
			}
		}
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
     66c:	d1e7      	bne.n	63e <brighten_randomly()+0x1ae>
			leds[i] = ColorFromPalette(current_palette, PixelColorIndex[i], PixelBright[i]);
		}
		if (hold_counter++ == hold_time) {
     66e:	490f      	ldr	r1, [pc, #60]	; (6ac <brighten_randomly()+0x21c>)
     670:	480c      	ldr	r0, [pc, #48]	; (6a4 <brighten_randomly()+0x214>)
     672:	880a      	ldrh	r2, [r1, #0]
     674:	8800      	ldrh	r0, [r0, #0]
     676:	18d4      	adds	r4, r2, r3
     678:	4290      	cmp	r0, r2
     67a:	800c      	strh	r4, [r1, #0]
			mode_change = 1;
     67c:	bf08      	it	eq
     67e:	f888 3000 	strbeq.w	r3, [r8]
		}
	}


}
     682:	b005      	add	sp, #20
     684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     688:	1fff8720 	.word	0x1fff8720
     68c:	1fff876c 	.word	0x1fff876c
     690:	1fff871e 	.word	0x1fff871e
     694:	1fff8c03 	.word	0x1fff8c03
     698:	1fff8b27 	.word	0x1fff8b27
     69c:	1fff8df7 	.word	0x1fff8df7
     6a0:	1fff8d28 	.word	0x1fff8d28
     6a4:	1fff8fec 	.word	0x1fff8fec
     6a8:	1fff8b12 	.word	0x1fff8b12
     6ac:	1fff8cc2 	.word	0x1fff8cc2
     6b0:	1fff8898 	.word	0x1fff8898
     6b4:	1fff8b28 	.word	0x1fff8b28
     6b8:	1fff8ae0 	.word	0x1fff8ae0
     6bc:	1fff8724 	.word	0x1fff8724
     6c0:	1fff8b11 	.word	0x1fff8b11
     6c4:	1fff8df8 	.word	0x1fff8df8

000006c8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     6c8:	b508      	push	{r3, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     6ca:	2101      	movs	r1, #1
     6cc:	2007      	movs	r0, #7
     6ce:	f004 fb3d 	bl	4d4c <pinMode>
     6d2:	2101      	movs	r1, #1
     6d4:	200e      	movs	r0, #14
     6d6:	f004 fb39 	bl	4d4c <pinMode>
		// set the pins to output
		FastPin<_DATA_PIN>::setOutput();
		FastPin<_CLOCK_PIN>::setOutput();

		// Enable SPI0 clock
		uint32_t sim6 = SIM_SCGC6;
     6da:	4a0b      	ldr	r2, [pc, #44]	; (708 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::init()+0x40>)
     6dc:	6813      	ldr	r3, [r2, #0]
		if((SPI_t*)pSPIX == &KINETISK_SPI0) {
			if (!(sim6 & SIM_SCGC6_SPI0)) {
     6de:	04d9      	lsls	r1, r3, #19
     6e0:	d405      	bmi.n	6ee <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::init()+0x26>
				//serial_print("init1\n");
				SIM_SCGC6 = sim6 | SIM_SCGC6_SPI0;
				SPIX.CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(1) | SPI_CTAR_BR(1);
     6e2:	490a      	ldr	r1, [pc, #40]	; (70c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::init()+0x44>)
     6e4:	480a      	ldr	r0, [pc, #40]	; (710 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::init()+0x48>)
		// Enable SPI0 clock
		uint32_t sim6 = SIM_SCGC6;
		if((SPI_t*)pSPIX == &KINETISK_SPI0) {
			if (!(sim6 & SIM_SCGC6_SPI0)) {
				//serial_print("init1\n");
				SIM_SCGC6 = sim6 | SIM_SCGC6_SPI0;
     6e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     6ea:	6013      	str	r3, [r2, #0]
				SPIX.CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(1) | SPI_CTAR_BR(1);
     6ec:	60c8      	str	r0, [r1, #12]
				SPIX.CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(1) | SPI_CTAR_BR(1);
			}
		}

		// Configure SPI as the master and enable
		SPIX.MCR |= SPI_MCR_MSTR; // | SPI_MCR_CONT_SCKE);
     6ee:	4a07      	ldr	r2, [pc, #28]	; (70c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::init()+0x44>)
     6f0:	6813      	ldr	r3, [r2, #0]
     6f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     6f6:	6013      	str	r3, [r2, #0]
		SPIX.MCR &= ~(SPI_MCR_MDIS | SPI_MCR_HALT);
     6f8:	6813      	ldr	r3, [r2, #0]
     6fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
     6fe:	f023 0301 	bic.w	r3, r3, #1
     702:	6013      	str	r3, [r2, #0]
     704:	bd08      	pop	{r3, pc}
     706:	bf00      	nop
     708:	4004803c 	.word	0x4004803c
     70c:	4002c000 	.word	0x4002c000
     710:	38010001 	.word	0x38010001

00000714 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     714:	b5f0      	push	{r4, r5, r6, r7, lr}
     716:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     718:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     71a:	6805      	ldr	r5, [r0, #0]
     71c:	f88d 3004 	strb.w	r3, [sp, #4]
     720:	f88d 3005 	strb.w	r3, [sp, #5]
     724:	f88d 3006 	strb.w	r3, [sp, #6]
     728:	682e      	ldr	r6, [r5, #0]
     72a:	4a37      	ldr	r2, [pc, #220]	; (808 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     72c:	f88d 3008 	strb.w	r3, [sp, #8]
     730:	4296      	cmp	r6, r2
     732:	f88d 3009 	strb.w	r3, [sp, #9]
     736:	f88d 300a 	strb.w	r3, [sp, #10]
     73a:	d15f      	bne.n	7fc <CLEDController::clearLeds(int)+0xe8>
     73c:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     73e:	9104      	str	r1, [sp, #16]
     740:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     742:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     744:	a801      	add	r0, sp, #4
     746:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     748:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     74c:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     750:	f88d 3020 	strb.w	r3, [sp, #32]
     754:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     756:	d015      	beq.n	784 <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     758:	f88d 301d 	strb.w	r3, [sp, #29]
     75c:	f88d 301c 	strb.w	r3, [sp, #28]
     760:	f88d 301b 	strb.w	r3, [sp, #27]
     764:	f88d 301a 	strb.w	r3, [sp, #26]
     768:	f88d 3019 	strb.w	r3, [sp, #25]
     76c:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     770:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     772:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     774:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     778:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     77a:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     77c:	a903      	add	r1, sp, #12
     77e:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     780:	b00b      	add	sp, #44	; 0x2c
     782:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     784:	4a21      	ldr	r2, [pc, #132]	; (80c <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     786:	7813      	ldrb	r3, [r2, #0]
     788:	3301      	adds	r3, #1
     78a:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     78e:	f013 0f01 	tst.w	r3, #1
     792:	bf14      	ite	ne
     794:	2180      	movne	r1, #128	; 0x80
     796:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     798:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     79a:	079a      	lsls	r2, r3, #30
     79c:	bf44      	itt	mi
     79e:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     7a2:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     7a4:	075b      	lsls	r3, r3, #29
     7a6:	bf48      	it	mi
     7a8:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     7ac:	3110      	adds	r1, #16
     7ae:	2200      	movs	r2, #0
     7b0:	b2c9      	uxtb	r1, r1
     7b2:	f10d 031b 	add.w	r3, sp, #27
     7b6:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7ba:	f44f 7e80 	mov.w	lr, #256	; 0x100
     7be:	b1aa      	cbz	r2, 7ec <CLEDController::clearLeds(int)+0xd8>
     7c0:	fb9e f2f2 	sdiv	r2, lr, r2
     7c4:	b2d2      	uxtb	r2, r2
     7c6:	1c50      	adds	r0, r2, #1
     7c8:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     7ca:	fb00 1501 	mla	r5, r0, r1, r1
     7ce:	122d      	asrs	r5, r5, #8
     7d0:	7018      	strb	r0, [r3, #0]
     7d2:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     7d4:	b105      	cbz	r5, 7d8 <CLEDController::clearLeds(int)+0xc4>
     7d6:	3e01      	subs	r6, #1
     7d8:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     7dc:	b100      	cbz	r0, 7e0 <CLEDController::clearLeds(int)+0xcc>
     7de:	701a      	strb	r2, [r3, #0]
     7e0:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     7e2:	429f      	cmp	r7, r3
     7e4:	d008      	beq.n	7f8 <CLEDController::clearLeds(int)+0xe4>
     7e6:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7e8:	2a00      	cmp	r2, #0
     7ea:	d1e9      	bne.n	7c0 <CLEDController::clearLeds(int)+0xac>
     7ec:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     7ee:	f803 2c03 	strb.w	r2, [r3, #-3]
     7f2:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     7f4:	429f      	cmp	r7, r3
     7f6:	d1f6      	bne.n	7e6 <CLEDController::clearLeds(int)+0xd2>
     7f8:	6825      	ldr	r5, [r4, #0]
     7fa:	e7b9      	b.n	770 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     7fc:	460a      	mov	r2, r1
     7fe:	ab02      	add	r3, sp, #8
     800:	a901      	add	r1, sp, #4
     802:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     804:	b00b      	add	sp, #44	; 0x2c
     806:	bdf0      	pop	{r4, r5, r6, r7, pc}
     808:	00002139 	.word	0x00002139
     80c:	1fff8844 	.word	0x1fff8844

00000810 <all_shelves()>:
		stay_on_shelf = 0;
		current_shelf = random8(4);
	}
}

void all_shelves() {
     810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
     814:	4e55      	ldr	r6, [pc, #340]	; (96c <all_shelves()+0x15c>)
     816:	7833      	ldrb	r3, [r6, #0]
		stay_on_shelf = 0;
		current_shelf = random8(4);
	}
}

void all_shelves() {
     818:	b083      	sub	sp, #12
	if (mode_change) {
     81a:	2b00      	cmp	r3, #0
     81c:	d164      	bne.n	8e8 <all_shelves()+0xd8>
     81e:	4d54      	ldr	r5, [pc, #336]	; (970 <all_shelves()+0x160>)
     820:	f8df b15c 	ldr.w	fp, [pc, #348]	; 980 <all_shelves()+0x170>
     824:	f8df 8174 	ldr.w	r8, [pc, #372]	; 99c <all_shelves()+0x18c>
     828:	4c52      	ldr	r4, [pc, #328]	; (974 <all_shelves()+0x164>)
		stay_on_shelf_time = random16(100, 1000);
		fade_in = random8(2);
		Serial.println("all_shelves");
	}

	if (fade_in) {
     82a:	7823      	ldrb	r3, [r4, #0]
     82c:	b173      	cbz	r3, 84c <all_shelves()+0x3c>
		if (stay_on_shelf <= stay_on_shelf_time / 2) {
     82e:	f8b8 4000 	ldrh.w	r4, [r8]
     832:	f8bb 0000 	ldrh.w	r0, [fp]
     836:	0863      	lsrs	r3, r4, #1
     838:	4283      	cmp	r3, r0
     83a:	d33d      	bcc.n	8b8 <all_shelves()+0xa8>
			this_bright = 255 * stay_on_shelf / (stay_on_shelf_time / 2);
     83c:	4e4e      	ldr	r6, [pc, #312]	; (978 <all_shelves()+0x168>)
     83e:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
     842:	fb90 f3f3 	sdiv	r3, r0, r3
     846:	b2db      	uxtb	r3, r3
     848:	7033      	strb	r3, [r6, #0]
     84a:	e002      	b.n	852 <all_shelves()+0x42>
		}
		else {
			this_bright = (255 * 2) * (1 - (float)stay_on_shelf / stay_on_shelf_time);
		}
	}
	else { this_bright = 255; }
     84c:	4e4a      	ldr	r6, [pc, #296]	; (978 <all_shelves()+0x168>)
     84e:	23ff      	movs	r3, #255	; 0xff
     850:	7033      	strb	r3, [r6, #0]
     852:	4c4a      	ldr	r4, [pc, #296]	; (97c <all_shelves()+0x16c>)
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     854:	f04f 09ff 	mov.w	r9, #255	; 0xff
     858:	f504 7a0d 	add.w	sl, r4, #564	; 0x234
     85c:	e000      	b.n	860 <all_shelves()+0x50>
     85e:	7833      	ldrb	r3, [r6, #0]
     860:	782a      	ldrb	r2, [r5, #0]
     862:	f88d 9005 	strb.w	r9, [sp, #5]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     866:	4621      	mov	r1, r4
     868:	a801      	add	r0, sp, #4
     86a:	3403      	adds	r4, #3
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     86c:	f88d 3006 	strb.w	r3, [sp, #6]
     870:	f88d 2004 	strb.w	r2, [sp, #4]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     874:	f003 fd7a 	bl	436c <hsv2rgb_rainbow(CHSV const&, CRGB&)>

	for (int i = 0; i < NUM_LEDS; i++) {
     878:	4554      	cmp	r4, sl
		leds[i] = CHSV(this_index, 255, this_bright);
     87a:	4f3d      	ldr	r7, [pc, #244]	; (970 <all_shelves()+0x160>)
			this_bright = (255 * 2) * (1 - (float)stay_on_shelf / stay_on_shelf_time);
		}
	}
	else { this_bright = 255; }

	for (int i = 0; i < NUM_LEDS; i++) {
     87c:	d1ef      	bne.n	85e <all_shelves()+0x4e>
		leds[i] = CHSV(this_index, 255, this_bright);
	}

	if (stay_on_shelf++ == stay_on_shelf_time) {
     87e:	f8bb 3000 	ldrh.w	r3, [fp]
     882:	f8b8 2000 	ldrh.w	r2, [r8]
     886:	483e      	ldr	r0, [pc, #248]	; (980 <all_shelves()+0x170>)
     888:	1c59      	adds	r1, r3, #1
     88a:	429a      	cmp	r2, r3
     88c:	f8ab 1000 	strh.w	r1, [fp]
     890:	d10f      	bne.n	8b2 <all_shelves()+0xa2>
     892:	4a3c      	ldr	r2, [pc, #240]	; (984 <all_shelves()+0x174>)
     894:	8813      	ldrh	r3, [r2, #0]
     896:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     89a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     89e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     8a2:	3319      	adds	r3, #25
     8a4:	b29b      	uxth	r3, r3
		stay_on_shelf = 0;
		this_index = random8();
     8a6:	eb03 2413 	add.w	r4, r3, r3, lsr #8
	for (int i = 0; i < NUM_LEDS; i++) {
		leds[i] = CHSV(this_index, 255, this_bright);
	}

	if (stay_on_shelf++ == stay_on_shelf_time) {
		stay_on_shelf = 0;
     8aa:	2100      	movs	r1, #0
     8ac:	8013      	strh	r3, [r2, #0]
		this_index = random8();
     8ae:	703c      	strb	r4, [r7, #0]
	for (int i = 0; i < NUM_LEDS; i++) {
		leds[i] = CHSV(this_index, 255, this_bright);
	}

	if (stay_on_shelf++ == stay_on_shelf_time) {
		stay_on_shelf = 0;
     8b0:	8001      	strh	r1, [r0, #0]
		this_index = random8();
	}
}
     8b2:	b003      	add	sp, #12
     8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fade_in) {
		if (stay_on_shelf <= stay_on_shelf_time / 2) {
			this_bright = 255 * stay_on_shelf / (stay_on_shelf_time / 2);
		}
		else {
			this_bright = (255 * 2) * (1 - (float)stay_on_shelf / stay_on_shelf_time);
     8b8:	f006 f80c 	bl	68d4 <__aeabi_ui2f>
     8bc:	4606      	mov	r6, r0
     8be:	4620      	mov	r0, r4
     8c0:	f006 f80c 	bl	68dc <__aeabi_i2f>
     8c4:	4601      	mov	r1, r0
     8c6:	4630      	mov	r0, r6
     8c8:	f006 f910 	bl	6aec <__aeabi_fdiv>
     8cc:	4601      	mov	r1, r0
     8ce:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
     8d2:	f005 ff4d 	bl	6770 <__aeabi_fsub>
     8d6:	492c      	ldr	r1, [pc, #176]	; (988 <all_shelves()+0x178>)
     8d8:	4e27      	ldr	r6, [pc, #156]	; (978 <all_shelves()+0x168>)
     8da:	f006 f853 	bl	6984 <__aeabi_fmul>
     8de:	f006 f9a1 	bl	6c24 <__aeabi_f2uiz>
     8e2:	b2c3      	uxtb	r3, r0
     8e4:	7033      	strb	r3, [r6, #0]
     8e6:	e7b4      	b.n	852 <all_shelves()+0x42>
     8e8:	4826      	ldr	r0, [pc, #152]	; (984 <all_shelves()+0x174>)
void all_shelves() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_index = random8();
     8ea:	4d21      	ldr	r5, [pc, #132]	; (970 <all_shelves()+0x160>)
     8ec:	8803      	ldrh	r3, [r0, #0]
		stay_on_shelf = 0;
		stay_on_shelf_time = random16(100, 1000);
		fade_in = random8(2);
     8ee:	4c21      	ldr	r4, [pc, #132]	; (974 <all_shelves()+0x164>)
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_index = random8();
		stay_on_shelf = 0;
		stay_on_shelf_time = random16(100, 1000);
     8f0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 99c <all_shelves()+0x18c>
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_index = random8();
		stay_on_shelf = 0;
     8f4:	f8df b088 	ldr.w	fp, [pc, #136]	; 980 <all_shelves()+0x170>
     8f8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     8fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     900:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     904:	3319      	adds	r3, #25
     906:	b29b      	uxth	r3, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     908:	eb03 2143 	add.w	r1, r3, r3, lsl #9
     90c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     910:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
     914:	3119      	adds	r1, #25
     916:	b289      	uxth	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     918:	eb01 2241 	add.w	r2, r1, r1, lsl #9
     91c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
     920:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
		stay_on_shelf_time = random16(100, 1000);
     924:	f44f 7761 	mov.w	r7, #900	; 0x384
     928:	3219      	adds	r2, #25
     92a:	b292      	uxth	r2, r2
     92c:	fb07 f101 	mul.w	r1, r7, r1
     930:	8002      	strh	r2, [r0, #0]
void all_shelves() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_index = random8();
     932:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     936:	eb02 2212 	add.w	r2, r2, r2, lsr #8
		stay_on_shelf = 0;
		stay_on_shelf_time = random16(100, 1000);
     93a:	0c09      	lsrs	r1, r1, #16
void all_shelves() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
		this_index = random8();
     93c:	702b      	strb	r3, [r5, #0]
		stay_on_shelf = 0;
		stay_on_shelf_time = random16(100, 1000);
     93e:	3164      	adds	r1, #100	; 0x64
		fade_in = random8(2);
     940:	f3c2 13c0 	ubfx	r3, r2, #7, #1
}

void all_shelves() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
     944:	4f11      	ldr	r7, [pc, #68]	; (98c <all_shelves()+0x17c>)
		use_palette = 0;
		this_index = random8();
		stay_on_shelf = 0;
		stay_on_shelf_time = random16(100, 1000);
     946:	f8a8 1000 	strh.w	r1, [r8]
		fade_in = random8(2);
     94a:	7023      	strb	r3, [r4, #0]

void all_shelves() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		use_palette = 0;
     94c:	4910      	ldr	r1, [pc, #64]	; (990 <all_shelves()+0x180>)
     94e:	4811      	ldr	r0, [pc, #68]	; (994 <all_shelves()+0x184>)
}

void all_shelves() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
     950:	230a      	movs	r3, #10
     952:	603b      	str	r3, [r7, #0]
	}
}

void all_shelves() {
	if (mode_change) {
		mode_change = 0;
     954:	2300      	movs	r3, #0
		this_delay = 10;
		use_palette = 0;
     956:	700b      	strb	r3, [r1, #0]
     958:	210b      	movs	r1, #11
	}
}

void all_shelves() {
	if (mode_change) {
		mode_change = 0;
     95a:	7033      	strb	r3, [r6, #0]
		this_delay = 10;
		use_palette = 0;
		this_index = random8();
		stay_on_shelf = 0;
     95c:	f8ab 3000 	strh.w	r3, [fp]
     960:	f005 fa34 	bl	5dcc <usb_serial_write>
     964:	480c      	ldr	r0, [pc, #48]	; (998 <all_shelves()+0x188>)
     966:	f005 fc35 	bl	61d4 <Print::println()>
     96a:	e75e      	b.n	82a <all_shelves()+0x1a>
     96c:	1fff8724 	.word	0x1fff8724
     970:	1fff8b24 	.word	0x1fff8b24
     974:	1fff8bf5 	.word	0x1fff8bf5
     978:	1fff8726 	.word	0x1fff8726
     97c:	1fff8898 	.word	0x1fff8898
     980:	1fff8b26 	.word	0x1fff8b26
     984:	1fff876c 	.word	0x1fff876c
     988:	43ff0000 	.word	0x43ff0000
     98c:	1fff8720 	.word	0x1fff8720
     990:	1fff871e 	.word	0x1fff871e
     994:	00006ed4 	.word	0x00006ed4
     998:	1fff8774 	.word	0x1fff8774
     99c:	1fff8eb4 	.word	0x1fff8eb4

000009a0 <rainbow_march()>:
 * this_rot
 * this_dir
 */


void rainbow_march() {
     9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (mode_change) {
     9a4:	4d46      	ldr	r5, [pc, #280]	; (ac0 <rainbow_march()+0x120>)
     9a6:	782b      	ldrb	r3, [r5, #0]
     9a8:	2b00      	cmp	r3, #0
     9aa:	d139      	bne.n	a20 <rainbow_march()+0x80>
     9ac:	f8df 913c 	ldr.w	r9, [pc, #316]	; aec <rainbow_march()+0x14c>
     9b0:	f8df 813c 	ldr.w	r8, [pc, #316]	; af0 <rainbow_march()+0x150>
     9b4:	4f43      	ldr	r7, [pc, #268]	; (ac4 <rainbow_march()+0x124>)
     9b6:	4c44      	ldr	r4, [pc, #272]	; (ac8 <rainbow_march()+0x128>)
		this_diff = random8(1, 9);
		this_delay = 10;
		use_all_shelves = random8(2);
		Serial.println("rainbow_march");
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
     9b8:	f899 3000 	ldrb.w	r3, [r9]
     9bc:	4e43      	ldr	r6, [pc, #268]	; (acc <rainbow_march()+0x12c>)
     9be:	b9fb      	cbnz	r3, a00 <rainbow_march()+0x60>
     9c0:	f898 3000 	ldrb.w	r3, [r8]
     9c4:	7832      	ldrb	r2, [r6, #0]
     9c6:	441a      	add	r2, r3
	if (!use_all_shelves) {
     9c8:	7823      	ldrb	r3, [r4, #0]
		this_diff = random8(1, 9);
		this_delay = 10;
		use_all_shelves = random8(2);
		Serial.println("rainbow_march");
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
     9ca:	b2d2      	uxtb	r2, r2
     9cc:	7032      	strb	r2, [r6, #0]
	if (!use_all_shelves) {
     9ce:	b303      	cbz	r3, a12 <rainbow_march()+0x72>
     9d0:	4d3f      	ldr	r5, [pc, #252]	; (ad0 <rainbow_march()+0x130>)
     9d2:	f8df 9100 	ldr.w	r9, [pc, #256]	; ad4 <rainbow_march()+0x134>
     9d6:	f8df 811c 	ldr.w	r8, [pc, #284]	; af4 <rainbow_march()+0x154>
     9da:	2400      	movs	r4, #0
		fill_rainbow(leds, NUM_LEDS, this_index, this_diff);
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			fill_rainbow(&(leds[shelf[s][0]]), shelf_num_leds[s], this_index, this_diff);
     9dc:	f818 0004 	ldrb.w	r0, [r8, r4]
     9e0:	783b      	ldrb	r3, [r7, #0]
     9e2:	f815 1b01 	ldrb.w	r1, [r5], #1
     9e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     9ea:	4448      	add	r0, r9
     9ec:	3441      	adds	r4, #65	; 0x41
     9ee:	f003 fa6f 	bl	3ed0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
	if (!use_all_shelves) {
		fill_rainbow(leds, NUM_LEDS, this_index, this_diff);
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
     9f2:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
     9f6:	d001      	beq.n	9fc <rainbow_march()+0x5c>
     9f8:	7832      	ldrb	r2, [r6, #0]
     9fa:	e7ef      	b.n	9dc <rainbow_march()+0x3c>
     9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		this_diff = random8(1, 9);
		this_delay = 10;
		use_all_shelves = random8(2);
		Serial.println("rainbow_march");
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
     a00:	7833      	ldrb	r3, [r6, #0]
     a02:	f898 2000 	ldrb.w	r2, [r8]
     a06:	1a9a      	subs	r2, r3, r2
	if (!use_all_shelves) {
     a08:	7823      	ldrb	r3, [r4, #0]
		this_diff = random8(1, 9);
		this_delay = 10;
		use_all_shelves = random8(2);
		Serial.println("rainbow_march");
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
     a0a:	b2d2      	uxtb	r2, r2
     a0c:	7032      	strb	r2, [r6, #0]
	if (!use_all_shelves) {
     a0e:	2b00      	cmp	r3, #0
     a10:	d1de      	bne.n	9d0 <rainbow_march()+0x30>
		fill_rainbow(leds, NUM_LEDS, this_index, this_diff);
     a12:	783b      	ldrb	r3, [r7, #0]
     a14:	482f      	ldr	r0, [pc, #188]	; (ad4 <rainbow_march()+0x134>)
     a16:	21bc      	movs	r1, #188	; 0xbc
	else {
		for (uint8_t s = 0; s < 4; s++) {
			fill_rainbow(&(leds[shelf[s][0]]), shelf_num_leds[s], this_index, this_diff);
		}
	}
}
     a18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		use_all_shelves = random8(2);
		Serial.println("rainbow_march");
	}
	if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
	if (!use_all_shelves) {
		fill_rainbow(leds, NUM_LEDS, this_index, this_diff);
     a1c:	f003 ba58 	b.w	3ed0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     a20:	482d      	ldr	r0, [pc, #180]	; (ad8 <rainbow_march()+0x138>)
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 9);
     a22:	4f28      	ldr	r7, [pc, #160]	; (ac4 <rainbow_march()+0x124>)
     a24:	8803      	ldrh	r3, [r0, #0]
void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
     a26:	f8df 80c8 	ldr.w	r8, [pc, #200]	; af0 <rainbow_march()+0x150>

void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
     a2a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; aec <rainbow_march()+0x14c>
		this_rot = random8(1, 5);
		this_diff = random8(1, 9);
		this_delay = 10;
		use_all_shelves = random8(2);
     a2e:	4c26      	ldr	r4, [pc, #152]	; (ac8 <rainbow_march()+0x128>)
     a30:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     a34:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     a38:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     a3c:	3319      	adds	r3, #25
     a3e:	b29b      	uxth	r3, r3
     a40:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     a44:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     a48:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
     a4c:	3219      	adds	r2, #25
     a4e:	b292      	uxth	r2, r2
     a50:	eb02 2142 	add.w	r1, r2, r2, lsl #9
     a54:	eb02 0181 	add.w	r1, r2, r1, lsl #2
     a58:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
     a5c:	3119      	adds	r1, #25
     a5e:	b289      	uxth	r1, r1
     a60:	eb01 2641 	add.w	r6, r1, r1, lsl #9
     a64:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     a68:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     a6c:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     a70:	eb02 2212 	add.w	r2, r2, r2, lsr #8
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 9);
     a74:	f3c1 1142 	ubfx	r1, r1, #5, #3
     a78:	3101      	adds	r1, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     a7a:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     a7c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
     a80:	f3c2 1281 	ubfx	r2, r2, #6, #2
		this_diff = random8(1, 9);
     a84:	7039      	strb	r1, [r7, #0]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     a86:	b2b6      	uxth	r6, r6

void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
     a88:	f3c3 13c0 	ubfx	r3, r3, #7, #1
		this_rot = random8(1, 5);
     a8c:	3201      	adds	r2, #1


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
     a8e:	4913      	ldr	r1, [pc, #76]	; (adc <rainbow_march()+0x13c>)
     a90:	8006      	strh	r6, [r0, #0]
		this_dir = random8(2);
		this_rot = random8(1, 5);
     a92:	f888 2000 	strb.w	r2, [r8]

void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
     a96:	f889 3000 	strb.w	r3, [r9]
		this_rot = random8(1, 5);
		this_diff = random8(1, 9);
		this_delay = 10;
     a9a:	4a11      	ldr	r2, [pc, #68]	; (ae0 <rainbow_march()+0x140>)
     a9c:	4811      	ldr	r0, [pc, #68]	; (ae4 <rainbow_march()+0x144>)
 */


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
     a9e:	2300      	movs	r3, #0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     aa0:	eb06 2616 	add.w	r6, r6, r6, lsr #8
		use_palette = 0;
     aa4:	700b      	strb	r3, [r1, #0]
 */


void rainbow_march() {
	if (mode_change) {
		mode_change = 0;
     aa6:	702b      	strb	r3, [r5, #0]
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 9);
		this_delay = 10;
		use_all_shelves = random8(2);
     aa8:	f3c6 16c0 	ubfx	r6, r6, #7, #1
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 9);
		this_delay = 10;
     aac:	230a      	movs	r3, #10
     aae:	210d      	movs	r1, #13
		use_all_shelves = random8(2);
     ab0:	7026      	strb	r6, [r4, #0]
		mode_change = 0;
		use_palette = 0;
		this_dir = random8(2);
		this_rot = random8(1, 5);
		this_diff = random8(1, 9);
		this_delay = 10;
     ab2:	6013      	str	r3, [r2, #0]
     ab4:	f005 f98a 	bl	5dcc <usb_serial_write>
     ab8:	480b      	ldr	r0, [pc, #44]	; (ae8 <rainbow_march()+0x148>)
     aba:	f005 fb8b 	bl	61d4 <Print::println()>
     abe:	e77b      	b.n	9b8 <rainbow_march()+0x18>
     ac0:	1fff8724 	.word	0x1fff8724
     ac4:	1fff871d 	.word	0x1fff871d
     ac8:	1fff8895 	.word	0x1fff8895
     acc:	1fff8b24 	.word	0x1fff8b24
     ad0:	1fff8768 	.word	0x1fff8768
     ad4:	1fff8898 	.word	0x1fff8898
     ad8:	1fff876c 	.word	0x1fff876c
     adc:	1fff871e 	.word	0x1fff871e
     ae0:	1fff8720 	.word	0x1fff8720
     ae4:	00006ee0 	.word	0x00006ee0
     ae8:	1fff8774 	.word	0x1fff8774
     aec:	1fff8bf4 	.word	0x1fff8bf4
     af0:	1fff8729 	.word	0x1fff8729
     af4:	1fff8eb8 	.word	0x1fff8eb8

00000af8 <full_shelves_palette()>:
		current_shelf = random8(4);
		this_index = random8();
	}
}

void full_shelves_palette() {
     af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
     afc:	4c65      	ldr	r4, [pc, #404]	; (c94 <full_shelves_palette()+0x19c>)
     afe:	7823      	ldrb	r3, [r4, #0]
		current_shelf = random8(4);
		this_index = random8();
	}
}

void full_shelves_palette() {
     b00:	b087      	sub	sp, #28
	if (mode_change) {
     b02:	2b00      	cmp	r3, #0
     b04:	f040 808e 	bne.w	c24 <full_shelves_palette()+0x12c>
     b08:	4b63      	ldr	r3, [pc, #396]	; (c98 <full_shelves_palette()+0x1a0>)
     b0a:	9302      	str	r3, [sp, #8]
     b0c:	4f63      	ldr	r7, [pc, #396]	; (c9c <full_shelves_palette()+0x1a4>)
     b0e:	4b64      	ldr	r3, [pc, #400]	; (ca0 <full_shelves_palette()+0x1a8>)
     b10:	9303      	str	r3, [sp, #12]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     b12:	2300      	movs	r3, #0
		current_shelf = random8(4);
		stay_on_shelf = 0;
		stay_on_shelf_time = random16(50, 1000);
		Serial.println("full_shelves_palette");
	}
	fill_solid(leds, NUM_LEDS, CRGB::Black);
     b14:	aa05      	add	r2, sp, #20
     b16:	21bc      	movs	r1, #188	; 0xbc
     b18:	4862      	ldr	r0, [pc, #392]	; (ca4 <full_shelves_palette()+0x1ac>)
     b1a:	f88d 3014 	strb.w	r3, [sp, #20]
     b1e:	f88d 3015 	strb.w	r3, [sp, #21]
     b22:	f88d 3016 	strb.w	r3, [sp, #22]
     b26:	f003 f9c3 	bl	3eb0 <fill_solid(CRGB*, int, CRGB const&)>

	if (stay_on_shelf <= stay_on_shelf_time / 2) {
     b2a:	9b03      	ldr	r3, [sp, #12]
     b2c:	881d      	ldrh	r5, [r3, #0]
     b2e:	9b02      	ldr	r3, [sp, #8]
     b30:	881c      	ldrh	r4, [r3, #0]
     b32:	086b      	lsrs	r3, r5, #1
     b34:	42a3      	cmp	r3, r4
     b36:	d345      	bcc.n	bc4 <full_shelves_palette()+0xcc>
		this_bright = 255 * stay_on_shelf / (stay_on_shelf_time / 2);
     b38:	f8df 9188 	ldr.w	r9, [pc, #392]	; cc4 <full_shelves_palette()+0x1cc>
     b3c:	ebc4 2204 	rsb	r2, r4, r4, lsl #8
     b40:	fb92 f3f3 	sdiv	r3, r2, r3
     b44:	f889 3000 	strb.w	r3, [r9]
	}
	else {
		this_bright = (255 * 2) * (1 - (float)stay_on_shelf / stay_on_shelf_time);
	}

	for (uint8_t i = 0; i < shelf_num_leds[current_shelf]; i++) {
     b48:	783b      	ldrb	r3, [r7, #0]
     b4a:	f8df 817c 	ldr.w	r8, [pc, #380]	; cc8 <full_shelves_palette()+0x1d0>
     b4e:	f818 2003 	ldrb.w	r2, [r8, r3]
     b52:	b37a      	cbz	r2, bb4 <full_shelves_palette()+0xbc>
     b54:	f8df b174 	ldr.w	fp, [pc, #372]	; ccc <full_shelves_palette()+0x1d4>
     b58:	4e52      	ldr	r6, [pc, #328]	; (ca4 <full_shelves_palette()+0x1ac>)
     b5a:	2500      	movs	r5, #0
		leds[shelf[current_shelf][i]] = ColorFromPalette(current_palette, i * 255 / shelf_num_leds[current_shelf], this_bright);
     b5c:	f04f 0a01 	mov.w	sl, #1
     b60:	eb03 1383 	add.w	r3, r3, r3, lsl #6
     b64:	eb0b 0103 	add.w	r1, fp, r3
     b68:	a805      	add	r0, sp, #20
     b6a:	5d4c      	ldrb	r4, [r1, r5]
     b6c:	f899 3000 	ldrb.w	r3, [r9]
     b70:	f8cd a000 	str.w	sl, [sp]
     b74:	ebc5 2105 	rsb	r1, r5, r5, lsl #8
     b78:	fb91 f2f2 	sdiv	r2, r1, r2
     b7c:	494a      	ldr	r1, [pc, #296]	; (ca8 <full_shelves_palette()+0x1b0>)
     b7e:	b2d2      	uxtb	r2, r2
     b80:	f003 faaa 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
	}
	else {
		this_bright = (255 * 2) * (1 - (float)stay_on_shelf / stay_on_shelf_time);
	}

	for (uint8_t i = 0; i < shelf_num_leds[current_shelf]; i++) {
     b84:	783b      	ldrb	r3, [r7, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b86:	f89d e014 	ldrb.w	lr, [sp, #20]
     b8a:	f818 2003 	ldrb.w	r2, [r8, r3]
        g = rhs.g;
     b8e:	f89d 0015 	ldrb.w	r0, [sp, #21]
        b = rhs.b;
     b92:	f89d 1016 	ldrb.w	r1, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b96:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     b9a:	3501      	adds	r5, #1
     b9c:	f806 e004 	strb.w	lr, [r6, r4]
     ba0:	b2ed      	uxtb	r5, r5
     ba2:	4434      	add	r4, r6
     ba4:	42aa      	cmp	r2, r5
        g = rhs.g;
     ba6:	7060      	strb	r0, [r4, #1]
        b = rhs.b;
     ba8:	70a1      	strb	r1, [r4, #2]
     baa:	d8d9      	bhi.n	b60 <full_shelves_palette()+0x68>
     bac:	9b03      	ldr	r3, [sp, #12]
     bae:	881d      	ldrh	r5, [r3, #0]
     bb0:	9b02      	ldr	r3, [sp, #8]
     bb2:	881c      	ldrh	r4, [r3, #0]
		leds[shelf[current_shelf][i]] = ColorFromPalette(current_palette, i * 255 / shelf_num_leds[current_shelf], this_bright);
	}

	if (stay_on_shelf++ == stay_on_shelf_time) {
     bb4:	42ac      	cmp	r4, r5
     bb6:	d01f      	beq.n	bf8 <full_shelves_palette()+0x100>
     bb8:	9b02      	ldr	r3, [sp, #8]
     bba:	3401      	adds	r4, #1
     bbc:	801c      	strh	r4, [r3, #0]
		stay_on_shelf = 0;
		current_shelf = random8(4);
	}
}
     bbe:	b007      	add	sp, #28
     bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	if (stay_on_shelf <= stay_on_shelf_time / 2) {
		this_bright = 255 * stay_on_shelf / (stay_on_shelf_time / 2);
	}
	else {
		this_bright = (255 * 2) * (1 - (float)stay_on_shelf / stay_on_shelf_time);
     bc4:	4620      	mov	r0, r4
     bc6:	f005 fe85 	bl	68d4 <__aeabi_ui2f>
     bca:	4606      	mov	r6, r0
     bcc:	4628      	mov	r0, r5
     bce:	f005 fe85 	bl	68dc <__aeabi_i2f>
     bd2:	4601      	mov	r1, r0
     bd4:	4630      	mov	r0, r6
     bd6:	f005 ff89 	bl	6aec <__aeabi_fdiv>
     bda:	4601      	mov	r1, r0
     bdc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
     be0:	f005 fdc6 	bl	6770 <__aeabi_fsub>
     be4:	4931      	ldr	r1, [pc, #196]	; (cac <full_shelves_palette()+0x1b4>)
     be6:	f8df 90dc 	ldr.w	r9, [pc, #220]	; cc4 <full_shelves_palette()+0x1cc>
     bea:	f005 fecb 	bl	6984 <__aeabi_fmul>
     bee:	f006 f819 	bl	6c24 <__aeabi_f2uiz>
     bf2:	f889 0000 	strb.w	r0, [r9]
     bf6:	e7a7      	b.n	b48 <full_shelves_palette()+0x50>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     bf8:	492d      	ldr	r1, [pc, #180]	; (cb0 <full_shelves_palette()+0x1b8>)
     bfa:	880b      	ldrh	r3, [r1, #0]
     bfc:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     c00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     c04:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     c08:	3319      	adds	r3, #25
     c0a:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     c0c:	eb03 2213 	add.w	r2, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     c10:	800b      	strh	r3, [r1, #0]
	for (uint8_t i = 0; i < shelf_num_leds[current_shelf]; i++) {
		leds[shelf[current_shelf][i]] = ColorFromPalette(current_palette, i * 255 / shelf_num_leds[current_shelf], this_bright);
	}

	if (stay_on_shelf++ == stay_on_shelf_time) {
		stay_on_shelf = 0;
     c12:	9b02      	ldr	r3, [sp, #8]
		current_shelf = random8(4);
     c14:	f3c2 1281 	ubfx	r2, r2, #6, #2
	for (uint8_t i = 0; i < shelf_num_leds[current_shelf]; i++) {
		leds[shelf[current_shelf][i]] = ColorFromPalette(current_palette, i * 255 / shelf_num_leds[current_shelf], this_bright);
	}

	if (stay_on_shelf++ == stay_on_shelf_time) {
		stay_on_shelf = 0;
     c18:	2000      	movs	r0, #0
		current_shelf = random8(4);
     c1a:	703a      	strb	r2, [r7, #0]
	for (uint8_t i = 0; i < shelf_num_leds[current_shelf]; i++) {
		leds[shelf[current_shelf][i]] = ColorFromPalette(current_palette, i * 255 / shelf_num_leds[current_shelf], this_bright);
	}

	if (stay_on_shelf++ == stay_on_shelf_time) {
		stay_on_shelf = 0;
     c1c:	8018      	strh	r0, [r3, #0]
		current_shelf = random8(4);
	}
}
     c1e:	b007      	add	sp, #28
     c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c24:	4d22      	ldr	r5, [pc, #136]	; (cb0 <full_shelves_palette()+0x1b8>)
		mode_change = 0;
		this_delay = 10;
		use_palette = 1;
		current_shelf = random8(4);
		stay_on_shelf = 0;
		stay_on_shelf_time = random16(50, 1000);
     c26:	4b1e      	ldr	r3, [pc, #120]	; (ca0 <full_shelves_palette()+0x1a8>)
     c28:	9303      	str	r3, [sp, #12]
     c2a:	882b      	ldrh	r3, [r5, #0]
}

void full_shelves_palette() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
     c2c:	4921      	ldr	r1, [pc, #132]	; (cb4 <full_shelves_palette()+0x1bc>)
		use_palette = 1;
		current_shelf = random8(4);
     c2e:	4f1b      	ldr	r7, [pc, #108]	; (c9c <full_shelves_palette()+0x1a4>)

void full_shelves_palette() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		use_palette = 1;
     c30:	4821      	ldr	r0, [pc, #132]	; (cb8 <full_shelves_palette()+0x1c0>)
     c32:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     c36:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     c3a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     c3e:	3319      	adds	r3, #25
     c40:	b29b      	uxth	r3, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     c42:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     c46:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     c4a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
     c4e:	3219      	adds	r2, #25
     c50:	b292      	uxth	r2, r2
		current_shelf = random8(4);
		stay_on_shelf = 0;
		stay_on_shelf_time = random16(50, 1000);
     c52:	f240 36b6 	movw	r6, #950	; 0x3b6
     c56:	fb06 f602 	mul.w	r6, r6, r2
     c5a:	802a      	strh	r2, [r5, #0]
     c5c:	0c36      	lsrs	r6, r6, #16
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		use_palette = 1;
		current_shelf = random8(4);
		stay_on_shelf = 0;
     c5e:	4d0e      	ldr	r5, [pc, #56]	; (c98 <full_shelves_palette()+0x1a0>)
		stay_on_shelf_time = random16(50, 1000);
     c60:	4a0f      	ldr	r2, [pc, #60]	; (ca0 <full_shelves_palette()+0x1a8>)
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		use_palette = 1;
		current_shelf = random8(4);
		stay_on_shelf = 0;
     c62:	9502      	str	r5, [sp, #8]
		stay_on_shelf_time = random16(50, 1000);
     c64:	3632      	adds	r6, #50	; 0x32
}

void full_shelves_palette() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
     c66:	250a      	movs	r5, #10
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     c68:	eb03 2313 	add.w	r3, r3, r3, lsr #8
		use_palette = 1;
		current_shelf = random8(4);
		stay_on_shelf = 0;
		stay_on_shelf_time = random16(50, 1000);
     c6c:	8016      	strh	r6, [r2, #0]
}

void full_shelves_palette() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
     c6e:	600d      	str	r5, [r1, #0]
		use_palette = 1;
     c70:	2201      	movs	r2, #1
		current_shelf = random8(4);
     c72:	f3c3 1381 	ubfx	r3, r3, #6, #2
		stay_on_shelf = 0;
     c76:	4d08      	ldr	r5, [pc, #32]	; (c98 <full_shelves_palette()+0x1a0>)
void full_shelves_palette() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		use_palette = 1;
		current_shelf = random8(4);
     c78:	703b      	strb	r3, [r7, #0]

void full_shelves_palette() {
	if (mode_change) {
		mode_change = 0;
		this_delay = 10;
		use_palette = 1;
     c7a:	7002      	strb	r2, [r0, #0]
	}
}

void full_shelves_palette() {
	if (mode_change) {
		mode_change = 0;
     c7c:	2300      	movs	r3, #0
     c7e:	2114      	movs	r1, #20
     c80:	480e      	ldr	r0, [pc, #56]	; (cbc <full_shelves_palette()+0x1c4>)
		this_delay = 10;
		use_palette = 1;
		current_shelf = random8(4);
		stay_on_shelf = 0;
     c82:	802b      	strh	r3, [r5, #0]
	}
}

void full_shelves_palette() {
	if (mode_change) {
		mode_change = 0;
     c84:	7023      	strb	r3, [r4, #0]
     c86:	f005 f8a1 	bl	5dcc <usb_serial_write>
     c8a:	480d      	ldr	r0, [pc, #52]	; (cc0 <full_shelves_palette()+0x1c8>)
     c8c:	f005 faa2 	bl	61d4 <Print::println()>
     c90:	e73f      	b.n	b12 <full_shelves_palette()+0x1a>
     c92:	bf00      	nop
     c94:	1fff8724 	.word	0x1fff8724
     c98:	1fff8b26 	.word	0x1fff8b26
     c9c:	1fff8cc5 	.word	0x1fff8cc5
     ca0:	1fff8eb4 	.word	0x1fff8eb4
     ca4:	1fff8898 	.word	0x1fff8898
     ca8:	1fff8ae0 	.word	0x1fff8ae0
     cac:	43ff0000 	.word	0x43ff0000
     cb0:	1fff876c 	.word	0x1fff876c
     cb4:	1fff8720 	.word	0x1fff8720
     cb8:	1fff871e 	.word	0x1fff871e
     cbc:	00006ef0 	.word	0x00006ef0
     cc0:	1fff8774 	.word	0x1fff8774
     cc4:	1fff8726 	.word	0x1fff8726
     cc8:	1fff8768 	.word	0x1fff8768
     ccc:	1fff8eb8 	.word	0x1fff8eb8

00000cd0 <rainbow_split()>:
			fill_rainbow(&(leds[shelf[s][0]]), shelf_num_leds[s], this_index, this_diff);
		}
	}
}

void rainbow_split(){
     cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (mode_change){
     cd4:	4d64      	ldr	r5, [pc, #400]	; (e68 <rainbow_split()+0x198>)
     cd6:	782b      	ldrb	r3, [r5, #0]
     cd8:	2b00      	cmp	r3, #0
     cda:	d173      	bne.n	dc4 <rainbow_split()+0xf4>
     cdc:	4f63      	ldr	r7, [pc, #396]	; (e6c <rainbow_split()+0x19c>)
     cde:	4e64      	ldr	r6, [pc, #400]	; (e70 <rainbow_split()+0x1a0>)
     ce0:	f8df 91ac 	ldr.w	r9, [pc, #428]	; e90 <rainbow_split()+0x1c0>
     ce4:	4c63      	ldr	r4, [pc, #396]	; (e74 <rainbow_split()+0x1a4>)
    this_diff = random8(1,9);
    this_delay = 15;
    use_all_shelves = random8(2);
    Serial.println("rainbow_split");
  }
  if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
     ce6:	783b      	ldrb	r3, [r7, #0]
     ce8:	f8df 81a8 	ldr.w	r8, [pc, #424]	; e94 <rainbow_split()+0x1c4>
     cec:	2b00      	cmp	r3, #0
     cee:	d145      	bne.n	d7c <rainbow_split()+0xac>
     cf0:	7833      	ldrb	r3, [r6, #0]
     cf2:	f898 2000 	ldrb.w	r2, [r8]
     cf6:	441a      	add	r2, r3
  if (!use_all_shelves) {
     cf8:	7823      	ldrb	r3, [r4, #0]
    this_diff = random8(1,9);
    this_delay = 15;
    use_all_shelves = random8(2);
    Serial.println("rainbow_split");
  }
  if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
     cfa:	b2d2      	uxtb	r2, r2
     cfc:	f888 2000 	strb.w	r2, [r8]
  if (!use_all_shelves) {
     d00:	2b00      	cmp	r3, #0
     d02:	d045      	beq.n	d90 <rainbow_split()+0xc0>
     d04:	f8df a190 	ldr.w	sl, [pc, #400]	; e98 <rainbow_split()+0x1c8>
     d08:	4f5b      	ldr	r7, [pc, #364]	; (e78 <rainbow_split()+0x1a8>)
     d0a:	4c5c      	ldr	r4, [pc, #368]	; (e7c <rainbow_split()+0x1ac>)
		  leds[NUM_LEDS - 1 - i] = leds[i];
	  }
  }
  else {
	  for (uint8_t s = 0; s < 4; s++) {
		  fill_rainbow(&(leds[shelf[s][0]]), shelf_num_leds[s] / 2, this_index, this_diff); // 0 - 71
     d0c:	4656      	mov	r6, sl
    this_delay = 15;
    use_all_shelves = random8(2);
    Serial.println("rainbow_split");
  }
  if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
  if (!use_all_shelves) {
     d0e:	2500      	movs	r5, #0
		  leds[NUM_LEDS - 1 - i] = leds[i];
	  }
  }
  else {
	  for (uint8_t s = 0; s < 4; s++) {
		  fill_rainbow(&(leds[shelf[s][0]]), shelf_num_leds[s] / 2, this_index, this_diff); // 0 - 71
     d10:	f81a 0005 	ldrb.w	r0, [sl, r5]
     d14:	7839      	ldrb	r1, [r7, #0]
     d16:	f899 3000 	ldrb.w	r3, [r9]
     d1a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     d1e:	4420      	add	r0, r4
     d20:	0849      	lsrs	r1, r1, #1
     d22:	f003 f8d5 	bl	3ed0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
		  for (int i = 0; i < shelf_num_leds[s] / 2; i++) {
     d26:	f817 3b01 	ldrb.w	r3, [r7], #1
     d2a:	ea5f 0e53 	movs.w	lr, r3, lsr #1
     d2e:	d01c      	beq.n	d6a <rainbow_split()+0x9a>
     d30:	18ea      	adds	r2, r5, r3
     d32:	ebce 0e02 	rsb	lr, lr, r2
     d36:	1e68      	subs	r0, r5, #1
     d38:	44b6      	add	lr, r6
     d3a:	18b1      	adds	r1, r6, r2
     d3c:	4430      	add	r0, r6
			  leds[shelf[s][shelf_num_leds[s] - 1 - i]] = leds[shelf[s][i]];
     d3e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
     d42:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     d4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     d4e:	f814 c002 	ldrb.w	ip, [r4, r2]
     d52:	f804 c003 	strb.w	ip, [r4, r3]
     d56:	4422      	add	r2, r4
     d58:	4423      	add	r3, r4
        g = rhs.g;
     d5a:	f892 c001 	ldrb.w	ip, [r2, #1]
     d5e:	f883 c001 	strb.w	ip, [r3, #1]
        b = rhs.b;
     d62:	7892      	ldrb	r2, [r2, #2]
     d64:	709a      	strb	r2, [r3, #2]
	  }
  }
  else {
	  for (uint8_t s = 0; s < 4; s++) {
		  fill_rainbow(&(leds[shelf[s][0]]), shelf_num_leds[s] / 2, this_index, this_diff); // 0 - 71
		  for (int i = 0; i < shelf_num_leds[s] / 2; i++) {
     d66:	4571      	cmp	r1, lr
     d68:	d1e9      	bne.n	d3e <rainbow_split()+0x6e>
     d6a:	3541      	adds	r5, #65	; 0x41
	  for (int i = 0; i < NUM_LEDS / 2; i++) {
		  leds[NUM_LEDS - 1 - i] = leds[i];
	  }
  }
  else {
	  for (uint8_t s = 0; s < 4; s++) {
     d6c:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
     d70:	d002      	beq.n	d78 <rainbow_split()+0xa8>
     d72:	f898 2000 	ldrb.w	r2, [r8]
     d76:	e7cb      	b.n	d10 <rainbow_split()+0x40>
     d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    this_diff = random8(1,9);
    this_delay = 15;
    use_all_shelves = random8(2);
    Serial.println("rainbow_split");
  }
  if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
     d7c:	f898 3000 	ldrb.w	r3, [r8]
     d80:	7832      	ldrb	r2, [r6, #0]
     d82:	1a9a      	subs	r2, r3, r2
  if (!use_all_shelves) {
     d84:	7823      	ldrb	r3, [r4, #0]
    this_diff = random8(1,9);
    this_delay = 15;
    use_all_shelves = random8(2);
    Serial.println("rainbow_split");
  }
  if (this_dir == 0) this_index += this_rot; else this_index -= this_rot;
     d86:	b2d2      	uxtb	r2, r2
     d88:	f888 2000 	strb.w	r2, [r8]
  if (!use_all_shelves) {
     d8c:	2b00      	cmp	r3, #0
     d8e:	d1b9      	bne.n	d04 <rainbow_split()+0x34>
	  fill_rainbow(leds, NUM_LEDS / 2, this_index, this_diff); // 0 - 71
     d90:	f899 3000 	ldrb.w	r3, [r9]
     d94:	4839      	ldr	r0, [pc, #228]	; (e7c <rainbow_split()+0x1ac>)
     d96:	215e      	movs	r1, #94	; 0x5e
     d98:	f003 f89a 	bl	3ed0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
     d9c:	4a37      	ldr	r2, [pc, #220]	; (e7c <rainbow_split()+0x1ac>)
     d9e:	f502 708d 	add.w	r0, r2, #282	; 0x11a
     da2:	4613      	mov	r3, r2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     da4:	7819      	ldrb	r1, [r3, #0]
     da6:	f882 1231 	strb.w	r1, [r2, #561]	; 0x231
        g = rhs.g;
     daa:	7859      	ldrb	r1, [r3, #1]
     dac:	f882 1232 	strb.w	r1, [r2, #562]	; 0x232
        b = rhs.b;
     db0:	7899      	ldrb	r1, [r3, #2]
     db2:	f882 1233 	strb.w	r1, [r2, #563]	; 0x233
     db6:	3303      	adds	r3, #3
	  for (int i = 0; i < NUM_LEDS / 2; i++) {
     db8:	4283      	cmp	r3, r0
     dba:	f1a2 0203 	sub.w	r2, r2, #3
     dbe:	d1f1      	bne.n	da4 <rainbow_split()+0xd4>
     dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     dc4:	482e      	ldr	r0, [pc, #184]	; (e80 <rainbow_split()+0x1b0>)
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,9);
    this_delay = 15;
    use_all_shelves = random8(2);
     dc6:	4c2b      	ldr	r4, [pc, #172]	; (e74 <rainbow_split()+0x1a4>)
     dc8:	8803      	ldrh	r3, [r0, #0]
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,9);
     dca:	f8df 90c4 	ldr.w	r9, [pc, #196]	; e90 <rainbow_split()+0x1c0>
}

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
     dce:	f8df c0cc 	ldr.w	ip, [pc, #204]	; e9c <rainbow_split()+0x1cc>
    this_dir = random8(2);
     dd2:	4f26      	ldr	r7, [pc, #152]	; (e6c <rainbow_split()+0x19c>)
     dd4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     dd8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     ddc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     de0:	3319      	adds	r3, #25
     de2:	b29b      	uxth	r3, r3
     de4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     de8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     dec:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
     df0:	3219      	adds	r2, #25
     df2:	b292      	uxth	r2, r2
     df4:	eb02 2142 	add.w	r1, r2, r2, lsl #9
     df8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
     dfc:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
     e00:	3119      	adds	r1, #25
     e02:	b289      	uxth	r1, r1
     e04:	eb01 2641 	add.w	r6, r1, r1, lsl #9
     e08:	eb01 0686 	add.w	r6, r1, r6, lsl #2
     e0c:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
     e10:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     e12:	eb02 2212 	add.w	r2, r2, r2, lsr #8
     e16:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     e1a:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     e1c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    this_rot = random8(1,5);
     e20:	f3c2 1281 	ubfx	r2, r2, #6, #2
    this_diff = random8(1,9);
     e24:	f3c1 1142 	ubfx	r1, r1, #5, #3

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
     e28:	f3c3 1ec0 	ubfx	lr, r3, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     e2c:	8006      	strh	r6, [r0, #0]
    this_rot = random8(1,5);
     e2e:	1c53      	adds	r3, r2, #1
    this_diff = random8(1,9);
     e30:	1c4a      	adds	r2, r1, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     e32:	eb06 2116 	add.w	r1, r6, r6, lsr #8
void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
     e36:	4e0e      	ldr	r6, [pc, #56]	; (e70 <rainbow_split()+0x1a0>)
    this_diff = random8(1,9);
     e38:	f889 2000 	strb.w	r2, [r9]
void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
     e3c:	7033      	strb	r3, [r6, #0]
    this_diff = random8(1,9);
    this_delay = 15;
    use_all_shelves = random8(2);
     e3e:	f3c1 13c0 	ubfx	r3, r1, #7, #1
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,9);
    this_delay = 15;
     e42:	4a10      	ldr	r2, [pc, #64]	; (e84 <rainbow_split()+0x1b4>)
    use_all_shelves = random8(2);
     e44:	7023      	strb	r3, [r4, #0]
	}
}

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
     e46:	2300      	movs	r3, #0
    use_palette = 0;
     e48:	f88c 3000 	strb.w	r3, [ip]
	}
}

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
     e4c:	702b      	strb	r3, [r5, #0]
     e4e:	210d      	movs	r1, #13
    use_palette = 0;
    this_dir = random8(2);
    this_rot = random8(1,5);
    this_diff = random8(1,9);
    this_delay = 15;
     e50:	230f      	movs	r3, #15
     e52:	480d      	ldr	r0, [pc, #52]	; (e88 <rainbow_split()+0x1b8>)

void rainbow_split(){
  if (mode_change){
    mode_change = 0;
    use_palette = 0;
    this_dir = random8(2);
     e54:	f887 e000 	strb.w	lr, [r7]
    this_rot = random8(1,5);
    this_diff = random8(1,9);
    this_delay = 15;
     e58:	6013      	str	r3, [r2, #0]
     e5a:	f004 ffb7 	bl	5dcc <usb_serial_write>
     e5e:	480b      	ldr	r0, [pc, #44]	; (e8c <rainbow_split()+0x1bc>)
     e60:	f005 f9b8 	bl	61d4 <Print::println()>
     e64:	e73f      	b.n	ce6 <rainbow_split()+0x16>
     e66:	bf00      	nop
     e68:	1fff8724 	.word	0x1fff8724
     e6c:	1fff8bf4 	.word	0x1fff8bf4
     e70:	1fff8729 	.word	0x1fff8729
     e74:	1fff8895 	.word	0x1fff8895
     e78:	1fff8768 	.word	0x1fff8768
     e7c:	1fff8898 	.word	0x1fff8898
     e80:	1fff876c 	.word	0x1fff876c
     e84:	1fff8720 	.word	0x1fff8720
     e88:	00006f08 	.word	0x00006f08
     e8c:	1fff8774 	.word	0x1fff8774
     e90:	1fff871d 	.word	0x1fff871d
     e94:	1fff8b24 	.word	0x1fff8b24
     e98:	1fff8eb8 	.word	0x1fff8eb8
     e9c:	1fff871e 	.word	0x1fff871e

00000ea0 <confetti()>:
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti()
{
     ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
     ea4:	4a68      	ldr	r2, [pc, #416]	; (1048 <confetti()+0x1a8>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     ea6:	4d69      	ldr	r5, [pc, #420]	; (104c <confetti()+0x1ac>)
     ea8:	7813      	ldrb	r3, [r2, #0]
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti()
{
     eaa:	b085      	sub	sp, #20
	if (mode_change) {
     eac:	2b00      	cmp	r3, #0
     eae:	f040 8096 	bne.w	fde <confetti()+0x13e>
     eb2:	4f67      	ldr	r7, [pc, #412]	; (1050 <confetti()+0x1b0>)
     eb4:	4c67      	ldr	r4, [pc, #412]	; (1054 <confetti()+0x1b4>)
		this_delay = 20;
		use_all_shelves = random8(2);
		Serial.println("confetti");
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
     eb6:	4e68      	ldr	r6, [pc, #416]	; (1058 <confetti()+0x1b8>)
     eb8:	783a      	ldrb	r2, [r7, #0]
     eba:	4630      	mov	r0, r6
     ebc:	21bc      	movs	r1, #188	; 0xbc
     ebe:	f003 f8b9 	bl	4034 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	if (!use_all_shelves) {
     ec2:	7823      	ldrb	r3, [r4, #0]
     ec4:	2b00      	cmp	r3, #0
     ec6:	d04d      	beq.n	f64 <confetti()+0xc4>
     ec8:	882b      	ldrh	r3, [r5, #0]
		this_index = random8();
		leds[pos] += ColorFromPalette(current_palette, this_index);
	}
	else {
		uint8_t pos = random8();
		this_index = random8();
     eca:	f8df 9198 	ldr.w	r9, [pc, #408]	; 1064 <confetti()+0x1c4>
     ece:	4f63      	ldr	r7, [pc, #396]	; (105c <confetti()+0x1bc>)
     ed0:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 1078 <confetti()+0x1d8>
     ed4:	eb03 2443 	add.w	r4, r3, r3, lsl #9
     ed8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     edc:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
     ee0:	3419      	adds	r4, #25
     ee2:	b2a4      	uxth	r4, r4
     ee4:	eb04 2344 	add.w	r3, r4, r4, lsl #9
     ee8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     eec:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     ef0:	3319      	adds	r3, #25
     ef2:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     ef4:	eb03 2213 	add.w	r2, r3, r3, lsr #8
     ef8:	b2d2      	uxtb	r2, r2
     efa:	eb04 2414 	add.w	r4, r4, r4, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     efe:	802b      	strh	r3, [r5, #0]
     f00:	b2e4      	uxtb	r4, r4
     f02:	f889 2000 	strb.w	r2, [r9]
     f06:	2500      	movs	r5, #0
		for (uint8_t s = 0; s < 4; s++)	{
			uint8_t scale_pos = scale8(pos, shelf_num_leds[s]);
			leds[shelf[s][scale_pos]] += ColorFromPalette(current_palette, this_index);
     f08:	f04f 0801 	mov.w	r8, #1
	}
	else {
		uint8_t pos = random8();
		this_index = random8();
		for (uint8_t s = 0; s < 4; s++)	{
			uint8_t scale_pos = scale8(pos, shelf_num_leds[s]);
     f0c:	f817 3b01 	ldrb.w	r3, [r7], #1
			leds[shelf[s][scale_pos]] += ColorFromPalette(current_palette, this_index);
     f10:	f8cd 8000 	str.w	r8, [sp]
     f14:	fb03 4304 	mla	r3, r3, r4, r4
     f18:	eb0a 2323 	add.w	r3, sl, r3, asr #8
     f1c:	eb05 1185 	add.w	r1, r5, r5, lsl #6
     f20:	a803      	add	r0, sp, #12
     f22:	f813 b001 	ldrb.w	fp, [r3, r1]
     f26:	494e      	ldr	r1, [pc, #312]	; (1060 <confetti()+0x1c0>)
     f28:	23ff      	movs	r3, #255	; 0xff
     f2a:	f003 f8d5 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     f2e:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
     f32:	18f1      	adds	r1, r6, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     f34:	5cf2      	ldrb	r2, [r6, r3]
     f36:	f89d 000c 	ldrb.w	r0, [sp, #12]
     f3a:	fa82 f250 	uqadd8	r2, r2, r0
     f3e:	54f2      	strb	r2, [r6, r3]
     f40:	f89d 300d 	ldrb.w	r3, [sp, #13]
     f44:	784a      	ldrb	r2, [r1, #1]
     f46:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
     f4a:	704a      	strb	r2, [r1, #1]
     f4c:	788b      	ldrb	r3, [r1, #2]
     f4e:	f89d 200e 	ldrb.w	r2, [sp, #14]
     f52:	fa83 f352 	uqadd8	r3, r3, r2
     f56:	3501      	adds	r5, #1
		leds[pos] += ColorFromPalette(current_palette, this_index);
	}
	else {
		uint8_t pos = random8();
		this_index = random8();
		for (uint8_t s = 0; s < 4; s++)	{
     f58:	2d04      	cmp	r5, #4
        b = qadd8( b, rhs.b);
     f5a:	708b      	strb	r3, [r1, #2]
     f5c:	d03c      	beq.n	fd8 <confetti()+0x138>
     f5e:	f899 2000 	ldrb.w	r2, [r9]
     f62:	e7d3      	b.n	f0c <confetti()+0x6c>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f64:	882b      	ldrh	r3, [r5, #0]
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = random16(NUM_LEDS);
		this_index = random8();
     f66:	4c3f      	ldr	r4, [pc, #252]	; (1064 <confetti()+0x1c4>)
		leds[pos] += ColorFromPalette(current_palette, this_index);
     f68:	493d      	ldr	r1, [pc, #244]	; (1060 <confetti()+0x1c0>)
     f6a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     f6e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     f72:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     f76:	3319      	adds	r3, #25
     f78:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f7a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
     f7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     f82:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
     f86:	3019      	adds	r0, #25
     f88:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     f8a:	eb00 2e10 	add.w	lr, r0, r0, lsr #8
		Serial.println("confetti");
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = random16(NUM_LEDS);
     f8e:	27bc      	movs	r7, #188	; 0xbc
     f90:	fa5f fe8e 	uxtb.w	lr, lr
     f94:	fb07 f303 	mul.w	r3, r7, r3
		this_index = random8();
		leds[pos] += ColorFromPalette(current_palette, this_index);
     f98:	2201      	movs	r2, #1
     f9a:	9200      	str	r2, [sp, #0]
		Serial.println("confetti");
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = random16(NUM_LEDS);
     f9c:	0c1f      	lsrs	r7, r3, #16
		this_index = random8();
		leds[pos] += ColorFromPalette(current_palette, this_index);
     f9e:	4672      	mov	r2, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     fa0:	8028      	strh	r0, [r5, #0]
     fa2:	23ff      	movs	r3, #255	; 0xff
     fa4:	a803      	add	r0, sp, #12
	}
	// random colored speckles that blink in and fade smoothly
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = random16(NUM_LEDS);
		this_index = random8();
     fa6:	f884 e000 	strb.w	lr, [r4]
		leds[pos] += ColorFromPalette(current_palette, this_index);
     faa:	f003 f895 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     fae:	eb07 0347 	add.w	r3, r7, r7, lsl #1
     fb2:	18f1      	adds	r1, r6, r3
     fb4:	5cf2      	ldrb	r2, [r6, r3]
     fb6:	f89d 000c 	ldrb.w	r0, [sp, #12]
     fba:	fa82 f250 	uqadd8	r2, r2, r0
     fbe:	54f2      	strb	r2, [r6, r3]
     fc0:	f89d 300d 	ldrb.w	r3, [sp, #13]
     fc4:	784a      	ldrb	r2, [r1, #1]
     fc6:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
     fca:	704a      	strb	r2, [r1, #1]
     fcc:	788b      	ldrb	r3, [r1, #2]
     fce:	f89d 200e 	ldrb.w	r2, [sp, #14]
     fd2:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
     fd6:	708b      	strb	r3, [r1, #2]
		for (uint8_t s = 0; s < 4; s++)	{
			uint8_t scale_pos = scale8(pos, shelf_num_leds[s]);
			leds[shelf[s][scale_pos]] += ColorFromPalette(current_palette, this_index);
		}
	}
}
     fd8:	b005      	add	sp, #20
     fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     fde:	882b      	ldrh	r3, [r5, #0]
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(10, 48);
		this_delay = 20;
		use_all_shelves = random8(2);
     fe0:	4c1c      	ldr	r4, [pc, #112]	; (1054 <confetti()+0x1b4>)
void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(10, 48);
     fe2:	4f1b      	ldr	r7, [pc, #108]	; (1050 <confetti()+0x1b0>)

void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
     fe4:	4920      	ldr	r1, [pc, #128]	; (1068 <confetti()+0x1c8>)
		this_fade = random8(10, 48);
		this_delay = 20;
     fe6:	4821      	ldr	r0, [pc, #132]	; (106c <confetti()+0x1cc>)
     fe8:	eb03 2643 	add.w	r6, r3, r3, lsl #9
     fec:	eb03 0386 	add.w	r3, r3, r6, lsl #2
     ff0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     ff4:	3319      	adds	r3, #25
     ff6:	b29b      	uxth	r3, r3
     ff8:	eb03 2643 	add.w	r6, r3, r3, lsl #9
     ffc:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    1000:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1004:	eb03 2313 	add.w	r3, r3, r3, lsr #8
void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(10, 48);
    1008:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    100a:	3619      	adds	r6, #25
    100c:	b2b6      	uxth	r6, r6
    100e:	eb03 0ec3 	add.w	lr, r3, r3, lsl #3
    1012:	802e      	strh	r6, [r5, #0]
    1014:	eb03 034e 	add.w	r3, r3, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1018:	eb06 2616 	add.w	r6, r6, r6, lsr #8
		this_delay = 20;
		use_all_shelves = random8(2);
    101c:	f3c6 16c0 	ubfx	r6, r6, #7, #1
void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(10, 48);
    1020:	11db      	asrs	r3, r3, #7
		this_delay = 20;
		use_all_shelves = random8(2);
    1022:	7026      	strb	r6, [r4, #0]

void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    1024:	f04f 0e01 	mov.w	lr, #1
		this_fade = random8(10, 48);
    1028:	330a      	adds	r3, #10
		this_delay = 20;
    102a:	2614      	movs	r6, #20
void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(10, 48);
    102c:	703b      	strb	r3, [r7, #0]

void confetti()
{
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    102e:	f881 e000 	strb.w	lr, [r1]
#define CONFETTI_H

void confetti()
{
	if (mode_change) {
		mode_change = 0;
    1032:	2300      	movs	r3, #0
		use_palette = 1;
		this_fade = random8(10, 48);
		this_delay = 20;
    1034:	6006      	str	r6, [r0, #0]
    1036:	2108      	movs	r1, #8
    1038:	480d      	ldr	r0, [pc, #52]	; (1070 <confetti()+0x1d0>)
#define CONFETTI_H

void confetti()
{
	if (mode_change) {
		mode_change = 0;
    103a:	7013      	strb	r3, [r2, #0]
    103c:	f004 fec6 	bl	5dcc <usb_serial_write>
    1040:	480c      	ldr	r0, [pc, #48]	; (1074 <confetti()+0x1d4>)
    1042:	f005 f8c7 	bl	61d4 <Print::println()>
    1046:	e736      	b.n	eb6 <confetti()+0x16>
    1048:	1fff8724 	.word	0x1fff8724
    104c:	1fff876c 	.word	0x1fff876c
    1050:	1fff871c 	.word	0x1fff871c
    1054:	1fff8895 	.word	0x1fff8895
    1058:	1fff8898 	.word	0x1fff8898
    105c:	1fff8768 	.word	0x1fff8768
    1060:	1fff8ae0 	.word	0x1fff8ae0
    1064:	1fff8b24 	.word	0x1fff8b24
    1068:	1fff871e 	.word	0x1fff871e
    106c:	1fff8720 	.word	0x1fff8720
    1070:	00006f18 	.word	0x00006f18
    1074:	1fff8774 	.word	0x1fff8774
    1078:	1fff8eb8 	.word	0x1fff8eb8

0000107c <full_shelves_fading()>:
		this_index = random8();
	}
}


void full_shelves_fading() {
    107c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    1080:	4c7d      	ldr	r4, [pc, #500]	; (1278 <full_shelves_fading()+0x1fc>)
    1082:	7823      	ldrb	r3, [r4, #0]
		this_index = random8();
	}
}


void full_shelves_fading() {
    1084:	b087      	sub	sp, #28
	if (mode_change) {
    1086:	2b00      	cmp	r3, #0
    1088:	f040 80b0 	bne.w	11ec <full_shelves_fading()+0x170>
    108c:	4b7b      	ldr	r3, [pc, #492]	; (127c <full_shelves_fading()+0x200>)
    108e:	9302      	str	r3, [sp, #8]
    1090:	4f7b      	ldr	r7, [pc, #492]	; (1280 <full_shelves_fading()+0x204>)
    1092:	4b7c      	ldr	r3, [pc, #496]	; (1284 <full_shelves_fading()+0x208>)
    1094:	9303      	str	r3, [sp, #12]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1096:	2300      	movs	r3, #0
		stay_on_shelf_time = random16(50, 500);
		this_index = random8();
		Serial.println("full_shelves_fading");
	}

	fill_solid(leds, NUM_LEDS, CRGB::Black);
    1098:	aa05      	add	r2, sp, #20
    109a:	21bc      	movs	r1, #188	; 0xbc
    109c:	487a      	ldr	r0, [pc, #488]	; (1288 <full_shelves_fading()+0x20c>)
    109e:	f88d 3014 	strb.w	r3, [sp, #20]
    10a2:	f88d 3015 	strb.w	r3, [sp, #21]
    10a6:	f88d 3016 	strb.w	r3, [sp, #22]
    10aa:	f002 ff01 	bl	3eb0 <fill_solid(CRGB*, int, CRGB const&)>

	if (stay_on_shelf <= stay_on_shelf_time / 2) {
    10ae:	9b03      	ldr	r3, [sp, #12]
    10b0:	881d      	ldrh	r5, [r3, #0]
    10b2:	9b02      	ldr	r3, [sp, #8]
    10b4:	881c      	ldrh	r4, [r3, #0]
    10b6:	086b      	lsrs	r3, r5, #1
    10b8:	42a3      	cmp	r3, r4
    10ba:	d35b      	bcc.n	1174 <full_shelves_fading()+0xf8>
		this_bright = 255 * stay_on_shelf / (stay_on_shelf_time / 2);
    10bc:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 12b0 <full_shelves_fading()+0x234>
    10c0:	ebc4 2204 	rsb	r2, r4, r4, lsl #8
    10c4:	fb92 f3f3 	sdiv	r3, r2, r3
    10c8:	f888 3000 	strb.w	r3, [r8]
	}
	else {
		this_bright = (255 * 2) * (1 - (float)stay_on_shelf / stay_on_shelf_time);
	}

	for (uint8_t i = 0; i < shelf_num_leds[current_shelf]; i++){
    10cc:	783b      	ldrb	r3, [r7, #0]
    10ce:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 12b4 <full_shelves_fading()+0x238>
    10d2:	f819 2003 	ldrb.w	r2, [r9, r3]
    10d6:	b362      	cbz	r2, 1132 <full_shelves_fading()+0xb6>
    10d8:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 1298 <full_shelves_fading()+0x21c>
    10dc:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 12b8 <full_shelves_fading()+0x23c>
    10e0:	4e69      	ldr	r6, [pc, #420]	; (1288 <full_shelves_fading()+0x20c>)
    10e2:	2500      	movs	r5, #0
		leds[shelf[current_shelf][i]] = ColorFromPalette(current_palette, this_index, this_bright);
    10e4:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    10e8:	eb0b 0103 	add.w	r1, fp, r3
    10ec:	f89a 2000 	ldrb.w	r2, [sl]
    10f0:	5d4c      	ldrb	r4, [r1, r5]
    10f2:	f898 3000 	ldrb.w	r3, [r8]
    10f6:	2101      	movs	r1, #1
    10f8:	9100      	str	r1, [sp, #0]
    10fa:	a805      	add	r0, sp, #20
    10fc:	4963      	ldr	r1, [pc, #396]	; (128c <full_shelves_fading()+0x210>)
    10fe:	f002 ffeb 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
	}
	else {
		this_bright = (255 * 2) * (1 - (float)stay_on_shelf / stay_on_shelf_time);
	}

	for (uint8_t i = 0; i < shelf_num_leds[current_shelf]; i++){
    1102:	783b      	ldrb	r3, [r7, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1104:	f89d e014 	ldrb.w	lr, [sp, #20]
    1108:	f819 2003 	ldrb.w	r2, [r9, r3]
        g = rhs.g;
    110c:	f89d 0015 	ldrb.w	r0, [sp, #21]
        b = rhs.b;
    1110:	f89d 1016 	ldrb.w	r1, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1114:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1118:	3501      	adds	r5, #1
    111a:	f806 e004 	strb.w	lr, [r6, r4]
    111e:	b2ed      	uxtb	r5, r5
    1120:	4434      	add	r4, r6
    1122:	42aa      	cmp	r2, r5
        g = rhs.g;
    1124:	7060      	strb	r0, [r4, #1]
        b = rhs.b;
    1126:	70a1      	strb	r1, [r4, #2]
    1128:	d8dc      	bhi.n	10e4 <full_shelves_fading()+0x68>
    112a:	9b03      	ldr	r3, [sp, #12]
    112c:	881d      	ldrh	r5, [r3, #0]
    112e:	9b02      	ldr	r3, [sp, #8]
    1130:	881c      	ldrh	r4, [r3, #0]
		leds[shelf[current_shelf][i]] = ColorFromPalette(current_palette, this_index, this_bright);
	}

	if (change_index) {
    1132:	4b57      	ldr	r3, [pc, #348]	; (1290 <full_shelves_fading()+0x214>)
    1134:	781b      	ldrb	r3, [r3, #0]
    1136:	b1ab      	cbz	r3, 1164 <full_shelves_fading()+0xe8>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1138:	4e56      	ldr	r6, [pc, #344]	; (1294 <full_shelves_fading()+0x218>)
		this_index += random8(4, 32);
    113a:	4957      	ldr	r1, [pc, #348]	; (1298 <full_shelves_fading()+0x21c>)
    113c:	8833      	ldrh	r3, [r6, #0]
    113e:	7808      	ldrb	r0, [r1, #0]
    1140:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1144:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1148:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    114c:	3319      	adds	r3, #25
    114e:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1150:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    1154:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1156:	8033      	strh	r3, [r6, #0]
    1158:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    115c:	1d03      	adds	r3, r0, #4
    115e:	eb03 12a2 	add.w	r2, r3, r2, asr #6
    1162:	700a      	strb	r2, [r1, #0]
	}

	if (stay_on_shelf++ == stay_on_shelf_time) {
    1164:	42ac      	cmp	r4, r5
    1166:	d01f      	beq.n	11a8 <full_shelves_fading()+0x12c>
    1168:	9b02      	ldr	r3, [sp, #8]
    116a:	3401      	adds	r4, #1
    116c:	801c      	strh	r4, [r3, #0]
		stay_on_shelf = 0;
		current_shelf = random8(4);
		this_index = random8();
	}
}
    116e:	b007      	add	sp, #28
    1170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	if (stay_on_shelf <= stay_on_shelf_time / 2) {
		this_bright = 255 * stay_on_shelf / (stay_on_shelf_time / 2);
	}
	else {
		this_bright = (255 * 2) * (1 - (float)stay_on_shelf / stay_on_shelf_time);
    1174:	4620      	mov	r0, r4
    1176:	f005 fbad 	bl	68d4 <__aeabi_ui2f>
    117a:	4606      	mov	r6, r0
    117c:	4628      	mov	r0, r5
    117e:	f005 fbad 	bl	68dc <__aeabi_i2f>
    1182:	4601      	mov	r1, r0
    1184:	4630      	mov	r0, r6
    1186:	f005 fcb1 	bl	6aec <__aeabi_fdiv>
    118a:	4601      	mov	r1, r0
    118c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    1190:	f005 faee 	bl	6770 <__aeabi_fsub>
    1194:	4941      	ldr	r1, [pc, #260]	; (129c <full_shelves_fading()+0x220>)
    1196:	f8df 8118 	ldr.w	r8, [pc, #280]	; 12b0 <full_shelves_fading()+0x234>
    119a:	f005 fbf3 	bl	6984 <__aeabi_fmul>
    119e:	f005 fd41 	bl	6c24 <__aeabi_f2uiz>
    11a2:	f888 0000 	strb.w	r0, [r8]
    11a6:	e791      	b.n	10cc <full_shelves_fading()+0x50>
    11a8:	493a      	ldr	r1, [pc, #232]	; (1294 <full_shelves_fading()+0x218>)
	}

	if (stay_on_shelf++ == stay_on_shelf_time) {
		stay_on_shelf = 0;
		current_shelf = random8(4);
		this_index = random8();
    11aa:	483b      	ldr	r0, [pc, #236]	; (1298 <full_shelves_fading()+0x21c>)
    11ac:	880b      	ldrh	r3, [r1, #0]
    11ae:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    11b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    11b6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    11ba:	3319      	adds	r3, #25
    11bc:	b29b      	uxth	r3, r3
    11be:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    11c2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    11c6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    11ca:	eb03 2313 	add.w	r3, r3, r3, lsr #8
		this_index += random8(4, 32);
	}

	if (stay_on_shelf++ == stay_on_shelf_time) {
		stay_on_shelf = 0;
		current_shelf = random8(4);
    11ce:	f3c3 1381 	ubfx	r3, r3, #6, #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    11d2:	3219      	adds	r2, #25
    11d4:	b292      	uxth	r2, r2
    11d6:	703b      	strb	r3, [r7, #0]
	if (change_index) {
		this_index += random8(4, 32);
	}

	if (stay_on_shelf++ == stay_on_shelf_time) {
		stay_on_shelf = 0;
    11d8:	9b02      	ldr	r3, [sp, #8]
    11da:	800a      	strh	r2, [r1, #0]
		current_shelf = random8(4);
		this_index = random8();
    11dc:	eb02 2512 	add.w	r5, r2, r2, lsr #8
	if (change_index) {
		this_index += random8(4, 32);
	}

	if (stay_on_shelf++ == stay_on_shelf_time) {
		stay_on_shelf = 0;
    11e0:	2400      	movs	r4, #0
		current_shelf = random8(4);
		this_index = random8();
    11e2:	7005      	strb	r5, [r0, #0]
	if (change_index) {
		this_index += random8(4, 32);
	}

	if (stay_on_shelf++ == stay_on_shelf_time) {
		stay_on_shelf = 0;
    11e4:	801c      	strh	r4, [r3, #0]
		current_shelf = random8(4);
		this_index = random8();
	}
}
    11e6:	b007      	add	sp, #28
    11e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11ec:	4829      	ldr	r0, [pc, #164]	; (1294 <full_shelves_fading()+0x218>)
		mode_change = 0;
		use_palette = 1;
		this_delay = 10;
		current_shelf = random8(4);
		stay_on_shelf = 0;
		stay_on_shelf_time = random16(50, 500);
    11ee:	4a25      	ldr	r2, [pc, #148]	; (1284 <full_shelves_fading()+0x208>)
    11f0:	8803      	ldrh	r3, [r0, #0]
    11f2:	9203      	str	r2, [sp, #12]
    11f4:	4616      	mov	r6, r2
    11f6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    11fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    11fe:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1202:	3319      	adds	r3, #25
    1204:	b29b      	uxth	r3, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1206:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    120a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    120e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    1212:	3119      	adds	r1, #25
    1214:	b289      	uxth	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1216:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    121a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    121e:	f44f 75e1 	mov.w	r5, #450	; 0x1c2
void full_shelves_fading() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_delay = 10;
		current_shelf = random8(4);
    1222:	4f17      	ldr	r7, [pc, #92]	; (1280 <full_shelves_fading()+0x204>)
		stay_on_shelf = 0;
		stay_on_shelf_time = random16(50, 500);
		this_index = random8();
    1224:	f8df a070 	ldr.w	sl, [pc, #112]	; 1298 <full_shelves_fading()+0x21c>
		mode_change = 0;
		use_palette = 1;
		this_delay = 10;
		current_shelf = random8(4);
		stay_on_shelf = 0;
		stay_on_shelf_time = random16(50, 500);
    1228:	fb05 f101 	mul.w	r1, r5, r1
    122c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1230:	eb03 2313 	add.w	r3, r3, r3, lsr #8
void full_shelves_fading() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_delay = 10;
		current_shelf = random8(4);
    1234:	f3c3 1381 	ubfx	r3, r3, #6, #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1238:	3219      	adds	r2, #25
		stay_on_shelf = 0;
		stay_on_shelf_time = random16(50, 500);
    123a:	0c09      	lsrs	r1, r1, #16
void full_shelves_fading() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_delay = 10;
		current_shelf = random8(4);
    123c:	703b      	strb	r3, [r7, #0]
    123e:	b292      	uxth	r2, r2
		stay_on_shelf = 0;
    1240:	4b0e      	ldr	r3, [pc, #56]	; (127c <full_shelves_fading()+0x200>)
    1242:	8002      	strh	r2, [r0, #0]
		stay_on_shelf_time = random16(50, 500);
    1244:	3132      	adds	r1, #50	; 0x32
    1246:	8031      	strh	r1, [r6, #0]


void full_shelves_fading() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    1248:	4d15      	ldr	r5, [pc, #84]	; (12a0 <full_shelves_fading()+0x224>)
		this_delay = 10;
    124a:	4916      	ldr	r1, [pc, #88]	; (12a4 <full_shelves_fading()+0x228>)
		current_shelf = random8(4);
		stay_on_shelf = 0;
    124c:	9302      	str	r3, [sp, #8]
		stay_on_shelf_time = random16(50, 500);
		this_index = random8();
    124e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_delay = 10;
		current_shelf = random8(4);
		stay_on_shelf = 0;
    1252:	461e      	mov	r6, r3
		stay_on_shelf_time = random16(50, 500);
		this_index = random8();
    1254:	f88a 2000 	strb.w	r2, [sl]


void full_shelves_fading() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    1258:	2301      	movs	r3, #1
		this_delay = 10;
    125a:	220a      	movs	r2, #10


void full_shelves_fading() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    125c:	702b      	strb	r3, [r5, #0]
		this_delay = 10;
    125e:	600a      	str	r2, [r1, #0]
}


void full_shelves_fading() {
	if (mode_change) {
		mode_change = 0;
    1260:	2300      	movs	r3, #0
    1262:	2113      	movs	r1, #19
    1264:	4810      	ldr	r0, [pc, #64]	; (12a8 <full_shelves_fading()+0x22c>)
		use_palette = 1;
		this_delay = 10;
		current_shelf = random8(4);
		stay_on_shelf = 0;
    1266:	8033      	strh	r3, [r6, #0]
}


void full_shelves_fading() {
	if (mode_change) {
		mode_change = 0;
    1268:	7023      	strb	r3, [r4, #0]
    126a:	f004 fdaf 	bl	5dcc <usb_serial_write>
    126e:	480f      	ldr	r0, [pc, #60]	; (12ac <full_shelves_fading()+0x230>)
    1270:	f004 ffb0 	bl	61d4 <Print::println()>
    1274:	e70f      	b.n	1096 <full_shelves_fading()+0x1a>
    1276:	bf00      	nop
    1278:	1fff8724 	.word	0x1fff8724
    127c:	1fff8b26 	.word	0x1fff8b26
    1280:	1fff8cc5 	.word	0x1fff8cc5
    1284:	1fff8eb4 	.word	0x1fff8eb4
    1288:	1fff8898 	.word	0x1fff8898
    128c:	1fff8ae0 	.word	0x1fff8ae0
    1290:	1fff8cc4 	.word	0x1fff8cc4
    1294:	1fff876c 	.word	0x1fff876c
    1298:	1fff8b24 	.word	0x1fff8b24
    129c:	43ff0000 	.word	0x43ff0000
    12a0:	1fff871e 	.word	0x1fff871e
    12a4:	1fff8720 	.word	0x1fff8720
    12a8:	00006f24 	.word	0x00006f24
    12ac:	1fff8774 	.word	0x1fff8774
    12b0:	1fff8726 	.word	0x1fff8726
    12b4:	1fff8768 	.word	0x1fff8768
    12b8:	1fff8eb8 	.word	0x1fff8eb8

000012bc <fire()>:
#ifndef FIRE_H
#define FIRE_H



void fire() {
    12bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    12c0:	4a8e      	ldr	r2, [pc, #568]	; (14fc <fire()+0x240>)
    12c2:	4c8f      	ldr	r4, [pc, #572]	; (1500 <fire()+0x244>)
    12c4:	7813      	ldrb	r3, [r2, #0]
		mode_change = 0;
		sparking = random8(60, 90);
    12c6:	4d8f      	ldr	r5, [pc, #572]	; (1504 <fire()+0x248>)
#ifndef FIRE_H
#define FIRE_H



void fire() {
    12c8:	b085      	sub	sp, #20
	if (mode_change) {
    12ca:	2b00      	cmp	r3, #0
    12cc:	f040 80d2 	bne.w	1474 <fire()+0x1b8>
    12d0:	4b8d      	ldr	r3, [pc, #564]	; (1508 <fire()+0x24c>)
    12d2:	4e8e      	ldr	r6, [pc, #568]	; (150c <fire()+0x250>)
    12d4:	9301      	str	r3, [sp, #4]
    12d6:	7832      	ldrb	r2, [r6, #0]
    12d8:	4e8d      	ldr	r6, [pc, #564]	; (1510 <fire()+0x254>)
    12da:	488e      	ldr	r0, [pc, #568]	; (1514 <fire()+0x258>)
    12dc:	8823      	ldrh	r3, [r4, #0]
    12de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    12e2:	0052      	lsls	r2, r2, #1
    12e4:	fb86 1602 	smull	r1, r6, r6, r2
    12e8:	4416      	add	r6, r2
    12ea:	17d2      	asrs	r2, r2, #31
    12ec:	ebc2 16e6 	rsb	r6, r2, r6, asr #7
    12f0:	3602      	adds	r6, #2
    12f2:	b2f6      	uxtb	r6, r6
    12f4:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
    12f8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    12fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1300:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1304:	3319      	adds	r3, #25
    1306:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1308:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    130c:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    1310:	b2d2      	uxtb	r2, r2
    1312:	fb12 f206 	smulbb	r2, r2, r6
    1316:	eba1 2212 	sub.w	r2, r1, r2, lsr #8
		// Array of temperature readings at each simulation cell
		static byte heat[NUM_LEDS];

		// Step 1.  Cool down every cell a little
		for (int i = 0; i < NUM_LEDS; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
    131a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	}
		// Array of temperature readings at each simulation cell
		static byte heat[NUM_LEDS];

		// Step 1.  Cool down every cell a little
		for (int i = 0; i < NUM_LEDS; i++) {
    131e:	4287      	cmp	r7, r0
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
    1320:	7002      	strb	r2, [r0, #0]
	}
		// Array of temperature readings at each simulation cell
		static byte heat[NUM_LEDS];

		// Step 1.  Cool down every cell a little
		for (int i = 0; i < NUM_LEDS; i++) {
    1322:	d1e9      	bne.n	12f8 <fire()+0x3c>
    1324:	4f7c      	ldr	r7, [pc, #496]	; (1518 <fire()+0x25c>)
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
		}

		// Step 2.  Heat from each cell drifts 'up' and diffuses a little
		for (int k = NUM_LEDS - 3; k >= 2; k--) {
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
    1326:	f8df c208 	ldr.w	ip, [pc, #520]	; 1530 <fire()+0x274>
    132a:	f1a7 00b8 	sub.w	r0, r7, #184	; 0xb8
    132e:	4606      	mov	r6, r0
    1330:	f107 0e02 	add.w	lr, r7, #2
    1334:	783a      	ldrb	r2, [r7, #0]
    1336:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
    133a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    133e:	fb8c 8102 	smull	r8, r1, ip, r2
    1342:	eba1 72e2 	sub.w	r2, r1, r2, asr #31
		for (int i = 0; i < NUM_LEDS; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
		}

		// Step 2.  Heat from each cell drifts 'up' and diffuses a little
		for (int k = NUM_LEDS - 3; k >= 2; k--) {
    1346:	42be      	cmp	r6, r7
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
    1348:	f80e 2d01 	strb.w	r2, [lr, #-1]!
		for (int i = 0; i < NUM_LEDS; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / NUM_LEDS) + 2));
		}

		// Step 2.  Heat from each cell drifts 'up' and diffuses a little
		for (int k = NUM_LEDS - 3; k >= 2; k--) {
    134c:	d1f2      	bne.n	1334 <fire()+0x78>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    134e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1352:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1356:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    135a:	3319      	adds	r3, #25
    135c:	b29b      	uxth	r3, r3
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
		}

		// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
		if (random8() < sparking) {
    135e:	782d      	ldrb	r5, [r5, #0]
    1360:	8023      	strh	r3, [r4, #0]
    1362:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    1366:	b2d2      	uxtb	r2, r2
    1368:	4295      	cmp	r5, r2
    136a:	4965      	ldr	r1, [pc, #404]	; (1500 <fire()+0x244>)
    136c:	d924      	bls.n	13b8 <fire()+0xfc>
    136e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1372:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1376:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    137a:	3319      	adds	r3, #25
    137c:	b29b      	uxth	r3, r3
    137e:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    1382:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1386:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    138a:	3419      	adds	r4, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    138c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1390:	b2a4      	uxth	r4, r4
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    1392:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1394:	eb04 2214 	add.w	r2, r4, r4, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    1398:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    139c:	b2d2      	uxtb	r2, r2
    139e:	121b      	asrs	r3, r3, #8
    13a0:	eb02 0542 	add.w	r5, r2, r2, lsl #1
    13a4:	ebc2 1245 	rsb	r2, r2, r5, lsl #5
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
    13a8:	5cc5      	ldrb	r5, [r0, r3]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    13aa:	800c      	strh	r4, [r1, #0]
    13ac:	1212      	asrs	r2, r2, #8
    13ae:	3a60      	subs	r2, #96	; 0x60
    13b0:	4629      	mov	r1, r5
    13b2:	fa81 f152 	uqadd8	r1, r1, r2
    13b6:	54c1      	strb	r1, [r0, r3]
    13b8:	f8df a178 	ldr.w	sl, [pc, #376]	; 1534 <fire()+0x278>
#ifndef FIRE_H
#define FIRE_H



void fire() {
    13bc:	2700      	movs	r7, #0
    13be:	46d1      	mov	r9, sl
			heat[y] = qadd8(heat[y], random8(160, 255));
		}

		// Step 4.  Map from heat cells to LED colors
		for (int j = 0; j < NUM_LEDS; j++) {
			if (!use_all_shelves) {
    13c0:	9b01      	ldr	r3, [sp, #4]
    13c2:	781b      	ldrb	r3, [r3, #0]
    13c4:	2b00      	cmp	r3, #0
    13c6:	d03d      	beq.n	1444 <fire()+0x188>
    13c8:	f8df b16c 	ldr.w	fp, [pc, #364]	; 1538 <fire()+0x27c>
    13cc:	b2fc      	uxtb	r4, r7
    13ce:	f04f 0800 	mov.w	r8, #0
				leds[j] = HeatColor(heat[j]);
			}
			else {
				for (int s = 0; s < 4; s++) {
					uint8_t pos = j * (shelf_num_leds[s] / NUM_LEDS);
    13d2:	f81b 3b01 	ldrb.w	r3, [fp], #1
					leds[shelf[s][pos]] += HeatColor(heat[j]);
    13d6:	4a4e      	ldr	r2, [pc, #312]	; (1510 <fire()+0x254>)
    13d8:	7831      	ldrb	r1, [r6, #0]
    13da:	fba2 2303 	umull	r2, r3, r2, r3
    13de:	09db      	lsrs	r3, r3, #7
    13e0:	4a4e      	ldr	r2, [pc, #312]	; (151c <fire()+0x260>)
    13e2:	fb13 f304 	smulbb	r3, r3, r4
    13e6:	fa52 f383 	uxtab	r3, r2, r3
    13ea:	eb08 1288 	add.w	r2, r8, r8, lsl #6
    13ee:	a803      	add	r0, sp, #12
    13f0:	5c9d      	ldrb	r5, [r3, r2]
    13f2:	f002 fe4f 	bl	4094 <HeatColor(unsigned char)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    13f6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    13fa:	eb0a 0103 	add.w	r1, sl, r3
    13fe:	f81a 2003 	ldrb.w	r2, [sl, r3]
    1402:	f89d 000c 	ldrb.w	r0, [sp, #12]
    1406:	fa82 f250 	uqadd8	r2, r2, r0
    140a:	f80a 2003 	strb.w	r2, [sl, r3]
    140e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    1412:	784a      	ldrb	r2, [r1, #1]
    1414:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1418:	704a      	strb	r2, [r1, #1]
    141a:	788b      	ldrb	r3, [r1, #2]
    141c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    1420:	fa83 f352 	uqadd8	r3, r3, r2
		for (int j = 0; j < NUM_LEDS; j++) {
			if (!use_all_shelves) {
				leds[j] = HeatColor(heat[j]);
			}
			else {
				for (int s = 0; s < 4; s++) {
    1424:	f108 0801 	add.w	r8, r8, #1
    1428:	f1b8 0f04 	cmp.w	r8, #4
        b = qadd8( b, rhs.b);
    142c:	708b      	strb	r3, [r1, #2]
    142e:	d1d0      	bne.n	13d2 <fire()+0x116>
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}

		// Step 4.  Map from heat cells to LED colors
		for (int j = 0; j < NUM_LEDS; j++) {
    1430:	3701      	adds	r7, #1
    1432:	2fbc      	cmp	r7, #188	; 0xbc
    1434:	f106 0601 	add.w	r6, r6, #1
    1438:	f109 0903 	add.w	r9, r9, #3
    143c:	d1c0      	bne.n	13c0 <fire()+0x104>
					uint8_t pos = j * (shelf_num_leds[s] / NUM_LEDS);
					leds[shelf[s][pos]] += HeatColor(heat[j]);
				}
			}
		}
}
    143e:	b005      	add	sp, #20
    1440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}

		// Step 4.  Map from heat cells to LED colors
		for (int j = 0; j < NUM_LEDS; j++) {
			if (!use_all_shelves) {
				leds[j] = HeatColor(heat[j]);
    1444:	7831      	ldrb	r1, [r6, #0]
    1446:	a803      	add	r0, sp, #12
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}

		// Step 4.  Map from heat cells to LED colors
		for (int j = 0; j < NUM_LEDS; j++) {
    1448:	3701      	adds	r7, #1
			if (!use_all_shelves) {
				leds[j] = HeatColor(heat[j]);
    144a:	f002 fe23 	bl	4094 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    144e:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1452:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1456:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    145a:	f889 1000 	strb.w	r1, [r9]
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}

		// Step 4.  Map from heat cells to LED colors
		for (int j = 0; j < NUM_LEDS; j++) {
    145e:	2fbc      	cmp	r7, #188	; 0xbc
        g = rhs.g;
    1460:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    1464:	f889 3002 	strb.w	r3, [r9, #2]
    1468:	f106 0601 	add.w	r6, r6, #1
    146c:	f109 0903 	add.w	r9, r9, #3
    1470:	d1a6      	bne.n	13c0 <fire()+0x104>
    1472:	e7e4      	b.n	143e <fire()+0x182>
    1474:	8823      	ldrh	r3, [r4, #0]
		mode_change = 0;
		sparking = random8(60, 90);
		cooling = random8(80, 120);
		use_palette = 0;
		this_delay = 15;
		use_all_shelves = random8(2);
    1476:	4924      	ldr	r1, [pc, #144]	; (1508 <fire()+0x24c>)
    1478:	9101      	str	r1, [sp, #4]
    147a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    147e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1482:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1486:	3319      	adds	r3, #25
    1488:	b29b      	uxth	r3, r3
    148a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    148e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1492:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    1496:	3019      	adds	r0, #25
    1498:	b280      	uxth	r0, r0
    149a:	eb00 2740 	add.w	r7, r0, r0, lsl #9
    149e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    14a2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    14a6:	f507 5758 	add.w	r7, r7, #13824	; 0x3600


void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(60, 90);
    14aa:	b2db      	uxtb	r3, r3
    14ac:	3719      	adds	r7, #25
    14ae:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    14b2:	b2bf      	uxth	r7, r7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    14b4:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    14b8:	11db      	asrs	r3, r3, #7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    14ba:	8027      	strh	r7, [r4, #0]
    14bc:	333c      	adds	r3, #60	; 0x3c
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    14be:	eb07 2717 	add.w	r7, r7, r7, lsr #8
		cooling = random8(80, 120);
    14c2:	b2c0      	uxtb	r0, r0


void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(60, 90);
    14c4:	702b      	strb	r3, [r5, #0]
		cooling = random8(80, 120);
    14c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		use_palette = 0;
		this_delay = 15;
		use_all_shelves = random8(2);
    14ca:	f3c7 13c0 	ubfx	r3, r7, #7, #1
    14ce:	4f0e      	ldr	r7, [pc, #56]	; (1508 <fire()+0x24c>)

void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(60, 90);
		cooling = random8(80, 120);
    14d0:	4e0e      	ldr	r6, [pc, #56]	; (150c <fire()+0x250>)
		use_palette = 0;
    14d2:	4913      	ldr	r1, [pc, #76]	; (1520 <fire()+0x264>)
		this_delay = 15;
		use_all_shelves = random8(2);
    14d4:	703b      	strb	r3, [r7, #0]

void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(60, 90);
		cooling = random8(80, 120);
    14d6:	1140      	asrs	r0, r0, #5



void fire() {
	if (mode_change) {
		mode_change = 0;
    14d8:	2300      	movs	r3, #0
		sparking = random8(60, 90);
		cooling = random8(80, 120);
    14da:	3050      	adds	r0, #80	; 0x50
		use_palette = 0;
		this_delay = 15;
    14dc:	4f11      	ldr	r7, [pc, #68]	; (1524 <fire()+0x268>)

void fire() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(60, 90);
		cooling = random8(80, 120);
    14de:	7030      	strb	r0, [r6, #0]
		use_palette = 0;
    14e0:	700b      	strb	r3, [r1, #0]
		this_delay = 15;
    14e2:	f04f 0e0f 	mov.w	lr, #15
    14e6:	2104      	movs	r1, #4
    14e8:	480f      	ldr	r0, [pc, #60]	; (1528 <fire()+0x26c>)



void fire() {
	if (mode_change) {
		mode_change = 0;
    14ea:	7013      	strb	r3, [r2, #0]
		sparking = random8(60, 90);
		cooling = random8(80, 120);
		use_palette = 0;
		this_delay = 15;
    14ec:	f8c7 e000 	str.w	lr, [r7]
    14f0:	f004 fc6c 	bl	5dcc <usb_serial_write>
    14f4:	480d      	ldr	r0, [pc, #52]	; (152c <fire()+0x270>)
    14f6:	f004 fe6d 	bl	61d4 <Print::println()>
    14fa:	e6ec      	b.n	12d6 <fire()+0x1a>
    14fc:	1fff8724 	.word	0x1fff8724
    1500:	1fff876c 	.word	0x1fff876c
    1504:	1fff8728 	.word	0x1fff8728
    1508:	1fff8895 	.word	0x1fff8895
    150c:	1fff8725 	.word	0x1fff8725
    1510:	ae4c415d 	.word	0xae4c415d
    1514:	1fff8d37 	.word	0x1fff8d37
    1518:	1fff8df0 	.word	0x1fff8df0
    151c:	1fff8eb8 	.word	0x1fff8eb8
    1520:	1fff871e 	.word	0x1fff871e
    1524:	1fff8720 	.word	0x1fff8720
    1528:	00006f38 	.word	0x00006f38
    152c:	1fff8774 	.word	0x1fff8774
    1530:	55555556 	.word	0x55555556
    1534:	1fff8898 	.word	0x1fff8898
    1538:	1fff8768 	.word	0x1fff8768

0000153c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		update_ctars(ctar0,ctar1);
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
    153c:	4b7f      	ldr	r3, [pc, #508]	; (173c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
		gState.pins[2] = CORE_PIN13_CONFIG;
		gState.pins[3] = CORE_PIN14_CONFIG;
    153e:	4a80      	ldr	r2, [pc, #512]	; (1740 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x204>)
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    1540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		update_ctars(ctar0,ctar1);
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
    1544:	f8d3 e00c 	ldr.w	lr, [r3, #12]
    1548:	f8c0 e01c 	str.w	lr, [r0, #28]
		gState._ctar1 = SPIX.CTAR1;
    154c:	691b      	ldr	r3, [r3, #16]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
    154e:	4f7d      	ldr	r7, [pc, #500]	; (1744 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x208>)
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;
    1550:	6203      	str	r3, [r0, #32]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
    1552:	683b      	ldr	r3, [r7, #0]
		gState.pins[1] = CORE_PIN11_CONFIG;
    1554:	4e7c      	ldr	r6, [pc, #496]	; (1748 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x20c>)
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
    1556:	6243      	str	r3, [r0, #36]	; 0x24
		gState.pins[1] = CORE_PIN11_CONFIG;
    1558:	6833      	ldr	r3, [r6, #0]
		gState.pins[2] = CORE_PIN13_CONFIG;
    155a:	4d7c      	ldr	r5, [pc, #496]	; (174c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x210>)
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
    155c:	6283      	str	r3, [r0, #40]	; 0x28
		gState.pins[2] = CORE_PIN13_CONFIG;
    155e:	682b      	ldr	r3, [r5, #0]
    1560:	62c3      	str	r3, [r0, #44]	; 0x2c
    1562:	4604      	mov	r4, r0
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
    1564:	6980      	ldr	r0, [r0, #24]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
		gState.pins[2] = CORE_PIN13_CONFIG;
		gState.pins[3] = CORE_PIN14_CONFIG;
    1566:	6813      	ldr	r3, [r2, #0]
    1568:	6323      	str	r3, [r4, #48]	; 0x30
    156a:	b082      	sub	sp, #8
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
    156c:	b150      	cbz	r0, 1584 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x48>
    156e:	6803      	ldr	r3, [r0, #0]
    1570:	4a77      	ldr	r2, [pc, #476]	; (1750 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x214>)
    1572:	681b      	ldr	r3, [r3, #0]
    1574:	4293      	cmp	r3, r2
    1576:	f040 8153 	bne.w	1820 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2e4>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    157a:	6842      	ldr	r2, [r0, #4]
    157c:	7b00      	ldrb	r0, [r0, #12]
    157e:	7813      	ldrb	r3, [r2, #0]
    1580:	4303      	orrs	r3, r0
    1582:	7013      	strb	r3, [r2, #0]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    1584:	4b6d      	ldr	r3, [pc, #436]	; (173c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)
    1586:	68da      	ldr	r2, [r3, #12]
    1588:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
    158c:	f000 812b 	beq.w	17e6 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2aa>
		uint32_t mcr = SPIX.MCR;
    1590:	4b6a      	ldr	r3, [pc, #424]	; (173c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)
    1592:	681a      	ldr	r2, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
    1594:	0455      	lsls	r5, r2, #17
    1596:	f100 8130 	bmi.w	17fa <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2be>
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
    159a:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
    159e:	f040 0001 	orr.w	r0, r0, #1
			SPIX.CTAR0 = ctar0;
    15a2:	f04f 5660 	mov.w	r6, #939524096	; 0x38000000
			SPIX.CTAR1 = ctar1;
    15a6:	f04f 45f0 	mov.w	r5, #2013265920	; 0x78000000
		uint32_t mcr = SPIX.MCR;
		if(mcr & SPI_MCR_MDIS) {
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
    15aa:	6018      	str	r0, [r3, #0]
			SPIX.CTAR0 = ctar0;
    15ac:	60de      	str	r6, [r3, #12]
			SPIX.CTAR1 = ctar1;
    15ae:	611d      	str	r5, [r3, #16]
			SPIX.MCR = mcr;
    15b0:	601a      	str	r2, [r3, #0]
	// and likewise enabling pin 14 disables pin 13 (and vice versa)
	inline void enable_pins(void) __attribute__((always_inline)) {
		//serial_print("enable_pins\n");
		switch(_DATA_PIN) {
			case 7:
				CORE_PIN7_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
    15b2:	4b64      	ldr	r3, [pc, #400]	; (1744 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x208>)
				CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    15b4:	4f64      	ldr	r7, [pc, #400]	; (1748 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x20c>)
			case 13:
				CORE_PIN13_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
				CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
				break;
			case 14:
				CORE_PIN14_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
    15b6:	4e62      	ldr	r6, [pc, #392]	; (1740 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x204>)
				CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    15b8:	4d64      	ldr	r5, [pc, #400]	; (174c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x210>)
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    15ba:	4860      	ldr	r0, [pc, #384]	; (173c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)
	// and likewise enabling pin 14 disables pin 13 (and vice versa)
	inline void enable_pins(void) __attribute__((always_inline)) {
		//serial_print("enable_pins\n");
		switch(_DATA_PIN) {
			case 7:
				CORE_PIN7_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
    15bc:	f44f 7210 	mov.w	r2, #576	; 0x240
    15c0:	601a      	str	r2, [r3, #0]
				CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    15c2:	f44f 73a2 	mov.w	r3, #324	; 0x144
    15c6:	603b      	str	r3, [r7, #0]
			case 13:
				CORE_PIN13_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
				CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
				break;
			case 14:
				CORE_PIN14_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
    15c8:	6032      	str	r2, [r6, #0]
				CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    15ca:	602b      	str	r3, [r5, #0]
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    15cc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    15ce:	4b5b      	ldr	r3, [pc, #364]	; (173c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)
    15d0:	0456      	lsls	r6, r2, #17
    15d2:	d4fb      	bmi.n	15cc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x90>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    15d4:	b672      	cpsid	i
    15d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    15da:	635a      	str	r2, [r3, #52]	; 0x34
    15dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    15de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    15e2:	62da      	str	r2, [r3, #44]	; 0x2c
    15e4:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    15e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    15e8:	4854      	ldr	r0, [pc, #336]	; (173c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)
    15ea:	0455      	lsls	r5, r2, #17
    15ec:	d4fb      	bmi.n	15e6 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xaa>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    15ee:	b672      	cpsid	i
    15f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    15f4:	6343      	str	r3, [r0, #52]	; 0x34
    15f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    15f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    15fc:	62c3      	str	r3, [r0, #44]	; 0x2c
    15fe:	b662      	cpsie	i
		mSPI.select();

		startBoundary();
		while(pixels.has(1)) {
    1600:	688b      	ldr	r3, [r1, #8]
    1602:	2b00      	cmp	r3, #0
    1604:	dd61      	ble.n	16ca <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x18e>
    1606:	680a      	ldr	r2, [r1, #0]
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    1608:	4603      	mov	r3, r0
    160a:	4606      	mov	r6, r0
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    160c:	7892      	ldrb	r2, [r2, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    160e:	b11a      	cbz	r2, 1618 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xdc>
    1610:	7b88      	ldrb	r0, [r1, #14]
    1612:	fa82 f250 	uqadd8	r2, r2, r0
    1616:	b2d2      	uxtb	r2, r2
			mSPI.writeByte(0xFF);
			mSPI.writeByte(pixels.loadAndScale0());
			mSPI.writeByte(pixels.loadAndScale1());
			mSPI.writeByte(pixels.loadAndScale2());
#else
			uint16_t b = 0xFF00 | (uint16_t)pixels.loadAndScale0();
    1618:	7d08      	ldrb	r0, [r1, #20]
    161a:	fb00 2202 	mla	r2, r0, r2, r2
    161e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    1622:	f442 407f 	orr.w	r0, r2, #65280	; 0xff00
    1626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1628:	0452      	lsls	r2, r2, #17
    162a:	d4fc      	bmi.n	1626 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xea>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    162c:	b672      	cpsid	i
    162e:	f040 5280 	orr.w	r2, r0, #268435456	; 0x10000000
    1632:	6372      	str	r2, [r6, #52]	; 0x34
    1634:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    1636:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    163a:	62f2      	str	r2, [r6, #44]	; 0x2c
    163c:	b662      	cpsie	i
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    163e:	680f      	ldr	r7, [r1, #0]
    1640:	787a      	ldrb	r2, [r7, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1642:	b11a      	cbz	r2, 164c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x110>
    1644:	7b48      	ldrb	r0, [r1, #13]
    1646:	fa82 f250 	uqadd8	r2, r2, r0
    164a:	b2d2      	uxtb	r2, r2
			mSPI.writeWord(b);
			uint16_t w = pixels.loadAndScale1() << 8;
    164c:	7ccd      	ldrb	r5, [r1, #19]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
    164e:	7838      	ldrb	r0, [r7, #0]
    1650:	fb05 2202 	mla	r2, r5, r2, r2
    1654:	f402 457f 	and.w	r5, r2, #65280	; 0xff00
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    1658:	2800      	cmp	r0, #0
    165a:	f000 80c2 	beq.w	17e2 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2a6>
    165e:	4602      	mov	r2, r0
    1660:	7b08      	ldrb	r0, [r1, #12]
    1662:	fa82 f250 	uqadd8	r2, r2, r0
    1666:	b2d2      	uxtb	r2, r2
			w |= pixels.loadAndScale2();
    1668:	7c88      	ldrb	r0, [r1, #18]
    166a:	fb00 2202 	mla	r2, r0, r2, r2
    166e:	ea45 2012 	orr.w	r0, r5, r2, lsr #8
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    1672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1674:	0457      	lsls	r7, r2, #17
    1676:	d4fc      	bmi.n	1672 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x136>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    1678:	b672      	cpsid	i
    167a:	f040 5280 	orr.w	r2, r0, #268435456	; 0x10000000
    167e:	6372      	str	r2, [r6, #52]	; 0x34
    1680:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    1682:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    1686:	62f2      	str	r2, [r6, #44]	; 0x2c
    1688:	b662      	cpsie	i

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    168a:	6888      	ldr	r0, [r1, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    168c:	f891 c00c 	ldrb.w	ip, [r1, #12]
                d[1] = e[1] - d[1];
    1690:	f891 900d 	ldrb.w	r9, [r1, #13]
                d[2] = e[2] - d[2];
    1694:	f891 800e 	ldrb.w	r8, [r1, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    1698:	680f      	ldr	r7, [r1, #0]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    169a:	f891 a00f 	ldrb.w	sl, [r1, #15]
                d[1] = e[1] - d[1];
    169e:	f891 e010 	ldrb.w	lr, [r1, #16]
                d[2] = e[2] - d[2];
    16a2:	7c4d      	ldrb	r5, [r1, #17]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    16a4:	f991 2015 	ldrsb.w	r2, [r1, #21]
    16a8:	3801      	subs	r0, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    16aa:	ebcc 0c0a 	rsb	ip, ip, sl
                d[1] = e[1] - d[1];
    16ae:	ebc9 0e0e 	rsb	lr, r9, lr
                d[2] = e[2] - d[2];
    16b2:	ebc8 0505 	rsb	r5, r8, r5

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    16b6:	443a      	add	r2, r7

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
		mSPI.select();

		startBoundary();
		while(pixels.has(1)) {
    16b8:	2800      	cmp	r0, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    16ba:	f881 c00c 	strb.w	ip, [r1, #12]
                d[1] = e[1] - d[1];
    16be:	f881 e00d 	strb.w	lr, [r1, #13]
                d[2] = e[2] - d[2];
    16c2:	738d      	strb	r5, [r1, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    16c4:	600a      	str	r2, [r1, #0]
    16c6:	6088      	str	r0, [r1, #8]
    16c8:	dca0      	bgt.n	160c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xd0>
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
    16ca:	6848      	ldr	r0, [r1, #4]
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    16cc:	4a1b      	ldr	r2, [pc, #108]	; (173c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)
    16ce:	2800      	cmp	r0, #0
    16d0:	bfb8      	it	lt
    16d2:	301f      	addlt	r0, #31
    16d4:	1140      	asrs	r0, r0, #5
    16d6:	4611      	mov	r1, r2
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    16d8:	25ff      	movs	r5, #255	; 0xff
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    16da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    16dc:	045e      	lsls	r6, r3, #17
    16de:	d4fc      	bmi.n	16da <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x19e>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    16e0:	b672      	cpsid	i
    16e2:	634d      	str	r5, [r1, #52]	; 0x34
    16e4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    16e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    16ea:	62cb      	str	r3, [r1, #44]	; 0x2c
    16ec:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    16ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    16f0:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    16f4:	d1fb      	bne.n	16ee <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1b2>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    16f6:	b672      	cpsid	i
    16f8:	634b      	str	r3, [r1, #52]	; 0x34
    16fa:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    16fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1700:	62cb      	str	r3, [r1, #44]	; 0x2c
    1702:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    1704:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1706:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    170a:	d1fb      	bne.n	1704 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1c8>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    170c:	b672      	cpsid	i
    170e:	634b      	str	r3, [r1, #52]	; 0x34
    1710:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1716:	62cb      	str	r3, [r1, #44]	; 0x2c
    1718:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
    171a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    171c:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    1720:	d1fb      	bne.n	171a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1de>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
    1722:	b672      	cpsid	i
    1724:	634b      	str	r3, [r1, #52]	; 0x34
    1726:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    172c:	62cb      	str	r3, [r1, #44]	; 0x2c
    172e:	b662      	cpsie	i
    1730:	f110 30ff 	adds.w	r0, r0, #4294967295
    1734:	d2d1      	bcs.n	16da <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x19e>
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
			cli();
			if ((SPIX.SR & 0xF000) > 0) {
    1736:	4a01      	ldr	r2, [pc, #4]	; (173c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)
    1738:	e013      	b.n	1762 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x226>
    173a:	bf00      	nop
    173c:	4002c000 	.word	0x4002c000
    1740:	4004c004 	.word	0x4004c004
    1744:	4004c008 	.word	0x4004c008
    1748:	4004b018 	.word	0x4004b018
    174c:	4004b014 	.word	0x4004b014
    1750:	00000475 	.word	0x00000475
				// reset the TCF flag
				SPIX.SR |= SPI_SR_TCF;
    1754:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1756:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    175a:	62d3      	str	r3, [r2, #44]	; 0x2c
    175c:	2300      	movs	r3, #0
			} else {
				empty = true;
			}
			sei();
    175e:	b662      	cpsie	i

	static void waitFully() __attribute__((always_inline)) {
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
    1760:	b943      	cbnz	r3, 1774 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x238>
			cli();
    1762:	b672      	cpsid	i
			if ((SPIX.SR & 0xF000) > 0) {
    1764:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1766:	f413 4f70 	tst.w	r3, #61440	; 0xf000
    176a:	d1f3      	bne.n	1754 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x218>
				// reset the TCF flag
				SPIX.SR |= SPI_SR_TCF;
			} else {
				empty = true;
    176c:	2301      	movs	r3, #1
			}
			sei();
    176e:	b662      	cpsie	i

	static void waitFully() __attribute__((always_inline)) {
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
    1770:	2b00      	cmp	r3, #0
    1772:	d0f6      	beq.n	1762 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x226>
			}
			sei();
		} while (!empty);

		// wait for the TCF flag to get set
		while (!(SPIX.SR & SPI_SR_TCF));
    1774:	492d      	ldr	r1, [pc, #180]	; (182c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
    1776:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1778:	4a2c      	ldr	r2, [pc, #176]	; (182c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
    177a:	2b00      	cmp	r3, #0
    177c:	dafb      	bge.n	1776 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x23a>
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
    177e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
    1780:	4f2b      	ldr	r7, [pc, #172]	; (1830 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f4>)
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
    1782:	69a0      	ldr	r0, [r4, #24]
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
    1784:	4e2b      	ldr	r6, [pc, #172]	; (1834 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f8>)
			case 11: CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN7_CONFIG = gState.pins[0]; break;
		}

		switch(_CLOCK_PIN) {
			case 13: CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN14_CONFIG = gState.pins[3]; break;
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
    1786:	4d2c      	ldr	r5, [pc, #176]	; (1838 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2fc>)
    1788:	492c      	ldr	r1, [pc, #176]	; (183c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x300>)
			sei();
		} while (!empty);

		// wait for the TCF flag to get set
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
    178a:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    178e:	62d3      	str	r3, [r2, #44]	; 0x2c
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
    1790:	f44f 73a2 	mov.w	r3, #324	; 0x144
    1794:	603b      	str	r3, [r7, #0]
    1796:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1798:	6032      	str	r2, [r6, #0]
			case 11: CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN7_CONFIG = gState.pins[0]; break;
		}

		switch(_CLOCK_PIN) {
			case 13: CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN14_CONFIG = gState.pins[3]; break;
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
    179a:	602b      	str	r3, [r5, #0]
    179c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    179e:	600b      	str	r3, [r1, #0]
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
    17a0:	b150      	cbz	r0, 17b8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x27c>
    17a2:	6803      	ldr	r3, [r0, #0]
    17a4:	4a26      	ldr	r2, [pc, #152]	; (1840 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x304>)
    17a6:	685b      	ldr	r3, [r3, #4]
    17a8:	4293      	cmp	r3, r2
    17aa:	d13d      	bne.n	1828 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2ec>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    17ac:	6842      	ldr	r2, [r0, #4]
    17ae:	7b01      	ldrb	r1, [r0, #12]
    17b0:	7813      	ldrb	r3, [r2, #0]
    17b2:	ea23 0301 	bic.w	r3, r3, r1
    17b6:	7013      	strb	r3, [r2, #0]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    17b8:	4b1c      	ldr	r3, [pc, #112]	; (182c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
		gState.pins[3] = CORE_PIN14_CONFIG;
	}

	void inline restore_spi_state() __attribute__ ((always_inline)) {
		// restore ctar data
		update_ctars(gState._ctar0,gState._ctar1);
    17ba:	69e2      	ldr	r2, [r4, #28]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    17bc:	68d9      	ldr	r1, [r3, #12]
		gState.pins[3] = CORE_PIN14_CONFIG;
	}

	void inline restore_spi_state() __attribute__ ((always_inline)) {
		// restore ctar data
		update_ctars(gState._ctar0,gState._ctar1);
    17be:	6a20      	ldr	r0, [r4, #32]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    17c0:	428a      	cmp	r2, r1
    17c2:	d021      	beq.n	1808 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2cc>
		uint32_t mcr = SPIX.MCR;
    17c4:	4b19      	ldr	r3, [pc, #100]	; (182c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
    17c6:	6819      	ldr	r1, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
    17c8:	044c      	lsls	r4, r1, #17
    17ca:	d424      	bmi.n	1816 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2da>
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
    17cc:	f441 4480 	orr.w	r4, r1, #16384	; 0x4000
    17d0:	f044 0401 	orr.w	r4, r4, #1
    17d4:	601c      	str	r4, [r3, #0]
			SPIX.CTAR0 = ctar0;
    17d6:	60da      	str	r2, [r3, #12]
			SPIX.CTAR1 = ctar1;
    17d8:	6118      	str	r0, [r3, #16]
			SPIX.MCR = mcr;
    17da:	6019      	str	r1, [r3, #0]
			pixels.advanceData();
		}
		endBoundary(pixels.size());
		mSPI.waitFully();
		mSPI.release();
	}
    17dc:	b002      	add	sp, #8
    17de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
    17e2:	4602      	mov	r2, r0
    17e4:	e740      	b.n	1668 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x12c>
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    17e6:	691b      	ldr	r3, [r3, #16]
    17e8:	f1b3 4ff0 	cmp.w	r3, #2013265920	; 0x78000000
    17ec:	f43f aee1 	beq.w	15b2 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x76>
		uint32_t mcr = SPIX.MCR;
    17f0:	4b0e      	ldr	r3, [pc, #56]	; (182c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
    17f2:	681a      	ldr	r2, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
    17f4:	0455      	lsls	r5, r2, #17
    17f6:	f57f aed0 	bpl.w	159a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x5e>
			SPIX.CTAR0 = ctar0;
    17fa:	f04f 5060 	mov.w	r0, #939524096	; 0x38000000
			SPIX.CTAR1 = ctar1;
    17fe:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
		uint32_t mcr = SPIX.MCR;
		if(mcr & SPI_MCR_MDIS) {
			SPIX.CTAR0 = ctar0;
    1802:	60d8      	str	r0, [r3, #12]
			SPIX.CTAR1 = ctar1;
    1804:	611a      	str	r2, [r3, #16]
    1806:	e6d4      	b.n	15b2 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x76>
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
    1808:	691b      	ldr	r3, [r3, #16]
    180a:	4298      	cmp	r0, r3
    180c:	d0e6      	beq.n	17dc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2a0>
		uint32_t mcr = SPIX.MCR;
    180e:	4b07      	ldr	r3, [pc, #28]	; (182c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
    1810:	6819      	ldr	r1, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
    1812:	044c      	lsls	r4, r1, #17
    1814:	d5da      	bpl.n	17cc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x290>
			SPIX.CTAR0 = ctar0;
    1816:	60da      	str	r2, [r3, #12]
			SPIX.CTAR1 = ctar1;
    1818:	6118      	str	r0, [r3, #16]
    181a:	b002      	add	sp, #8
    181c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1820:	9101      	str	r1, [sp, #4]
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
    1822:	4798      	blx	r3
    1824:	9901      	ldr	r1, [sp, #4]
    1826:	e6ad      	b.n	1584 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x48>
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
    1828:	4798      	blx	r3
    182a:	e7c5      	b.n	17b8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x27c>
    182c:	4002c000 	.word	0x4002c000
    1830:	4004c008 	.word	0x4004c008
    1834:	4004b018 	.word	0x4004b018
    1838:	4004c004 	.word	0x4004c004
    183c:	4004b014 	.word	0x4004b014
    1840:	00000481 	.word	0x00000481

00001844 <juggle_pal_onedir()>:

} // juggle_pal()



void juggle_pal_onedir() {
    1844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    1848:	4a78      	ldr	r2, [pc, #480]	; (1a2c <juggle_pal_onedir()+0x1e8>)
    184a:	7813      	ldrb	r3, [r2, #0]

} // juggle_pal()



void juggle_pal_onedir() {
    184c:	b08f      	sub	sp, #60	; 0x3c
	if (mode_change) {
    184e:	2b00      	cmp	r3, #0
    1850:	f040 819e 	bne.w	1b90 <juggle_pal_onedir()+0x34c>
    1854:	f8df b210 	ldr.w	fp, [pc, #528]	; 1a68 <juggle_pal_onedir()+0x224>
    1858:	4d75      	ldr	r5, [pc, #468]	; (1a30 <juggle_pal_onedir()+0x1ec>)
    185a:	4e76      	ldr	r6, [pc, #472]	; (1a34 <juggle_pal_onedir()+0x1f0>)
    185c:	4c76      	ldr	r4, [pc, #472]	; (1a38 <juggle_pal_onedir()+0x1f4>)
		this_delay =10; 
		use_all_shelves = random8(2);
		Serial.println("juggle_pal_ondeir");
	}

	if (reset_juggle_index) {
    185e:	782b      	ldrb	r3, [r5, #0]
    1860:	b113      	cbz	r3, 1868 <juggle_pal_onedir()+0x24>
		this_index = 0;
    1862:	4b76      	ldr	r3, [pc, #472]	; (1a3c <juggle_pal_onedir()+0x1f8>)
    1864:	2200      	movs	r2, #0
    1866:	701a      	strb	r2, [r3, #0]
	}

	fadeToBlackBy(leds, NUM_LEDS, this_fade);
    1868:	7832      	ldrb	r2, [r6, #0]
    186a:	4875      	ldr	r0, [pc, #468]	; (1a40 <juggle_pal_onedir()+0x1fc>)
    186c:	21bc      	movs	r1, #188	; 0xbc
    186e:	f002 fbe1 	bl	4034 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	if (!use_all_shelves) {
    1872:	7825      	ldrb	r5, [r4, #0]
    1874:	2d00      	cmp	r5, #0
    1876:	f040 80b7 	bne.w	19e8 <juggle_pal_onedir()+0x1a4>
		for (int i = 0; i < numdots; i++) {
    187a:	f89b 3000 	ldrb.w	r3, [fp]
    187e:	2b00      	cmp	r3, #0
    1880:	f000 80af 	beq.w	19e2 <juggle_pal_onedir()+0x19e>
    1884:	496f      	ldr	r1, [pc, #444]	; (1a44 <juggle_pal_onedir()+0x200>)
    1886:	9103      	str	r1, [sp, #12]
    1888:	496f      	ldr	r1, [pc, #444]	; (1a48 <juggle_pal_onedir()+0x204>)
    188a:	9104      	str	r1, [sp, #16]
    188c:	496f      	ldr	r1, [pc, #444]	; (1a4c <juggle_pal_onedir()+0x208>)
    188e:	4f6b      	ldr	r7, [pc, #428]	; (1a3c <juggle_pal_onedir()+0x1f8>)
    1890:	9105      	str	r1, [sp, #20]
    1892:	496f      	ldr	r1, [pc, #444]	; (1a50 <juggle_pal_onedir()+0x20c>)
    1894:	9107      	str	r1, [sp, #28]
    1896:	496f      	ldr	r1, [pc, #444]	; (1a54 <juggle_pal_onedir()+0x210>)
    1898:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 1a60 <juggle_pal_onedir()+0x21c>
    189c:	783a      	ldrb	r2, [r7, #0]
    189e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 1a64 <juggle_pal_onedir()+0x220>
    18a2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 1a6c <juggle_pal_onedir()+0x228>
    18a6:	9106      	str	r1, [sp, #24]
    18a8:	4e65      	ldr	r6, [pc, #404]	; (1a40 <juggle_pal_onedir()+0x1fc>)
    18aa:	e05e      	b.n	196a <juggle_pal_onedir()+0x126>
			if (!this_dir) {
				leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
    18ac:	f89a 1000 	ldrb.w	r1, [sl]
    18b0:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18b2:	9903      	ldr	r1, [sp, #12]
    18b4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    18b8:	6809      	ldr	r1, [r1, #0]
    18ba:	910a      	str	r1, [sp, #40]	; 0x28
    18bc:	b29b      	uxth	r3, r3

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    18be:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    18c0:	990a      	ldr	r1, [sp, #40]	; 0x28
    18c2:	bf98      	it	ls
    18c4:	021b      	lslls	r3, r3, #8


LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    18c6:	f44f 708c 	mov.w	r0, #280	; 0x118
    18ca:	bf98      	it	ls
    18cc:	b29b      	uxthls	r3, r3
    18ce:	fb00 f101 	mul.w	r1, r0, r1
    18d2:	fb03 f101 	mul.w	r1, r3, r1
    18d6:	f3c1 410e 	ubfx	r1, r1, #16, #15
    18da:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    18de:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    18e0:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    18e4:	d503      	bpl.n	18ee <juggle_pal_onedir()+0xaa>
    18e6:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    18ea:	3307      	adds	r3, #7
    18ec:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    18ee:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    18f0:	f3c3 0e46 	ubfx	lr, r3, #1, #7
    18f4:	9c04      	ldr	r4, [sp, #16]
    18f6:	9b05      	ldr	r3, [sp, #20]
    18f8:	5c24      	ldrb	r4, [r4, r0]
    18fa:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]

    if( theta & 0x8000 ) y = -y;
    18fe:	040b      	lsls	r3, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1900:	fb04 040e 	mla	r4, r4, lr, r0
    1904:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
    1906:	d463      	bmi.n	19d0 <juggle_pal_onedir()+0x18c>
			}
			else {
				leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
    1908:	9906      	ldr	r1, [sp, #24]
    190a:	9b07      	ldr	r3, [sp, #28]
    190c:	7809      	ldrb	r1, [r1, #0]
    190e:	781b      	ldrb	r3, [r3, #0]
    1910:	9100      	str	r1, [sp, #0]
    1912:	b224      	sxth	r4, r4
    1914:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
    1918:	21bc      	movs	r1, #188	; 0xbc
    191a:	b2a4      	uxth	r4, r4
    191c:	fb01 f404 	mul.w	r4, r1, r4
    1920:	0c24      	lsrs	r4, r4, #16


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1922:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1926:	494c      	ldr	r1, [pc, #304]	; (1a58 <juggle_pal_onedir()+0x214>)
    1928:	a80d      	add	r0, sp, #52	; 0x34
    192a:	f002 fbd5 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    192e:	1931      	adds	r1, r6, r4
    1930:	5d33      	ldrb	r3, [r6, r4]
    1932:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    1936:	fa83 f352 	uqadd8	r3, r3, r2
    193a:	5533      	strb	r3, [r6, r4]
    193c:	784a      	ldrb	r2, [r1, #1]
    193e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    1942:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1946:	704a      	strb	r2, [r1, #1]
    1948:	788b      	ldrb	r3, [r1, #2]
    194a:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    194e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    1952:	708b      	strb	r3, [r1, #2]
			}
			this_index += this_diff;
    1954:	7839      	ldrb	r1, [r7, #0]
    1956:	f899 2000 	ldrb.w	r2, [r9]
	}

	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
		for (int i = 0; i < numdots; i++) {
    195a:	f89b 3000 	ldrb.w	r3, [fp]
				leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
			}
			else {
				leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
			}
			this_index += this_diff;
    195e:	440a      	add	r2, r1
	}

	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
		for (int i = 0; i < numdots; i++) {
    1960:	3501      	adds	r5, #1
				leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
			}
			else {
				leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
			}
			this_index += this_diff;
    1962:	b2d2      	uxtb	r2, r2
	}

	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
		for (int i = 0; i < numdots; i++) {
    1964:	42ab      	cmp	r3, r5
				leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
			}
			else {
				leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
			}
			this_index += this_diff;
    1966:	703a      	strb	r2, [r7, #0]
	}

	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
		for (int i = 0; i < numdots; i++) {
    1968:	dd3b      	ble.n	19e2 <juggle_pal_onedir()+0x19e>
			if (!this_dir) {
    196a:	f898 1000 	ldrb.w	r1, [r8]
    196e:	2900      	cmp	r1, #0
    1970:	d09c      	beq.n	18ac <juggle_pal_onedir()+0x68>
				leds[beatsin16_halfdown(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
			}
			else {
				leds[beatsin16_halfup(this_beat + 2 * i + numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
    1972:	f89a 1000 	ldrb.w	r1, [sl]
    1976:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1978:	9903      	ldr	r1, [sp, #12]
    197a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    197e:	6809      	ldr	r1, [r1, #0]
    1980:	910b      	str	r1, [sp, #44]	; 0x2c
    1982:	b29b      	uxth	r3, r3
    1984:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    1986:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1988:	bf98      	it	ls
    198a:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    198c:	f44f 708c 	mov.w	r0, #280	; 0x118
    1990:	fb00 f101 	mul.w	r1, r0, r1
    1994:	bf98      	it	ls
    1996:	b29b      	uxthls	r3, r3
    1998:	fb03 f301 	mul.w	r3, r3, r1
    199c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    19a0:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    19a4:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    19a6:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    19a8:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    19ac:	d503      	bpl.n	19b6 <juggle_pal_onedir()+0x172>
    19ae:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    19b2:	3107      	adds	r1, #7
    19b4:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    19b6:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    19b8:	f3c1 0e46 	ubfx	lr, r1, #1, #7
    19bc:	9c04      	ldr	r4, [sp, #16]
    19be:	9905      	ldr	r1, [sp, #20]
    19c0:	5c24      	ldrb	r4, [r4, r0]
    19c2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]

    if( theta & 0x8000 ) y = -y;
    19c6:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    19c8:	fb04 040e 	mla	r4, r4, lr, r0
    19cc:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
    19ce:	d59b      	bpl.n	1908 <juggle_pal_onedir()+0xc4>
    19d0:	4264      	negs	r4, r4
    19d2:	e799      	b.n	1908 <juggle_pal_onedir()+0xc4>
    19d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19d6:	3301      	adds	r3, #1
			}
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
    19d8:	2b04      	cmp	r3, #4
    19da:	9309      	str	r3, [sp, #36]	; 0x24
    19dc:	f109 0901 	add.w	r9, r9, #1
    19e0:	d108      	bne.n	19f4 <juggle_pal_onedir()+0x1b0>
				}
				this_index += this_diff;
			}
		}
	}
} // 
    19e2:	b00f      	add	sp, #60	; 0x3c
    19e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		this_index = 0;
	}

	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
    19e8:	2300      	movs	r3, #0
    19ea:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1a70 <juggle_pal_onedir()+0x22c>
    19ee:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1a3c <juggle_pal_onedir()+0x1f8>
    19f2:	9309      	str	r3, [sp, #36]	; 0x24
			}
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (int i = 0; i < numdots; i++) {
    19f4:	f89b 3000 	ldrb.w	r3, [fp]
    19f8:	2b00      	cmp	r3, #0
    19fa:	d0eb      	beq.n	19d4 <juggle_pal_onedir()+0x190>
    19fc:	4911      	ldr	r1, [pc, #68]	; (1a44 <juggle_pal_onedir()+0x200>)
    19fe:	9107      	str	r1, [sp, #28]
    1a00:	4911      	ldr	r1, [pc, #68]	; (1a48 <juggle_pal_onedir()+0x204>)
    1a02:	9106      	str	r1, [sp, #24]
    1a04:	4911      	ldr	r1, [pc, #68]	; (1a4c <juggle_pal_onedir()+0x208>)
    1a06:	9105      	str	r1, [sp, #20]
    1a08:	4911      	ldr	r1, [pc, #68]	; (1a50 <juggle_pal_onedir()+0x20c>)
    1a0a:	9104      	str	r1, [sp, #16]
    1a0c:	4911      	ldr	r1, [pc, #68]	; (1a54 <juggle_pal_onedir()+0x210>)
    1a0e:	9103      	str	r1, [sp, #12]
				if (!this_dir) {
					leds[shelf[s][beatsin16_halfdown(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
				}
				else {
					leds[shelf[s][beatsin16_halfup(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
    1a10:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a12:	4f12      	ldr	r7, [pc, #72]	; (1a5c <juggle_pal_onedir()+0x218>)
    1a14:	f898 2000 	ldrb.w	r2, [r8]
    1a18:	f8df a050 	ldr.w	sl, [pc, #80]	; 1a6c <juggle_pal_onedir()+0x228>
    1a1c:	4e08      	ldr	r6, [pc, #32]	; (1a40 <juggle_pal_onedir()+0x1fc>)
    1a1e:	eb01 1181 	add.w	r1, r1, r1, lsl #6
    1a22:	440f      	add	r7, r1
			}
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (int i = 0; i < numdots; i++) {
    1a24:	2400      	movs	r4, #0
    1a26:	9708      	str	r7, [sp, #32]
    1a28:	e08c      	b.n	1b44 <juggle_pal_onedir()+0x300>
    1a2a:	bf00      	nop
    1a2c:	1fff8724 	.word	0x1fff8724
    1a30:	1fff8bfc 	.word	0x1fff8bfc
    1a34:	1fff871c 	.word	0x1fff871c
    1a38:	1fff8895 	.word	0x1fff8895
    1a3c:	1fff8b24 	.word	0x1fff8b24
    1a40:	1fff8898 	.word	0x1fff8898
    1a44:	1fff9068 	.word	0x1fff9068
    1a48:	00007780 	.word	0x00007780
    1a4c:	00008504 	.word	0x00008504
    1a50:	1fff8726 	.word	0x1fff8726
    1a54:	1fff8bf0 	.word	0x1fff8bf0
    1a58:	1fff8ae0 	.word	0x1fff8ae0
    1a5c:	1fff8eb8 	.word	0x1fff8eb8
    1a60:	1fff872b 	.word	0x1fff872b
    1a64:	1fff871d 	.word	0x1fff871d
    1a68:	1fff872a 	.word	0x1fff872a
    1a6c:	1fff8bf4 	.word	0x1fff8bf4
    1a70:	1fff8768 	.word	0x1fff8768
				if (!this_dir) {
					leds[shelf[s][beatsin16_halfdown(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
    1a74:	498b      	ldr	r1, [pc, #556]	; (1ca4 <juggle_pal_onedir()+0x460>)
    1a76:	7808      	ldrb	r0, [r1, #0]
    1a78:	f899 1000 	ldrb.w	r1, [r9]
    1a7c:	4403      	add	r3, r0
    1a7e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    1a82:	b298      	uxth	r0, r3
    1a84:	28ff      	cmp	r0, #255	; 0xff
    1a86:	bf9c      	itt	ls
    1a88:	0203      	lslls	r3, r0, #8
    1a8a:	b298      	uxthls	r0, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a8c:	9b07      	ldr	r3, [sp, #28]
    1a8e:	681b      	ldr	r3, [r3, #0]
    1a90:	930c      	str	r3, [sp, #48]	; 0x30
	return ret;
    1a92:	9d0c      	ldr	r5, [sp, #48]	; 0x30


LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    1a94:	f44f 738c 	mov.w	r3, #280	; 0x118
    1a98:	fb03 f305 	mul.w	r3, r3, r5
    1a9c:	fb00 f303 	mul.w	r3, r0, r3
    1aa0:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1aa4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    1aa8:	3901      	subs	r1, #1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1aaa:	045f      	lsls	r7, r3, #17
    1aac:	b289      	uxth	r1, r1
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1aae:	f3c3 00ca 	ubfx	r0, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1ab2:	d503      	bpl.n	1abc <juggle_pal_onedir()+0x278>
    1ab4:	f5c0 60ff 	rsb	r0, r0, #2040	; 0x7f8
    1ab8:	3007      	adds	r0, #7
    1aba:	b280      	uxth	r0, r0
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1abc:	9f06      	ldr	r7, [sp, #24]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1abe:	0a05      	lsrs	r5, r0, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1ac0:	f3c0 0046 	ubfx	r0, r0, #1, #7
    1ac4:	f817 e005 	ldrb.w	lr, [r7, r5]
    1ac8:	9f05      	ldr	r7, [sp, #20]
    1aca:	f837 5015 	ldrh.w	r5, [r7, r5, lsl #1]
    1ace:	fb0e 5000 	mla	r0, lr, r0, r5

    if( theta & 0x8000 ) y = -y;
    1ad2:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1ad4:	b280      	uxth	r0, r0

    if( theta & 0x8000 ) y = -y;
    1ad6:	bf48      	it	mi
    1ad8:	4240      	negmi	r0, r0
    1ada:	b200      	sxth	r0, r0
				}
				else {
					leds[shelf[s][beatsin16_halfup(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
    1adc:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
    1ae0:	b283      	uxth	r3, r0
    1ae2:	fb01 3303 	mla	r3, r1, r3, r3
    1ae6:	9808      	ldr	r0, [sp, #32]
    1ae8:	0c19      	lsrs	r1, r3, #16
    1aea:	9b04      	ldr	r3, [sp, #16]
    1aec:	5c45      	ldrb	r5, [r0, r1]
    1aee:	9903      	ldr	r1, [sp, #12]
    1af0:	781b      	ldrb	r3, [r3, #0]
    1af2:	7809      	ldrb	r1, [r1, #0]
    1af4:	9100      	str	r1, [sp, #0]


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1af6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1afa:	496b      	ldr	r1, [pc, #428]	; (1ca8 <juggle_pal_onedir()+0x464>)
    1afc:	a80b      	add	r0, sp, #44	; 0x2c
    1afe:	f002 faeb 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1b02:	1971      	adds	r1, r6, r5
    1b04:	5d73      	ldrb	r3, [r6, r5]
    1b06:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    1b0a:	fa83 f352 	uqadd8	r3, r3, r2
    1b0e:	5573      	strb	r3, [r6, r5]
    1b10:	784a      	ldrb	r2, [r1, #1]
    1b12:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    1b16:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1b1a:	704a      	strb	r2, [r1, #1]
    1b1c:	788b      	ldrb	r3, [r1, #2]
    1b1e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    1b22:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    1b26:	708b      	strb	r3, [r1, #2]
				}
				this_index += this_diff;
    1b28:	4b60      	ldr	r3, [pc, #384]	; (1cac <juggle_pal_onedir()+0x468>)
    1b2a:	f898 1000 	ldrb.w	r1, [r8]
    1b2e:	781a      	ldrb	r2, [r3, #0]
			}
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (int i = 0; i < numdots; i++) {
    1b30:	f89b 3000 	ldrb.w	r3, [fp]
					leds[shelf[s][beatsin16_halfdown(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
				}
				else {
					leds[shelf[s][beatsin16_halfup(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
				}
				this_index += this_diff;
    1b34:	440a      	add	r2, r1
			}
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (int i = 0; i < numdots; i++) {
    1b36:	3401      	adds	r4, #1
					leds[shelf[s][beatsin16_halfdown(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
				}
				else {
					leds[shelf[s][beatsin16_halfup(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
				}
				this_index += this_diff;
    1b38:	b2d2      	uxtb	r2, r2
			}
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (int i = 0; i < numdots; i++) {
    1b3a:	42a3      	cmp	r3, r4
					leds[shelf[s][beatsin16_halfdown(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
				}
				else {
					leds[shelf[s][beatsin16_halfup(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
				}
				this_index += this_diff;
    1b3c:	f888 2000 	strb.w	r2, [r8]
			}
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (int i = 0; i < numdots; i++) {
    1b40:	f77f af48 	ble.w	19d4 <juggle_pal_onedir()+0x190>
				if (!this_dir) {
    1b44:	f89a 1000 	ldrb.w	r1, [sl]
    1b48:	2900      	cmp	r1, #0
    1b4a:	d093      	beq.n	1a74 <juggle_pal_onedir()+0x230>
					leds[shelf[s][beatsin16_halfdown(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
				}
				else {
					leds[shelf[s][beatsin16_halfup(this_beat + 2 * i + numdots, 0, shelf_num_leds[s] - 1)]] += ColorFromPalette(current_palette, this_index, this_bright, current_blending);
    1b4c:	4955      	ldr	r1, [pc, #340]	; (1ca4 <juggle_pal_onedir()+0x460>)
    1b4e:	7808      	ldrb	r0, [r1, #0]
    1b50:	f899 1000 	ldrb.w	r1, [r9]
    1b54:	4403      	add	r3, r0
    1b56:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    1b5a:	b298      	uxth	r0, r3
    1b5c:	28ff      	cmp	r0, #255	; 0xff
    1b5e:	bf9c      	itt	ls
    1b60:	0203      	lslls	r3, r0, #8
    1b62:	b298      	uxthls	r0, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b64:	9b07      	ldr	r3, [sp, #28]
    1b66:	681b      	ldr	r3, [r3, #0]
    1b68:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
    1b6a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    1b6c:	f44f 738c 	mov.w	r3, #280	; 0x118
    1b70:	fb03 f305 	mul.w	r3, r3, r5
    1b74:	fb00 f303 	mul.w	r3, r0, r3
    1b78:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1b7c:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1b80:	b29b      	uxth	r3, r3
    1b82:	3901      	subs	r1, #1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1b84:	045d      	lsls	r5, r3, #17
    1b86:	b289      	uxth	r1, r1
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1b88:	f3c3 00ca 	ubfx	r0, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1b8c:	d596      	bpl.n	1abc <juggle_pal_onedir()+0x278>
    1b8e:	e791      	b.n	1ab4 <juggle_pal_onedir()+0x270>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1b90:	4947      	ldr	r1, [pc, #284]	; (1cb0 <juggle_pal_onedir()+0x46c>)
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255 / numdots);
		this_dir = random8(2);
    1b92:	f8df 8134 	ldr.w	r8, [pc, #308]	; 1cc8 <juggle_pal_onedir()+0x484>
    1b96:	880b      	ldrh	r3, [r1, #0]
		this_delay =10; 
		use_all_shelves = random8(2);
    1b98:	4c46      	ldr	r4, [pc, #280]	; (1cb4 <juggle_pal_onedir()+0x470>)
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1b9a:	f8df a108 	ldr.w	sl, [pc, #264]	; 1ca4 <juggle_pal_onedir()+0x460>
		this_diff = random8(0, 255 / numdots);
    1b9e:	f8df 910c 	ldr.w	r9, [pc, #268]	; 1cac <juggle_pal_onedir()+0x468>


void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
    1ba2:	f8df b128 	ldr.w	fp, [pc, #296]	; 1ccc <juggle_pal_onedir()+0x488>
    1ba6:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    1baa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    1bae:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    1bb2:	3719      	adds	r7, #25
    1bb4:	b2bf      	uxth	r7, r7
    1bb6:	eb07 2347 	add.w	r3, r7, r7, lsl #9
    1bba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    1bbe:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1bc2:	3319      	adds	r3, #25
    1bc4:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    1bc8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1bcc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1bd0:	3319      	adds	r3, #25
    1bd2:	b29b      	uxth	r3, r3
    1bd4:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    1bd8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    1bdc:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    1be0:	3519      	adds	r5, #25
    1be2:	b2ad      	uxth	r5, r5
    1be4:	eb05 2045 	add.w	r0, r5, r5, lsl #9
    1be8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1bec:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    1bf0:	3019      	adds	r0, #25
    1bf2:	b280      	uxth	r0, r0
    1bf4:	eb00 2640 	add.w	r6, r0, r0, lsl #9
    1bf8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
    1bfc:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    1c00:	3619      	adds	r6, #25
    1c02:	b2b6      	uxth	r6, r6
    1c04:	eb06 2e46 	add.w	lr, r6, r6, lsl #9
    1c08:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1c0c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1c10:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    1c14:	b2db      	uxtb	r3, r3
    1c16:	f10e 0e19 	add.w	lr, lr, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1c1a:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    1c1e:	eb07 2717 	add.w	r7, r7, r7, lsr #8
		this_beat = random8(4, 20);
		this_diff = random8(0, 255 / numdots);
    1c22:	eb00 2010 	add.w	r0, r0, r0, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1c26:	fa1f fe8e 	uxth.w	lr, lr
		this_dir = random8(2);
    1c2a:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    1c2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1c32:	eb05 2515 	add.w	r5, r5, r5, lsr #8
		this_beat = random8(4, 20);
		this_diff = random8(0, 255 / numdots);
		this_dir = random8(2);
    1c36:	f888 6000 	strb.w	r6, [r8]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1c3a:	f3c7 1c81 	ubfx	ip, r7, #6, #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1c3e:	f8a1 e000 	strh.w	lr, [r1]
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255 / numdots);
    1c42:	b2c7      	uxtb	r7, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1c44:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    1c48:	4e1b      	ldr	r6, [pc, #108]	; (1cb8 <juggle_pal_onedir()+0x474>)

void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    1c4a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1cd0 <juggle_pal_onedir()+0x48c>
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    1c4e:	111b      	asrs	r3, r3, #4
		this_beat = random8(4, 20);
    1c50:	f3c5 1503 	ubfx	r5, r5, #4, #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1c54:	f10c 0002 	add.w	r0, ip, #2
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    1c58:	3310      	adds	r3, #16
		this_beat = random8(4, 20);
    1c5a:	3504      	adds	r5, #4
		this_diff = random8(0, 255 / numdots);
    1c5c:	21ff      	movs	r1, #255	; 0xff
    1c5e:	fb91 f1f0 	sdiv	r1, r1, r0
    1c62:	fb01 f707 	mul.w	r7, r1, r7
		this_dir = random8(2);
		this_delay =10; 
		use_all_shelves = random8(2);
    1c66:	f3ce 11c0 	ubfx	r1, lr, #7, #1
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    1c6a:	f88a 5000 	strb.w	r5, [sl]
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
    1c6e:	7033      	strb	r3, [r6, #0]
		this_beat = random8(4, 20);
		this_diff = random8(0, 255 / numdots);
		this_dir = random8(2);
		this_delay =10; 
    1c70:	f8df c060 	ldr.w	ip, [pc, #96]	; 1cd4 <juggle_pal_onedir()+0x490>
		use_all_shelves = random8(2);
    1c74:	7021      	strb	r1, [r4, #0]
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255 / numdots);
    1c76:	123b      	asrs	r3, r7, #8
void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
    1c78:	4d10      	ldr	r5, [pc, #64]	; (1cbc <juggle_pal_onedir()+0x478>)


void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
    1c7a:	f88b 0000 	strb.w	r0, [fp]
		use_palette = 1;
    1c7e:	2101      	movs	r1, #1
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255 / numdots);
    1c80:	f889 3000 	strb.w	r3, [r9]

void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    1c84:	f888 1000 	strb.w	r1, [r8]



void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
    1c88:	2300      	movs	r3, #0
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255 / numdots);
		this_dir = random8(2);
		this_delay =10; 
    1c8a:	270a      	movs	r7, #10
    1c8c:	2111      	movs	r1, #17
    1c8e:	480c      	ldr	r0, [pc, #48]	; (1cc0 <juggle_pal_onedir()+0x47c>)
void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(1);
    1c90:	702b      	strb	r3, [r5, #0]



void juggle_pal_onedir() {
	if (mode_change) {
		mode_change = 0;
    1c92:	7013      	strb	r3, [r2, #0]
		reset_juggle_index = random8(1);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255 / numdots);
		this_dir = random8(2);
		this_delay =10; 
    1c94:	f8cc 7000 	str.w	r7, [ip]
    1c98:	f004 f898 	bl	5dcc <usb_serial_write>
    1c9c:	4809      	ldr	r0, [pc, #36]	; (1cc4 <juggle_pal_onedir()+0x480>)
    1c9e:	f004 fa99 	bl	61d4 <Print::println()>
    1ca2:	e5dc      	b.n	185e <juggle_pal_onedir()+0x1a>
    1ca4:	1fff872b 	.word	0x1fff872b
    1ca8:	1fff8ae0 	.word	0x1fff8ae0
    1cac:	1fff871d 	.word	0x1fff871d
    1cb0:	1fff876c 	.word	0x1fff876c
    1cb4:	1fff8895 	.word	0x1fff8895
    1cb8:	1fff871c 	.word	0x1fff871c
    1cbc:	1fff8bfc 	.word	0x1fff8bfc
    1cc0:	00006f40 	.word	0x00006f40
    1cc4:	1fff8774 	.word	0x1fff8774
    1cc8:	1fff8bf4 	.word	0x1fff8bf4
    1ccc:	1fff872a 	.word	0x1fff872a
    1cd0:	1fff871e 	.word	0x1fff871e
    1cd4:	1fff8720 	.word	0x1fff8720

00001cd8 <fire_mirror()>:
}



// fire mirrored from ends or center
void fire_mirror() {
    1cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    1cdc:	4a8a      	ldr	r2, [pc, #552]	; (1f08 <fire_mirror()+0x230>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1cde:	4c8b      	ldr	r4, [pc, #556]	; (1f0c <fire_mirror()+0x234>)
    1ce0:	7813      	ldrb	r3, [r2, #0]
		mode_change = 0;
		sparking = random8(50, 110);
    1ce2:	4e8b      	ldr	r6, [pc, #556]	; (1f10 <fire_mirror()+0x238>)
}



// fire mirrored from ends or center
void fire_mirror() {
    1ce4:	b089      	sub	sp, #36	; 0x24
	if (mode_change) {
    1ce6:	2b00      	cmp	r3, #0
    1ce8:	f040 81b1 	bne.w	204e <fire_mirror()+0x376>
    1cec:	4b89      	ldr	r3, [pc, #548]	; (1f14 <fire_mirror()+0x23c>)
    1cee:	4f8a      	ldr	r7, [pc, #552]	; (1f18 <fire_mirror()+0x240>)
    1cf0:	4d8a      	ldr	r5, [pc, #552]	; (1f1c <fire_mirror()+0x244>)
    1cf2:	9305      	str	r3, [sp, #20]
    1cf4:	783a      	ldrb	r2, [r7, #0]
    1cf6:	4f8a      	ldr	r7, [pc, #552]	; (1f20 <fire_mirror()+0x248>)
    1cf8:	488a      	ldr	r0, [pc, #552]	; (1f24 <fire_mirror()+0x24c>)
    1cfa:	8823      	ldrh	r3, [r4, #0]
    1cfc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1d00:	0052      	lsls	r2, r2, #1
    1d02:	fb87 1702 	smull	r1, r7, r7, r2
    1d06:	4417      	add	r7, r2
    1d08:	17d2      	asrs	r2, r2, #31
    1d0a:	ebc2 17a7 	rsb	r7, r2, r7, asr #6
    1d0e:	3702      	adds	r7, #2
    1d10:	b2ff      	uxtb	r7, r7
    1d12:	f100 0e5e 	add.w	lr, r0, #94	; 0x5e
    1d16:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1d1a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1d1e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1d22:	3319      	adds	r3, #25
    1d24:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1d26:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    1d2a:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    1d2e:	b2d2      	uxtb	r2, r2
    1d30:	fb12 f207 	smulbb	r2, r2, r7
    1d34:	eba1 2212 	sub.w	r2, r1, r2, lsr #8
		use_all_shelves = random8(2);
		Serial.println("fire_mirror");
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
    1d38:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		this_delay = 15;
		use_all_shelves = random8(2);
		Serial.println("fire_mirror");
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
    1d3c:	4586      	cmp	lr, r0
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
    1d3e:	7002      	strb	r2, [r0, #0]
		this_delay = 15;
		use_all_shelves = random8(2);
		Serial.println("fire_mirror");
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
    1d40:	d1e9      	bne.n	1d16 <fire_mirror()+0x3e>
    1d42:	4879      	ldr	r0, [pc, #484]	; (1f28 <fire_mirror()+0x250>)
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
		}
		for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
    1d44:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 1f38 <fire_mirror()+0x260>
    1d48:	f1a0 085c 	sub.w	r8, r0, #92	; 0x5c
    1d4c:	4647      	mov	r7, r8
    1d4e:	f100 0e02 	add.w	lr, r0, #2
    1d52:	7802      	ldrb	r2, [r0, #0]
    1d54:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
    1d58:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    1d5c:	fb8c 9102 	smull	r9, r1, ip, r2
    1d60:	eba1 72e2 	sub.w	r2, r1, r2, asr #31
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
		}
		for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
    1d64:	42b8      	cmp	r0, r7
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
    1d66:	f80e 2d01 	strb.w	r2, [lr, #-1]!
	}
		static byte heat[NUM_LEDS / 2];
		for (int i = 0; i < NUM_LEDS / 2; i++) {
			heat[i] = qsub8(heat[i], random8(0, ((cooling * 10) / (NUM_LEDS / 2)) + 2));
		}
		for (int k = (NUM_LEDS / 2) - 1; k >= 2; k--) {
    1d6a:	d1f2      	bne.n	1d52 <fire_mirror()+0x7a>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1d6c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1d70:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1d74:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1d78:	3319      	adds	r3, #25
    1d7a:	b29b      	uxth	r3, r3
			heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
		}
		if (random8() < sparking) {
    1d7c:	7830      	ldrb	r0, [r6, #0]
    1d7e:	8023      	strh	r3, [r4, #0]
    1d80:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    1d84:	b2d2      	uxtb	r2, r2
    1d86:	4290      	cmp	r0, r2
    1d88:	4960      	ldr	r1, [pc, #384]	; (1f0c <fire_mirror()+0x234>)
    1d8a:	d925      	bls.n	1dd8 <fire_mirror()+0x100>
    1d8c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1d90:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1d94:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1d98:	3319      	adds	r3, #25
    1d9a:	b29b      	uxth	r3, r3
    1d9c:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    1da0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1da4:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    1da8:	3019      	adds	r0, #25
    1daa:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1dac:	eb00 2210 	add.w	r2, r0, r0, lsr #8
    1db0:	eb03 2313 	add.w	r3, r3, r3, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    1db4:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    1db6:	b2db      	uxtb	r3, r3
    1db8:	eb02 0442 	add.w	r4, r2, r2, lsl #1
    1dbc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    1dc0:	121b      	asrs	r3, r3, #8
    1dc2:	ebc2 1244 	rsb	r2, r2, r4, lsl #5
    1dc6:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1dc8:	8008      	strh	r0, [r1, #0]
    1dca:	3a60      	subs	r2, #96	; 0x60
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
    1dcc:	f818 1003 	ldrb.w	r1, [r8, r3]
    1dd0:	fa81 f152 	uqadd8	r1, r1, r2
    1dd4:	f808 1003 	strb.w	r1, [r8, r3]
		}
		if (this_dir) {
    1dd8:	782b      	ldrb	r3, [r5, #0]
    1dda:	2b00      	cmp	r3, #0
    1ddc:	f000 80ae 	beq.w	1f3c <fire_mirror()+0x264>
    1de0:	4b52      	ldr	r3, [pc, #328]	; (1f2c <fire_mirror()+0x254>)
    1de2:	9302      	str	r3, [sp, #8]
    1de4:	461d      	mov	r5, r3
    1de6:	9303      	str	r3, [sp, #12]
    1de8:	f04f 0b00 	mov.w	fp, #0
    1dec:	f10d 0a1c 	add.w	sl, sp, #28
			for (int j = 0; j < NUM_LEDS / 2; j++) {
				if (!use_all_shelves) {
    1df0:	9b05      	ldr	r3, [sp, #20]
    1df2:	781b      	ldrb	r3, [r3, #0]
    1df4:	2b00      	cmp	r3, #0
    1df6:	d066      	beq.n	1ec6 <fire_mirror()+0x1ee>
    1df8:	4b4d      	ldr	r3, [pc, #308]	; (1f30 <fire_mirror()+0x258>)
    1dfa:	f8cd b004 	str.w	fp, [sp, #4]
    1dfe:	f04f 0800 	mov.w	r8, #0
    1e02:	461e      	mov	r6, r3
    1e04:	46b3      	mov	fp, r6
					leds[j] = HeatColor(heat[j]);
					leds[NUM_LEDS - 1 - j] = HeatColor(heat[j]);
				}
				else {
					for (uint8_t s = 0; s < 4; s++) {
						int pos = j * (shelf_num_leds[s] / (NUM_LEDS / 2));
    1e06:	4b46      	ldr	r3, [pc, #280]	; (1f20 <fire_mirror()+0x248>)
    1e08:	f816 4b01 	ldrb.w	r4, [r6], #1
						leds[shelf[s][pos]] += HeatColor(heat[j]);
    1e0c:	7839      	ldrb	r1, [r7, #0]
					leds[j] = HeatColor(heat[j]);
					leds[NUM_LEDS - 1 - j] = HeatColor(heat[j]);
				}
				else {
					for (uint8_t s = 0; s < 4; s++) {
						int pos = j * (shelf_num_leds[s] / (NUM_LEDS / 2));
    1e0e:	fba3 3404 	umull	r3, r4, r3, r4
    1e12:	9b01      	ldr	r3, [sp, #4]
    1e14:	09a4      	lsrs	r4, r4, #6
    1e16:	fb03 f404 	mul.w	r4, r3, r4
						leds[shelf[s][pos]] += HeatColor(heat[j]);
    1e1a:	4b46      	ldr	r3, [pc, #280]	; (1f34 <fire_mirror()+0x25c>)
    1e1c:	eb08 1988 	add.w	r9, r8, r8, lsl #6
    1e20:	4499      	add	r9, r3
    1e22:	4650      	mov	r0, sl
    1e24:	f819 2004 	ldrb.w	r2, [r9, r4]
    1e28:	9200      	str	r2, [sp, #0]
    1e2a:	f002 f933 	bl	4094 <HeatColor(unsigned char)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1e2e:	9a00      	ldr	r2, [sp, #0]
    1e30:	f89d e01c 	ldrb.w	lr, [sp, #28]
    1e34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1e38:	18a8      	adds	r0, r5, r2
    1e3a:	5ca9      	ldrb	r1, [r5, r2]
    1e3c:	fa81 f15e 	uqadd8	r1, r1, lr
    1e40:	54a9      	strb	r1, [r5, r2]
    1e42:	f89d 201d 	ldrb.w	r2, [sp, #29]
    1e46:	7841      	ldrb	r1, [r0, #1]
    1e48:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    1e4c:	7041      	strb	r1, [r0, #1]
    1e4e:	7882      	ldrb	r2, [r0, #2]
    1e50:	f89d 101e 	ldrb.w	r1, [sp, #30]
    1e54:	fa82 f251 	uqadd8	r2, r2, r1
						leds[shelf[s][shelf_num_leds[s] - 1 - pos]] += HeatColor(heat[j]);
    1e58:	f89b 3000 	ldrb.w	r3, [fp]
    1e5c:	7839      	ldrb	r1, [r7, #0]
        b = qadd8( b, rhs.b);
    1e5e:	7082      	strb	r2, [r0, #2]
    1e60:	3b01      	subs	r3, #1
    1e62:	1b1c      	subs	r4, r3, r4
    1e64:	4650      	mov	r0, sl
    1e66:	f819 4004 	ldrb.w	r4, [r9, r4]
    1e6a:	f002 f913 	bl	4094 <HeatColor(unsigned char)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1e6e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    1e72:	18a9      	adds	r1, r5, r2
    1e74:	5cab      	ldrb	r3, [r5, r2]
    1e76:	f89d 001c 	ldrb.w	r0, [sp, #28]
    1e7a:	fa83 f350 	uqadd8	r3, r3, r0
    1e7e:	54ab      	strb	r3, [r5, r2]
    1e80:	f89d 301d 	ldrb.w	r3, [sp, #29]
    1e84:	784a      	ldrb	r2, [r1, #1]
    1e86:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1e8a:	704a      	strb	r2, [r1, #1]
    1e8c:	788b      	ldrb	r3, [r1, #2]
    1e8e:	f89d 201e 	ldrb.w	r2, [sp, #30]
    1e92:	fa83 f352 	uqadd8	r3, r3, r2
    1e96:	f108 0801 	add.w	r8, r8, #1
				if (!use_all_shelves) {
					leds[j] = HeatColor(heat[j]);
					leds[NUM_LEDS - 1 - j] = HeatColor(heat[j]);
				}
				else {
					for (uint8_t s = 0; s < 4; s++) {
    1e9a:	f1b8 0f04 	cmp.w	r8, #4
        b = qadd8( b, rhs.b);
    1e9e:	708b      	strb	r3, [r1, #2]
    1ea0:	d1b0      	bne.n	1e04 <fire_mirror()+0x12c>
    1ea2:	f8dd b004 	ldr.w	fp, [sp, #4]
    1ea6:	9b02      	ldr	r3, [sp, #8]
    1ea8:	3303      	adds	r3, #3
    1eaa:	9302      	str	r3, [sp, #8]
    1eac:	9b03      	ldr	r3, [sp, #12]
		if (random8() < sparking) {
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}
		if (this_dir) {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
    1eae:	f10b 0b01 	add.w	fp, fp, #1
    1eb2:	3b03      	subs	r3, #3
    1eb4:	f1bb 0f5e 	cmp.w	fp, #94	; 0x5e
    1eb8:	f107 0701 	add.w	r7, r7, #1
    1ebc:	9303      	str	r3, [sp, #12]
    1ebe:	d197      	bne.n	1df0 <fire_mirror()+0x118>
						leds[shelf[s][(shelf_num_leds[s] / 2) + pos]] = HeatColor(heat[j]);
					}
				}
			}
		}
}
    1ec0:	b009      	add	sp, #36	; 0x24
    1ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			heat[y] = qadd8(heat[y], random8(160, 255));
		}
		if (this_dir) {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
				if (!use_all_shelves) {
					leds[j] = HeatColor(heat[j]);
    1ec6:	7839      	ldrb	r1, [r7, #0]
    1ec8:	4650      	mov	r0, sl
    1eca:	f002 f8e3 	bl	4094 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1ece:	9e02      	ldr	r6, [sp, #8]
    1ed0:	f89d 001c 	ldrb.w	r0, [sp, #28]
        g = rhs.g;
    1ed4:	f89d 201d 	ldrb.w	r2, [sp, #29]
        b = rhs.b;
    1ed8:	f89d 301e 	ldrb.w	r3, [sp, #30]
					leds[NUM_LEDS - 1 - j] = HeatColor(heat[j]);
    1edc:	7839      	ldrb	r1, [r7, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1ede:	7030      	strb	r0, [r6, #0]
        g = rhs.g;
    1ee0:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    1ee2:	70b3      	strb	r3, [r6, #2]
    1ee4:	4650      	mov	r0, sl
    1ee6:	f002 f8d5 	bl	4094 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1eea:	9c03      	ldr	r4, [sp, #12]
    1eec:	f89d 101c 	ldrb.w	r1, [sp, #28]
        g = rhs.g;
    1ef0:	f89d 201d 	ldrb.w	r2, [sp, #29]
        b = rhs.b;
    1ef4:	f89d 301e 	ldrb.w	r3, [sp, #30]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1ef8:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231
        g = rhs.g;
    1efc:	f884 2232 	strb.w	r2, [r4, #562]	; 0x232
        b = rhs.b;
    1f00:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
    1f04:	e7cf      	b.n	1ea6 <fire_mirror()+0x1ce>
    1f06:	bf00      	nop
    1f08:	1fff8724 	.word	0x1fff8724
    1f0c:	1fff876c 	.word	0x1fff876c
    1f10:	1fff8728 	.word	0x1fff8728
    1f14:	1fff8895 	.word	0x1fff8895
    1f18:	1fff8725 	.word	0x1fff8725
    1f1c:	1fff8bf4 	.word	0x1fff8bf4
    1f20:	ae4c415d 	.word	0xae4c415d
    1f24:	1fff8cc7 	.word	0x1fff8cc7
    1f28:	1fff8d24 	.word	0x1fff8d24
    1f2c:	1fff8898 	.word	0x1fff8898
    1f30:	1fff8768 	.word	0x1fff8768
    1f34:	1fff8eb8 	.word	0x1fff8eb8
    1f38:	55555556 	.word	0x55555556
		}
		if (random8() < sparking) {
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}
		if (this_dir) {
    1f3c:	9302      	str	r3, [sp, #8]
				}
			}
		}
		else {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
				if (!use_all_shelves) {
    1f3e:	9b05      	ldr	r3, [sp, #20]
    1f40:	4a72      	ldr	r2, [pc, #456]	; (210c <fire_mirror()+0x434>)
    1f42:	781b      	ldrb	r3, [r3, #0]
    1f44:	9203      	str	r2, [sp, #12]
		}
		if (random8() < sparking) {
			int y = random8(7);
			heat[y] = qadd8(heat[y], random8(160, 255));
		}
		if (this_dir) {
    1f46:	4615      	mov	r5, r2
    1f48:	9204      	str	r2, [sp, #16]
    1f4a:	f10d 0a1c 	add.w	sl, sp, #28
				}
			}
		}
		else {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
				if (!use_all_shelves) {
    1f4e:	2b00      	cmp	r3, #0
    1f50:	d05a      	beq.n	2008 <fire_mirror()+0x330>
    1f52:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1f56:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 212c <fire_mirror()+0x454>
    1f5a:	9301      	str	r3, [sp, #4]
    1f5c:	f04f 0800 	mov.w	r8, #0
    1f60:	f8cd b000 	str.w	fp, [sp]
					leds[(NUM_LEDS / 2) + j] = HeatColor(heat[j]);
				}
				else {
					for (uint8_t s = 0; s < 4; s++) {
						uint8_t pos = j * ((shelf_num_leds[s]/2) / (NUM_LEDS / 2));
						leds[shelf[s][(shelf_num_leds[s] / 2) - 1 - pos]] = HeatColor(heat[j]);
    1f64:	4b6a      	ldr	r3, [pc, #424]	; (2110 <fire_mirror()+0x438>)
					leds[(NUM_LEDS / 2) - 1 - j] = HeatColor(heat[j]);
					leds[(NUM_LEDS / 2) + j] = HeatColor(heat[j]);
				}
				else {
					for (uint8_t s = 0; s < 4; s++) {
						uint8_t pos = j * ((shelf_num_leds[s]/2) / (NUM_LEDS / 2));
    1f66:	f81b 6b01 	ldrb.w	r6, [fp], #1
						leds[shelf[s][(shelf_num_leds[s] / 2) - 1 - pos]] = HeatColor(heat[j]);
    1f6a:	7839      	ldrb	r1, [r7, #0]
    1f6c:	fba3 3406 	umull	r3, r4, r3, r6
    1f70:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    1f74:	09e4      	lsrs	r4, r4, #7
    1f76:	fb14 f403 	smulbb	r4, r4, r3
    1f7a:	b2e4      	uxtb	r4, r4
    1f7c:	4b65      	ldr	r3, [pc, #404]	; (2114 <fire_mirror()+0x43c>)
    1f7e:	43e0      	mvns	r0, r4
    1f80:	eb08 1988 	add.w	r9, r8, r8, lsl #6
    1f84:	4499      	add	r9, r3
    1f86:	eb00 0656 	add.w	r6, r0, r6, lsr #1
    1f8a:	4650      	mov	r0, sl
    1f8c:	f819 6006 	ldrb.w	r6, [r9, r6]
    1f90:	f002 f880 	bl	4094 <HeatColor(unsigned char)>
						leds[shelf[s][(shelf_num_leds[s] / 2) + pos]] = HeatColor(heat[j]);
    1f94:	9a00      	ldr	r2, [sp, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1f96:	f89d 001c 	ldrb.w	r0, [sp, #28]
    1f9a:	7811      	ldrb	r1, [r2, #0]
        g = rhs.g;
    1f9c:	f89d e01d 	ldrb.w	lr, [sp, #29]
        b = rhs.b;
    1fa0:	f89d 201e 	ldrb.w	r2, [sp, #30]
    1fa4:	eb04 0451 	add.w	r4, r4, r1, lsr #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1fa8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    1fac:	f814 4009 	ldrb.w	r4, [r4, r9]
    1fb0:	55a8      	strb	r0, [r5, r6]
    1fb2:	442e      	add	r6, r5
    1fb4:	7839      	ldrb	r1, [r7, #0]
        g = rhs.g;
        b = rhs.b;
    1fb6:	70b2      	strb	r2, [r6, #2]
    1fb8:	4650      	mov	r0, sl

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1fba:	f886 e001 	strb.w	lr, [r6, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1fbe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1fc2:	f002 f867 	bl	4094 <HeatColor(unsigned char)>
    1fc6:	f108 0801 	add.w	r8, r8, #1
    1fca:	192a      	adds	r2, r5, r4
    1fcc:	f89d 601c 	ldrb.w	r6, [sp, #28]
        g = rhs.g;
    1fd0:	f89d 001d 	ldrb.w	r0, [sp, #29]
        b = rhs.b;
    1fd4:	f89d 101e 	ldrb.w	r1, [sp, #30]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1fd8:	552e      	strb	r6, [r5, r4]
				if (!use_all_shelves) {
					leds[(NUM_LEDS / 2) - 1 - j] = HeatColor(heat[j]);
					leds[(NUM_LEDS / 2) + j] = HeatColor(heat[j]);
				}
				else {
					for (uint8_t s = 0; s < 4; s++) {
    1fda:	f1b8 0f04 	cmp.w	r8, #4
        g = rhs.g;
    1fde:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    1fe0:	7091      	strb	r1, [r2, #2]
    1fe2:	d1bd      	bne.n	1f60 <fire_mirror()+0x288>
    1fe4:	9a03      	ldr	r2, [sp, #12]
					}
				}
			}
		}
		else {
			for (int j = 0; j < NUM_LEDS / 2; j++) {
    1fe6:	9b02      	ldr	r3, [sp, #8]
    1fe8:	3a03      	subs	r2, #3
    1fea:	9203      	str	r2, [sp, #12]
    1fec:	9a04      	ldr	r2, [sp, #16]
    1fee:	3301      	adds	r3, #1
    1ff0:	3203      	adds	r2, #3
    1ff2:	2b5e      	cmp	r3, #94	; 0x5e
    1ff4:	9302      	str	r3, [sp, #8]
    1ff6:	f107 0701 	add.w	r7, r7, #1
    1ffa:	9204      	str	r2, [sp, #16]
    1ffc:	f43f af60 	beq.w	1ec0 <fire_mirror()+0x1e8>
				if (!use_all_shelves) {
    2000:	9b05      	ldr	r3, [sp, #20]
    2002:	781b      	ldrb	r3, [r3, #0]
    2004:	2b00      	cmp	r3, #0
    2006:	d1a4      	bne.n	1f52 <fire_mirror()+0x27a>
					leds[(NUM_LEDS / 2) - 1 - j] = HeatColor(heat[j]);
    2008:	7839      	ldrb	r1, [r7, #0]
    200a:	4650      	mov	r0, sl
    200c:	f002 f842 	bl	4094 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2010:	9e03      	ldr	r6, [sp, #12]
    2012:	f89d 001c 	ldrb.w	r0, [sp, #28]
        g = rhs.g;
    2016:	f89d 201d 	ldrb.w	r2, [sp, #29]
        b = rhs.b;
    201a:	f89d 301e 	ldrb.w	r3, [sp, #30]
					leds[(NUM_LEDS / 2) + j] = HeatColor(heat[j]);
    201e:	7839      	ldrb	r1, [r7, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2020:	f886 0117 	strb.w	r0, [r6, #279]	; 0x117
        g = rhs.g;
    2024:	f886 2118 	strb.w	r2, [r6, #280]	; 0x118
        b = rhs.b;
    2028:	f886 3119 	strb.w	r3, [r6, #281]	; 0x119
    202c:	4650      	mov	r0, sl
    202e:	f002 f831 	bl	4094 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2032:	9c04      	ldr	r4, [sp, #16]
    2034:	f89d 101c 	ldrb.w	r1, [sp, #28]
        g = rhs.g;
    2038:	f89d 201d 	ldrb.w	r2, [sp, #29]
        b = rhs.b;
    203c:	f89d 301e 	ldrb.w	r3, [sp, #30]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2040:	f884 111a 	strb.w	r1, [r4, #282]	; 0x11a
        g = rhs.g;
    2044:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
        b = rhs.b;
    2048:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
    204c:	e7ca      	b.n	1fe4 <fire_mirror()+0x30c>
    204e:	8823      	ldrh	r3, [r4, #0]
// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
    2050:	4f31      	ldr	r7, [pc, #196]	; (2118 <fire_mirror()+0x440>)
		use_palette = 0;
		this_dir = random8(2);
		this_delay = 15;
		use_all_shelves = random8(2);
    2052:	4932      	ldr	r1, [pc, #200]	; (211c <fire_mirror()+0x444>)
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
		this_dir = random8(2);
    2054:	4d32      	ldr	r5, [pc, #200]	; (2120 <fire_mirror()+0x448>)
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
    2056:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 2130 <fire_mirror()+0x458>
		this_dir = random8(2);
		this_delay = 15;
		use_all_shelves = random8(2);
    205a:	9105      	str	r1, [sp, #20]
    205c:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    2060:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    2064:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    2068:	f10e 0e19 	add.w	lr, lr, #25
    206c:	fa1f fe8e 	uxth.w	lr, lr
    2070:	eb0e 234e 	add.w	r3, lr, lr, lsl #9
    2074:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
    2078:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    207c:	3319      	adds	r3, #25
    207e:	b29b      	uxth	r3, r3
    2080:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    2084:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2088:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    208c:	3019      	adds	r0, #25
    208e:	b280      	uxth	r0, r0
    2090:	eb00 2c40 	add.w	ip, r0, r0, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2094:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2098:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    209c:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
    20a0:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    20a2:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600

// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
    20a6:	fa5f fe8e 	uxtb.w	lr, lr
		cooling = random8(50, 120);
    20aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    20ae:	f10c 0c19 	add.w	ip, ip, #25

// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
    20b2:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
		cooling = random8(50, 120);
    20b6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    20ba:	fa1f fc8c 	uxth.w	ip, ip

// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
    20be:	ea4f 1eae 	mov.w	lr, lr, asr #6
		cooling = random8(50, 120);
    20c2:	11db      	asrs	r3, r3, #7
    20c4:	f8a4 c000 	strh.w	ip, [r4]

// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
    20c8:	f10e 0e32 	add.w	lr, lr, #50	; 0x32
		cooling = random8(50, 120);
    20cc:	3332      	adds	r3, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    20ce:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
    20d2:	eb00 2010 	add.w	r0, r0, r0, lsr #8

// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
    20d6:	f886 e000 	strb.w	lr, [r6]
		cooling = random8(50, 120);
    20da:	703b      	strb	r3, [r7, #0]
		use_palette = 0;
		this_dir = random8(2);
		this_delay = 15;
    20dc:	f8df e054 	ldr.w	lr, [pc, #84]	; 2134 <fire_mirror()+0x45c>
		use_all_shelves = random8(2);
    20e0:	f3cc 13c0 	ubfx	r3, ip, #7, #1
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
		this_dir = random8(2);
    20e4:	f3c0 10c0 	ubfx	r0, r0, #7, #1
		this_delay = 15;
		use_all_shelves = random8(2);
    20e8:	700b      	strb	r3, [r1, #0]
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
		this_dir = random8(2);
    20ea:	7028      	strb	r0, [r5, #0]


// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
    20ec:	2300      	movs	r3, #0
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
		this_dir = random8(2);
		this_delay = 15;
    20ee:	f04f 0c0f 	mov.w	ip, #15
    20f2:	210b      	movs	r1, #11
    20f4:	480b      	ldr	r0, [pc, #44]	; (2124 <fire_mirror()+0x44c>)
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
    20f6:	f888 3000 	strb.w	r3, [r8]


// fire mirrored from ends or center
void fire_mirror() {
	if (mode_change) {
		mode_change = 0;
    20fa:	7013      	strb	r3, [r2, #0]
		sparking = random8(50, 110);
		cooling = random8(50, 120);
		use_palette = 0;
		this_dir = random8(2);
		this_delay = 15;
    20fc:	f8ce c000 	str.w	ip, [lr]
    2100:	f003 fe64 	bl	5dcc <usb_serial_write>
    2104:	4808      	ldr	r0, [pc, #32]	; (2128 <fire_mirror()+0x450>)
    2106:	f004 f865 	bl	61d4 <Print::println()>
    210a:	e5f3      	b.n	1cf4 <fire_mirror()+0x1c>
    210c:	1fff8898 	.word	0x1fff8898
    2110:	ae4c415d 	.word	0xae4c415d
    2114:	1fff8eb8 	.word	0x1fff8eb8
    2118:	1fff8725 	.word	0x1fff8725
    211c:	1fff8895 	.word	0x1fff8895
    2120:	1fff8bf4 	.word	0x1fff8bf4
    2124:	00006f54 	.word	0x00006f54
    2128:	1fff8774 	.word	0x1fff8774
    212c:	1fff8768 	.word	0x1fff8768
    2130:	1fff871e 	.word	0x1fff871e
    2134:	1fff8720 	.word	0x1fff8720

00002138 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    2138:	b5f0      	push	{r4, r5, r6, r7, lr}
    213a:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    213c:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    213e:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
    2140:	789b      	ldrb	r3, [r3, #2]
    2142:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    2144:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
    2146:	9101      	str	r1, [sp, #4]
    2148:	9202      	str	r2, [sp, #8]
    214a:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    214c:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
    2150:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
    2154:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    2158:	d016      	beq.n	2188 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    215a:	2300      	movs	r3, #0
    215c:	f88d 3015 	strb.w	r3, [sp, #21]
    2160:	f88d 3014 	strb.w	r3, [sp, #20]
    2164:	f88d 3013 	strb.w	r3, [sp, #19]
    2168:	f88d 3012 	strb.w	r3, [sp, #18]
    216c:	f88d 3011 	strb.w	r3, [sp, #17]
    2170:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    2174:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    2176:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    2178:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
    217a:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    217e:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    2180:	a901      	add	r1, sp, #4
    2182:	4790      	blx	r2
  }
    2184:	b009      	add	sp, #36	; 0x24
    2186:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    2188:	4a1b      	ldr	r2, [pc, #108]	; (21f8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    218a:	7813      	ldrb	r3, [r2, #0]
    218c:	3301      	adds	r3, #1
    218e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    2192:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    2196:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    2198:	bf14      	ite	ne
    219a:	2280      	movne	r2, #128	; 0x80
    219c:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    219e:	0799      	lsls	r1, r3, #30
    21a0:	bf44      	itt	mi
    21a2:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
    21a6:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
    21a8:	075b      	lsls	r3, r3, #29
    21aa:	bf48      	it	mi
    21ac:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    21b0:	3210      	adds	r2, #16
    21b2:	b2d2      	uxtb	r2, r2
    21b4:	f10d 0313 	add.w	r3, sp, #19
    21b8:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    21bc:	f44f 7e80 	mov.w	lr, #256	; 0x100
    21c0:	b1ac      	cbz	r4, 21ee <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
    21c2:	fb9e f4f4 	sdiv	r4, lr, r4
    21c6:	b2e4      	uxtb	r4, r4
    21c8:	1c61      	adds	r1, r4, #1
    21ca:	b2c9      	uxtb	r1, r1
    21cc:	fb01 2502 	mla	r5, r1, r2, r2
    21d0:	122d      	asrs	r5, r5, #8
    21d2:	7019      	strb	r1, [r3, #0]
    21d4:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    21d6:	b105      	cbz	r5, 21da <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
    21d8:	3e01      	subs	r6, #1
    21da:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    21de:	b101      	cbz	r1, 21e2 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
    21e0:	701c      	strb	r4, [r3, #0]
    21e2:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    21e4:	42bb      	cmp	r3, r7
    21e6:	d0c5      	beq.n	2174 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
    21e8:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    21ea:	2c00      	cmp	r4, #0
    21ec:	d1e9      	bne.n	21c2 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
    21ee:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
    21f0:	f803 4c03 	strb.w	r4, [r3, #-3]
    21f4:	e7f5      	b.n	21e2 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
    21f6:	bf00      	nop
    21f8:	1fff8844 	.word	0x1fff8844

000021fc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    21fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    21fe:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2200:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    2202:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
    2204:	789b      	ldrb	r3, [r3, #2]
    2206:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    2208:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
    220a:	9101      	str	r1, [sp, #4]
    220c:	9202      	str	r2, [sp, #8]
    220e:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2210:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
    2214:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
    2218:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
    221c:	d017      	beq.n	224e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
    221e:	2300      	movs	r3, #0
    2220:	f88d 3015 	strb.w	r3, [sp, #21]
    2224:	f88d 3014 	strb.w	r3, [sp, #20]
    2228:	f88d 3013 	strb.w	r3, [sp, #19]
    222c:	f88d 3012 	strb.w	r3, [sp, #18]
    2230:	f88d 3011 	strb.w	r3, [sp, #17]
    2234:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    2238:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    223a:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    223c:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    223e:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
    2240:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
    2244:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
    2246:	a901      	add	r1, sp, #4
    2248:	4798      	blx	r3
  }
    224a:	b009      	add	sp, #36	; 0x24
    224c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
    224e:	4a1b      	ldr	r2, [pc, #108]	; (22bc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    2250:	7813      	ldrb	r3, [r2, #0]
    2252:	3301      	adds	r3, #1
    2254:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    2258:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
    225c:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
    225e:	bf14      	ite	ne
    2260:	2280      	movne	r2, #128	; 0x80
    2262:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
    2264:	0799      	lsls	r1, r3, #30
    2266:	bf44      	itt	mi
    2268:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
    226c:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
    226e:	075b      	lsls	r3, r3, #29
    2270:	bf48      	it	mi
    2272:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
    2276:	3210      	adds	r2, #16
    2278:	b2d2      	uxtb	r2, r2
    227a:	f10d 0313 	add.w	r3, sp, #19
    227e:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    2282:	f44f 7e80 	mov.w	lr, #256	; 0x100
    2286:	b1ac      	cbz	r4, 22b4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
    2288:	fb9e f4f4 	sdiv	r4, lr, r4
    228c:	b2e4      	uxtb	r4, r4
    228e:	1c61      	adds	r1, r4, #1
    2290:	b2c9      	uxtb	r1, r1
    2292:	fb01 2502 	mla	r5, r1, r2, r2
    2296:	122d      	asrs	r5, r5, #8
    2298:	7019      	strb	r1, [r3, #0]
    229a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
    229c:	b105      	cbz	r5, 22a0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
    229e:	3e01      	subs	r6, #1
    22a0:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
    22a4:	b101      	cbz	r1, 22a8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
    22a6:	701c      	strb	r4, [r3, #0]
    22a8:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
    22aa:	42bb      	cmp	r3, r7
    22ac:	d0c4      	beq.n	2238 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
    22ae:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
    22b0:	2c00      	cmp	r4, #0
    22b2:	d1e9      	bne.n	2288 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
    22b4:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
    22b6:	f803 4c03 	strb.w	r4, [r3, #-3]
    22ba:	e7f5      	b.n	22a8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
    22bc:	1fff8844 	.word	0x1fff8844

000022c0 <juggle_pal()>:
 */
// use beatsin16_halfup and beatsin16_halfdown to make it go one way

bool reset_juggle_index = 0;

void juggle_pal() {
    22c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    22c4:	4d8a      	ldr	r5, [pc, #552]	; (24f0 <juggle_pal()+0x230>)
    22c6:	782b      	ldrb	r3, [r5, #0]
 */
// use beatsin16_halfup and beatsin16_halfdown to make it go one way

bool reset_juggle_index = 0;

void juggle_pal() {
    22c8:	b089      	sub	sp, #36	; 0x24
	if (mode_change) {
    22ca:	2b00      	cmp	r3, #0
    22cc:	f040 8130 	bne.w	2530 <juggle_pal()+0x270>
    22d0:	f8df b250 	ldr.w	fp, [pc, #592]	; 2524 <juggle_pal()+0x264>
    22d4:	f8df a250 	ldr.w	sl, [pc, #592]	; 2528 <juggle_pal()+0x268>
    22d8:	f8df 8250 	ldr.w	r8, [pc, #592]	; 252c <juggle_pal()+0x26c>
    22dc:	4c85      	ldr	r4, [pc, #532]	; (24f4 <juggle_pal()+0x234>)
		this_diff = random8(0, 255/numdots);
		this_delay = 10;
		use_all_shelves = random8(2);
		Serial.println("juggle_pal");
	}
	if (reset_juggle_index) {
    22de:	f89a 3000 	ldrb.w	r3, [sl]
    22e2:	b113      	cbz	r3, 22ea <juggle_pal()+0x2a>
		this_index = 0;
    22e4:	4b84      	ldr	r3, [pc, #528]	; (24f8 <juggle_pal()+0x238>)
    22e6:	2200      	movs	r2, #0
    22e8:	701a      	strb	r2, [r3, #0]
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
    22ea:	f898 2000 	ldrb.w	r2, [r8]
    22ee:	4883      	ldr	r0, [pc, #524]	; (24fc <juggle_pal()+0x23c>)
    22f0:	21bc      	movs	r1, #188	; 0xbc
    22f2:	f001 fe9f 	bl	4034 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	if (!use_all_shelves) {
    22f6:	7825      	ldrb	r5, [r4, #0]
    22f8:	2d00      	cmp	r5, #0
    22fa:	d170      	bne.n	23de <juggle_pal()+0x11e>
		for (int i = 0; i < numdots; i++) {
    22fc:	f89b 3000 	ldrb.w	r3, [fp]
    2300:	2b00      	cmp	r3, #0
    2302:	d069      	beq.n	23d8 <juggle_pal()+0x118>
    2304:	497e      	ldr	r1, [pc, #504]	; (2500 <juggle_pal()+0x240>)
    2306:	4f7c      	ldr	r7, [pc, #496]	; (24f8 <juggle_pal()+0x238>)
    2308:	9105      	str	r1, [sp, #20]
    230a:	497e      	ldr	r1, [pc, #504]	; (2504 <juggle_pal()+0x244>)
    230c:	9102      	str	r1, [sp, #8]
    230e:	497e      	ldr	r1, [pc, #504]	; (2508 <juggle_pal()+0x248>)
    2310:	9103      	str	r1, [sp, #12]
    2312:	f8df 9204 	ldr.w	r9, [pc, #516]	; 2518 <juggle_pal()+0x258>
    2316:	497d      	ldr	r1, [pc, #500]	; (250c <juggle_pal()+0x24c>)
    2318:	783a      	ldrb	r2, [r7, #0]
    231a:	f8df 8204 	ldr.w	r8, [pc, #516]	; 2520 <juggle_pal()+0x260>
    231e:	4e77      	ldr	r6, [pc, #476]	; (24fc <juggle_pal()+0x23c>)
    2320:	9104      	str	r1, [sp, #16]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2322:	f44f 7a8c 	mov.w	sl, #280	; 0x118
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
    2326:	f899 1000 	ldrb.w	r1, [r9]
    232a:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    232c:	9905      	ldr	r1, [sp, #20]
    232e:	442b      	add	r3, r5
    2330:	6809      	ldr	r1, [r1, #0]
    2332:	9106      	str	r1, [sp, #24]
    2334:	b29b      	uxth	r3, r3

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2336:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2338:	9906      	ldr	r1, [sp, #24]
    233a:	bf9c      	itt	ls
    233c:	021b      	lslls	r3, r3, #8
    233e:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2340:	fb0a f101 	mul.w	r1, sl, r1
    2344:	fb03 f101 	mul.w	r1, r3, r1
    2348:	0c09      	lsrs	r1, r1, #16
    234a:	044c      	lsls	r4, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    234c:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2350:	d503      	bpl.n	235a <juggle_pal()+0x9a>
    2352:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2356:	3307      	adds	r3, #7
    2358:	b29b      	uxth	r3, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    235a:	f3c3 0e46 	ubfx	lr, r3, #1, #7

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    235e:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2360:	9c02      	ldr	r4, [sp, #8]
    2362:	9b03      	ldr	r3, [sp, #12]
    2364:	5c24      	ldrb	r4, [r4, r0]
    2366:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    236a:	fb04 040e 	mla	r4, r4, lr, r0
    236e:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
    2370:	0408      	lsls	r0, r1, #16
    2372:	bf48      	it	mi
    2374:	4264      	negmi	r4, r4
    2376:	b224      	sxth	r4, r4
    2378:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
    237c:	b2a4      	uxth	r4, r4
    237e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    2382:	9804      	ldr	r0, [sp, #16]
    2384:	4962      	ldr	r1, [pc, #392]	; (2510 <juggle_pal()+0x250>)
    2386:	7800      	ldrb	r0, [r0, #0]
    2388:	9000      	str	r0, [sp, #0]
    238a:	ebc4 1484 	rsb	r4, r4, r4, lsl #6
    238e:	0c24      	lsrs	r4, r4, #16


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2390:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    2394:	a807      	add	r0, sp, #28
    2396:	23ff      	movs	r3, #255	; 0xff
    2398:	f001 fe9e 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    239c:	1930      	adds	r0, r6, r4
    239e:	5d33      	ldrb	r3, [r6, r4]
    23a0:	f89d 201c 	ldrb.w	r2, [sp, #28]
    23a4:	fa83 f352 	uqadd8	r3, r3, r2
    23a8:	5533      	strb	r3, [r6, r4]
    23aa:	f89d 201d 	ldrb.w	r2, [sp, #29]
    23ae:	7843      	ldrb	r3, [r0, #1]
    23b0:	fa83 f352 	uqadd8	r3, r3, r2
        g = qadd8( g, rhs.g);
    23b4:	7043      	strb	r3, [r0, #1]
    23b6:	7881      	ldrb	r1, [r0, #2]
    23b8:	f89d 301e 	ldrb.w	r3, [sp, #30]
    23bc:	fa81 f153 	uqadd8	r1, r1, r3
			this_index += this_diff;
    23c0:	783c      	ldrb	r4, [r7, #0]
    23c2:	f898 2000 	ldrb.w	r2, [r8]
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
		for (int i = 0; i < numdots; i++) {
    23c6:	f89b 3000 	ldrb.w	r3, [fp]
        b = qadd8( b, rhs.b);
    23ca:	7081      	strb	r1, [r0, #2]
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
    23cc:	4422      	add	r2, r4
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
		for (int i = 0; i < numdots; i++) {
    23ce:	3501      	adds	r5, #1
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
    23d0:	b2d2      	uxtb	r2, r2
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
		for (int i = 0; i < numdots; i++) {
    23d2:	42ab      	cmp	r3, r5
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
    23d4:	703a      	strb	r2, [r7, #0]
		this_index = 0;
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);

	if (!use_all_shelves) {
		for (int i = 0; i < numdots; i++) {
    23d6:	dca6      	bgt.n	2326 <juggle_pal()+0x66>
				this_index += this_diff;
			}
		}
	}

} // juggle_pal()
    23d8:	b009      	add	sp, #36	; 0x24
    23da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23de:	f8df 9118 	ldr.w	r9, [pc, #280]	; 24f8 <juggle_pal()+0x238>
    23e2:	f04f 0800 	mov.w	r8, #0
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint8_t i = 0; i < numdots; i++) {
    23e6:	f89b 1000 	ldrb.w	r1, [fp]
    23ea:	2900      	cmp	r1, #0
    23ec:	d076      	beq.n	24dc <juggle_pal()+0x21c>
    23ee:	4b45      	ldr	r3, [pc, #276]	; (2504 <juggle_pal()+0x244>)
    23f0:	9304      	str	r3, [sp, #16]
    23f2:	4b45      	ldr	r3, [pc, #276]	; (2508 <juggle_pal()+0x248>)
    23f4:	4f47      	ldr	r7, [pc, #284]	; (2514 <juggle_pal()+0x254>)
    23f6:	9303      	str	r3, [sp, #12]
    23f8:	4b44      	ldr	r3, [pc, #272]	; (250c <juggle_pal()+0x24c>)
    23fa:	9302      	str	r3, [sp, #8]
				leds[shelf[s][beatsin16(this_beat + i + numdots, 0, shelf_num_leds[s])]] += ColorFromPalette(current_palette, this_index, 255, current_blending);
    23fc:	eb08 1388 	add.w	r3, r8, r8, lsl #6
    2400:	441f      	add	r7, r3
    2402:	f899 2000 	ldrb.w	r2, [r9]
    2406:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 2500 <juggle_pal()+0x240>
    240a:	4e3c      	ldr	r6, [pc, #240]	; (24fc <juggle_pal()+0x23c>)
    240c:	9705      	str	r7, [sp, #20]
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint8_t i = 0; i < numdots; i++) {
    240e:	2500      	movs	r5, #0
				leds[shelf[s][beatsin16(this_beat + i + numdots, 0, shelf_num_leds[s])]] += ColorFromPalette(current_palette, this_index, 255, current_blending);
    2410:	4b41      	ldr	r3, [pc, #260]	; (2518 <juggle_pal()+0x258>)
    2412:	781c      	ldrb	r4, [r3, #0]
    2414:	194b      	adds	r3, r1, r5
    2416:	4941      	ldr	r1, [pc, #260]	; (251c <juggle_pal()+0x25c>)
    2418:	f811 e008 	ldrb.w	lr, [r1, r8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    241c:	f8da 1000 	ldr.w	r1, [sl]
    2420:	9107      	str	r1, [sp, #28]
    2422:	4423      	add	r3, r4

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2424:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2426:	9907      	ldr	r1, [sp, #28]
    2428:	bf98      	it	ls
    242a:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    242c:	f44f 708c 	mov.w	r0, #280	; 0x118
    2430:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2434:	bf98      	it	ls
    2436:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2438:	fb03 f301 	mul.w	r3, r3, r1
    243c:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    243e:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2440:	f3c3 00ca 	ubfx	r0, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2444:	d503      	bpl.n	244e <juggle_pal()+0x18e>
    2446:	f5c0 60ff 	rsb	r0, r0, #2040	; 0x7f8
    244a:	3007      	adds	r0, #7
    244c:	b280      	uxth	r0, r0

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    244e:	0a01      	lsrs	r1, r0, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2450:	9c04      	ldr	r4, [sp, #16]
    2452:	9f03      	ldr	r7, [sp, #12]
    2454:	5c64      	ldrb	r4, [r4, r1]
    2456:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    245a:	f3c0 0046 	ubfx	r0, r0, #1, #7
    245e:	fb04 1000 	mla	r0, r4, r0, r1

    if( theta & 0x8000 ) y = -y;
    2462:	041b      	lsls	r3, r3, #16
    2464:	9c02      	ldr	r4, [sp, #8]
    2466:	492a      	ldr	r1, [pc, #168]	; (2510 <juggle_pal()+0x250>)
    2468:	7824      	ldrb	r4, [r4, #0]
    246a:	9400      	str	r4, [sp, #0]
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    246c:	b280      	uxth	r0, r0

    if( theta & 0x8000 ) y = -y;
    246e:	bf48      	it	mi
    2470:	4240      	negmi	r0, r0
    2472:	b200      	sxth	r0, r0
    2474:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
    2478:	b2a0      	uxth	r0, r4
    247a:	fb0e 0000 	mla	r0, lr, r0, r0
    247e:	9c05      	ldr	r4, [sp, #20]
    2480:	0c00      	lsrs	r0, r0, #16
    2482:	23ff      	movs	r3, #255	; 0xff
    2484:	5c24      	ldrb	r4, [r4, r0]


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2486:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    248a:	a806      	add	r0, sp, #24
    248c:	f001 fe24 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2490:	eb06 0e04 	add.w	lr, r6, r4
    2494:	5d33      	ldrb	r3, [r6, r4]
    2496:	f89d 2018 	ldrb.w	r2, [sp, #24]
    249a:	fa83 f352 	uqadd8	r3, r3, r2
    249e:	5533      	strb	r3, [r6, r4]
    24a0:	f89d 2019 	ldrb.w	r2, [sp, #25]
    24a4:	f89e 3001 	ldrb.w	r3, [lr, #1]
    24a8:	fa83 f352 	uqadd8	r3, r3, r2
        g = qadd8( g, rhs.g);
    24ac:	f88e 3001 	strb.w	r3, [lr, #1]
    24b0:	f89e 0002 	ldrb.w	r0, [lr, #2]
    24b4:	f89d 301a 	ldrb.w	r3, [sp, #26]
    24b8:	fa80 f053 	uqadd8	r0, r0, r3
				this_index += this_diff;
    24bc:	4b18      	ldr	r3, [pc, #96]	; (2520 <juggle_pal()+0x260>)
    24be:	f899 2000 	ldrb.w	r2, [r9]
    24c2:	781b      	ldrb	r3, [r3, #0]
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint8_t i = 0; i < numdots; i++) {
    24c4:	f89b 1000 	ldrb.w	r1, [fp]
        b = qadd8( b, rhs.b);
    24c8:	f88e 0002 	strb.w	r0, [lr, #2]
    24cc:	3501      	adds	r5, #1
				leds[shelf[s][beatsin16(this_beat + i + numdots, 0, shelf_num_leds[s])]] += ColorFromPalette(current_palette, this_index, 255, current_blending);
				this_index += this_diff;
    24ce:	441a      	add	r2, r3
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint8_t i = 0; i < numdots; i++) {
    24d0:	b2ed      	uxtb	r5, r5
				leds[shelf[s][beatsin16(this_beat + i + numdots, 0, shelf_num_leds[s])]] += ColorFromPalette(current_palette, this_index, 255, current_blending);
				this_index += this_diff;
    24d2:	b2d2      	uxtb	r2, r2
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint8_t i = 0; i < numdots; i++) {
    24d4:	42a9      	cmp	r1, r5
				leds[shelf[s][beatsin16(this_beat + i + numdots, 0, shelf_num_leds[s])]] += ColorFromPalette(current_palette, this_index, 255, current_blending);
				this_index += this_diff;
    24d6:	f889 2000 	strb.w	r2, [r9]
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint8_t i = 0; i < numdots; i++) {
    24da:	d899      	bhi.n	2410 <juggle_pal()+0x150>
    24dc:	f108 0801 	add.w	r8, r8, #1
		for (int i = 0; i < numdots; i++) {
			leds[beatsin16(this_beat + i + numdots, 0, NUM_LEDS)] += ColorFromPalette(current_palette, this_index, 255, current_blending);
			this_index += this_diff;
		}
	}else {
		for (uint8_t s = 0; s < 4; s++) {
    24e0:	f1b8 0f04 	cmp.w	r8, #4
    24e4:	f47f af7f 	bne.w	23e6 <juggle_pal()+0x126>
				this_index += this_diff;
			}
		}
	}

} // juggle_pal()
    24e8:	b009      	add	sp, #36	; 0x24
    24ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24ee:	bf00      	nop
    24f0:	1fff8724 	.word	0x1fff8724
    24f4:	1fff8895 	.word	0x1fff8895
    24f8:	1fff8b24 	.word	0x1fff8b24
    24fc:	1fff8898 	.word	0x1fff8898
    2500:	1fff9068 	.word	0x1fff9068
    2504:	00007780 	.word	0x00007780
    2508:	00008504 	.word	0x00008504
    250c:	1fff8bf0 	.word	0x1fff8bf0
    2510:	1fff8ae0 	.word	0x1fff8ae0
    2514:	1fff8eb8 	.word	0x1fff8eb8
    2518:	1fff872b 	.word	0x1fff872b
    251c:	1fff8768 	.word	0x1fff8768
    2520:	1fff871d 	.word	0x1fff871d
    2524:	1fff872a 	.word	0x1fff872a
    2528:	1fff8bfc 	.word	0x1fff8bfc
    252c:	1fff871c 	.word	0x1fff871c
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2530:	493e      	ldr	r1, [pc, #248]	; (262c <juggle_pal()+0x36c>)
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255/numdots);
    2532:	f8df 8110 	ldr.w	r8, [pc, #272]	; 2644 <juggle_pal()+0x384>
    2536:	880b      	ldrh	r3, [r1, #0]
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    2538:	f8df 910c 	ldr.w	r9, [pc, #268]	; 2648 <juggle_pal()+0x388>
		this_diff = random8(0, 255/numdots);
		this_delay = 10;
		use_all_shelves = random8(2);
    253c:	4c3c      	ldr	r4, [pc, #240]	; (2630 <juggle_pal()+0x370>)
void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
    253e:	f8df a10c 	ldr.w	sl, [pc, #268]	; 264c <juggle_pal()+0x38c>
bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
    2542:	f8df b10c 	ldr.w	fp, [pc, #268]	; 2650 <juggle_pal()+0x390>
    2546:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    254a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    254e:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    2552:	3719      	adds	r7, #25
    2554:	b2bf      	uxth	r7, r7
    2556:	eb07 2647 	add.w	r6, r7, r7, lsl #9
    255a:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    255e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    2562:	3619      	adds	r6, #25
    2564:	b2b6      	uxth	r6, r6
    2566:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    256a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    256e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2572:	3319      	adds	r3, #25
    2574:	b29b      	uxth	r3, r3
    2576:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    257a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    257e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    2582:	3019      	adds	r0, #25
    2584:	b280      	uxth	r0, r0
    2586:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    258a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    258e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2592:	3219      	adds	r2, #25
    2594:	b292      	uxth	r2, r2
    2596:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    259a:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    259e:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    25a2:	eb07 2717 	add.w	r7, r7, r7, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    25a6:	f10e 0e19 	add.w	lr, lr, #25
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255/numdots);
    25aa:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    25ae:	fa1f fe8e 	uxth.w	lr, lr
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    25b2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    25b6:	f3c7 1781 	ubfx	r7, r7, #6, #2
    25ba:	b2d2      	uxtb	r2, r2
    25bc:	3702      	adds	r7, #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    25be:	f8a1 e000 	strh.w	lr, [r1]
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
    25c2:	b2db      	uxtb	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    25c4:	eb00 2010 	add.w	r0, r0, r0, lsr #8
		this_beat = random8(4, 20);
		this_diff = random8(0, 255/numdots);
    25c8:	21ff      	movs	r1, #255	; 0xff
    25ca:	fb91 f1f7 	sdiv	r1, r1, r7
    25ce:	fb01 f202 	mul.w	r2, r1, r2
    25d2:	1212      	asrs	r2, r2, #8
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
    25d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		this_beat = random8(4, 20);
    25d8:	f3c0 1003 	ubfx	r0, r0, #4, #4
		this_diff = random8(0, 255/numdots);
    25dc:	f888 2000 	strb.w	r2, [r8]
    25e0:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
    25e4:	3004      	adds	r0, #4
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
    25e6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2654 <juggle_pal()+0x394>
		this_beat = random8(4, 20);
    25ea:	f889 0000 	strb.w	r0, [r9]
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
    25ee:	111b      	asrs	r3, r3, #4
		this_beat = random8(4, 20);
		this_diff = random8(0, 255/numdots);
		this_delay = 10;
		use_all_shelves = random8(2);
    25f0:	f3ce 11c0 	ubfx	r1, lr, #7, #1
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
    25f4:	3310      	adds	r3, #16

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    25f6:	4a0f      	ldr	r2, [pc, #60]	; (2634 <juggle_pal()+0x374>)
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255/numdots);
		this_delay = 10;
    25f8:	480f      	ldr	r0, [pc, #60]	; (2638 <juggle_pal()+0x378>)
		use_all_shelves = random8(2);
    25fa:	7021      	strb	r1, [r4, #0]
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
    25fc:	f888 3000 	strb.w	r3, [r8]

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    2600:	2101      	movs	r1, #1
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255/numdots);
		this_delay = 10;
    2602:	230a      	movs	r3, #10
    2604:	eb06 2616 	add.w	r6, r6, r6, lsr #8

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
		use_palette = 1;
    2608:	7011      	strb	r1, [r2, #0]
		reset_juggle_index = random8(2);
		this_fade = random8(16, 64);
		this_beat = random8(4, 20);
		this_diff = random8(0, 255/numdots);
		this_delay = 10;
    260a:	6003      	str	r3, [r0, #0]

bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
    260c:	2200      	movs	r2, #0
		numdots = random8(2, 6);
		use_palette = 1;
		reset_juggle_index = random8(2);
    260e:	f3c6 16c0 	ubfx	r6, r6, #7, #1
    2612:	4619      	mov	r1, r3
    2614:	4809      	ldr	r0, [pc, #36]	; (263c <juggle_pal()+0x37c>)
    2616:	f88a 6000 	strb.w	r6, [sl]
bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
		numdots = random8(2, 6);
    261a:	f88b 7000 	strb.w	r7, [fp]

bool reset_juggle_index = 0;

void juggle_pal() {
	if (mode_change) {
		mode_change = 0;
    261e:	702a      	strb	r2, [r5, #0]
    2620:	f003 fbd4 	bl	5dcc <usb_serial_write>
    2624:	4806      	ldr	r0, [pc, #24]	; (2640 <juggle_pal()+0x380>)
    2626:	f003 fdd5 	bl	61d4 <Print::println()>
    262a:	e658      	b.n	22de <juggle_pal()+0x1e>
    262c:	1fff876c 	.word	0x1fff876c
    2630:	1fff8895 	.word	0x1fff8895
    2634:	1fff871e 	.word	0x1fff871e
    2638:	1fff8720 	.word	0x1fff8720
    263c:	00006f60 	.word	0x00006f60
    2640:	1fff8774 	.word	0x1fff8774
    2644:	1fff871d 	.word	0x1fff871d
    2648:	1fff872b 	.word	0x1fff872b
    264c:	1fff8bfc 	.word	0x1fff8bfc
    2650:	1fff872a 	.word	0x1fff872a
    2654:	1fff871c 	.word	0x1fff871c

00002658 <pride()>:
#ifndef PRIDE_H
#define PRIDE_H

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
    2658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    265c:	4ab4      	ldr	r2, [pc, #720]	; (2930 <pride()+0x2d8>)
    265e:	7813      	ldrb	r3, [r2, #0]
#ifndef PRIDE_H
#define PRIDE_H

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
    2660:	b093      	sub	sp, #76	; 0x4c
	if (mode_change) {
    2662:	2b00      	cmp	r3, #0
    2664:	f040 81e6 	bne.w	2a34 <pride()+0x3dc>
    2668:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 2950 <pride()+0x2f8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    266c:	49b1      	ldr	r1, [pc, #708]	; (2934 <pride()+0x2dc>)
    266e:	680b      	ldr	r3, [r1, #0]
    2670:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    2672:	9811      	ldr	r0, [sp, #68]	; 0x44
    2674:	f645 7328 	movw	r3, #24360	; 0x5f28
    2678:	fb03 f000 	mul.w	r0, r3, r0
    267c:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    267e:	0446      	lsls	r6, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2680:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2684:	d503      	bpl.n	268e <pride()+0x36>
    2686:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    268a:	3307      	adds	r3, #7
    268c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    268e:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    2690:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 2954 <pride()+0x2fc>

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2694:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 2958 <pride()+0x300>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2698:	f81b 5002 	ldrb.w	r5, [fp, r2]
    269c:	f83a 4012 	ldrh.w	r4, [sl, r2, lsl #1]
    26a0:	f3c3 0246 	ubfx	r2, r3, #1, #7
    26a4:	fb05 4302 	mla	r3, r5, r2, r4
    26a8:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    26aa:	0405      	lsls	r5, r0, #16
    26ac:	bf48      	it	mi
    26ae:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    26b0:	680a      	ldr	r2, [r1, #0]
    26b2:	9210      	str	r2, [sp, #64]	; 0x40
    26b4:	b21b      	sxth	r3, r3
	}
	static uint16_t sPseudotime = 0;
	static uint16_t sLastMillis = 0;
	static uint16_t sHue16 = 0;

	uint8_t sat8 = beatsin88(87, 220, 250);
    26b6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    26ba:	b29b      	uxth	r3, r3
	return ret;
    26bc:	9810      	ldr	r0, [sp, #64]	; 0x40
    26be:	4a9e      	ldr	r2, [pc, #632]	; (2938 <pride()+0x2e0>)
    26c0:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    26c4:	0c1b      	lsrs	r3, r3, #16
    26c6:	fb02 f000 	mul.w	r0, r2, r0
    26ca:	0c00      	lsrs	r0, r0, #16
    26cc:	33dc      	adds	r3, #220	; 0xdc
    26ce:	b2db      	uxtb	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    26d0:	0444      	lsls	r4, r0, #17
    26d2:	9302      	str	r3, [sp, #8]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    26d4:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    26d8:	d503      	bpl.n	26e2 <pride()+0x8a>
    26da:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    26de:	3307      	adds	r3, #7
    26e0:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    26e2:	0a1c      	lsrs	r4, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    26e4:	f3c3 0246 	ubfx	r2, r3, #1, #7
    26e8:	f81b 5004 	ldrb.w	r5, [fp, r4]
    26ec:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
    26f0:	fb05 3302 	mla	r3, r5, r2, r3

    if( theta & 0x8000 ) y = -y;
    26f4:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    26f6:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    26f8:	bf48      	it	mi
    26fa:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    26fc:	680a      	ldr	r2, [r1, #0]
    26fe:	920f      	str	r2, [sp, #60]	; 0x3c
    2700:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    2702:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2706:	b29b      	uxth	r3, r3
	return ret;
    2708:	980f      	ldr	r0, [sp, #60]	; 0x3c
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    270a:	f64d 6208 	movw	r2, #56840	; 0xde08
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    270e:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2712:	fb02 f000 	mul.w	r0, r2, r0
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    2716:	0c1b      	lsrs	r3, r3, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2718:	0c00      	lsrs	r0, r0, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    271a:	3360      	adds	r3, #96	; 0x60
    271c:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    271e:	0442      	lsls	r2, r0, #17
    2720:	9303      	str	r3, [sp, #12]
	uint8_t brightdepth = beatsin88(341, 96, 224);
    2722:	fa5f fc83 	uxtb.w	ip, r3
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2726:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    272a:	d503      	bpl.n	2734 <pride()+0xdc>
    272c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2730:	3307      	adds	r3, #7
    2732:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2734:	0a1c      	lsrs	r4, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2736:	f3c3 0246 	ubfx	r2, r3, #1, #7
    273a:	f81b 5004 	ldrb.w	r5, [fp, r4]
    273e:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
    2742:	fb05 3302 	mla	r3, r5, r2, r3

    if( theta & 0x8000 ) y = -y;
    2746:	0407      	lsls	r7, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2748:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    274a:	bf48      	it	mi
    274c:	425b      	negmi	r3, r3
    274e:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2750:	680a      	ldr	r2, [r1, #0]
    2752:	920e      	str	r2, [sp, #56]	; 0x38
    2754:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2758:	b29b      	uxth	r3, r3
    275a:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
	return ret;
    275e:	980e      	ldr	r0, [sp, #56]	; 0x38
    2760:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2764:	f24a 02c8 	movw	r2, #41160	; 0xa0c8
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    2768:	0c1b      	lsrs	r3, r3, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    276a:	fb02 f000 	mul.w	r0, r2, r0
    276e:	0c00      	lsrs	r0, r0, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    2770:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
    2774:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2776:	0446      	lsls	r6, r0, #17
    2778:	9301      	str	r3, [sp, #4]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    277a:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    277e:	d503      	bpl.n	2788 <pride()+0x130>
    2780:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2784:	3307      	adds	r3, #7
    2786:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2788:	0a1c      	lsrs	r4, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    278a:	f3c3 0246 	ubfx	r2, r3, #1, #7
    278e:	f81b 5004 	ldrb.w	r5, [fp, r4]
    2792:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
    2796:	fb05 3302 	mla	r3, r5, r2, r3
    279a:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    279c:	0405      	lsls	r5, r0, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    279e:	680a      	ldr	r2, [r1, #0]
    27a0:	920d      	str	r2, [sp, #52]	; 0x34
    27a2:	bf48      	it	mi
    27a4:	425b      	negmi	r3, r3
    27a6:	b21b      	sxth	r3, r3
	return ret;
    27a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	uint16_t brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	uint8_t msmultiplier = beatsin88(147, 23, 60);

	uint16_t hue16 = sHue16;//gHue * 256;
    27aa:	4864      	ldr	r0, [pc, #400]	; (293c <pride()+0x2e4>)
    27ac:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    27b0:	b29b      	uxth	r3, r3
    27b2:	2226      	movs	r2, #38	; 0x26
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    27b4:	f647 3698 	movw	r6, #31640	; 0x7b98
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    27b8:	fb02 f203 	mul.w	r2, r2, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    27bc:	fb06 f604 	mul.w	r6, r6, r4
    27c0:	0c36      	lsrs	r6, r6, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    27c2:	0c12      	lsrs	r2, r2, #16
    27c4:	3217      	adds	r2, #23
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    27c6:	0474      	lsls	r4, r6, #17
    27c8:	b292      	uxth	r2, r2
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    27ca:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    27ce:	8805      	ldrh	r5, [r0, #0]
    if( theta & 0x4000 ) offset = 2047 - offset;
    27d0:	d503      	bpl.n	27da <pride()+0x182>
    27d2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    27d6:	3307      	adds	r3, #7
    27d8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    27da:	0a1c      	lsrs	r4, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    27dc:	f3c3 0346 	ubfx	r3, r3, #1, #7
    27e0:	f81b 7004 	ldrb.w	r7, [fp, r4]
    27e4:	f83a 4014 	ldrh.w	r4, [sl, r4, lsl #1]
    27e8:	fb07 4303 	mla	r3, r7, r3, r4
    27ec:	b29b      	uxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    27ee:	680c      	ldr	r4, [r1, #0]
    27f0:	940b      	str	r4, [sp, #44]	; 0x2c

    if( theta & 0x8000 ) y = -y;
    27f2:	0437      	lsls	r7, r6, #16
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
    27f4:	4c52      	ldr	r4, [pc, #328]	; (2940 <pride()+0x2e8>)
	return ret;
    27f6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    27f8:	6809      	ldr	r1, [r1, #0]
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    27fa:	4e52      	ldr	r6, [pc, #328]	; (2944 <pride()+0x2ec>)
    27fc:	910c      	str	r1, [sp, #48]	; 0x30
    27fe:	bf48      	it	mi
    2800:	425b      	negmi	r3, r3
    2802:	b21b      	sxth	r3, r3

	uint16_t hue16 = sHue16;//gHue * 256;
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
    2804:	8821      	ldrh	r1, [r4, #0]
    2806:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	uint8_t msmultiplier = beatsin88(147, 23, 60);

	uint16_t hue16 = sHue16;//gHue * 256;
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
    280a:	b2bf      	uxth	r7, r7
    280c:	f640 3eb8 	movw	lr, #3000	; 0xbb8
    2810:	b29b      	uxth	r3, r3
	uint16_t deltams = ms - sLastMillis;
    2812:	1a79      	subs	r1, r7, r1
    2814:	fb0e f303 	mul.w	r3, lr, r3
	sLastMillis = ms;
    2818:	8027      	strh	r7, [r4, #0]
	sPseudotime += deltams * msmultiplier;
    281a:	f8b6 e000 	ldrh.w	lr, [r6]
	return ret;
    281e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2820:	4f49      	ldr	r7, [pc, #292]	; (2948 <pride()+0x2f0>)

	uint16_t hue16 = sHue16;//gHue * 256;
	uint16_t hueinc16 = beatsin88(113, 1, 3000);

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
    2822:	b289      	uxth	r1, r1
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    2824:	fb11 ee02 	smlabb	lr, r1, r2, lr
    2828:	fb07 f204 	mul.w	r2, r7, r4
    282c:	0c12      	lsrs	r2, r2, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    282e:	0c1b      	lsrs	r3, r3, #16
    2830:	fa1f f48e 	uxth.w	r4, lr
    2834:	3301      	adds	r3, #1
    2836:	8034      	strh	r4, [r6, #0]
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2838:	0456      	lsls	r6, r2, #17
    283a:	b29f      	uxth	r7, r3
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    283c:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2840:	d503      	bpl.n	284a <pride()+0x1f2>
    2842:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2846:	3307      	adds	r3, #7
    2848:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    284a:	0a1e      	lsrs	r6, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    284c:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2850:	f81b e006 	ldrb.w	lr, [fp, r6]
    2854:	f83a 6016 	ldrh.w	r6, [sl, r6, lsl #1]
    2858:	fb0e 6303 	mla	r3, lr, r3, r6
    285c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    285e:	0412      	lsls	r2, r2, #16
    2860:	bf48      	it	mi
    2862:	425b      	negmi	r3, r3
    2864:	b21b      	sxth	r3, r3
	sHue16 += deltams * beatsin88(400, 5, 9);
    2866:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    286a:	b29b      	uxth	r3, r3
    286c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2870:	0c1b      	lsrs	r3, r3, #16
    2872:	3305      	adds	r3, #5
    2874:	b29b      	uxth	r3, r3
	uint16_t brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
    2876:	f898 2000 	ldrb.w	r2, [r8]

	uint16_t ms = millis();
	uint16_t deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
    287a:	fb01 5103 	mla	r1, r1, r3, r5
    287e:	8001      	strh	r1, [r0, #0]
    2880:	ea6f 0c0c 	mvn.w	ip, ip
	uint16_t brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
    2884:	2a00      	cmp	r2, #0
    2886:	d169      	bne.n	295c <pride()+0x304>
    2888:	9b01      	ldr	r3, [sp, #4]
    288a:	441c      	add	r4, r3
    288c:	fa5f f38c 	uxtb.w	r3, ip
    2890:	9304      	str	r3, [sp, #16]
    2892:	b2a4      	uxth	r4, r4
    2894:	f04f 09bb 	mov.w	r9, #187	; 0xbb
    2898:	ae09      	add	r6, sp, #36	; 0x24
    289a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			hue16 += hueinc16;
    289e:	197b      	adds	r3, r7, r5
    28a0:	b29d      	uxth	r5, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    28a2:	0463      	lsls	r3, r4, #17
			uint8_t hue8 = hue16 / 256;
    28a4:	ea4f 2e15 	mov.w	lr, r5, lsr #8
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    28a8:	f3c4 02ca 	ubfx	r2, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    28ac:	d503      	bpl.n	28b6 <pride()+0x25e>
    28ae:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    28b2:	3207      	adds	r2, #7
    28b4:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    28b6:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    28b8:	f3c2 0146 	ubfx	r1, r2, #1, #7
    28bc:	f81b c000 	ldrb.w	ip, [fp, r0]
    28c0:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]

			brightnesstheta16 += brightnessthetainc16;
			uint16_t b16 = sin16(brightnesstheta16) + 32768;

			uint16_t bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
			uint8_t bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
    28c4:	9b03      	ldr	r3, [sp, #12]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    28c6:	f88d e028 	strb.w	lr, [sp, #40]	; 0x28
    28ca:	fb0c 2201 	mla	r2, ip, r1, r2

    if( theta & 0x8000 ) y = -y;
    28ce:	0420      	lsls	r0, r4, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    28d0:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    28d2:	bf48      	it	mi
    28d4:	4252      	negmi	r2, r2
    28d6:	b212      	sxth	r2, r2
			uint8_t hue8 = hue16 / 256;

			brightnesstheta16 += brightnessthetainc16;
			uint16_t b16 = sin16(brightnesstheta16) + 32768;

			uint16_t bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    28d8:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    28dc:	b292      	uxth	r2, r2
			uint8_t bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
    28de:	fb02 f202 	mul.w	r2, r2, r2
    28e2:	0c12      	lsrs	r2, r2, #16
    28e4:	fb03 f202 	mul.w	r2, r3, r2
    28e8:	9b04      	ldr	r3, [sp, #16]
    28ea:	f3c2 4207 	ubfx	r2, r2, #16, #8
    28ee:	441a      	add	r2, r3
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    28f0:	4631      	mov	r1, r6
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    28f2:	f89d 3008 	ldrb.w	r3, [sp, #8]
    28f6:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    28fa:	4640      	mov	r0, r8
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    28fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2900:	f001 fd34 	bl	436c <hsv2rgb_rainbow(CHSV const&, CRGB&)>

			CRGB newcolor = CHSV(hue8, sat8, bri8);

			uint16_t pixelnumber = i;
			pixelnumber = (NUM_LEDS - 1) - pixelnumber;
			nblend(leds[pixelnumber], newcolor, 64);
    2904:	4b11      	ldr	r3, [pc, #68]	; (294c <pride()+0x2f4>)
    2906:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    290a:	4418      	add	r0, r3
    290c:	2240      	movs	r2, #64	; 0x40
    290e:	4631      	mov	r1, r6
    2910:	f001 fb92 	bl	4038 <nblend(CRGB&, CRGB const&, unsigned char)>
    2914:	9b01      	ldr	r3, [sp, #4]
    2916:	f109 39ff 	add.w	r9, r9, #4294967295
    291a:	441c      	add	r4, r3
    291c:	fa1f f989 	uxth.w	r9, r9
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	uint16_t brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
    2920:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2924:	4599      	cmp	r9, r3
    2926:	b2a4      	uxth	r4, r4
    2928:	d1b9      	bne.n	289e <pride()+0x246>
				pixelnumber = (shelf_num_leds[s] - 1) - pixelnumber;
				nblend(leds[shelf[s][pixelnumber]], newcolor, 64);
			}
		}
	}
}
    292a:	b013      	add	sp, #76	; 0x4c
    292c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2930:	1fff8724 	.word	0x1fff8724
    2934:	1fff9068 	.word	0x1fff9068
    2938:	000174f8 	.word	0x000174f8
    293c:	1fff8ade 	.word	0x1fff8ade
    2940:	1fff8cc0 	.word	0x1fff8cc0
    2944:	1fff8882 	.word	0x1fff8882
    2948:	0001b580 	.word	0x0001b580
    294c:	1fff8898 	.word	0x1fff8898
    2950:	1fff8895 	.word	0x1fff8895
    2954:	00007780 	.word	0x00007780
    2958:	00008504 	.word	0x00008504
    295c:	fa5f f38c 	uxtb.w	r3, ip
    2960:	f8df 8130 	ldr.w	r8, [pc, #304]	; 2a94 <pride()+0x43c>
    2964:	9306      	str	r3, [sp, #24]
    2966:	2600      	movs	r6, #0
    2968:	9707      	str	r7, [sp, #28]
			nblend(leds[pixelnumber], newcolor, 64);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
    296a:	f818 2006 	ldrb.w	r2, [r8, r6]
    296e:	2a00      	cmp	r2, #0
    2970:	d05a      	beq.n	2a28 <pride()+0x3d0>
    2972:	9b01      	ldr	r3, [sp, #4]
    2974:	4940      	ldr	r1, [pc, #256]	; (2a78 <pride()+0x420>)

				CRGB newcolor = CHSV(hue8, sat8, bri8);

				uint16_t pixelnumber = i;
				pixelnumber = (shelf_num_leds[s] - 1) - pixelnumber;
				nblend(leds[shelf[s][pixelnumber]], newcolor, 64);
    2976:	eb06 1286 	add.w	r2, r6, r6, lsl #6
    297a:	441c      	add	r4, r3
    297c:	188b      	adds	r3, r1, r2
    297e:	9304      	str	r3, [sp, #16]
    2980:	ab0a      	add	r3, sp, #40	; 0x28
    2982:	b2a4      	uxth	r4, r4
			nblend(leds[pixelnumber], newcolor, 64);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
    2984:	2700      	movs	r7, #0
    2986:	f10d 0924 	add.w	r9, sp, #36	; 0x24
    298a:	9305      	str	r3, [sp, #20]
    298c:	e000      	b.n	2990 <pride()+0x338>
    298e:	4614      	mov	r4, r2
				hue16 += hueinc16;
    2990:	9b07      	ldr	r3, [sp, #28]
    2992:	441d      	add	r5, r3
    2994:	b2ad      	uxth	r5, r5
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2996:	0461      	lsls	r1, r4, #17
				uint8_t hue8 = hue16 / 256;
    2998:	ea4f 2e15 	mov.w	lr, r5, lsr #8
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    299c:	f3c4 02ca 	ubfx	r2, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    29a0:	d503      	bpl.n	29aa <pride()+0x352>
    29a2:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    29a6:	3207      	adds	r2, #7
    29a8:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    29aa:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    29ac:	f3c2 0146 	ubfx	r1, r2, #1, #7
    29b0:	f81b c000 	ldrb.w	ip, [fp, r0]
    29b4:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
    29b8:	9805      	ldr	r0, [sp, #20]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    29ba:	f88d e028 	strb.w	lr, [sp, #40]	; 0x28
    29be:	fb0c 2201 	mla	r2, ip, r1, r2

    if( theta & 0x8000 ) y = -y;
    29c2:	0423      	lsls	r3, r4, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    29c4:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    29c6:	bf48      	it	mi
    29c8:	4252      	negmi	r2, r2
    29ca:	b212      	sxth	r2, r2

				brightnesstheta16 += brightnessthetainc16;
				uint16_t b16 = sin16(brightnesstheta16) + 32768;

				uint16_t bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    29cc:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    29d0:	b292      	uxth	r2, r2
				uint8_t bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
    29d2:	9b03      	ldr	r3, [sp, #12]
    29d4:	fb02 f202 	mul.w	r2, r2, r2
    29d8:	0c12      	lsrs	r2, r2, #16
    29da:	fb03 f202 	mul.w	r2, r3, r2
    29de:	9b06      	ldr	r3, [sp, #24]
    29e0:	f3c2 4207 	ubfx	r2, r2, #16, #8
    29e4:	441a      	add	r2, r3
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    29e6:	4649      	mov	r1, r9
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    29e8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    29ec:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
    29f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    29f4:	f001 fcba 	bl	436c <hsv2rgb_rainbow(CHSV const&, CRGB&)>

				CRGB newcolor = CHSV(hue8, sat8, bri8);

				uint16_t pixelnumber = i;
				pixelnumber = (shelf_num_leds[s] - 1) - pixelnumber;
				nblend(leds[shelf[s][pixelnumber]], newcolor, 64);
    29f8:	f818 1006 	ldrb.w	r1, [r8, r6]
    29fc:	9b04      	ldr	r3, [sp, #16]
    29fe:	3901      	subs	r1, #1
    2a00:	1bc9      	subs	r1, r1, r7
    2a02:	b289      	uxth	r1, r1
    2a04:	2240      	movs	r2, #64	; 0x40
    2a06:	5c58      	ldrb	r0, [r3, r1]
    2a08:	4b1c      	ldr	r3, [pc, #112]	; (2a7c <pride()+0x424>)
    2a0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2a0e:	4418      	add	r0, r3
    2a10:	4649      	mov	r1, r9
    2a12:	f001 fb11 	bl	4038 <nblend(CRGB&, CRGB const&, unsigned char)>
			nblend(leds[pixelnumber], newcolor, 64);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
    2a16:	3701      	adds	r7, #1
    2a18:	f818 1006 	ldrb.w	r1, [r8, r6]
    2a1c:	9b01      	ldr	r3, [sp, #4]
    2a1e:	b2bf      	uxth	r7, r7
    2a20:	191a      	adds	r2, r3, r4
    2a22:	42b9      	cmp	r1, r7
    2a24:	b292      	uxth	r2, r2
    2a26:	d8b2      	bhi.n	298e <pride()+0x336>
    2a28:	3601      	adds	r6, #1
			pixelnumber = (NUM_LEDS - 1) - pixelnumber;
			nblend(leds[pixelnumber], newcolor, 64);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
    2a2a:	2e04      	cmp	r6, #4
    2a2c:	d19d      	bne.n	296a <pride()+0x312>
				pixelnumber = (shelf_num_leds[s] - 1) - pixelnumber;
				nblend(leds[shelf[s][pixelnumber]], newcolor, 64);
			}
		}
	}
}
    2a2e:	b013      	add	sp, #76	; 0x4c
    2a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2a34:	4c12      	ldr	r4, [pc, #72]	; (2a80 <pride()+0x428>)
void pride() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
		this_delay = 10;
		use_all_shelves = random8(2);
    2a36:	f8df 8060 	ldr.w	r8, [pc, #96]	; 2a98 <pride()+0x440>
    2a3a:	8823      	ldrh	r3, [r4, #0]
// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
    2a3c:	4e11      	ldr	r6, [pc, #68]	; (2a84 <pride()+0x42c>)
		this_delay = 10;
    2a3e:	4d12      	ldr	r5, [pc, #72]	; (2a88 <pride()+0x430>)
    2a40:	4812      	ldr	r0, [pc, #72]	; (2a8c <pride()+0x434>)
    2a42:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    2a46:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2a4a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2a4e:	3319      	adds	r3, #25
    2a50:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2a52:	eb03 2113 	add.w	r1, r3, r3, lsr #8
		use_all_shelves = random8(2);
    2a56:	f3c1 11c0 	ubfx	r1, r1, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2a5a:	8023      	strh	r3, [r4, #0]
    2a5c:	f888 1000 	strb.w	r1, [r8]

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
	if (mode_change) {
		mode_change = 0;
    2a60:	2300      	movs	r3, #0
		use_palette = 0;
		this_delay = 10;
    2a62:	240a      	movs	r4, #10
    2a64:	2105      	movs	r1, #5
// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
	if (mode_change) {
		mode_change = 0;
		use_palette = 0;
    2a66:	7033      	strb	r3, [r6, #0]

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride() {
	if (mode_change) {
		mode_change = 0;
    2a68:	7013      	strb	r3, [r2, #0]
		use_palette = 0;
		this_delay = 10;
    2a6a:	602c      	str	r4, [r5, #0]
    2a6c:	f003 f9ae 	bl	5dcc <usb_serial_write>
    2a70:	4807      	ldr	r0, [pc, #28]	; (2a90 <pride()+0x438>)
    2a72:	f003 fbaf 	bl	61d4 <Print::println()>
    2a76:	e5f9      	b.n	266c <pride()+0x14>
    2a78:	1fff8eb8 	.word	0x1fff8eb8
    2a7c:	1fff8898 	.word	0x1fff8898
    2a80:	1fff876c 	.word	0x1fff876c
    2a84:	1fff871e 	.word	0x1fff871e
    2a88:	1fff8720 	.word	0x1fff8720
    2a8c:	00006f6c 	.word	0x00006f6c
    2a90:	1fff8774 	.word	0x1fff8774
    2a94:	1fff8768 	.word	0x1fff8768
    2a98:	1fff8895 	.word	0x1fff8895

00002a9c <colorwave()>:
//	colorwave()
//
//	Variables
//		led.target_palette

void colorwave() {
    2a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    2aa0:	4abe      	ldr	r2, [pc, #760]	; (2d9c <colorwave()+0x300>)
    2aa2:	7813      	ldrb	r3, [r2, #0]
//	colorwave()
//
//	Variables
//		led.target_palette

void colorwave() {
    2aa4:	b093      	sub	sp, #76	; 0x4c
	if (mode_change) {
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	f040 8276 	bne.w	2f98 <colorwave()+0x4fc>
    2aac:	f8df 833c 	ldr.w	r8, [pc, #828]	; 2dec <colorwave()+0x350>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2ab0:	4ebb      	ldr	r6, [pc, #748]	; (2da0 <colorwave()+0x304>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2ab2:	4bbc      	ldr	r3, [pc, #752]	; (2da4 <colorwave()+0x308>)
    2ab4:	6832      	ldr	r2, [r6, #0]
    2ab6:	9211      	str	r2, [sp, #68]	; 0x44
	return ret;
    2ab8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    2aba:	fb03 f202 	mul.w	r2, r3, r2
    2abe:	0c12      	lsrs	r2, r2, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2ac0:	0454      	lsls	r4, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2ac2:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2ac6:	d503      	bpl.n	2ad0 <colorwave()+0x34>
    2ac8:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2acc:	3307      	adds	r3, #7
    2ace:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2ad0:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];
    2ad2:	f8df b31c 	ldr.w	fp, [pc, #796]	; 2df0 <colorwave()+0x354>

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2ad6:	4cb4      	ldr	r4, [pc, #720]	; (2da8 <colorwave()+0x30c>)
    2ad8:	f81b 0001 	ldrb.w	r0, [fp, r1]
    2adc:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
    2ae0:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2ae4:	fb00 1303 	mla	r3, r0, r3, r1
    2ae8:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2aea:	0410      	lsls	r0, r2, #16
    2aec:	bf48      	it	mi
    2aee:	425b      	negmi	r3, r3
    2af0:	b21b      	sxth	r3, r3
		this_delay = 10;
		use_all_shelves = random8(2);
   Serial.println("colorwave");
	}
	//uint8_t sat8 = beatsin88(87, 220, 250);
	brightdepth = beatsin88(341, 96, 224);
    2af2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2af6:	6832      	ldr	r2, [r6, #0]
    2af8:	9210      	str	r2, [sp, #64]	; 0x40
    2afa:	b29b      	uxth	r3, r3
    2afc:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
    2b00:	0c18      	lsrs	r0, r3, #16
	return ret;
    2b02:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2b04:	f64d 6308 	movw	r3, #56840	; 0xde08
    2b08:	3060      	adds	r0, #96	; 0x60
    2b0a:	fb03 f202 	mul.w	r2, r3, r2
    2b0e:	b2c3      	uxtb	r3, r0
    2b10:	4619      	mov	r1, r3
    2b12:	9308      	str	r3, [sp, #32]
    2b14:	4ba5      	ldr	r3, [pc, #660]	; (2dac <colorwave()+0x310>)
    2b16:	0c12      	lsrs	r2, r2, #16
    2b18:	7019      	strb	r1, [r3, #0]
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2b1a:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2b1c:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2b20:	d503      	bpl.n	2b2a <colorwave()+0x8e>
    2b22:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2b26:	3307      	adds	r3, #7
    2b28:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2b2a:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2b2c:	4d9e      	ldr	r5, [pc, #632]	; (2da8 <colorwave()+0x30c>)
    2b2e:	f81b 4001 	ldrb.w	r4, [fp, r1]
    2b32:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    2b36:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2b3a:	fb04 1303 	mla	r3, r4, r3, r1

    if( theta & 0x8000 ) y = -y;
    2b3e:	0417      	lsls	r7, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2b40:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2b42:	bf48      	it	mi
    2b44:	425b      	negmi	r3, r3
    2b46:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2b48:	6832      	ldr	r2, [r6, #0]
    2b4a:	920f      	str	r2, [sp, #60]	; 0x3c
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    2b4c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2b50:	b29b      	uxth	r3, r3
    2b52:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
	return ret;
    2b56:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2b58:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2b5c:	f24a 02c8 	movw	r2, #41160	; 0xa0c8
    2b60:	fb02 f201 	mul.w	r2, r2, r1
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    2b64:	0c1b      	lsrs	r3, r3, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2b66:	0c12      	lsrs	r2, r2, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    2b68:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    2b6c:	4990      	ldr	r1, [pc, #576]	; (2db0 <colorwave()+0x314>)
    2b6e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2b70:	0455      	lsls	r5, r2, #17
    2b72:	9302      	str	r3, [sp, #8]
    2b74:	800b      	strh	r3, [r1, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2b76:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2b7a:	d503      	bpl.n	2b84 <colorwave()+0xe8>
    2b7c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2b80:	3307      	adds	r3, #7
    2b82:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2b84:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2b86:	4d88      	ldr	r5, [pc, #544]	; (2da8 <colorwave()+0x30c>)
    2b88:	f81b 4001 	ldrb.w	r4, [fp, r1]
    2b8c:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
    2b90:	f8df 9260 	ldr.w	r9, [pc, #608]	; 2df4 <colorwave()+0x358>
   Serial.println("colorwave");
	}
	//uint8_t sat8 = beatsin88(87, 220, 250);
	brightdepth = beatsin88(341, 96, 224);
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	msmultiplier = beatsin88(147, 23, 60);
    2b94:	4d87      	ldr	r5, [pc, #540]	; (2db4 <colorwave()+0x318>)

	hue16 = sHue16;//gHue * 256;
    2b96:	f8df a260 	ldr.w	sl, [pc, #608]	; 2df8 <colorwave()+0x35c>
    2b9a:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2b9e:	fb04 1303 	mla	r3, r4, r3, r1
    2ba2:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2ba4:	0414      	lsls	r4, r2, #16
    2ba6:	bf48      	it	mi
    2ba8:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2baa:	6832      	ldr	r2, [r6, #0]
    2bac:	920e      	str	r2, [sp, #56]	; 0x38
    2bae:	b21b      	sxth	r3, r3
    2bb0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2bb4:	2226      	movs	r2, #38	; 0x26
    2bb6:	b29b      	uxth	r3, r3
	return ret;
    2bb8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    2bba:	fb02 f303 	mul.w	r3, r2, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2bbe:	f647 3498 	movw	r4, #31640	; 0x7b98
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    2bc2:	0c1b      	lsrs	r3, r3, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2bc4:	fb04 f407 	mul.w	r4, r4, r7
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    2bc8:	3317      	adds	r3, #23
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2bca:	0c24      	lsrs	r4, r4, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    2bcc:	b299      	uxth	r1, r3
    2bce:	f8b9 2000 	ldrh.w	r2, [r9]
    2bd2:	f8aa 2000 	strh.w	r2, [sl]
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2bd6:	0460      	lsls	r0, r4, #17
   Serial.println("colorwave");
	}
	//uint8_t sat8 = beatsin88(87, 220, 250);
	brightdepth = beatsin88(341, 96, 224);
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	msmultiplier = beatsin88(147, 23, 60);
    2bd8:	7029      	strb	r1, [r5, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2bda:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2bde:	d503      	bpl.n	2be8 <colorwave()+0x14c>
    2be0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2be4:	3307      	adds	r3, #7
    2be6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2be8:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2bea:	486f      	ldr	r0, [pc, #444]	; (2da8 <colorwave()+0x30c>)
    2bec:	f81b 7005 	ldrb.w	r7, [fp, r5]
    2bf0:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
	deltams = ms - sLastMillis;
    2bf4:	f8df e204 	ldr.w	lr, [pc, #516]	; 2dfc <colorwave()+0x360>
	brightdepth = beatsin88(341, 96, 224);
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);
    2bf8:	486f      	ldr	r0, [pc, #444]	; (2db8 <colorwave()+0x31c>)

	ms = millis();
	deltams = ms - sLastMillis;
    2bfa:	f8be c000 	ldrh.w	ip, [lr]
    2bfe:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2c02:	fb07 5303 	mla	r3, r7, r3, r5
    2c06:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2c08:	0427      	lsls	r7, r4, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2c0a:	6834      	ldr	r4, [r6, #0]
    2c0c:	940c      	str	r4, [sp, #48]	; 0x30
    2c0e:	bf48      	it	mi
    2c10:	425b      	negmi	r3, r3
	return ret;
    2c12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2c14:	6834      	ldr	r4, [r6, #0]
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    2c16:	4e69      	ldr	r6, [pc, #420]	; (2dbc <colorwave()+0x320>)
    2c18:	940d      	str	r4, [sp, #52]	; 0x34
    2c1a:	b21b      	sxth	r3, r3
    2c1c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
    2c20:	b2ad      	uxth	r5, r5
    2c22:	b29b      	uxth	r3, r3
    2c24:	f240 44b1 	movw	r4, #1201	; 0x4b1
    2c28:	fb04 f403 	mul.w	r4, r4, r3
	deltams = ms - sLastMillis;
    2c2c:	ebcc 0c05 	rsb	ip, ip, r5
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    2c30:	8833      	ldrh	r3, [r6, #0]
	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
	deltams = ms - sLastMillis;
	sLastMillis = ms;
    2c32:	f8ae 5000 	strh.w	r5, [lr]

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
	deltams = ms - sLastMillis;
    2c36:	fa1f fc8c 	uxth.w	ip, ip
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    2c3a:	fb1c 3301 	smlabb	r3, ip, r1, r3
	return ret;
    2c3e:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2c42:	495f      	ldr	r1, [pc, #380]	; (2dc0 <colorwave()+0x324>)
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
    2c44:	4f5f      	ldr	r7, [pc, #380]	; (2dc4 <colorwave()+0x328>)
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    2c46:	0c24      	lsrs	r4, r4, #16
    2c48:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2c4c:	fb01 fe0e 	mul.w	lr, r1, lr
	deltams = ms - sLastMillis;
    2c50:	495d      	ldr	r1, [pc, #372]	; (2dc8 <colorwave()+0x32c>)
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);

	ms = millis();
    2c52:	803d      	strh	r5, [r7, #0]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    2c54:	b2a7      	uxth	r7, r4
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2c56:	ea4f 441e 	mov.w	r4, lr, lsr #16
	deltams = ms - sLastMillis;
    2c5a:	f8a1 c000 	strh.w	ip, [r1]
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2c5e:	0465      	lsls	r5, r4, #17
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
    2c60:	b299      	uxth	r1, r3
    2c62:	8031      	strh	r1, [r6, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2c64:	f3c4 03ca 	ubfx	r3, r4, #3, #11
	brightdepth = beatsin88(341, 96, 224);
	brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	msmultiplier = beatsin88(147, 23, 60);

	hue16 = sHue16;//gHue * 256;
	hueinc16 = beatsin88(113, 300, 1500);
    2c68:	8007      	strh	r7, [r0, #0]
    if( theta & 0x4000 ) offset = 2047 - offset;
    2c6a:	d503      	bpl.n	2c74 <colorwave()+0x1d8>
    2c6c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2c70:	3307      	adds	r3, #7
    2c72:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2c74:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2c76:	484c      	ldr	r0, [pc, #304]	; (2da8 <colorwave()+0x30c>)
    2c78:	f81b 6005 	ldrb.w	r6, [fp, r5]
    2c7c:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
    2c80:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2c84:	fb06 5303 	mla	r3, r6, r3, r5
    2c88:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2c8a:	0420      	lsls	r0, r4, #16
    2c8c:	bf48      	it	mi
    2c8e:	425b      	negmi	r3, r3
    2c90:	b21b      	sxth	r3, r3

	ms = millis();
	deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
    2c92:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    2c96:	b29b      	uxth	r3, r3
    2c98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2c9c:	0c1b      	lsrs	r3, r3, #16
    2c9e:	3305      	adds	r3, #5
	brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
    2ca0:	f898 4000 	ldrb.w	r4, [r8]
	ms = millis();
	deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;
    2ca4:	f8df 8158 	ldr.w	r8, [pc, #344]	; 2e00 <colorwave()+0x364>

	ms = millis();
	deltams = ms - sLastMillis;
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
    2ca8:	b29b      	uxth	r3, r3
    2caa:	fb0c 2303 	mla	r3, ip, r3, r2
    2cae:	f8a9 3000 	strh.w	r3, [r9]
	brightnesstheta16 = sPseudotime;
    2cb2:	f8a8 1000 	strh.w	r1, [r8]

	if (!use_all_shelves) {
    2cb6:	2c00      	cmp	r4, #0
    2cb8:	f040 80cf 	bne.w	2e5a <colorwave()+0x3be>
    2cbc:	4b43      	ldr	r3, [pc, #268]	; (2dcc <colorwave()+0x330>)
    2cbe:	9303      	str	r3, [sp, #12]
    2cc0:	4b43      	ldr	r3, [pc, #268]	; (2dd0 <colorwave()+0x334>)
    2cc2:	9304      	str	r3, [sp, #16]
    2cc4:	4b43      	ldr	r3, [pc, #268]	; (2dd4 <colorwave()+0x338>)
    2cc6:	9305      	str	r3, [sp, #20]
    2cc8:	4b43      	ldr	r3, [pc, #268]	; (2dd8 <colorwave()+0x33c>)
    2cca:	9306      	str	r3, [sp, #24]
    2ccc:	4b43      	ldr	r3, [pc, #268]	; (2ddc <colorwave()+0x340>)
    2cce:	9307      	str	r3, [sp, #28]

				cwave_index = hue8;
				//index = triwave8( index);
				cwave_index = scale8(cwave_index, 240);

				CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2cd0:	9c08      	ldr	r4, [sp, #32]
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
    2cd2:	9b02      	ldr	r3, [sp, #8]
    2cd4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 2e04 <colorwave()+0x368>

				cwave_index = hue8;
				//index = triwave8( index);
				cwave_index = scale8(cwave_index, 240);

				CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2cd8:	4618      	mov	r0, r3
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
    2cda:	46be      	mov	lr, r7
    2cdc:	25bb      	movs	r5, #187	; 0xbb
    2cde:	ae0b      	add	r6, sp, #44	; 0x2c

				cwave_index = hue8;
				//index = triwave8( index);
				cwave_index = scale8(cwave_index, 240);

				CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2ce0:	4623      	mov	r3, r4
    2ce2:	4c3f      	ldr	r4, [pc, #252]	; (2de0 <colorwave()+0x344>)
    2ce4:	eb05 0745 	add.w	r7, r5, r5, lsl #1
    2ce8:	4427      	add	r7, r4
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
    2cea:	9702      	str	r7, [sp, #8]
    2cec:	2404      	movs	r4, #4
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			for (byte c = 0; c < 4; c++) {
				hue16 += hueinc16;
    2cee:	4472      	add	r2, lr
    2cf0:	b292      	uxth	r2, r2
				hue8 = hue16 / 256;
				h16_128 = hue16 >> 7;
    2cf2:	ea4f 1cd2 	mov.w	ip, r2, lsr #7
				if (h16_128 & 0x100) {
					hue8 = 255 - (h16_128 >> 1);
    2cf6:	ea6f 2e12 	mvn.w	lr, r2, lsr #8
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			for (byte c = 0; c < 4; c++) {
				hue16 += hueinc16;
				hue8 = hue16 / 256;
				h16_128 = hue16 >> 7;
				if (h16_128 & 0x100) {
    2cfa:	f41c 7f80 	tst.w	ip, #256	; 0x100
					hue8 = 255 - (h16_128 >> 1);
    2cfe:	fa5f fe8e 	uxtb.w	lr, lr
				}
				else {
					hue8 = h16_128 >> 1;
				}

				brightnesstheta16 += brightnessthetainc16;
    2d02:	4401      	add	r1, r0
				h16_128 = hue16 >> 7;
				if (h16_128 & 0x100) {
					hue8 = 255 - (h16_128 >> 1);
				}
				else {
					hue8 = h16_128 >> 1;
    2d04:	bf08      	it	eq
    2d06:	ea4f 2e12 	moveq.w	lr, r2, lsr #8
	brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			for (byte c = 0; c < 4; c++) {
				hue16 += hueinc16;
    2d0a:	f8aa 2000 	strh.w	r2, [sl]
				h16_128 = hue16 >> 7;
				if (h16_128 & 0x100) {
					hue8 = 255 - (h16_128 >> 1);
				}
				else {
					hue8 = h16_128 >> 1;
    2d0e:	4a35      	ldr	r2, [pc, #212]	; (2de4 <colorwave()+0x348>)
	if (!use_all_shelves) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			for (byte c = 0; c < 4; c++) {
				hue16 += hueinc16;
				hue8 = hue16 / 256;
				h16_128 = hue16 >> 7;
    2d10:	9f03      	ldr	r7, [sp, #12]
				if (h16_128 & 0x100) {
					hue8 = 255 - (h16_128 >> 1);
				}
				else {
					hue8 = h16_128 >> 1;
    2d12:	f882 e000 	strb.w	lr, [r2]
				}

				brightnesstheta16 += brightnessthetainc16;
    2d16:	b289      	uxth	r1, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2d18:	044a      	lsls	r2, r1, #17
	if (!use_all_shelves) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			for (byte c = 0; c < 4; c++) {
				hue16 += hueinc16;
				hue8 = hue16 / 256;
				h16_128 = hue16 >> 7;
    2d1a:	f8a7 c000 	strh.w	ip, [r7]
				}
				else {
					hue8 = h16_128 >> 1;
				}

				brightnesstheta16 += brightnessthetainc16;
    2d1e:	f8a8 1000 	strh.w	r1, [r8]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2d22:	f3c1 00ca 	ubfx	r0, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2d26:	d503      	bpl.n	2d30 <colorwave()+0x294>
    2d28:	f5c0 60ff 	rsb	r0, r0, #2040	; 0x7f8
    2d2c:	3007      	adds	r0, #7
    2d2e:	b280      	uxth	r0, r0

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2d30:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2d34:	4f1c      	ldr	r7, [pc, #112]	; (2da8 <colorwave()+0x30c>)
    2d36:	f3c0 0246 	ubfx	r2, r0, #1, #7
    2d3a:	f81b 000c 	ldrb.w	r0, [fp, ip]
    2d3e:	f837 c01c 	ldrh.w	ip, [r7, ip, lsl #1]
    2d42:	fb00 c002 	mla	r0, r0, r2, ip

    if( theta & 0x8000 ) y = -y;
    2d46:	040f      	lsls	r7, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2d48:	b280      	uxth	r0, r0

    if( theta & 0x8000 ) y = -y;
    2d4a:	bf48      	it	mi
    2d4c:	4240      	negmi	r0, r0
    2d4e:	b200      	sxth	r0, r0
				b16 = sin16(brightnesstheta16) + 32768;
    2d50:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
    2d54:	b280      	uxth	r0, r0

				bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    2d56:	fb00 f200 	mul.w	r2, r0, r0
    2d5a:	0c12      	lsrs	r2, r2, #16
				bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
				bri8 += (255 - brightdepth);
    2d5c:	fb02 fc03 	mul.w	ip, r2, r3
    2d60:	43db      	mvns	r3, r3
    2d62:	eb03 4c1c 	add.w	ip, r3, ip, lsr #16
    2d66:	ebce 130e 	rsb	r3, lr, lr, lsl #4
    2d6a:	eb0e 1e03 	add.w	lr, lr, r3, lsl #4

				cwave_index = hue8;
				//index = triwave8( index);
				cwave_index = scale8(cwave_index, 240);

				CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2d6e:	2301      	movs	r3, #1
    2d70:	9300      	str	r3, [sp, #0]
				else {
					hue8 = h16_128 >> 1;
				}

				brightnesstheta16 += brightnessthetainc16;
				b16 = sin16(brightnesstheta16) + 32768;
    2d72:	9b04      	ldr	r3, [sp, #16]

				cwave_index = hue8;
				//index = triwave8( index);
				cwave_index = scale8(cwave_index, 240);

				CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2d74:	491c      	ldr	r1, [pc, #112]	; (2de8 <colorwave()+0x34c>)
				else {
					hue8 = h16_128 >> 1;
				}

				brightnesstheta16 += brightnessthetainc16;
				b16 = sin16(brightnesstheta16) + 32768;
    2d76:	8018      	strh	r0, [r3, #0]

				bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    2d78:	9805      	ldr	r0, [sp, #20]
    2d7a:	8002      	strh	r2, [r0, #0]
				bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
				bri8 += (255 - brightdepth);
    2d7c:	9806      	ldr	r0, [sp, #24]
    2d7e:	fa5f fc8c 	uxtb.w	ip, ip
    2d82:	f3ce 2e07 	ubfx	lr, lr, #8, #8

				cwave_index = hue8;
				//index = triwave8( index);
				cwave_index = scale8(cwave_index, 240);

				CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2d86:	4663      	mov	r3, ip
    2d88:	4672      	mov	r2, lr
				brightnesstheta16 += brightnessthetainc16;
				b16 = sin16(brightnesstheta16) + 32768;

				bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
				bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
				bri8 += (255 - brightdepth);
    2d8a:	f880 c000 	strb.w	ip, [r0]

				cwave_index = hue8;
				//index = triwave8( index);
				cwave_index = scale8(cwave_index, 240);
    2d8e:	f889 e000 	strb.w	lr, [r9]

				CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2d92:	4630      	mov	r0, r6
    2d94:	f001 f9a0 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

				pixelnumber = i;
				pixelnumber = (NUM_LEDS - 1) - pixelnumber;
    2d98:	9b07      	ldr	r3, [sp, #28]
    2d9a:	e035      	b.n	2e08 <colorwave()+0x36c>
    2d9c:	1fff8724 	.word	0x1fff8724
    2da0:	1fff9068 	.word	0x1fff9068
    2da4:	000174f8 	.word	0x000174f8
    2da8:	00008504 	.word	0x00008504
    2dac:	1fff8b14 	.word	0x1fff8b14
    2db0:	1fff8ad4 	.word	0x1fff8ad4
    2db4:	1fff8894 	.word	0x1fff8894
    2db8:	1fff8d34 	.word	0x1fff8d34
    2dbc:	1fff8bf2 	.word	0x1fff8bf2
    2dc0:	0001b580 	.word	0x0001b580
    2dc4:	1fff8880 	.word	0x1fff8880
    2dc8:	1fff8df4 	.word	0x1fff8df4
    2dcc:	1fff8bfe 	.word	0x1fff8bfe
    2dd0:	1fff8d2a 	.word	0x1fff8d2a
    2dd4:	1fff8adc 	.word	0x1fff8adc
    2dd8:	1fff8b10 	.word	0x1fff8b10
    2ddc:	1fff8ad0 	.word	0x1fff8ad0
    2de0:	1fff8898 	.word	0x1fff8898
    2de4:	1fff8c00 	.word	0x1fff8c00
    2de8:	1fff8ae0 	.word	0x1fff8ae0
    2dec:	1fff8895 	.word	0x1fff8895
    2df0:	00007780 	.word	0x00007780
    2df4:	1fff8d26 	.word	0x1fff8d26
    2df8:	1fff8b16 	.word	0x1fff8b16
    2dfc:	1fff8d2c 	.word	0x1fff8d2c
    2e00:	1fff8884 	.word	0x1fff8884
    2e04:	1fff8eb6 	.word	0x1fff8eb6

				nblend(leds[pixelnumber], newcolor, 128);
    2e08:	9802      	ldr	r0, [sp, #8]
				cwave_index = scale8(cwave_index, 240);

				CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);

				pixelnumber = i;
				pixelnumber = (NUM_LEDS - 1) - pixelnumber;
    2e0a:	801d      	strh	r5, [r3, #0]

				nblend(leds[pixelnumber], newcolor, 128);
    2e0c:	2280      	movs	r2, #128	; 0x80
    2e0e:	4631      	mov	r1, r6
    2e10:	3c01      	subs	r4, #1
    2e12:	f001 f911 	bl	4038 <nblend(CRGB&, CRGB const&, unsigned char)>
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			for (byte c = 0; c < 4; c++) {
    2e16:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2e1a:	d00b      	beq.n	2e34 <colorwave()+0x398>
    2e1c:	4b70      	ldr	r3, [pc, #448]	; (2fe0 <colorwave()+0x544>)
    2e1e:	f8ba 2000 	ldrh.w	r2, [sl]
    2e22:	f8b3 e000 	ldrh.w	lr, [r3]
    2e26:	4b6f      	ldr	r3, [pc, #444]	; (2fe4 <colorwave()+0x548>)
    2e28:	f8b8 1000 	ldrh.w	r1, [r8]
    2e2c:	8818      	ldrh	r0, [r3, #0]
    2e2e:	4b6e      	ldr	r3, [pc, #440]	; (2fe8 <colorwave()+0x54c>)
    2e30:	781b      	ldrb	r3, [r3, #0]
    2e32:	e75c      	b.n	2cee <colorwave()+0x252>
    2e34:	3d01      	subs	r5, #1
    2e36:	b2ad      	uxth	r5, r5
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
    2e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2e3c:	429d      	cmp	r5, r3
    2e3e:	f000 80a8 	beq.w	2f92 <colorwave()+0x4f6>
    2e42:	4b68      	ldr	r3, [pc, #416]	; (2fe4 <colorwave()+0x548>)
    2e44:	f8b8 1000 	ldrh.w	r1, [r8]
    2e48:	8818      	ldrh	r0, [r3, #0]
    2e4a:	4b65      	ldr	r3, [pc, #404]	; (2fe0 <colorwave()+0x544>)
    2e4c:	f8ba 2000 	ldrh.w	r2, [sl]
    2e50:	f8b3 e000 	ldrh.w	lr, [r3]
    2e54:	4b64      	ldr	r3, [pc, #400]	; (2fe8 <colorwave()+0x54c>)
    2e56:	781b      	ldrb	r3, [r3, #0]
    2e58:	e743      	b.n	2ce2 <colorwave()+0x246>
	sLastMillis = ms;
	sPseudotime += deltams * msmultiplier;
	sHue16 += deltams * beatsin88(400, 5, 9);
	brightnesstheta16 = sPseudotime;

	if (!use_all_shelves) {
    2e5a:	2300      	movs	r3, #0
    2e5c:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 302c <colorwave()+0x590>
    2e60:	461f      	mov	r7, r3
			}
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
    2e62:	f819 3b01 	ldrb.w	r3, [r9], #1
    2e66:	2b00      	cmp	r3, #0
    2e68:	f000 808f 	beq.w	2f8a <colorwave()+0x4ee>
    2e6c:	4b5f      	ldr	r3, [pc, #380]	; (2fec <colorwave()+0x550>)
    2e6e:	9309      	str	r3, [sp, #36]	; 0x24
    2e70:	4b5f      	ldr	r3, [pc, #380]	; (2ff0 <colorwave()+0x554>)
    2e72:	9308      	str	r3, [sp, #32]
    2e74:	4b5f      	ldr	r3, [pc, #380]	; (2ff4 <colorwave()+0x558>)
    2e76:	9307      	str	r3, [sp, #28]
    2e78:	4b5f      	ldr	r3, [pc, #380]	; (2ff8 <colorwave()+0x55c>)
    2e7a:	9306      	str	r3, [sp, #24]
    2e7c:	4b5f      	ldr	r3, [pc, #380]	; (2ffc <colorwave()+0x560>)
    2e7e:	9305      	str	r3, [sp, #20]
    2e80:	4b5f      	ldr	r3, [pc, #380]	; (3000 <colorwave()+0x564>)
    2e82:	9304      	str	r3, [sp, #16]
    2e84:	01bb      	lsls	r3, r7, #6
    2e86:	2500      	movs	r5, #0
    2e88:	ae0b      	add	r6, sp, #44	; 0x2c
    2e8a:	9303      	str	r3, [sp, #12]
    2e8c:	2404      	movs	r4, #4
    2e8e:	9502      	str	r5, [sp, #8]
				for (byte c = 0; c < 4; c++) {
					hue16 += hueinc16;
    2e90:	4b53      	ldr	r3, [pc, #332]	; (2fe0 <colorwave()+0x544>)
    2e92:	f8ba 2000 	ldrh.w	r2, [sl]
    2e96:	881b      	ldrh	r3, [r3, #0]
					hue8 = hue16 / 256;
					h16_128 = hue16 >> 7;
    2e98:	9909      	ldr	r1, [sp, #36]	; 0x24
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
				for (byte c = 0; c < 4; c++) {
					hue16 += hueinc16;
    2e9a:	4413      	add	r3, r2
    2e9c:	b29b      	uxth	r3, r3
					hue8 = hue16 / 256;
					h16_128 = hue16 >> 7;
    2e9e:	09da      	lsrs	r2, r3, #7
					if (h16_128 & 0x100) {
    2ea0:	f412 7f80 	tst.w	r2, #256	; 0x100
						hue8 = 255 - (h16_128 >> 1);
    2ea4:	ea6f 2e13 	mvn.w	lr, r3, lsr #8
    2ea8:	fa5f fe8e 	uxtb.w	lr, lr
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
				for (byte c = 0; c < 4; c++) {
					hue16 += hueinc16;
    2eac:	f8aa 3000 	strh.w	r3, [sl]
					h16_128 = hue16 >> 7;
					if (h16_128 & 0x100) {
						hue8 = 255 - (h16_128 >> 1);
					}
					else {
						hue8 = h16_128 >> 1;
    2eb0:	bf08      	it	eq
    2eb2:	ea4f 2e13 	moveq.w	lr, r3, lsr #8
    2eb6:	4b53      	ldr	r3, [pc, #332]	; (3004 <colorwave()+0x568>)
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
				for (byte c = 0; c < 4; c++) {
					hue16 += hueinc16;
					hue8 = hue16 / 256;
					h16_128 = hue16 >> 7;
    2eb8:	800a      	strh	r2, [r1, #0]
					if (h16_128 & 0x100) {
						hue8 = 255 - (h16_128 >> 1);
					}
					else {
						hue8 = h16_128 >> 1;
    2eba:	f883 e000 	strb.w	lr, [r3]
					}

					brightnesstheta16 += brightnessthetainc16;
    2ebe:	4b49      	ldr	r3, [pc, #292]	; (2fe4 <colorwave()+0x548>)
    2ec0:	f8b8 2000 	ldrh.w	r2, [r8]
    2ec4:	881b      	ldrh	r3, [r3, #0]
    2ec6:	441a      	add	r2, r3
    2ec8:	b292      	uxth	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2eca:	0451      	lsls	r1, r2, #17
    2ecc:	f8a8 2000 	strh.w	r2, [r8]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2ed0:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2ed4:	d503      	bpl.n	2ede <colorwave()+0x442>
    2ed6:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2eda:	3307      	adds	r3, #7
    2edc:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2ede:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2ee0:	4d49      	ldr	r5, [pc, #292]	; (3008 <colorwave()+0x56c>)
    2ee2:	f81b 0001 	ldrb.w	r0, [fp, r1]
    2ee6:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    2eea:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2eee:	fb00 1003 	mla	r0, r0, r3, r1
    2ef2:	b280      	uxth	r0, r0

    if( theta & 0x8000 ) y = -y;
    2ef4:	0413      	lsls	r3, r2, #16
    2ef6:	bf48      	it	mi
    2ef8:	4240      	negmi	r0, r0
    2efa:	b200      	sxth	r0, r0
					b16 = sin16(brightnesstheta16) + 32768;
    2efc:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000

					bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
					bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
    2f00:	4b39      	ldr	r3, [pc, #228]	; (2fe8 <colorwave()+0x54c>)

					cwave_index = hue8;
					//index = triwave8( index);
					cwave_index = scale8(cwave_index, 240);

					CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2f02:	4942      	ldr	r1, [pc, #264]	; (300c <colorwave()+0x570>)

					brightnesstheta16 += brightnessthetainc16;
					b16 = sin16(brightnesstheta16) + 32768;

					bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
					bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
    2f04:	781b      	ldrb	r3, [r3, #0]
					else {
						hue8 = h16_128 >> 1;
					}

					brightnesstheta16 += brightnessthetainc16;
					b16 = sin16(brightnesstheta16) + 32768;
    2f06:	b280      	uxth	r0, r0

					bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    2f08:	fb00 f200 	mul.w	r2, r0, r0
    2f0c:	0c12      	lsrs	r2, r2, #16
					bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
					bri8 += (255 - brightdepth);
    2f0e:	fb02 fc03 	mul.w	ip, r2, r3
    2f12:	43db      	mvns	r3, r3
    2f14:	eb03 4c1c 	add.w	ip, r3, ip, lsr #16
    2f18:	ebce 130e 	rsb	r3, lr, lr, lsl #4
    2f1c:	eb0e 1e03 	add.w	lr, lr, r3, lsl #4
					else {
						hue8 = h16_128 >> 1;
					}

					brightnesstheta16 += brightnessthetainc16;
					b16 = sin16(brightnesstheta16) + 32768;
    2f20:	9b08      	ldr	r3, [sp, #32]

					cwave_index = hue8;
					//index = triwave8( index);
					cwave_index = scale8(cwave_index, 240);

					CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2f22:	2501      	movs	r5, #1
    2f24:	9500      	str	r5, [sp, #0]
					else {
						hue8 = h16_128 >> 1;
					}

					brightnesstheta16 += brightnessthetainc16;
					b16 = sin16(brightnesstheta16) + 32768;
    2f26:	8018      	strh	r0, [r3, #0]

					bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    2f28:	9807      	ldr	r0, [sp, #28]
					bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
					bri8 += (255 - brightdepth);

					cwave_index = hue8;
					//index = triwave8( index);
					cwave_index = scale8(cwave_index, 240);
    2f2a:	9d05      	ldr	r5, [sp, #20]
					}

					brightnesstheta16 += brightnessthetainc16;
					b16 = sin16(brightnesstheta16) + 32768;

					bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
    2f2c:	8002      	strh	r2, [r0, #0]
					bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
					bri8 += (255 - brightdepth);
    2f2e:	9806      	ldr	r0, [sp, #24]
    2f30:	fa5f fc8c 	uxtb.w	ip, ip
    2f34:	f3ce 2e07 	ubfx	lr, lr, #8, #8

					cwave_index = hue8;
					//index = triwave8( index);
					cwave_index = scale8(cwave_index, 240);

					CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2f38:	4663      	mov	r3, ip
    2f3a:	4672      	mov	r2, lr
					brightnesstheta16 += brightnessthetainc16;
					b16 = sin16(brightnesstheta16) + 32768;

					bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536;
					bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536;
					bri8 += (255 - brightdepth);
    2f3c:	f880 c000 	strb.w	ip, [r0]

					cwave_index = hue8;
					//index = triwave8( index);
					cwave_index = scale8(cwave_index, 240);
    2f40:	f885 e000 	strb.w	lr, [r5]

					CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);
    2f44:	4630      	mov	r0, r6
    2f46:	f001 f8c7 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

					pixelnumber = i;
					pixelnumber = (shelf_num_leds[s] - 1) - pixelnumber;
    2f4a:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    2f4e:	9a02      	ldr	r2, [sp, #8]
    2f50:	3b01      	subs	r3, #1
    2f52:	1a9b      	subs	r3, r3, r2

					nblend(leds[shelf[s][pixelnumber]], newcolor, 128);
    2f54:	9a03      	ldr	r2, [sp, #12]
    2f56:	19d1      	adds	r1, r2, r7
    2f58:	4a2d      	ldr	r2, [pc, #180]	; (3010 <colorwave()+0x574>)
					cwave_index = scale8(cwave_index, 240);

					CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);

					pixelnumber = i;
					pixelnumber = (shelf_num_leds[s] - 1) - pixelnumber;
    2f5a:	b29b      	uxth	r3, r3

					nblend(leds[shelf[s][pixelnumber]], newcolor, 128);
    2f5c:	4411      	add	r1, r2
    2f5e:	3c01      	subs	r4, #1
    2f60:	5cc8      	ldrb	r0, [r1, r3]
					cwave_index = scale8(cwave_index, 240);

					CRGB newcolor = ColorFromPalette(current_palette, cwave_index, bri8);

					pixelnumber = i;
					pixelnumber = (shelf_num_leds[s] - 1) - pixelnumber;
    2f62:	9904      	ldr	r1, [sp, #16]
    2f64:	800b      	strh	r3, [r1, #0]

					nblend(leds[shelf[s][pixelnumber]], newcolor, 128);
    2f66:	4b2b      	ldr	r3, [pc, #172]	; (3014 <colorwave()+0x578>)
    2f68:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2f6c:	2280      	movs	r2, #128	; 0x80
    2f6e:	4418      	add	r0, r3
    2f70:	4631      	mov	r1, r6
    2f72:	f001 f861 	bl	4038 <nblend(CRGB&, CRGB const&, unsigned char)>
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
				for (byte c = 0; c < 4; c++) {
    2f76:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2f7a:	d189      	bne.n	2e90 <colorwave()+0x3f4>
    2f7c:	9d02      	ldr	r5, [sp, #8]
			}
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			for (uint16_t i = 0; i < shelf_num_leds[s]; i++) {
    2f7e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    2f82:	3501      	adds	r5, #1
    2f84:	b2ad      	uxth	r5, r5
    2f86:	42ab      	cmp	r3, r5
    2f88:	d880      	bhi.n	2e8c <colorwave()+0x3f0>
    2f8a:	3701      	adds	r7, #1
				nblend(leds[pixelnumber], newcolor, 128);
			}
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
    2f8c:	2f04      	cmp	r7, #4
    2f8e:	f47f af68 	bne.w	2e62 <colorwave()+0x3c6>
					nblend(leds[shelf[s][pixelnumber]], newcolor, 128);
				}
			}
		}
	}
}
    2f92:	b013      	add	sp, #76	; 0x4c
    2f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f98:	4c1f      	ldr	r4, [pc, #124]	; (3018 <colorwave()+0x57c>)
void colorwave() {
	if (mode_change) {
		use_palette = 1;
		mode_change = 0;
		this_delay = 10;
		use_all_shelves = random8(2);
    2f9a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3030 <colorwave()+0x594>
    2f9e:	8823      	ldrh	r3, [r4, #0]
//	Variables
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
    2fa0:	4e1e      	ldr	r6, [pc, #120]	; (301c <colorwave()+0x580>)
		mode_change = 0;
		this_delay = 10;
    2fa2:	4d1f      	ldr	r5, [pc, #124]	; (3020 <colorwave()+0x584>)
    2fa4:	481f      	ldr	r0, [pc, #124]	; (3024 <colorwave()+0x588>)
    2fa6:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    2faa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2fae:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2fb2:	3319      	adds	r3, #25
    2fb4:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2fb6:	eb03 2113 	add.w	r1, r3, r3, lsr #8
		use_all_shelves = random8(2);
    2fba:	f3c1 11c0 	ubfx	r1, r1, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2fbe:	8023      	strh	r3, [r4, #0]
    2fc0:	f888 1000 	strb.w	r1, [r8]
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
		mode_change = 0;
    2fc4:	2300      	movs	r3, #0
//	Variables
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
    2fc6:	2701      	movs	r7, #1
		mode_change = 0;
		this_delay = 10;
    2fc8:	240a      	movs	r4, #10
    2fca:	2109      	movs	r1, #9
//	Variables
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
    2fcc:	7037      	strb	r7, [r6, #0]
		mode_change = 0;
		this_delay = 10;
    2fce:	602c      	str	r4, [r5, #0]
//		led.target_palette

void colorwave() {
	if (mode_change) {
		use_palette = 1;
		mode_change = 0;
    2fd0:	7013      	strb	r3, [r2, #0]
    2fd2:	f002 fefb 	bl	5dcc <usb_serial_write>
    2fd6:	4814      	ldr	r0, [pc, #80]	; (3028 <colorwave()+0x58c>)
    2fd8:	f003 f8fc 	bl	61d4 <Print::println()>
    2fdc:	e568      	b.n	2ab0 <colorwave()+0x14>
    2fde:	bf00      	nop
    2fe0:	1fff8d34 	.word	0x1fff8d34
    2fe4:	1fff8ad4 	.word	0x1fff8ad4
    2fe8:	1fff8b14 	.word	0x1fff8b14
    2fec:	1fff8bfe 	.word	0x1fff8bfe
    2ff0:	1fff8d2a 	.word	0x1fff8d2a
    2ff4:	1fff8adc 	.word	0x1fff8adc
    2ff8:	1fff8b10 	.word	0x1fff8b10
    2ffc:	1fff8eb6 	.word	0x1fff8eb6
    3000:	1fff8ad0 	.word	0x1fff8ad0
    3004:	1fff8c00 	.word	0x1fff8c00
    3008:	00008504 	.word	0x00008504
    300c:	1fff8ae0 	.word	0x1fff8ae0
    3010:	1fff8eb8 	.word	0x1fff8eb8
    3014:	1fff8898 	.word	0x1fff8898
    3018:	1fff876c 	.word	0x1fff876c
    301c:	1fff871e 	.word	0x1fff871e
    3020:	1fff8720 	.word	0x1fff8720
    3024:	00006f74 	.word	0x00006f74
    3028:	1fff8774 	.word	0x1fff8774
    302c:	1fff8768 	.word	0x1fff8768
    3030:	1fff8895 	.word	0x1fff8895

00003034 <sinelon()>:
#ifndef SINELON_H
#define SINELON_H

bool sinelon_color_change = 0;

void sinelon(){
    3034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    3038:	4da3      	ldr	r5, [pc, #652]	; (32c8 <sinelon()+0x294>)
    303a:	782b      	ldrb	r3, [r5, #0]
#ifndef SINELON_H
#define SINELON_H

bool sinelon_color_change = 0;

void sinelon(){
    303c:	b087      	sub	sp, #28
	if (mode_change) {
    303e:	2b00      	cmp	r3, #0
    3040:	f040 8085 	bne.w	314e <sinelon()+0x11a>
    3044:	4fa1      	ldr	r7, [pc, #644]	; (32cc <sinelon()+0x298>)
    3046:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 3308 <sinelon()+0x2d4>
    304a:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 330c <sinelon()+0x2d8>
    304e:	4ca0      	ldr	r4, [pc, #640]	; (32d0 <sinelon()+0x29c>)
		sinelon_color_change = random8(2);
		this_delay = 10;
		use_all_shelves = random8(2);
		Serial.println("sinelon");
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
    3050:	783a      	ldrb	r2, [r7, #0]
    3052:	48a0      	ldr	r0, [pc, #640]	; (32d4 <sinelon()+0x2a0>)
    3054:	21bc      	movs	r1, #188	; 0xbc
    3056:	f000 ffed 	bl	4034 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	if (!use_all_shelves) {
    305a:	7823      	ldrb	r3, [r4, #0]
    305c:	2b00      	cmp	r3, #0
    305e:	f000 80cb 	beq.w	31f8 <sinelon()+0x1c4>
    3062:	4f9d      	ldr	r7, [pc, #628]	; (32d8 <sinelon()+0x2a4>)
    3064:	f8df 829c 	ldr.w	r8, [pc, #668]	; 3304 <sinelon()+0x2d0>
    3068:	4d9a      	ldr	r5, [pc, #616]	; (32d4 <sinelon()+0x2a0>)
    306a:	4e9c      	ldr	r6, [pc, #624]	; (32dc <sinelon()+0x2a8>)
			int pos = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
			if (sinelon_color_change) {
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index++);
			}
			else {
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index);
    306c:	9703      	str	r7, [sp, #12]
		this_delay = 10;
		use_all_shelves = random8(2);
		Serial.println("sinelon");
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
    306e:	2400      	movs	r4, #0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3070:	4b9b      	ldr	r3, [pc, #620]	; (32e0 <sinelon()+0x2ac>)
			leds[pos] += ColorFromPalette(current_palette, this_index);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			int pos = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
    3072:	9a03      	ldr	r2, [sp, #12]
    3074:	681b      	ldr	r3, [r3, #0]
    3076:	9305      	str	r3, [sp, #20]
    3078:	f812 eb01 	ldrb.w	lr, [r2], #1
	return ret;
    307c:	9905      	ldr	r1, [sp, #20]
    307e:	f899 3000 	ldrb.w	r3, [r9]
    3082:	9203      	str	r2, [sp, #12]
    3084:	f44f 728c 	mov.w	r2, #280	; 0x118
    3088:	021b      	lsls	r3, r3, #8
    308a:	fb02 f101 	mul.w	r1, r2, r1
    308e:	fb03 f101 	mul.w	r1, r3, r1
    3092:	0c09      	lsrs	r1, r1, #16
    3094:	f10e 3eff 	add.w	lr, lr, #4294967295
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3098:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    309a:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    309e:	fa1f fe8e 	uxth.w	lr, lr
    if( theta & 0x4000 ) offset = 2047 - offset;
    30a2:	d503      	bpl.n	30ac <sinelon()+0x78>
    30a4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    30a8:	3307      	adds	r3, #7
    30aa:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    30ac:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    30ae:	f3c3 0246 	ubfx	r2, r3, #1, #7
    30b2:	4b8c      	ldr	r3, [pc, #560]	; (32e4 <sinelon()+0x2b0>)
    30b4:	f813 c000 	ldrb.w	ip, [r3, r0]
    30b8:	4b8b      	ldr	r3, [pc, #556]	; (32e8 <sinelon()+0x2b4>)
    30ba:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    30be:	fb0c 3302 	mla	r3, ip, r2, r3
    30c2:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    30c4:	040a      	lsls	r2, r1, #16
    30c6:	bf48      	it	mi
    30c8:	425b      	negmi	r3, r3
    30ca:	b21a      	sxth	r2, r3
    30cc:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    30d0:	b292      	uxth	r2, r2
    30d2:	fb0e 2e02 	mla	lr, lr, r2, r2
			if (sinelon_color_change) {
    30d6:	f89a 2000 	ldrb.w	r2, [sl]
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index++);
    30da:	4984      	ldr	r1, [pc, #528]	; (32ec <sinelon()+0x2b8>)
    30dc:	eb04 1b84 	add.w	fp, r4, r4, lsl #6
    30e0:	23ff      	movs	r3, #255	; 0xff
    30e2:	44b3      	add	fp, r6
    30e4:	a804      	add	r0, sp, #16
			leds[pos] += ColorFromPalette(current_palette, this_index);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			int pos = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
    30e6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
			if (sinelon_color_change) {
    30ea:	b332      	cbz	r2, 313a <sinelon()+0x106>
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index++);
    30ec:	f898 2000 	ldrb.w	r2, [r8]
    30f0:	f81b b00e 	ldrb.w	fp, [fp, lr]
    30f4:	2701      	movs	r7, #1
    30f6:	eb02 0e07 	add.w	lr, r2, r7
    30fa:	9700      	str	r7, [sp, #0]
    30fc:	f888 e000 	strb.w	lr, [r8]
			}
			else {
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index);
    3100:	f000 ffea 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3104:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
    3108:	18e9      	adds	r1, r5, r3
    310a:	5cea      	ldrb	r2, [r5, r3]
    310c:	f89d 0010 	ldrb.w	r0, [sp, #16]
    3110:	fa82 f250 	uqadd8	r2, r2, r0
    3114:	54ea      	strb	r2, [r5, r3]
    3116:	784a      	ldrb	r2, [r1, #1]
    3118:	f89d 3011 	ldrb.w	r3, [sp, #17]
    311c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3120:	704a      	strb	r2, [r1, #1]
    3122:	788b      	ldrb	r3, [r1, #2]
    3124:	f89d 2012 	ldrb.w	r2, [sp, #18]
    3128:	fa83 f352 	uqadd8	r3, r3, r2
    312c:	3401      	adds	r4, #1
		else {
			leds[pos] += ColorFromPalette(current_palette, this_index);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
    312e:	2c04      	cmp	r4, #4
        b = qadd8( b, rhs.b);
    3130:	708b      	strb	r3, [r1, #2]
    3132:	d19d      	bne.n	3070 <sinelon()+0x3c>
			else {
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index);
			}
		}
	}
}
    3134:	b007      	add	sp, #28
    3136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			int pos = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
			if (sinelon_color_change) {
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index++);
			}
			else {
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index);
    313a:	2301      	movs	r3, #1
    313c:	f81b b00e 	ldrb.w	fp, [fp, lr]
    3140:	f898 2000 	ldrb.w	r2, [r8]
    3144:	9300      	str	r3, [sp, #0]
    3146:	4969      	ldr	r1, [pc, #420]	; (32ec <sinelon()+0x2b8>)
    3148:	23ff      	movs	r3, #255	; 0xff
    314a:	a804      	add	r0, sp, #16
    314c:	e7d8      	b.n	3100 <sinelon()+0xcc>
    314e:	4968      	ldr	r1, [pc, #416]	; (32f0 <sinelon()+0x2bc>)
void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
    3150:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 3308 <sinelon()+0x2d4>
    3154:	880b      	ldrh	r3, [r1, #0]

void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    3156:	4f5d      	ldr	r7, [pc, #372]	; (32cc <sinelon()+0x298>)
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
    3158:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 330c <sinelon()+0x2d8>
		this_delay = 10;
		use_all_shelves = random8(2);
    315c:	4c5c      	ldr	r4, [pc, #368]	; (32d0 <sinelon()+0x29c>)
    315e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3162:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3166:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    316a:	3319      	adds	r3, #25
    316c:	b29b      	uxth	r3, r3
    316e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3172:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3176:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    317a:	3219      	adds	r2, #25
    317c:	b292      	uxth	r2, r2
    317e:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3182:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    3186:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    318a:	3019      	adds	r0, #25
    318c:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    318e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3192:	eb00 2640 	add.w	r6, r0, r0, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3196:	eb03 2313 	add.w	r3, r3, r3, lsr #8
void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
    319a:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    319c:	eb00 0686 	add.w	r6, r0, r6, lsl #2

void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    31a0:	b2db      	uxtb	r3, r3
		this_beat = random8(4, 18);
    31a2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    31a6:	f506 5658 	add.w	r6, r6, #13824	; 0x3600

void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    31aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		this_beat = random8(4, 18);
    31ae:	11d2      	asrs	r2, r2, #7
    31b0:	3204      	adds	r2, #4
    31b2:	3619      	adds	r6, #25

void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    31b4:	111b      	asrs	r3, r3, #4
		this_beat = random8(4, 18);
    31b6:	f889 2000 	strb.w	r2, [r9]
    31ba:	b2b6      	uxth	r6, r6

void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    31bc:	3310      	adds	r3, #16
bool sinelon_color_change = 0;

void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    31be:	4a4d      	ldr	r2, [pc, #308]	; (32f4 <sinelon()+0x2c0>)
    31c0:	800e      	strh	r6, [r1, #0]
		this_fade = random8(16, 128);
    31c2:	703b      	strb	r3, [r7, #0]
bool sinelon_color_change = 0;

void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    31c4:	2101      	movs	r1, #1
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
		this_delay = 10;
    31c6:	4b4c      	ldr	r3, [pc, #304]	; (32f8 <sinelon()+0x2c4>)
bool sinelon_color_change = 0;

void sinelon(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    31c8:	7011      	strb	r1, [r2, #0]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    31ca:	eb00 2010 	add.w	r0, r0, r0, lsr #8
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
		this_delay = 10;
    31ce:	220a      	movs	r2, #10
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
    31d0:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    31d4:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    31d8:	f88a 0000 	strb.w	r0, [sl]
		this_delay = 10;
    31dc:	601a      	str	r2, [r3, #0]
		use_all_shelves = random8(2);
    31de:	f3c6 16c0 	ubfx	r6, r6, #7, #1

bool sinelon_color_change = 0;

void sinelon(){
	if (mode_change) {
		mode_change = 0;
    31e2:	2300      	movs	r3, #0
    31e4:	2107      	movs	r1, #7
    31e6:	4845      	ldr	r0, [pc, #276]	; (32fc <sinelon()+0x2c8>)
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
		this_delay = 10;
		use_all_shelves = random8(2);
    31e8:	7026      	strb	r6, [r4, #0]

bool sinelon_color_change = 0;

void sinelon(){
	if (mode_change) {
		mode_change = 0;
    31ea:	702b      	strb	r3, [r5, #0]
    31ec:	f002 fdee 	bl	5dcc <usb_serial_write>
    31f0:	4843      	ldr	r0, [pc, #268]	; (3300 <sinelon()+0x2cc>)
    31f2:	f002 ffef 	bl	61d4 <Print::println()>
    31f6:	e72b      	b.n	3050 <sinelon()+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    31f8:	4b39      	ldr	r3, [pc, #228]	; (32e0 <sinelon()+0x2ac>)
		use_all_shelves = random8(2);
		Serial.println("sinelon");
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
    31fa:	f899 1000 	ldrb.w	r1, [r9]
    31fe:	681b      	ldr	r3, [r3, #0]
    3200:	9304      	str	r3, [sp, #16]
	return ret;
    3202:	9a04      	ldr	r2, [sp, #16]
    3204:	f44f 738c 	mov.w	r3, #280	; 0x118
    3208:	fb03 f302 	mul.w	r3, r3, r2
    320c:	0209      	lsls	r1, r1, #8
    320e:	fb03 f101 	mul.w	r1, r3, r1
    3212:	0c09      	lsrs	r1, r1, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3214:	044d      	lsls	r5, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3216:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    321a:	d503      	bpl.n	3224 <sinelon()+0x1f0>
    321c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3220:	3307      	adds	r3, #7
    3222:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3224:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    3226:	4c2f      	ldr	r4, [pc, #188]	; (32e4 <sinelon()+0x2b0>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3228:	482f      	ldr	r0, [pc, #188]	; (32e8 <sinelon()+0x2b4>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    322a:	5ca4      	ldrb	r4, [r4, r2]
    322c:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    3230:	f3c3 0246 	ubfx	r2, r3, #1, #7
    3234:	fb04 0302 	mla	r3, r4, r2, r0
    3238:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    323a:	040c      	lsls	r4, r1, #16
    323c:	bf48      	it	mi
    323e:	425b      	negmi	r3, r3
    3240:	b21b      	sxth	r3, r3
    3242:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3246:	24bc      	movs	r4, #188	; 0xbc
    3248:	b29b      	uxth	r3, r3
		if (sinelon_color_change) {
    324a:	f89a 2000 	ldrb.w	r2, [sl]
		use_all_shelves = random8(2);
		Serial.println("sinelon");
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
    324e:	fb04 f303 	mul.w	r3, r4, r3
    3252:	0c1c      	lsrs	r4, r3, #16
		if (sinelon_color_change) {
    3254:	bb0a      	cbnz	r2, 329a <sinelon()+0x266>
			leds[pos] += ColorFromPalette(current_palette, this_index++);
		}
		else {
			leds[pos] += ColorFromPalette(current_palette, this_index);
    3256:	4b2b      	ldr	r3, [pc, #172]	; (3304 <sinelon()+0x2d0>)
    3258:	4924      	ldr	r1, [pc, #144]	; (32ec <sinelon()+0x2b8>)
    325a:	781a      	ldrb	r2, [r3, #0]
    325c:	2301      	movs	r3, #1
    325e:	9300      	str	r3, [sp, #0]
    3260:	a805      	add	r0, sp, #20
    3262:	23ff      	movs	r3, #255	; 0xff
    3264:	f000 ff38 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3268:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    326c:	4a19      	ldr	r2, [pc, #100]	; (32d4 <sinelon()+0x2a0>)
    326e:	f89d 0014 	ldrb.w	r0, [sp, #20]
    3272:	5d13      	ldrb	r3, [r2, r4]
    3274:	1911      	adds	r1, r2, r4
    3276:	fa83 f350 	uqadd8	r3, r3, r0
    327a:	5513      	strb	r3, [r2, r4]
    327c:	784a      	ldrb	r2, [r1, #1]
    327e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3282:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3286:	704a      	strb	r2, [r1, #1]
    3288:	788b      	ldrb	r3, [r1, #2]
    328a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    328e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3292:	708b      	strb	r3, [r1, #2]
			else {
				leds[shelf[s][pos]] += ColorFromPalette(current_palette, this_index);
			}
		}
	}
}
    3294:	b007      	add	sp, #28
    3296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
		if (sinelon_color_change) {
			leds[pos] += ColorFromPalette(current_palette, this_index++);
    329a:	4d1a      	ldr	r5, [pc, #104]	; (3304 <sinelon()+0x2d0>)
    329c:	4913      	ldr	r1, [pc, #76]	; (32ec <sinelon()+0x2b8>)
    329e:	782a      	ldrb	r2, [r5, #0]
    32a0:	2301      	movs	r3, #1
    32a2:	18d6      	adds	r6, r2, r3
    32a4:	9300      	str	r3, [sp, #0]
    32a6:	a805      	add	r0, sp, #20
    32a8:	23ff      	movs	r3, #255	; 0xff
    32aa:	702e      	strb	r6, [r5, #0]
    32ac:	f000 ff14 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    32b0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    32b4:	4b07      	ldr	r3, [pc, #28]	; (32d4 <sinelon()+0x2a0>)
    32b6:	f89d 0014 	ldrb.w	r0, [sp, #20]
    32ba:	5d1a      	ldrb	r2, [r3, r4]
    32bc:	1919      	adds	r1, r3, r4
    32be:	fa82 f250 	uqadd8	r2, r2, r0
    32c2:	551a      	strb	r2, [r3, r4]
    32c4:	e7da      	b.n	327c <sinelon()+0x248>
    32c6:	bf00      	nop
    32c8:	1fff8724 	.word	0x1fff8724
    32cc:	1fff871c 	.word	0x1fff871c
    32d0:	1fff8895 	.word	0x1fff8895
    32d4:	1fff8898 	.word	0x1fff8898
    32d8:	1fff8768 	.word	0x1fff8768
    32dc:	1fff8eb8 	.word	0x1fff8eb8
    32e0:	1fff9068 	.word	0x1fff9068
    32e4:	00007780 	.word	0x00007780
    32e8:	00008504 	.word	0x00008504
    32ec:	1fff8ae0 	.word	0x1fff8ae0
    32f0:	1fff876c 	.word	0x1fff876c
    32f4:	1fff871e 	.word	0x1fff871e
    32f8:	1fff8720 	.word	0x1fff8720
    32fc:	00006f80 	.word	0x00006f80
    3300:	1fff8774 	.word	0x1fff8774
    3304:	1fff8b24 	.word	0x1fff8b24
    3308:	1fff872b 	.word	0x1fff872b
    330c:	1fff8ad2 	.word	0x1fff8ad2

00003310 <sinelon_squiggle()>:
			}
		}
	}
}

void sinelon_squiggle(){
    3310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (mode_change) {
    3314:	4d8e      	ldr	r5, [pc, #568]	; (3550 <sinelon_squiggle()+0x240>)
    3316:	782b      	ldrb	r3, [r5, #0]
			}
		}
	}
}

void sinelon_squiggle(){
    3318:	b08b      	sub	sp, #44	; 0x2c
	if (mode_change) {
    331a:	2b00      	cmp	r3, #0
    331c:	f040 80b1 	bne.w	3482 <sinelon_squiggle()+0x172>
    3320:	4b8c      	ldr	r3, [pc, #560]	; (3554 <sinelon_squiggle()+0x244>)
    3322:	9304      	str	r3, [sp, #16]
    3324:	4b8c      	ldr	r3, [pc, #560]	; (3558 <sinelon_squiggle()+0x248>)
    3326:	9302      	str	r3, [sp, #8]
    3328:	4e8c      	ldr	r6, [pc, #560]	; (355c <sinelon_squiggle()+0x24c>)
    332a:	4b8d      	ldr	r3, [pc, #564]	; (3560 <sinelon_squiggle()+0x250>)
    332c:	4c8d      	ldr	r4, [pc, #564]	; (3564 <sinelon_squiggle()+0x254>)
    332e:	9303      	str	r3, [sp, #12]
		that_beat = random8(3, 10);
		use_all_shelves = random8(2);
		Serial.println("sinelon_squiggle");
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
    3330:	7832      	ldrb	r2, [r6, #0]
    3332:	488d      	ldr	r0, [pc, #564]	; (3568 <sinelon_squiggle()+0x258>)
    3334:	21bc      	movs	r1, #188	; 0xbc
    3336:	f000 fe7d 	bl	4034 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	if (!use_all_shelves) {
    333a:	7823      	ldrb	r3, [r4, #0]
    333c:	2b00      	cmp	r3, #0
    333e:	f000 812d 	beq.w	359c <sinelon_squiggle()+0x28c>
    3342:	f8df b24c 	ldr.w	fp, [pc, #588]	; 3590 <sinelon_squiggle()+0x280>
    3346:	f8df 924c 	ldr.w	r9, [pc, #588]	; 3594 <sinelon_squiggle()+0x284>
    334a:	f8df 824c 	ldr.w	r8, [pc, #588]	; 3598 <sinelon_squiggle()+0x288>
    334e:	4f87      	ldr	r7, [pc, #540]	; (356c <sinelon_squiggle()+0x25c>)
    3350:	4e85      	ldr	r6, [pc, #532]	; (3568 <sinelon_squiggle()+0x258>)
    3352:	2400      	movs	r4, #0
    3354:	f44f 7a8c 	mov.w	sl, #280	; 0x118
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3358:	f8d9 3000 	ldr.w	r3, [r9]
    335c:	9309      	str	r3, [sp, #36]	; 0x24
			leds[(pos+pos2)/2] += ColorFromPalette(current_palette, this_index);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			int pos  = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
    335e:	9b04      	ldr	r3, [sp, #16]
	return ret;
    3360:	9809      	ldr	r0, [sp, #36]	; 0x24
    3362:	781b      	ldrb	r3, [r3, #0]
    3364:	f81b 1b01 	ldrb.w	r1, [fp], #1
    3368:	021b      	lsls	r3, r3, #8
    336a:	fb0a f000 	mul.w	r0, sl, r0
    336e:	fb03 f000 	mul.w	r0, r3, r0
    3372:	0c00      	lsrs	r0, r0, #16
    3374:	3901      	subs	r1, #1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3376:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3378:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    337c:	b289      	uxth	r1, r1
    if( theta & 0x4000 ) offset = 2047 - offset;
    337e:	d503      	bpl.n	3388 <sinelon_squiggle()+0x78>
    3380:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3384:	3307      	adds	r3, #7
    3386:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3388:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    338a:	f3c3 0246 	ubfx	r2, r3, #1, #7
    338e:	f818 e005 	ldrb.w	lr, [r8, r5]
    3392:	f837 3015 	ldrh.w	r3, [r7, r5, lsl #1]
    3396:	fb0e 3302 	mla	r3, lr, r2, r3

    if( theta & 0x8000 ) y = -y;
    339a:	0402      	lsls	r2, r0, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    339c:	f8d9 2000 	ldr.w	r2, [r9]
    33a0:	9208      	str	r2, [sp, #32]
			int pos2 = beatsin16(that_beat, 0, shelf_num_leds[s] - 1);
    33a2:	9a03      	ldr	r2, [sp, #12]
	return ret;
    33a4:	9808      	ldr	r0, [sp, #32]
    33a6:	7812      	ldrb	r2, [r2, #0]
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    33a8:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    33aa:	bf48      	it	mi
    33ac:	425b      	negmi	r3, r3
    33ae:	0212      	lsls	r2, r2, #8
    33b0:	b21b      	sxth	r3, r3
    33b2:	fb0a f000 	mul.w	r0, sl, r0
    33b6:	fb02 f000 	mul.w	r0, r2, r0
			leds[(pos+pos2)/2] += ColorFromPalette(current_palette, this_index);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			int pos  = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
    33ba:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    33be:	0c00      	lsrs	r0, r0, #16
    33c0:	b29b      	uxth	r3, r3
LIB8STATIC uint16_t scale16( uint16_t i, fract16 scale )
{
  #if SCALE16_C == 1
    uint16_t result;
#if FASTLED_SCALE8_FIXED == 1
    result = ((uint32_t)(i) * (1+(uint32_t)(scale))) / 65536;
    33c2:	3101      	adds	r1, #1
    33c4:	fb01 f303 	mul.w	r3, r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    33c8:	0445      	lsls	r5, r0, #17
    33ca:	ea4f 4313 	mov.w	r3, r3, lsr #16
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    33ce:	f3c0 02ca 	ubfx	r2, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    33d2:	d503      	bpl.n	33dc <sinelon_squiggle()+0xcc>
    33d4:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    33d8:	3207      	adds	r2, #7
    33da:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    33dc:	0a15      	lsrs	r5, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    33de:	f3c2 0246 	ubfx	r2, r2, #1, #7
    33e2:	f818 e005 	ldrb.w	lr, [r8, r5]
    33e6:	f837 5015 	ldrh.w	r5, [r7, r5, lsl #1]
    33ea:	fb0e 5202 	mla	r2, lr, r2, r5
    33ee:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    33f0:	0400      	lsls	r0, r0, #16
    33f2:	bf48      	it	mi
    33f4:	4252      	negmi	r2, r2
    33f6:	b212      	sxth	r2, r2
			int pos2 = beatsin16(that_beat, 0, shelf_num_leds[s] - 1);
    33f8:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    33fc:	b292      	uxth	r2, r2
    33fe:	fb01 f102 	mul.w	r1, r1, r2
			if (sinelon_color_change) {
    3402:	9802      	ldr	r0, [sp, #8]
				leds[shelf[s][(pos+pos2)/2]] += ColorFromPalette(current_palette, this_index++);
    3404:	4a5a      	ldr	r2, [pc, #360]	; (3570 <sinelon_squiggle()+0x260>)
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			int pos  = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
			int pos2 = beatsin16(that_beat, 0, shelf_num_leds[s] - 1);
			if (sinelon_color_change) {
    3406:	7800      	ldrb	r0, [r0, #0]
				leds[shelf[s][(pos+pos2)/2]] += ColorFromPalette(current_palette, this_index++);
    3408:	7812      	ldrb	r2, [r2, #0]
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			int pos  = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
			int pos2 = beatsin16(that_beat, 0, shelf_num_leds[s] - 1);
    340a:	0c09      	lsrs	r1, r1, #16
			if (sinelon_color_change) {
				leds[shelf[s][(pos+pos2)/2]] += ColorFromPalette(current_palette, this_index++);
    340c:	4419      	add	r1, r3
    340e:	4b59      	ldr	r3, [pc, #356]	; (3574 <sinelon_squiggle()+0x264>)
    3410:	eb03 0161 	add.w	r1, r3, r1, asr #1
    3414:	eb04 1384 	add.w	r3, r4, r4, lsl #6
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
			int pos  = beatsin16(this_beat, 0, shelf_num_leds[s] - 1);
			int pos2 = beatsin16(that_beat, 0, shelf_num_leds[s] - 1);
			if (sinelon_color_change) {
    3418:	b340      	cbz	r0, 346c <sinelon_squiggle()+0x15c>
				leds[shelf[s][(pos+pos2)/2]] += ColorFromPalette(current_palette, this_index++);
    341a:	5ccb      	ldrb	r3, [r1, r3]
    341c:	9305      	str	r3, [sp, #20]
    341e:	4d54      	ldr	r5, [pc, #336]	; (3570 <sinelon_squiggle()+0x260>)
    3420:	4955      	ldr	r1, [pc, #340]	; (3578 <sinelon_squiggle()+0x268>)
    3422:	2301      	movs	r3, #1
    3424:	18d0      	adds	r0, r2, r3
    3426:	9300      	str	r3, [sp, #0]
    3428:	7028      	strb	r0, [r5, #0]
    342a:	23ff      	movs	r3, #255	; 0xff
    342c:	a807      	add	r0, sp, #28
    342e:	f000 fe53 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3432:	9b05      	ldr	r3, [sp, #20]
    3434:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    3438:	1971      	adds	r1, r6, r5
    343a:	5d73      	ldrb	r3, [r6, r5]
    343c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3440:	fa83 f352 	uqadd8	r3, r3, r2
    3444:	5573      	strb	r3, [r6, r5]
    3446:	784a      	ldrb	r2, [r1, #1]
    3448:	f89d 301d 	ldrb.w	r3, [sp, #29]
    344c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3450:	704a      	strb	r2, [r1, #1]
    3452:	788b      	ldrb	r3, [r1, #2]
    3454:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3458:	fa83 f352 	uqadd8	r3, r3, r2
    345c:	3401      	adds	r4, #1
		else {
			leds[(pos+pos2)/2] += ColorFromPalette(current_palette, this_index);
		}
	}
	else {
		for (uint8_t s = 0; s < 4; s++) {
    345e:	2c04      	cmp	r4, #4
        b = qadd8( b, rhs.b);
    3460:	708b      	strb	r3, [r1, #2]
    3462:	f47f af79 	bne.w	3358 <sinelon_squiggle()+0x48>
			else {
				leds[shelf[s][(pos+pos2)/2]] += ColorFromPalette(current_palette, this_index);
			}
		}
	}
}
    3466:	b00b      	add	sp, #44	; 0x2c
    3468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			int pos2 = beatsin16(that_beat, 0, shelf_num_leds[s] - 1);
			if (sinelon_color_change) {
				leds[shelf[s][(pos+pos2)/2]] += ColorFromPalette(current_palette, this_index++);
			}
			else {
				leds[shelf[s][(pos+pos2)/2]] += ColorFromPalette(current_palette, this_index);
    346c:	5ccd      	ldrb	r5, [r1, r3]
    346e:	4942      	ldr	r1, [pc, #264]	; (3578 <sinelon_squiggle()+0x268>)
    3470:	2301      	movs	r3, #1
    3472:	9300      	str	r3, [sp, #0]
    3474:	a807      	add	r0, sp, #28
    3476:	23ff      	movs	r3, #255	; 0xff
    3478:	f000 fe2e 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    347c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3480:	e7da      	b.n	3438 <sinelon_squiggle()+0x128>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3482:	493e      	ldr	r1, [pc, #248]	; (357c <sinelon_squiggle()+0x26c>)
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
		this_delay = 10;
		that_beat = random8(3, 10);
    3484:	4a36      	ldr	r2, [pc, #216]	; (3560 <sinelon_squiggle()+0x250>)
    3486:	880b      	ldrh	r3, [r1, #0]
    3488:	9203      	str	r2, [sp, #12]
    348a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    348e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3492:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3496:	3019      	adds	r0, #25
    3498:	b280      	uxth	r0, r0
    349a:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    349e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    34a2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    34a6:	3319      	adds	r3, #25
    34a8:	b29b      	uxth	r3, r3
    34aa:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    34ae:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    34b2:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    34b6:	3619      	adds	r6, #25
    34b8:	b2b6      	uxth	r6, r6
    34ba:	eb06 2246 	add.w	r2, r6, r6, lsl #9
    34be:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    34c2:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    34c6:	3219      	adds	r2, #25
    34c8:	b292      	uxth	r2, r2
    34ca:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    34ce:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    34d2:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    34d6:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    34da:	3719      	adds	r7, #25
    34dc:	b2bf      	uxth	r7, r7
    34de:	b2d2      	uxtb	r2, r2
    34e0:	800f      	strh	r7, [r1, #0]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    34e2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
    34e6:	491c      	ldr	r1, [pc, #112]	; (3558 <sinelon_squiggle()+0x248>)
    34e8:	9102      	str	r1, [sp, #8]
		this_delay = 10;
		that_beat = random8(3, 10);
    34ea:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    34ee:	491c      	ldr	r1, [pc, #112]	; (3560 <sinelon_squiggle()+0x250>)
		use_all_shelves = random8(2);
    34f0:	4c1c      	ldr	r4, [pc, #112]	; (3564 <sinelon_squiggle()+0x254>)
void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
    34f2:	b2db      	uxtb	r3, r3
		sinelon_color_change = random8(2);
		this_delay = 10;
		that_beat = random8(3, 10);
    34f4:	1212      	asrs	r2, r2, #8
    34f6:	3203      	adds	r2, #3
void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
    34f8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		sinelon_color_change = random8(2);
		this_delay = 10;
		that_beat = random8(3, 10);
    34fc:	700a      	strb	r2, [r1, #0]
    34fe:	eb00 2010 	add.w	r0, r0, r0, lsr #8
void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
    3502:	4a14      	ldr	r2, [pc, #80]	; (3554 <sinelon_squiggle()+0x244>)
		sinelon_color_change = random8(2);
    3504:	4914      	ldr	r1, [pc, #80]	; (3558 <sinelon_squiggle()+0x248>)
void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
    3506:	9204      	str	r2, [sp, #16]
    3508:	11db      	asrs	r3, r3, #7
    350a:	3304      	adds	r3, #4

void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    350c:	b2c0      	uxtb	r0, r0
    350e:	eb06 2616 	add.w	r6, r6, r6, lsr #8
		this_beat = random8(4, 18);
    3512:	7013      	strb	r3, [r2, #0]
		sinelon_color_change = random8(2);
    3514:	f3c6 16c0 	ubfx	r6, r6, #7, #1
}

void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    3518:	4a19      	ldr	r2, [pc, #100]	; (3580 <sinelon_squiggle()+0x270>)
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
    351a:	700e      	strb	r6, [r1, #0]

void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    351c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3520:	4e0e      	ldr	r6, [pc, #56]	; (355c <sinelon_squiggle()+0x24c>)
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
		this_delay = 10;
    3522:	4b18      	ldr	r3, [pc, #96]	; (3584 <sinelon_squiggle()+0x274>)
}

void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    3524:	2101      	movs	r1, #1
		this_fade = random8(16, 128);
    3526:	1100      	asrs	r0, r0, #4
}

void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
    3528:	7011      	strb	r1, [r2, #0]
		this_fade = random8(16, 128);
    352a:	3010      	adds	r0, #16
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
		this_delay = 10;
    352c:	220a      	movs	r2, #10
    352e:	eb07 2717 	add.w	r7, r7, r7, lsr #8

void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
		use_palette = 1;
		this_fade = random8(16, 128);
    3532:	7030      	strb	r0, [r6, #0]
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
		this_delay = 10;
    3534:	601a      	str	r2, [r3, #0]
		that_beat = random8(3, 10);
		use_all_shelves = random8(2);
    3536:	f3c7 17c0 	ubfx	r7, r7, #7, #1
	}
}

void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
    353a:	2300      	movs	r3, #0
    353c:	2110      	movs	r1, #16
    353e:	4812      	ldr	r0, [pc, #72]	; (3588 <sinelon_squiggle()+0x278>)
		this_fade = random8(16, 128);
		this_beat = random8(4, 18);
		sinelon_color_change = random8(2);
		this_delay = 10;
		that_beat = random8(3, 10);
		use_all_shelves = random8(2);
    3540:	7027      	strb	r7, [r4, #0]
	}
}

void sinelon_squiggle(){
	if (mode_change) {
		mode_change = 0;
    3542:	702b      	strb	r3, [r5, #0]
    3544:	f002 fc42 	bl	5dcc <usb_serial_write>
    3548:	4810      	ldr	r0, [pc, #64]	; (358c <sinelon_squiggle()+0x27c>)
    354a:	f002 fe43 	bl	61d4 <Print::println()>
    354e:	e6ef      	b.n	3330 <sinelon_squiggle()+0x20>
    3550:	1fff8724 	.word	0x1fff8724
    3554:	1fff872b 	.word	0x1fff872b
    3558:	1fff8ad2 	.word	0x1fff8ad2
    355c:	1fff871c 	.word	0x1fff871c
    3560:	1fff8727 	.word	0x1fff8727
    3564:	1fff8895 	.word	0x1fff8895
    3568:	1fff8898 	.word	0x1fff8898
    356c:	00008504 	.word	0x00008504
    3570:	1fff8b24 	.word	0x1fff8b24
    3574:	1fff8eb8 	.word	0x1fff8eb8
    3578:	1fff8ae0 	.word	0x1fff8ae0
    357c:	1fff876c 	.word	0x1fff876c
    3580:	1fff871e 	.word	0x1fff871e
    3584:	1fff8720 	.word	0x1fff8720
    3588:	00006f88 	.word	0x00006f88
    358c:	1fff8774 	.word	0x1fff8774
    3590:	1fff8768 	.word	0x1fff8768
    3594:	1fff9068 	.word	0x1fff9068
    3598:	00007780 	.word	0x00007780
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    359c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 36d0 <sinelon_squiggle()+0x3c0>
		Serial.println("sinelon_squiggle");
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
    35a0:	9b04      	ldr	r3, [sp, #16]
    35a2:	f8d9 2000 	ldr.w	r2, [r9]
    35a6:	9207      	str	r2, [sp, #28]
    35a8:	781b      	ldrb	r3, [r3, #0]
	return ret;
    35aa:	9907      	ldr	r1, [sp, #28]
    35ac:	f44f 728c 	mov.w	r2, #280	; 0x118
    35b0:	021b      	lsls	r3, r3, #8
    35b2:	fb02 f101 	mul.w	r1, r2, r1
    35b6:	fb03 f101 	mul.w	r1, r3, r1
    35ba:	0c09      	lsrs	r1, r1, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    35bc:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    35be:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    35c2:	d503      	bpl.n	35cc <sinelon_squiggle()+0x2bc>
    35c4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    35c8:	3307      	adds	r3, #7
    35ca:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    35cc:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    35ce:	f8df 8104 	ldr.w	r8, [pc, #260]	; 36d4 <sinelon_squiggle()+0x3c4>

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    35d2:	4f3b      	ldr	r7, [pc, #236]	; (36c0 <sinelon_squiggle()+0x3b0>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    35d4:	f818 4002 	ldrb.w	r4, [r8, r2]
    35d8:	f837 0012 	ldrh.w	r0, [r7, r2, lsl #1]
    35dc:	f3c3 0246 	ubfx	r2, r3, #1, #7
    35e0:	fb04 0302 	mla	r3, r4, r2, r0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    35e4:	f8d9 2000 	ldr.w	r2, [r9]
    35e8:	9206      	str	r2, [sp, #24]
		int pos2 = beatsin16(that_beat, 0, NUM_LEDS - 1);
    35ea:	9a03      	ldr	r2, [sp, #12]
	return ret;
    35ec:	9806      	ldr	r0, [sp, #24]

    if( theta & 0x8000 ) y = -y;
    35ee:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    35f0:	b29b      	uxth	r3, r3
    35f2:	7811      	ldrb	r1, [r2, #0]

    if( theta & 0x8000 ) y = -y;
    35f4:	bf48      	it	mi
    35f6:	425b      	negmi	r3, r3
    35f8:	f44f 728c 	mov.w	r2, #280	; 0x118
    35fc:	fb02 f200 	mul.w	r2, r2, r0
    3600:	b21b      	sxth	r3, r3
    3602:	0209      	lsls	r1, r1, #8
    3604:	fb02 f101 	mul.w	r1, r2, r1
		Serial.println("sinelon_squiggle");
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
    3608:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    360c:	20bc      	movs	r0, #188	; 0xbc
    360e:	0c09      	lsrs	r1, r1, #16
    3610:	b29b      	uxth	r3, r3
    3612:	fb00 f303 	mul.w	r3, r0, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3616:	044a      	lsls	r2, r1, #17
    3618:	ea4f 4013 	mov.w	r0, r3, lsr #16
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    361c:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3620:	d503      	bpl.n	362a <sinelon_squiggle()+0x31a>
    3622:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3626:	3307      	adds	r3, #7
    3628:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    362a:	0a1c      	lsrs	r4, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    362c:	f3c3 0246 	ubfx	r2, r3, #1, #7
    3630:	f818 5004 	ldrb.w	r5, [r8, r4]
    3634:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    3638:	fb05 3302 	mla	r3, r5, r2, r3
    363c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    363e:	040e      	lsls	r6, r1, #16
    3640:	bf48      	it	mi
    3642:	425b      	negmi	r3, r3
		int pos2 = beatsin16(that_beat, 0, NUM_LEDS - 1);
		if (sinelon_color_change) {
    3644:	9a02      	ldr	r2, [sp, #8]
    3646:	b21b      	sxth	r3, r3
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
		int pos2 = beatsin16(that_beat, 0, NUM_LEDS - 1);
    3648:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    364c:	b29b      	uxth	r3, r3
		if (sinelon_color_change) {
    364e:	7811      	ldrb	r1, [r2, #0]
	}
	// a colored dot sweeping back and forth, with fading trails
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
		int pos2 = beatsin16(that_beat, 0, NUM_LEDS - 1);
    3650:	22bc      	movs	r2, #188	; 0xbc
    3652:	fb02 f303 	mul.w	r3, r2, r3
    3656:	0c1b      	lsrs	r3, r3, #16
		if (sinelon_color_change) {
    3658:	bb21      	cbnz	r1, 36a4 <sinelon_squiggle()+0x394>
			leds[(pos+pos2)/2] += ColorFromPalette(current_palette, this_index++);
		}
		else {
			leds[(pos+pos2)/2] += ColorFromPalette(current_palette, this_index);
    365a:	4a1a      	ldr	r2, [pc, #104]	; (36c4 <sinelon_squiggle()+0x3b4>)
    365c:	491a      	ldr	r1, [pc, #104]	; (36c8 <sinelon_squiggle()+0x3b8>)
    365e:	7812      	ldrb	r2, [r2, #0]
    3660:	4403      	add	r3, r0
    3662:	2001      	movs	r0, #1
    3664:	fa43 f400 	asr.w	r4, r3, r0
    3668:	9000      	str	r0, [sp, #0]
    366a:	23ff      	movs	r3, #255	; 0xff
    366c:	a809      	add	r0, sp, #36	; 0x24
    366e:	f000 fd33 	bl	40d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3672:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3676:	4815      	ldr	r0, [pc, #84]	; (36cc <sinelon_squiggle()+0x3bc>)
    3678:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    367c:	5cc2      	ldrb	r2, [r0, r3]
    367e:	18c1      	adds	r1, r0, r3
    3680:	fa82 f254 	uqadd8	r2, r2, r4
    3684:	54c2      	strb	r2, [r0, r3]
    3686:	784a      	ldrb	r2, [r1, #1]
    3688:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    368c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3690:	704a      	strb	r2, [r1, #1]
    3692:	788b      	ldrb	r3, [r1, #2]
    3694:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3698:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    369c:	708b      	strb	r3, [r1, #2]
			else {
				leds[shelf[s][(pos+pos2)/2]] += ColorFromPalette(current_palette, this_index);
			}
		}
	}
}
    369e:	b00b      	add	sp, #44	; 0x2c
    36a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fadeToBlackBy(leds, NUM_LEDS, this_fade);
	if (!use_all_shelves) {
		int pos = beatsin16(this_beat, 0, NUM_LEDS - 1);
		int pos2 = beatsin16(that_beat, 0, NUM_LEDS - 1);
		if (sinelon_color_change) {
			leds[(pos+pos2)/2] += ColorFromPalette(current_palette, this_index++);
    36a4:	4d07      	ldr	r5, [pc, #28]	; (36c4 <sinelon_squiggle()+0x3b4>)
    36a6:	4908      	ldr	r1, [pc, #32]	; (36c8 <sinelon_squiggle()+0x3b8>)
    36a8:	782a      	ldrb	r2, [r5, #0]
    36aa:	4403      	add	r3, r0
    36ac:	2001      	movs	r0, #1
    36ae:	1816      	adds	r6, r2, r0
    36b0:	fa43 f400 	asr.w	r4, r3, r0
    36b4:	9000      	str	r0, [sp, #0]
    36b6:	23ff      	movs	r3, #255	; 0xff
    36b8:	a809      	add	r0, sp, #36	; 0x24
    36ba:	702e      	strb	r6, [r5, #0]
    36bc:	e7d7      	b.n	366e <sinelon_squiggle()+0x35e>
    36be:	bf00      	nop
    36c0:	00008504 	.word	0x00008504
    36c4:	1fff8b24 	.word	0x1fff8b24
    36c8:	1fff8ae0 	.word	0x1fff8ae0
    36cc:	1fff8898 	.word	0x1fff8898
    36d0:	1fff9068 	.word	0x1fff9068
    36d4:	00007780 	.word	0x00007780

000036d8 <updatePaletteIndex(CRGBPalette16)>:

const uint8_t g_gradient_palette_count =
  sizeof( g_gradient_palettes) / sizeof( TProgmemRGBGradientPalettePtr );

// Find index of current (target) palette
void updatePaletteIndex(CRGBPalette16 pal){
    36d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36dc:	b09b      	sub	sp, #108	; 0x6c
    36de:	4b3f      	ldr	r3, [pc, #252]	; (37dc <updatePaletteIndex(CRGBPalette16)+0x104>)
    36e0:	9309      	str	r3, [sp, #36]	; 0x24
    36e2:	1e43      	subs	r3, r0, #1
    36e4:	930a      	str	r3, [sp, #40]	; 0x28
    36e6:	f100 032f 	add.w	r3, r0, #47	; 0x2f
    36ea:	930b      	str	r3, [sp, #44]	; 0x2c
    36ec:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 37e4 <updatePaletteIndex(CRGBPalette16)+0x10c>
  for (int i = 0; i < g_gradient_palette_count; i++){
    36f0:	2300      	movs	r3, #0
    36f2:	9308      	str	r3, [sp, #32]
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    36f4:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    36f6:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    36fa:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    36fc:	3701      	adds	r7, #1
        } while ( u.index != 255);
    36fe:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    3700:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    3702:	d1f8      	bne.n	36f6 <updatePaletteIndex(CRGBPalette16)+0x1e>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    3704:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    3708:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    370a:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    370e:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    3712:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    3714:	9206      	str	r2, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    3716:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    371a:	f3c3 4a07 	ubfx	sl, r3, #16, #8

        int indexstart = 0;
    371e:	2400      	movs	r4, #0
    3720:	46c8      	mov	r8, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    3722:	f858 5f04 	ldr.w	r5, [r8, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3726:	f3c5 2707 	ubfx	r7, r5, #8, #8
    372a:	f3c5 4607 	ubfx	r6, r5, #16, #8
    372e:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    3730:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3734:	9104      	str	r1, [sp, #16]
    3736:	b2f1      	uxtb	r1, r6
    3738:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    373a:	fa5f f18c 	uxtb.w	r1, ip
    373e:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    3740:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    3742:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    3744:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3746:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    374a:	aa0d      	add	r2, sp, #52	; 0x34
    374c:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    374e:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3752:	fa5f f985 	uxtb.w	r9, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    3756:	d80c      	bhi.n	3772 <updatePaletteIndex(CRGBPalette16)+0x9a>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    3758:	9906      	ldr	r1, [sp, #24]
    375a:	458c      	cmp	ip, r1
    375c:	dc07      	bgt.n	376e <updatePaletteIndex(CRGBPalette16)+0x96>
    375e:	290f      	cmp	r1, #15
    3760:	d005      	beq.n	376e <updatePaletteIndex(CRGBPalette16)+0x96>
                    istart8 = lastSlotUsed + 1;
    3762:	3101      	adds	r1, #1
    3764:	b2c9      	uxtb	r1, r1
    3766:	428b      	cmp	r3, r1
    3768:	9103      	str	r1, [sp, #12]
    376a:	bf38      	it	cc
    376c:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    376e:	b259      	sxtb	r1, r3
    3770:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3772:	a90c      	add	r1, sp, #48	; 0x30
    3774:	9100      	str	r1, [sp, #0]
    3776:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3778:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
        g = rhs.g;
    377c:	f88d a035 	strb.w	sl, [sp, #53]	; 0x35
        b = rhs.b;
    3780:	f88d e036 	strb.w	lr, [sp, #54]	; 0x36
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3784:	f88d 7030 	strb.w	r7, [sp, #48]	; 0x30
        g = rhs.g;
    3788:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
        b = rhs.b;
    378c:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
    3790:	f000 fbbe 	bl	3f10 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    3794:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3796:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    379a:	f8dd a014 	ldr.w	sl, [sp, #20]
        b = rhs.b;
    379e:	46ce      	mov	lr, r9
    37a0:	d1bf      	bne.n	3722 <updatePaletteIndex(CRGBPalette16)+0x4a>
    37a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    37a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    37a6:	aa0e      	add	r2, sp, #56	; 0x38
    37a8:	e001      	b.n	37ae <updatePaletteIndex(CRGBPalette16)+0xd6>
    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
    37aa:	42a3      	cmp	r3, r4
    37ac:	d00f      	beq.n	37ce <updatePaletteIndex(CRGBPalette16)+0xf6>
            if( *p != *q) return false;
    37ae:	f812 1b01 	ldrb.w	r1, [r2], #1
    37b2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    37b6:	4288      	cmp	r0, r1
    37b8:	d0f7      	beq.n	37aa <updatePaletteIndex(CRGBPalette16)+0xd2>
    37ba:	9b08      	ldr	r3, [sp, #32]
    37bc:	3301      	adds	r3, #1
    37be:	2b62      	cmp	r3, #98	; 0x62
    37c0:	9308      	str	r3, [sp, #32]
    37c2:	d008      	beq.n	37d6 <updatePaletteIndex(CRGBPalette16)+0xfe>
    37c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    37c6:	f853 9f04 	ldr.w	r9, [r3, #4]!
    37ca:	9309      	str	r3, [sp, #36]	; 0x24
    37cc:	e792      	b.n	36f4 <updatePaletteIndex(CRGBPalette16)+0x1c>
    if (pal == g_gradient_palettes[i]){
      palette_index = i;
    37ce:	4b04      	ldr	r3, [pc, #16]	; (37e0 <updatePaletteIndex(CRGBPalette16)+0x108>)
    37d0:	f89d 2020 	ldrb.w	r2, [sp, #32]
    37d4:	701a      	strb	r2, [r3, #0]
      break;
    }
  }
}
    37d6:	b01b      	add	sp, #108	; 0x6c
    37d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37dc:	000077ac 	.word	0x000077ac
    37e0:	1fff8b13 	.word	0x1fff8b13
    37e4:	00008884 	.word	0x00008884

000037e8 <shelf_array_setup()>:
//uint8_t shelf4_num_leds = 30;

uint8_t shelf[4][65];
uint8_t shelf_num_leds[4] = { 65, 63, 30, 30 };

void shelf_array_setup() {
    37e8:	4a12      	ldr	r2, [pc, #72]	; (3834 <shelf_array_setup()+0x4c>)
    37ea:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < 65; i++) {  shelf[0][i] = i; }
    37ec:	f802 3f01 	strb.w	r3, [r2, #1]!
    37f0:	3301      	adds	r3, #1
    37f2:	2b41      	cmp	r3, #65	; 0x41
    37f4:	d1fa      	bne.n	37ec <shelf_array_setup()+0x4>
    37f6:	4a10      	ldr	r2, [pc, #64]	; (3838 <shelf_array_setup()+0x50>)
    37f8:	237f      	movs	r3, #127	; 0x7f
    37fa:	f102 013f 	add.w	r1, r2, #63	; 0x3f
	for (uint8_t i = 0; i < 63; i++) {  shelf[1][i] = 127 - i; }
    37fe:	f802 3f01 	strb.w	r3, [r2, #1]!
    3802:	3b01      	subs	r3, #1
    3804:	428a      	cmp	r2, r1
    3806:	b2db      	uxtb	r3, r3
    3808:	d1f9      	bne.n	37fe <shelf_array_setup()+0x16>
    380a:	4a0c      	ldr	r2, [pc, #48]	; (383c <shelf_array_setup()+0x54>)
//uint8_t shelf4_num_leds = 30;

uint8_t shelf[4][65];
uint8_t shelf_num_leds[4] = { 65, 63, 30, 30 };

void shelf_array_setup() {
    380c:	b410      	push	{r4}
	for (uint8_t i = 0; i < 65; i++) {  shelf[0][i] = i; }
	for (uint8_t i = 0; i < 63; i++) {  shelf[1][i] = 127 - i; }
    380e:	2380      	movs	r3, #128	; 0x80
    3810:	f102 0141 	add.w	r1, r2, #65	; 0x41
    3814:	f102 041e 	add.w	r4, r2, #30
	for (uint8_t i = 0; i < 30; i++) {  shelf[2][i] = 128 + i;
    3818:	f802 3f01 	strb.w	r3, [r2, #1]!
									    shelf[3][i] = 187 - i; }
    381c:	f1c3 003b 	rsb	r0, r3, #59	; 0x3b
uint8_t shelf_num_leds[4] = { 65, 63, 30, 30 };

void shelf_array_setup() {
	for (uint8_t i = 0; i < 65; i++) {  shelf[0][i] = i; }
	for (uint8_t i = 0; i < 63; i++) {  shelf[1][i] = 127 - i; }
	for (uint8_t i = 0; i < 30; i++) {  shelf[2][i] = 128 + i;
    3820:	42a2      	cmp	r2, r4
    3822:	f103 0301 	add.w	r3, r3, #1
									    shelf[3][i] = 187 - i; }
    3826:	f801 0f01 	strb.w	r0, [r1, #1]!
    382a:	b2db      	uxtb	r3, r3
uint8_t shelf_num_leds[4] = { 65, 63, 30, 30 };

void shelf_array_setup() {
	for (uint8_t i = 0; i < 65; i++) {  shelf[0][i] = i; }
	for (uint8_t i = 0; i < 63; i++) {  shelf[1][i] = 127 - i; }
	for (uint8_t i = 0; i < 30; i++) {  shelf[2][i] = 128 + i;
    382c:	d1f4      	bne.n	3818 <shelf_array_setup()+0x30>
									    shelf[3][i] = 187 - i; }
}
    382e:	bc10      	pop	{r4}
    3830:	4770      	bx	lr
    3832:	bf00      	nop
    3834:	1fff8eb7 	.word	0x1fff8eb7
    3838:	1fff8ef8 	.word	0x1fff8ef8
    383c:	1fff8f39 	.word	0x1fff8f39

00003840 <setup>:
#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))


void setup() {
  Serial.begin(57600);
  delay(2000); // 2 second delay for recovery
    3840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3844:	f640 31b8 	movw	r1, #3000	; 0xbb8
    3848:	b097      	sub	sp, #92	; 0x5c
    384a:	487b      	ldr	r0, [pc, #492]	; (3a38 <setup+0x1f8>)
    384c:	f000 ff8c 	bl	4768 <VisualMicroDebug::init(unsigned long)>
    3850:	f44f 4161 	mov.w	r1, #57600	; 0xe100
    3854:	4878      	ldr	r0, [pc, #480]	; (3a38 <setup+0x1f8>)
    3856:	f000 ff83 	bl	4760 <VisualMicroDebug::begin(unsigned long)>
    385a:	2101      	movs	r1, #1
    385c:	4876      	ldr	r0, [pc, #472]	; (3a38 <setup+0x1f8>)
    385e:	f000 ff59 	bl	4714 <VisualMicroDebug::outPacketStart(bool)>
    3862:	b150      	cbz	r0, 387a <setup+0x3a>
    3864:	2110      	movs	r1, #16
    3866:	4875      	ldr	r0, [pc, #468]	; (3a3c <setup+0x1fc>)
    3868:	f002 fab0 	bl	5dcc <usb_serial_write>
    386c:	4872      	ldr	r0, [pc, #456]	; (3a38 <setup+0x1f8>)
    386e:	210a      	movs	r1, #10
    3870:	f000 fec6 	bl	4600 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    3874:	4870      	ldr	r0, [pc, #448]	; (3a38 <setup+0x1f8>)
    3876:	f000 ff71 	bl	475c <VisualMicroDebug::outPacketEnd()>
    387a:	2201      	movs	r2, #1
    387c:	2100      	movs	r1, #0
    387e:	486e      	ldr	r0, [pc, #440]	; (3a38 <setup+0x1f8>)
    3880:	f001 f81e 	bl	48c0 <VisualMicroDebug::start(bool, bool)>
  
  // tell FastLED about the LED strip configuration
    3884:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    3888:	f001 fa88 	bl	4d9c <delay>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    388c:	486c      	ldr	r0, [pc, #432]	; (3a40 <setup+0x200>)
    388e:	6803      	ldr	r3, [r0, #0]
    3890:	f013 0401 	ands.w	r4, r3, #1
    3894:	f000 80ac 	beq.w	39f0 <setup+0x1b0>
    3898:	2300      	movs	r3, #0
    389a:	22bc      	movs	r2, #188	; 0xbc
    389c:	4969      	ldr	r1, [pc, #420]	; (3a44 <setup+0x204>)
    389e:	486a      	ldr	r0, [pc, #424]	; (3a48 <setup+0x208>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
    38a0:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 3a6c <setup+0x22c>
    38a4:	f000 fca0 	bl	41e8 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    38a8:	4a68      	ldr	r2, [pc, #416]	; (3a4c <setup+0x20c>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    38aa:	23ff      	movs	r3, #255	; 0xff

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    38ac:	2700      	movs	r7, #0
        g = (colorcode >>  8) & 0xFF;
        b = (colorcode >>  0) & 0xFF;
    38ae:	21f0      	movs	r1, #240	; 0xf0

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
    38b0:	24b0      	movs	r4, #176	; 0xb0
    38b2:	7013      	strb	r3, [r2, #0]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    38b4:	7303      	strb	r3, [r0, #12]
        g = (colorcode >>  8) & 0xFF;
    38b6:	7344      	strb	r4, [r0, #13]
        b = (colorcode >>  0) & 0xFF;
    38b8:	7381      	strb	r1, [r0, #14]
    38ba:	7487      	strb	r7, [r0, #18]
  // set master brightness control
  FastLED.setBrightness(BRIGHTNESS);

  shelf_array_setup();

  set_max_power_in_volts_and_milliamps(5, 3000);
    38bc:	f7ff ff94 	bl	37e8 <shelf_array_setup()>

  random16_set_seed(4832);
    38c0:	f640 31b8 	movw	r1, #3000	; 0xbb8
    38c4:	2005      	movs	r0, #5
    38c6:	f000 fe8f 	bl	45e8 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
    38ca:	f44f 5397 	mov.w	r3, #4832	; 0x12e0
  random16_add_entropy(analogRead(2));

  //led_mode = EEPROM.read(STARTMODE);
    38ce:	2002      	movs	r0, #2
    38d0:	f8a8 3000 	strh.w	r3, [r8]
    38d4:	f001 f934 	bl	4b40 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    38d8:	f8b8 3000 	ldrh.w	r3, [r8]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    38dc:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    38e0:	4403      	add	r3, r0
        fill_gradient( &(entries[0]), 16, c1, c2, c3, c4);
    }

    CRGBPalette16( const CRGB& c1)
    {
        fill_solid( &(entries[0]), 16, c1);
    38e2:	aa09      	add	r2, sp, #36	; 0x24
    38e4:	a80a      	add	r0, sp, #40	; 0x28
    38e6:	2110      	movs	r1, #16
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    38e8:	ad0a      	add	r5, sp, #40	; 0x28
    38ea:	f8a8 3000 	strh.w	r3, [r8]
    38ee:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    38f2:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
        fill_gradient( &(entries[0]), 16, c1, c2, c3, c4);
    }

    CRGBPalette16( const CRGB& c1)
    {
        fill_solid( &(entries[0]), 16, c1);
    38f6:	f000 fadb 	bl	3eb0 <fill_solid(CRGB*, int, CRGB const&)>
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    38fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    38fc:	4c54      	ldr	r4, [pc, #336]	; (3a50 <setup+0x210>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    38fe:	f8b8 6000 	ldrh.w	r6, [r8]
    3902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3906:	eb06 2e46 	add.w	lr, r6, r6, lsl #9
    390a:	eb06 068e 	add.w	r6, r6, lr, lsl #2
    390e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3912:	3619      	adds	r6, #25
    3914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3916:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    391a:	b2b5      	uxth	r5, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    391c:	eb05 2615 	add.w	r6, r5, r5, lsr #8

  current_palette = CRGBPalette16(CRGB::Black);
  target_palette = g_gradient_palettes[random8(g_gradient_palette_count + 1)];
  current_blending = LINEARBLEND;
}
    3920:	b2f6      	uxtb	r6, r6
    3922:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    3926:	eb06 1646 	add.w	r6, r6, r6, lsl #5
    392a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    392e:	1236      	asrs	r6, r6, #8
    3930:	4b48      	ldr	r3, [pc, #288]	; (3a54 <setup+0x214>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3932:	f8a8 5000 	strh.w	r5, [r8]
    3936:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    393a:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    393e:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    3940:	3701      	adds	r7, #1
        } while ( u.index != 255);
    3942:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    3944:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    3946:	d1f8      	bne.n	393a <setup+0xfa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    3948:	f8d8 3000 	ldr.w	r3, [r8]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    394c:	9707      	str	r7, [sp, #28]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    394e:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    3952:	ea4f 6913 	mov.w	r9, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    3956:	9206      	str	r2, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    3958:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    395c:	f3c3 4a07 	ubfx	sl, r3, #16, #8

        int indexstart = 0;
    3960:	2400      	movs	r4, #0
    3962:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    3964:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3968:	483b      	ldr	r0, [pc, #236]	; (3a58 <setup+0x218>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    396a:	f3c5 2707 	ubfx	r7, r5, #8, #8
    396e:	f3c5 4607 	ubfx	r6, r5, #16, #8
    3972:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    3974:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3978:	9104      	str	r1, [sp, #16]
    397a:	b2f1      	uxtb	r1, r6
    397c:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    397e:	fa5f f18c 	uxtb.w	r1, ip
    3982:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    3984:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    3986:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    3988:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    398a:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    398e:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    3990:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3994:	fa5f f985 	uxtb.w	r9, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    3998:	d80c      	bhi.n	39b4 <setup+0x174>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    399a:	9906      	ldr	r1, [sp, #24]
    399c:	458c      	cmp	ip, r1
    399e:	dc07      	bgt.n	39b0 <setup+0x170>
    39a0:	290f      	cmp	r1, #15
    39a2:	d005      	beq.n	39b0 <setup+0x170>
                    istart8 = lastSlotUsed + 1;
    39a4:	3101      	adds	r1, #1
    39a6:	b2c9      	uxtb	r1, r1
    39a8:	428b      	cmp	r3, r1
    39aa:	9103      	str	r1, [sp, #12]
    39ac:	bf38      	it	cc
    39ae:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    39b0:	b259      	sxtb	r1, r3
    39b2:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    39b4:	a909      	add	r1, sp, #36	; 0x24
    39b6:	9100      	str	r1, [sp, #0]
    39b8:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    39ba:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
    39be:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        b = rhs.b;
    39c2:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    39c6:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
    39ca:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
    39ce:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
    39d2:	f000 fa9d 	bl	3f10 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    39d6:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    39d8:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    39dc:	f8dd a014 	ldr.w	sl, [sp, #20]
        b = rhs.b;
    39e0:	46ce      	mov	lr, r9
    39e2:	d1bf      	bne.n	3964 <setup+0x124>

    39e4:	4b1d      	ldr	r3, [pc, #116]	; (3a5c <setup+0x21c>)
    39e6:	2201      	movs	r2, #1
    39e8:	701a      	strb	r2, [r3, #0]

    39ea:	b017      	add	sp, #92	; 0x5c
    39ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    39f0:	f001 f954 	bl	4c9c <__cxa_guard_acquire>
    39f4:	2800      	cmp	r0, #0
    39f6:	f43f af4f 	beq.w	3898 <setup+0x58>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    39fa:	4919      	ldr	r1, [pc, #100]	; (3a60 <setup+0x220>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    39fc:	4b12      	ldr	r3, [pc, #72]	; (3a48 <setup+0x208>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    39fe:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    3a00:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    3a02:	22ff      	movs	r2, #255	; 0xff
    3a04:	2501      	movs	r5, #1
    3a06:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    3a08:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    3a0a:	749d      	strb	r5, [r3, #18]
    3a0c:	731a      	strb	r2, [r3, #12]
    3a0e:	735a      	strb	r2, [r3, #13]
    3a10:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    3a12:	73da      	strb	r2, [r3, #15]
    3a14:	741a      	strb	r2, [r3, #16]
    3a16:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    3a18:	b160      	cbz	r0, 3a34 <setup+0x1f4>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    3a1a:	4a12      	ldr	r2, [pc, #72]	; (3a64 <setup+0x224>)
    3a1c:	6811      	ldr	r1, [r2, #0]
    3a1e:	b101      	cbz	r1, 3a22 <setup+0x1e2>
    3a20:	608b      	str	r3, [r1, #8]
        m_pTail = this;
    3a22:	6013      	str	r3, [r2, #0]
		// CORE_PIN14_CONFIG = gState.pins[3];
	}


public:
	ARMHardwareSPIOutput() { m_pSelect = NULL; }
    3a24:	2200      	movs	r2, #0
	inline void writeLed(uint8_t b0, uint8_t b1, uint8_t b2) __attribute__((always_inline)) {
		mSPI.writeByte(0xFF); mSPI.writeByte(b0); mSPI.writeByte(b1); mSPI.writeByte(b2);
	}

public:
	APA102Controller() {}
    3a26:	4910      	ldr	r1, [pc, #64]	; (3a68 <setup+0x228>)
    3a28:	4805      	ldr	r0, [pc, #20]	; (3a40 <setup+0x200>)
    3a2a:	619a      	str	r2, [r3, #24]
    3a2c:	6019      	str	r1, [r3, #0]
    3a2e:	f001 f93b 	bl	4ca8 <__cxa_guard_release>
    3a32:	e731      	b.n	3898 <setup+0x58>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    3a34:	600b      	str	r3, [r1, #0]
    3a36:	e7f0      	b.n	3a1a <setup+0x1da>
    3a38:	1fff9018 	.word	0x1fff9018
    3a3c:	00006fc8 	.word	0x00006fc8
    3a40:	1fff8848 	.word	0x1fff8848
    3a44:	1fff8898 	.word	0x1fff8898
    3a48:	1fff884c 	.word	0x1fff884c
    3a4c:	1fff8ff0 	.word	0x1fff8ff0
    3a50:	1fff8ae0 	.word	0x1fff8ae0
    3a54:	000077ac 	.word	0x000077ac
    3a58:	1fff8fbc 	.word	0x1fff8fbc
    3a5c:	1fff8bf0 	.word	0x1fff8bf0
    3a60:	1fff9000 	.word	0x1fff9000
    3a64:	1fff9010 	.word	0x1fff9010
    3a68:	00006cf8 	.word	0x00006cf8
    3a6c:	1fff876c 	.word	0x1fff876c

00003a70 <loop>:


void loop()
{
  // Blend Palettes
    3a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3a74:	f8df 8250 	ldr.w	r8, [pc, #592]	; 3cc8 <loop+0x258>
    3a78:	b0a3      	sub	sp, #140	; 0x8c
    3a7a:	f8d8 3000 	ldr.w	r3, [r8]
    3a7e:	9308      	str	r3, [sp, #32]
	return ret;
    3a80:	9b08      	ldr	r3, [sp, #32]
    3a82:	b92b      	cbnz	r3, 3a90 <loop+0x20>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3a84:	f8d8 3000 	ldr.w	r3, [r8]
    3a88:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    3a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a8c:	2b01      	cmp	r3, #1
    3a8e:	d921      	bls.n	3ad4 <loop+0x64>
    3a90:	4877      	ldr	r0, [pc, #476]	; (3c70 <loop+0x200>)
    3a92:	4c78      	ldr	r4, [pc, #480]	; (3c74 <loop+0x204>)
    3a94:	f000 fdc6 	bl	4624 <VisualMicroDebug::DBG_Millis()>
    3a98:	6822      	ldr	r2, [r4, #0]
    3a9a:	4977      	ldr	r1, [pc, #476]	; (3c78 <loop+0x208>)
    3a9c:	4290      	cmp	r0, r2
    3a9e:	4603      	mov	r3, r0
    3aa0:	6008      	str	r0, [r1, #0]
    3aa2:	f0c0 80e3 	bcc.w	3c6c <loop+0x1fc>
    3aa6:	1a9a      	subs	r2, r3, r2
    3aa8:	2af9      	cmp	r2, #249	; 0xf9
    3aaa:	d913      	bls.n	3ad4 <loop+0x64>
    3aac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    3ab0:	486f      	ldr	r0, [pc, #444]	; (3c70 <loop+0x200>)
    3ab2:	6023      	str	r3, [r4, #0]
    3ab4:	f000 fdc0 	bl	4638 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>
    3ab8:	2101      	movs	r1, #1
    3aba:	486d      	ldr	r0, [pc, #436]	; (3c70 <loop+0x200>)
    3abc:	f000 fe2a 	bl	4714 <VisualMicroDebug::outPacketStart(bool)>
    3ac0:	2800      	cmp	r0, #0
    3ac2:	f040 81ba 	bne.w	3e3a <loop+0x3ca>
    3ac6:	486a      	ldr	r0, [pc, #424]	; (3c70 <loop+0x200>)
    3ac8:	2105      	movs	r1, #5
    3aca:	f000 fd99 	bl	4600 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    3ace:	4868      	ldr	r0, [pc, #416]	; (3c70 <loop+0x200>)
    3ad0:	f000 fe16 	bl	4700 <VisualMicroDebug::OnBreakPointEnd()>
  EVERY_N_MILLISECONDS(50) {
    nblendPaletteTowardPalette( current_palette, target_palette, 24);
  }
    3ad4:	4d69      	ldr	r5, [pc, #420]	; (3c7c <loop+0x20c>)
    3ad6:	682b      	ldr	r3, [r5, #0]
    3ad8:	07d8      	lsls	r0, r3, #31
    3ada:	f140 8087 	bpl.w	3bec <loop+0x17c>
    3ade:	4c68      	ldr	r4, [pc, #416]	; (3c80 <loop+0x210>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ae0:	f8d8 3000 	ldr.w	r3, [r8]
    3ae4:	930d      	str	r3, [sp, #52]	; 0x34
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    3ae6:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    3aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3aec:	1a5b      	subs	r3, r3, r1
    3aee:	429a      	cmp	r2, r3
    3af0:	f240 808d 	bls.w	3c0e <loop+0x19e>

  // Change current palette
  EVERY_N_SECONDS(25) {
	  if (use_palette) {
		  updatePaletteIndex(target_palette);
    3af4:	4d63      	ldr	r5, [pc, #396]	; (3c84 <loop+0x214>)
    3af6:	682b      	ldr	r3, [r5, #0]
    3af8:	07d9      	lsls	r1, r3, #31
    3afa:	f140 8097 	bpl.w	3c2c <loop+0x1bc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3afe:	f8d8 3000 	ldr.w	r3, [r8]
    3b02:	4c61      	ldr	r4, [pc, #388]	; (3c88 <loop+0x218>)
    3b04:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    3b06:	9b10      	ldr	r3, [sp, #64]	; 0x40
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    3b08:	4860      	ldr	r0, [pc, #384]	; (3c8c <loop+0x21c>)
    3b0a:	8822      	ldrh	r2, [r4, #0]
    3b0c:	8861      	ldrh	r1, [r4, #2]
    3b0e:	fba0 0303 	umull	r0, r3, r0, r3
    3b12:	ebc2 1393 	rsb	r3, r2, r3, lsr #6
    3b16:	b29b      	uxth	r3, r3
    3b18:	4299      	cmp	r1, r3
    3b1a:	d80d      	bhi.n	3b38 <loop+0xc8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3b1c:	f8d8 3000 	ldr.w	r3, [r8]
    3b20:	930f      	str	r3, [sp, #60]	; 0x3c
	return ret;
    3b22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3b24:	4959      	ldr	r1, [pc, #356]	; (3c8c <loop+0x21c>)
		  palette_index = random8(g_gradient_palette_count);
    3b26:	4a5a      	ldr	r2, [pc, #360]	; (3c90 <loop+0x220>)
    3b28:	fba1 1303 	umull	r1, r3, r1, r3
    3b2c:	7812      	ldrb	r2, [r2, #0]
    3b2e:	099b      	lsrs	r3, r3, #6
    3b30:	8023      	strh	r3, [r4, #0]
    3b32:	2a00      	cmp	r2, #0
    3b34:	f040 80ca 	bne.w	3ccc <loop+0x25c>
  }

  // Change mode 
  EVERY_N_SECONDS(20) {
	  mode_change = 1;
      fill_solid(leds,NUM_LEDS,CRGB::Black);
    3b38:	4d56      	ldr	r5, [pc, #344]	; (3c94 <loop+0x224>)
    3b3a:	682b      	ldr	r3, [r5, #0]
    3b3c:	07da      	lsls	r2, r3, #31
    3b3e:	f140 808a 	bpl.w	3c56 <loop+0x1e6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3b42:	f8d8 3000 	ldr.w	r3, [r8]
    3b46:	4c54      	ldr	r4, [pc, #336]	; (3c98 <loop+0x228>)
    3b48:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    3b4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3b4c:	484f      	ldr	r0, [pc, #316]	; (3c8c <loop+0x21c>)
    3b4e:	8822      	ldrh	r2, [r4, #0]
    3b50:	8861      	ldrh	r1, [r4, #2]
    3b52:	fba0 0303 	umull	r0, r3, r0, r3
    3b56:	ebc2 1393 	rsb	r3, r2, r3, lsr #6
    3b5a:	b29b      	uxth	r3, r3
    3b5c:	4299      	cmp	r1, r3
    3b5e:	d822      	bhi.n	3ba6 <loop+0x136>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3b60:	f8d8 3000 	ldr.w	r3, [r8]
    3b64:	9312      	str	r3, [sp, #72]	; 0x48
	return ret;
    3b66:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3b68:	4a48      	ldr	r2, [pc, #288]	; (3c8c <loop+0x21c>)
	  //current_mode_number = random8(ARRAY_SIZE(modes));
    3b6a:	4e4c      	ldr	r6, [pc, #304]	; (3c9c <loop+0x22c>)
	  current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
    3b6c:	484c      	ldr	r0, [pc, #304]	; (3ca0 <loop+0x230>)
    3b6e:	fba2 2303 	umull	r2, r3, r2, r3
    3b72:	099b      	lsrs	r3, r3, #6
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    3b74:	2500      	movs	r5, #0

  // Change mode 
  EVERY_N_SECONDS(20) {
	  mode_change = 1;
      fill_solid(leds,NUM_LEDS,CRGB::Black);
	  //current_mode_number = random8(ARRAY_SIZE(modes));
    3b76:	2701      	movs	r7, #1
	  current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
    3b78:	aa16      	add	r2, sp, #88	; 0x58
    3b7a:	21bc      	movs	r1, #188	; 0xbc
    3b7c:	8023      	strh	r3, [r4, #0]

  // Change mode 
  EVERY_N_SECONDS(20) {
	  mode_change = 1;
      fill_solid(leds,NUM_LEDS,CRGB::Black);
	  //current_mode_number = random8(ARRAY_SIZE(modes));
    3b7e:	7037      	strb	r7, [r6, #0]
    3b80:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
    3b84:	f88d 5059 	strb.w	r5, [sp, #89]	; 0x59
    3b88:	f88d 505a 	strb.w	r5, [sp, #90]	; 0x5a
	  current_mode_number = (current_mode_number + 1) % ARRAY_SIZE(modes);
    3b8c:	f000 f990 	bl	3eb0 <fill_solid(CRGB*, int, CRGB const&)>
  }

    3b90:	4944      	ldr	r1, [pc, #272]	; (3ca4 <loop+0x234>)
    3b92:	4b45      	ldr	r3, [pc, #276]	; (3ca8 <loop+0x238>)
    3b94:	780a      	ldrb	r2, [r1, #0]
    3b96:	443a      	add	r2, r7
    3b98:	fba3 0302 	umull	r0, r3, r3, r2
    3b9c:	08db      	lsrs	r3, r3, #3
    3b9e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3ba2:	1ad3      	subs	r3, r2, r3
    3ba4:	700b      	strb	r3, [r1, #0]
  // Send values to LEDs
  EVERY_N_MILLIS_I(this_timer, this_delay) {
	  this_timer.setPeriod(this_delay);
	  modes[current_mode_number]();
    3ba6:	4d41      	ldr	r5, [pc, #260]	; (3cac <loop+0x23c>)
    3ba8:	682b      	ldr	r3, [r5, #0]
    3baa:	07db      	lsls	r3, r3, #31
    3bac:	d549      	bpl.n	3c42 <loop+0x1d2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3bae:	f8d8 3000 	ldr.w	r3, [r8]
    3bb2:	4c3f      	ldr	r4, [pc, #252]	; (3cb0 <loop+0x240>)
    3bb4:	9316      	str	r3, [sp, #88]	; 0x58
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    3bb6:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    3bba:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3bbc:	1a5b      	subs	r3, r3, r1
    3bbe:	4293      	cmp	r3, r2
    3bc0:	d30d      	bcc.n	3bde <loop+0x16e>
  }

    3bc2:	4b38      	ldr	r3, [pc, #224]	; (3ca4 <loop+0x234>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3bc4:	f8d8 1000 	ldr.w	r1, [r8]

  // Send values to LEDs
  EVERY_N_MILLIS_I(this_timer, this_delay) {
	  this_timer.setPeriod(this_delay);
	  modes[current_mode_number]();
  }
    3bc8:	4a3a      	ldr	r2, [pc, #232]	; (3cb4 <loop+0x244>)

    3bca:	7818      	ldrb	r0, [r3, #0]
    3bcc:	9115      	str	r1, [sp, #84]	; 0x54
    3bce:	4b3a      	ldr	r3, [pc, #232]	; (3cb8 <loop+0x248>)
	return ret;
    3bd0:	9915      	ldr	r1, [sp, #84]	; 0x54
    3bd2:	6812      	ldr	r2, [r2, #0]
    3bd4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    3bd8:	e884 0006 	stmia.w	r4, {r1, r2}
    3bdc:	4798      	blx	r3
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    3bde:	4837      	ldr	r0, [pc, #220]	; (3cbc <loop+0x24c>)
    3be0:	7801      	ldrb	r1, [r0, #0]
    3be2:	f000 fb53 	bl	428c <CFastLED::show(unsigned char)>
  // Show LEDs
  FastLED.show();
}
    3be6:	b023      	add	sp, #140	; 0x8c
    3be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
void loop()
{
  // Blend Palettes
  EVERY_N_MILLISECONDS(50) {
    nblendPaletteTowardPalette( current_palette, target_palette, 24);
  }
    3bec:	4628      	mov	r0, r5
    3bee:	f001 f855 	bl	4c9c <__cxa_guard_acquire>
    3bf2:	2800      	cmp	r0, #0
    3bf4:	f040 80e8 	bne.w	3dc8 <loop+0x358>
    3bf8:	4c21      	ldr	r4, [pc, #132]	; (3c80 <loop+0x210>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3bfa:	f8d8 3000 	ldr.w	r3, [r8]
    3bfe:	930d      	str	r3, [sp, #52]	; 0x34
    3c00:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    3c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3c06:	1a5b      	subs	r3, r3, r1
    3c08:	4293      	cmp	r3, r2
    3c0a:	f4ff af73 	bcc.w	3af4 <loop+0x84>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3c0e:	f8d8 3000 	ldr.w	r3, [r8]
    3c12:	930c      	str	r3, [sp, #48]	; 0x30
	return ret;
    3c14:	9b0c      	ldr	r3, [sp, #48]	; 0x30

  // Change current palette
  EVERY_N_SECONDS(25) {
	  if (use_palette) {
		  updatePaletteIndex(target_palette);
    3c16:	4d1b      	ldr	r5, [pc, #108]	; (3c84 <loop+0x214>)
{
  // Blend Palettes
  EVERY_N_MILLISECONDS(50) {
    nblendPaletteTowardPalette( current_palette, target_palette, 24);
  }

    3c18:	4929      	ldr	r1, [pc, #164]	; (3cc0 <loop+0x250>)
    3c1a:	6023      	str	r3, [r4, #0]
    3c1c:	4829      	ldr	r0, [pc, #164]	; (3cc4 <loop+0x254>)
    3c1e:	2218      	movs	r2, #24
    3c20:	f000 faba 	bl	4198 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
  // Change current palette
  EVERY_N_SECONDS(25) {
	  if (use_palette) {
		  updatePaletteIndex(target_palette);
    3c24:	682b      	ldr	r3, [r5, #0]
    3c26:	07d9      	lsls	r1, r3, #31
    3c28:	f53f af69 	bmi.w	3afe <loop+0x8e>
    3c2c:	4628      	mov	r0, r5
    3c2e:	f001 f835 	bl	4c9c <__cxa_guard_acquire>
    3c32:	2800      	cmp	r0, #0
    3c34:	f040 80d4 	bne.w	3de0 <loop+0x370>
    3c38:	4c13      	ldr	r4, [pc, #76]	; (3c88 <loop+0x218>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3c3a:	f8d8 3000 	ldr.w	r3, [r8]
    3c3e:	9310      	str	r3, [sp, #64]	; 0x40
    3c40:	e761      	b.n	3b06 <loop+0x96>
  }

  // Send values to LEDs
  EVERY_N_MILLIS_I(this_timer, this_delay) {
	  this_timer.setPeriod(this_delay);
	  modes[current_mode_number]();
    3c42:	4628      	mov	r0, r5
    3c44:	f001 f82a 	bl	4c9c <__cxa_guard_acquire>
    3c48:	2800      	cmp	r0, #0
    3c4a:	f040 80e9 	bne.w	3e20 <loop+0x3b0>
    3c4e:	4c18      	ldr	r4, [pc, #96]	; (3cb0 <loop+0x240>)
    3c50:	f8d8 3000 	ldr.w	r3, [r8]
    3c54:	e7ae      	b.n	3bb4 <loop+0x144>
  }

  // Change mode 
  EVERY_N_SECONDS(20) {
	  mode_change = 1;
      fill_solid(leds,NUM_LEDS,CRGB::Black);
    3c56:	4628      	mov	r0, r5
    3c58:	f001 f820 	bl	4c9c <__cxa_guard_acquire>
    3c5c:	2800      	cmp	r0, #0
    3c5e:	f040 80cf 	bne.w	3e00 <loop+0x390>
    3c62:	4c0d      	ldr	r4, [pc, #52]	; (3c98 <loop+0x228>)
    3c64:	f8d8 3000 	ldr.w	r3, [r8]
    3c68:	9313      	str	r3, [sp, #76]	; 0x4c
    3c6a:	e76e      	b.n	3b4a <loop+0xda>



void loop()
{
  // Blend Palettes
    3c6c:	6023      	str	r3, [r4, #0]
    3c6e:	e731      	b.n	3ad4 <loop+0x64>
    3c70:	1fff9018 	.word	0x1fff9018
    3c74:	1fff8be4 	.word	0x1fff8be4
    3c78:	1fff8bf8 	.word	0x1fff8bf8
    3c7c:	1fff8b18 	.word	0x1fff8b18
    3c80:	1fff8888 	.word	0x1fff8888
    3c84:	1fff8b1c 	.word	0x1fff8b1c
    3c88:	1fff8ad8 	.word	0x1fff8ad8
    3c8c:	10624dd3 	.word	0x10624dd3
    3c90:	1fff871e 	.word	0x1fff871e
    3c94:	1fff8b20 	.word	0x1fff8b20
    3c98:	1fff8890 	.word	0x1fff8890
    3c9c:	1fff8724 	.word	0x1fff8724
    3ca0:	1fff8898 	.word	0x1fff8898
    3ca4:	1fff8ad3 	.word	0x1fff8ad3
    3ca8:	88888889 	.word	0x88888889
    3cac:	1fff8acc 	.word	0x1fff8acc
    3cb0:	1fff8be8 	.word	0x1fff8be8
    3cb4:	1fff8720 	.word	0x1fff8720
    3cb8:	1fff872c 	.word	0x1fff872c
    3cbc:	1fff8ff0 	.word	0x1fff8ff0
    3cc0:	1fff8fbc 	.word	0x1fff8fbc
    3cc4:	1fff8ae0 	.word	0x1fff8ae0
    3cc8:	1fff9068 	.word	0x1fff9068
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };

    CRGBPalette16( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    3ccc:	4d67      	ldr	r5, [pc, #412]	; (3e6c <loop+0x3fc>)
    3cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3cd0:	ac16      	add	r4, sp, #88	; 0x58
    3cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3cd8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // Change current palette
  EVERY_N_SECONDS(25) {
	  if (use_palette) {
		  updatePaletteIndex(target_palette);
		  palette_index = random8(g_gradient_palette_count);
		  target_palette = g_gradient_palettes[palette_index];
    3ce0:	a816      	add	r0, sp, #88	; 0x58
    3ce2:	f7ff fcf9 	bl	36d8 <updatePaletteIndex(CRGBPalette16)>
    3ce6:	4962      	ldr	r1, [pc, #392]	; (3e70 <loop+0x400>)
	  }
  }
    3ce8:	4c62      	ldr	r4, [pc, #392]	; (3e74 <loop+0x404>)
    3cea:	880b      	ldrh	r3, [r1, #0]
  EVERY_N_SECONDS(25) {
	  if (use_palette) {
		  updatePaletteIndex(target_palette);
		  palette_index = random8(g_gradient_palette_count);
		  target_palette = g_gradient_palettes[palette_index];
	  }
    3cec:	4862      	ldr	r0, [pc, #392]	; (3e78 <loop+0x408>)
    3cee:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3cf2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3cf6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3cfa:	3319      	adds	r3, #25
    3cfc:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3cfe:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3d02:	b2d2      	uxtb	r2, r2
    3d04:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3d08:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3d0c:	11d2      	asrs	r2, r2, #7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3d0e:	800b      	strh	r3, [r1, #0]
  }
    3d10:	f854 9022 	ldr.w	r9, [r4, r2, lsl #2]
  EVERY_N_SECONDS(25) {
	  if (use_palette) {
		  updatePaletteIndex(target_palette);
		  palette_index = random8(g_gradient_palette_count);
		  target_palette = g_gradient_palettes[palette_index];
	  }
    3d14:	7002      	strb	r2, [r0, #0]
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    3d16:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    3d18:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    3d1c:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    3d1e:	3701      	adds	r7, #1
        } while ( u.index != 255);
    3d20:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    3d22:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    3d24:	d1f8      	bne.n	3d18 <loop+0x2a8>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    3d26:	f8d9 3000 	ldr.w	r3, [r9]
    3d2a:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
    3d2c:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    3d30:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    3d34:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    3d38:	0e1b      	lsrs	r3, r3, #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    3d3a:	9206      	str	r2, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    3d3c:	9303      	str	r3, [sp, #12]

        int indexstart = 0;
    3d3e:	2400      	movs	r4, #0
    3d40:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    3d42:	f859 5f04 	ldr.w	r5, [r9, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3d46:	4849      	ldr	r0, [pc, #292]	; (3e6c <loop+0x3fc>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3d48:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    3d4c:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3d50:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    3d54:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    3d56:	b2f9      	uxtb	r1, r7
    3d58:	f3c5 6507 	ubfx	r5, r5, #24, #8
    3d5c:	9104      	str	r1, [sp, #16]
    3d5e:	b2e9      	uxtb	r1, r5
    3d60:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    3d62:	fa5f f18c 	uxtb.w	r1, ip
    3d66:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
    3d68:	9907      	ldr	r1, [sp, #28]
    3d6a:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3d6c:	aa16      	add	r2, sp, #88	; 0x58
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    3d6e:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3d72:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    3d76:	d80c      	bhi.n	3d92 <loop+0x322>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    3d78:	9906      	ldr	r1, [sp, #24]
    3d7a:	458c      	cmp	ip, r1
    3d7c:	dc07      	bgt.n	3d8e <loop+0x31e>
    3d7e:	290f      	cmp	r1, #15
    3d80:	d005      	beq.n	3d8e <loop+0x31e>
                    istart8 = lastSlotUsed + 1;
    3d82:	3101      	adds	r1, #1
    3d84:	b2c9      	uxtb	r1, r1
    3d86:	428b      	cmp	r3, r1
    3d88:	9102      	str	r1, [sp, #8]
    3d8a:	bf38      	it	cc
    3d8c:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    3d8e:	b259      	sxtb	r1, r3
    3d90:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3d92:	a915      	add	r1, sp, #84	; 0x54
    3d94:	9100      	str	r1, [sp, #0]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3d96:	f88d e059 	strb.w	lr, [sp, #89]	; 0x59
    3d9a:	9902      	ldr	r1, [sp, #8]
        b = rhs.b;
    3d9c:	f89d e00c 	ldrb.w	lr, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3da0:	f88d b058 	strb.w	fp, [sp, #88]	; 0x58
        g = rhs.g;
        b = rhs.b;
    3da4:	f88d e05a 	strb.w	lr, [sp, #90]	; 0x5a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3da8:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
        g = rhs.g;
    3dac:	f88d 6055 	strb.w	r6, [sp, #85]	; 0x55
        b = rhs.b;
    3db0:	f88d 5056 	strb.w	r5, [sp, #86]	; 0x56
    3db4:	f000 f8ac 	bl	3f10 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    3db8:	9b05      	ldr	r3, [sp, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3dba:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    3dbe:	9303      	str	r3, [sp, #12]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    3dc0:	2cff      	cmp	r4, #255	; 0xff

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3dc2:	46d6      	mov	lr, sl
    3dc4:	d1bd      	bne.n	3d42 <loop+0x2d2>
    3dc6:	e6b7      	b.n	3b38 <loop+0xc8>
    3dc8:	f8d8 3000 	ldr.w	r3, [r8]
    3dcc:	4c2b      	ldr	r4, [pc, #172]	; (3e7c <loop+0x40c>)
    3dce:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    3dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3dd2:	6023      	str	r3, [r4, #0]
    3dd4:	2332      	movs	r3, #50	; 0x32
void loop()
{
  // Blend Palettes
  EVERY_N_MILLISECONDS(50) {
    nblendPaletteTowardPalette( current_palette, target_palette, 24);
  }
    3dd6:	4628      	mov	r0, r5
    3dd8:	6063      	str	r3, [r4, #4]
    3dda:	f000 ff65 	bl	4ca8 <__cxa_guard_release>
    3dde:	e70c      	b.n	3bfa <loop+0x18a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3de0:	f8d8 3000 	ldr.w	r3, [r8]
    3de4:	930e      	str	r3, [sp, #56]	; 0x38
	return ret;
    3de6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    3de8:	4a25      	ldr	r2, [pc, #148]	; (3e80 <loop+0x410>)
    3dea:	4c26      	ldr	r4, [pc, #152]	; (3e84 <loop+0x414>)
    3dec:	fba2 2303 	umull	r2, r3, r2, r3
    3df0:	099b      	lsrs	r3, r3, #6
    3df2:	2219      	movs	r2, #25

  // Change current palette
  EVERY_N_SECONDS(25) {
	  if (use_palette) {
		  updatePaletteIndex(target_palette);
    3df4:	4628      	mov	r0, r5
    3df6:	8023      	strh	r3, [r4, #0]
    3df8:	8062      	strh	r2, [r4, #2]
    3dfa:	f000 ff55 	bl	4ca8 <__cxa_guard_release>
    3dfe:	e71c      	b.n	3c3a <loop+0x1ca>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e00:	f8d8 3000 	ldr.w	r3, [r8]
    3e04:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    3e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3e08:	4a1d      	ldr	r2, [pc, #116]	; (3e80 <loop+0x410>)
    3e0a:	4c1f      	ldr	r4, [pc, #124]	; (3e88 <loop+0x418>)
    3e0c:	fba2 2303 	umull	r2, r3, r2, r3
    3e10:	099b      	lsrs	r3, r3, #6
    3e12:	2214      	movs	r2, #20
  }

  // Change mode 
  EVERY_N_SECONDS(20) {
	  mode_change = 1;
      fill_solid(leds,NUM_LEDS,CRGB::Black);
    3e14:	4628      	mov	r0, r5
    3e16:	8023      	strh	r3, [r4, #0]
    3e18:	8062      	strh	r2, [r4, #2]
    3e1a:	f000 ff45 	bl	4ca8 <__cxa_guard_release>
    3e1e:	e721      	b.n	3c64 <loop+0x1f4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e20:	f8d8 2000 	ldr.w	r2, [r8]
  }

  // Send values to LEDs
  EVERY_N_MILLIS_I(this_timer, this_delay) {
	  this_timer.setPeriod(this_delay);
	  modes[current_mode_number]();
    3e24:	4b19      	ldr	r3, [pc, #100]	; (3e8c <loop+0x41c>)
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    3e26:	4c1a      	ldr	r4, [pc, #104]	; (3e90 <loop+0x420>)
    3e28:	9214      	str	r2, [sp, #80]	; 0x50
	return ret;
    3e2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    3e2c:	681b      	ldr	r3, [r3, #0]
    3e2e:	6022      	str	r2, [r4, #0]
    3e30:	4628      	mov	r0, r5
    3e32:	6063      	str	r3, [r4, #4]
    3e34:	f000 ff38 	bl	4ca8 <__cxa_guard_release>
    3e38:	e70a      	b.n	3c50 <loop+0x1e0>



void loop()
{
  // Blend Palettes
    3e3a:	2101      	movs	r1, #1
    3e3c:	4815      	ldr	r0, [pc, #84]	; (3e94 <loop+0x424>)
    3e3e:	f000 fc0d 	bl	465c <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>
    3e42:	2101      	movs	r1, #1
    3e44:	4814      	ldr	r0, [pc, #80]	; (3e98 <loop+0x428>)
    3e46:	f001 ffc1 	bl	5dcc <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e4a:	f8d8 3000 	ldr.w	r3, [r8]
    3e4e:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    3e50:	990a      	ldr	r1, [sp, #40]	; 0x28

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    3e52:	4812      	ldr	r0, [pc, #72]	; (3e9c <loop+0x42c>)
    3e54:	2300      	movs	r3, #0
    3e56:	220a      	movs	r2, #10
    3e58:	f002 f9cc 	bl	61f4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3e5c:	480d      	ldr	r0, [pc, #52]	; (3e94 <loop+0x424>)
    3e5e:	f000 fc41 	bl	46e4 <VisualMicroDebug::OnBreakPointPrintEnd()>
    3e62:	480c      	ldr	r0, [pc, #48]	; (3e94 <loop+0x424>)
    3e64:	f000 fc7a 	bl	475c <VisualMicroDebug::outPacketEnd()>
    3e68:	e62d      	b.n	3ac6 <loop+0x56>
    3e6a:	bf00      	nop
    3e6c:	1fff8fbc 	.word	0x1fff8fbc
    3e70:	1fff876c 	.word	0x1fff876c
    3e74:	000077ac 	.word	0x000077ac
    3e78:	1fff8b13 	.word	0x1fff8b13
    3e7c:	1fff8888 	.word	0x1fff8888
    3e80:	10624dd3 	.word	0x10624dd3
    3e84:	1fff8ad8 	.word	0x1fff8ad8
    3e88:	1fff8890 	.word	0x1fff8890
    3e8c:	1fff8720 	.word	0x1fff8720
    3e90:	1fff8be8 	.word	0x1fff8be8
    3e94:	1fff9018 	.word	0x1fff9018
    3e98:	00006fdc 	.word	0x00006fdc
    3e9c:	1fff8774 	.word	0x1fff8774

00003ea0 <_GLOBAL__sub_I_palette_index>:
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    3ea0:	4b02      	ldr	r3, [pc, #8]	; (3eac <_GLOBAL__sub_I_palette_index+0xc>)
    3ea2:	2200      	movs	r2, #0
    3ea4:	701a      	strb	r2, [r3, #0]
    3ea6:	705a      	strb	r2, [r3, #1]
    3ea8:	709a      	strb	r2, [r3, #2]
    3eaa:	4770      	bx	lr
    3eac:	1fff8d30 	.word	0x1fff8d30

00003eb0 <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    3eb0:	2900      	cmp	r1, #0
    3eb2:	dd0b      	ble.n	3ecc <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    3eb4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3eb8:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3eba:	7813      	ldrb	r3, [r2, #0]
    3ebc:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    3ebe:	7853      	ldrb	r3, [r2, #1]
    3ec0:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    3ec2:	7893      	ldrb	r3, [r2, #2]
    3ec4:	7083      	strb	r3, [r0, #2]
    3ec6:	3003      	adds	r0, #3
    3ec8:	4288      	cmp	r0, r1
    3eca:	d1f6      	bne.n	3eba <fill_solid(CRGB*, int, CRGB const&)+0xa>
    3ecc:	4770      	bx	lr
    3ece:	bf00      	nop

00003ed0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>:
// }

void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    3ed0:	b570      	push	{r4, r5, r6, lr}
    3ed2:	b082      	sub	sp, #8
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    3ed4:	25ff      	movs	r5, #255	; 0xff
    hsv.sat = 240;
    3ed6:	24f0      	movs	r4, #240	; 0xf0
    for( int i = 0; i < numToFill; i++) {
    3ed8:	2900      	cmp	r1, #0
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    CHSV hsv;
    hsv.hue = initialhue;
    3eda:	f88d 2004 	strb.w	r2, [sp, #4]
    hsv.val = 255;
    3ede:	f88d 5006 	strb.w	r5, [sp, #6]
    hsv.sat = 240;
    3ee2:	f88d 4005 	strb.w	r4, [sp, #5]
    for( int i = 0; i < numToFill; i++) {
    3ee6:	dd10      	ble.n	3f0a <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x3a>
    3ee8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3eec:	461e      	mov	r6, r3
    3eee:	4604      	mov	r4, r0
    3ef0:	1845      	adds	r5, r0, r1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3ef2:	4621      	mov	r1, r4
    3ef4:	a801      	add	r0, sp, #4
    3ef6:	f000 fa39 	bl	436c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    3efa:	f89d 2004 	ldrb.w	r2, [sp, #4]
    3efe:	3403      	adds	r4, #3
    3f00:	4432      	add	r2, r6
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    3f02:	42ac      	cmp	r4, r5
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    3f04:	f88d 2004 	strb.w	r2, [sp, #4]
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    3f08:	d1f3      	bne.n	3ef2 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x22>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    }
}
    3f0a:	b002      	add	sp, #8
    3f0c:	bd70      	pop	{r4, r5, r6, pc}
    3f0e:	bf00      	nop

00003f10 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    3f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    3f14:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    3f16:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    3f18:	d352      	bcc.n	3fc0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    3f1a:	f896 e000 	ldrb.w	lr, [r6]
    3f1e:	7815      	ldrb	r5, [r2, #0]
    3f20:	7877      	ldrb	r7, [r6, #1]
    3f22:	f896 8002 	ldrb.w	r8, [r6, #2]
    3f26:	7854      	ldrb	r4, [r2, #1]
    3f28:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    3f2c:	ebc1 0b03 	rsb	fp, r1, r3

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    3f30:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    3f34:	ebc4 0a07 	rsb	sl, r4, r7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    3f38:	ebcc 0608 	rsb	r6, ip, r8

    uint16_t pixeldistance = endpos - startpos;
    3f3c:	fa1f f28b 	uxth.w	r2, fp

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    3f40:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    3f44:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    3f48:	01f6      	lsls	r6, r6, #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    3f4a:	b3b2      	cbz	r2, 3fba <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    3f4c:	fa0f fb82 	sxth.w	fp, r2

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    3f50:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    3f54:	fb9a fafb 	sdiv	sl, sl, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    3f58:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    3f5c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    3f60:	fb96 fbfb 	sdiv	fp, r6, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    3f64:	4299      	cmp	r1, r3
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;
    3f66:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    3f6a:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    3f6e:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    3f72:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    3f76:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    3f7a:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    3f7e:	ea4f 220c 	mov.w	r2, ip, lsl #8
    for( uint16_t i = startpos; i <= endpos; i++) {
    3f82:	d818      	bhi.n	3fb6 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    3f84:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    3f88:	3101      	adds	r1, #1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    3f8a:	19c6      	adds	r6, r0, r7
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    3f8c:	b289      	uxth	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3f8e:	ea4f 2925 	mov.w	r9, r5, asr #8
        g = rhs.g;
    3f92:	ea4f 2824 	mov.w	r8, r4, asr #8
        b = rhs.b;
    3f96:	ea4f 2c22 	mov.w	ip, r2, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    3f9a:	4475      	add	r5, lr
        g88 += gdelta87;
    3f9c:	4454      	add	r4, sl
        b88 += bdelta87;
    3f9e:	445a      	add	r2, fp
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    3fa0:	428b      	cmp	r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3fa2:	f800 9007 	strb.w	r9, [r0, r7]
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    3fa6:	b2ad      	uxth	r5, r5
        g = rhs.g;
    3fa8:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    3fac:	b2a4      	uxth	r4, r4
        b = rhs.b;
    3fae:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    3fb2:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    3fb4:	d2e6      	bcs.n	3f84 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    3fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3fba:	f04f 0b01 	mov.w	fp, #1
    3fbe:	e7c7      	b.n	3f50 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    3fc0:	4689      	mov	r9, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3fc2:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3fc4:	f892 e000 	ldrb.w	lr, [r2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3fc8:	7874      	ldrb	r4, [r6, #1]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3fca:	7857      	ldrb	r7, [r2, #1]
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    3fcc:	f896 c002 	ldrb.w	ip, [r6, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    3fd0:	f892 8002 	ldrb.w	r8, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3fd4:	7015      	strb	r5, [r2, #0]
    3fd6:	4619      	mov	r1, r3
    3fd8:	f886 e000 	strb.w	lr, [r6]
    3fdc:	464b      	mov	r3, r9
        g = rhs.g;
    3fde:	7054      	strb	r4, [r2, #1]
    3fe0:	7077      	strb	r7, [r6, #1]
        b = rhs.b;
    3fe2:	f882 c002 	strb.w	ip, [r2, #2]
    3fe6:	f886 8002 	strb.w	r8, [r6, #2]
    3fea:	e79f      	b.n	3f2c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1c>

00003fec <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    3fec:	b309      	cbz	r1, 4032 <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    3fee:	b430      	push	{r4, r5}
    3ff0:	1e4d      	subs	r5, r1, #1
    3ff2:	b2ad      	uxth	r5, r5
    3ff4:	43d2      	mvns	r2, r2
    3ff6:	3501      	adds	r5, #1
    3ff8:	b2d2      	uxtb	r2, r2
    3ffa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3ffe:	4405      	add	r5, r0
    4000:	3201      	adds	r2, #1
    4002:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4004:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    4008:	fb02 f303 	mul.w	r3, r2, r3
    400c:	121b      	asrs	r3, r3, #8
    400e:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4012:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4014:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4016:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    401a:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    401e:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4020:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4022:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4024:	7083      	strb	r3, [r0, #2]
    4026:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    4028:	4285      	cmp	r5, r0
    402a:	f104 0403 	add.w	r4, r4, #3
    402e:	d1e9      	bne.n	4004 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    4030:	bc30      	pop	{r4, r5}
    4032:	4770      	bx	lr

00004034 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    4034:	f7ff bfda 	b.w	3fec <fade_raw(CRGB*, unsigned short, unsigned char)>

00004038 <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    4038:	b322      	cbz	r2, 4084 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    403a:	2aff      	cmp	r2, #255	; 0xff
    403c:	d023      	beq.n	4086 <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    403e:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    4040:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    4042:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    4044:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    4046:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    4048:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    404a:	43d2      	mvns	r2, r2
    404c:	fb06 7605 	mla	r6, r6, r5, r7
    4050:	b2d2      	uxtb	r2, r2
    4052:	fb04 6402 	mla	r4, r4, r2, r6
    4056:	f3c4 2407 	ubfx	r4, r4, #8, #8
    405a:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    405c:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    405e:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    4060:	191f      	adds	r7, r3, r4
    4062:	fb04 7405 	mla	r4, r4, r5, r7
    4066:	fb03 4302 	mla	r3, r3, r2, r4
    406a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    406e:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    4070:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    4072:	18f1      	adds	r1, r6, r3
    4074:	fb03 1505 	mla	r5, r3, r5, r1
    4078:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    407c:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    407e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    4082:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    4084:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4086:	780b      	ldrb	r3, [r1, #0]
    4088:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    408a:	784b      	ldrb	r3, [r1, #1]
    408c:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    408e:	788b      	ldrb	r3, [r1, #2]
    4090:	7083      	strb	r3, [r0, #2]
    4092:	4770      	bx	lr

00004094 <HeatColor(unsigned char)>:
///  This makes for better 'video'/LED dimming, at the cost of
///  several additional cycles.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    4094:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    4098:	ebc1 1383 	rsb	r3, r1, r3, lsl #6
    409c:	3100      	adds	r1, #0
    409e:	bf18      	it	ne
    40a0:	2101      	movne	r1, #1
    40a2:	eb01 2123 	add.w	r1, r1, r3, asr #8
    40a6:	b2c9      	uxtb	r1, r1
    40a8:	008b      	lsls	r3, r1, #2
    // zero to 255 in each 'third' of the scale.
    uint8_t heatramp = t192 & 0x3F; // 0..63
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
    40aa:	060a      	lsls	r2, r1, #24
    40ac:	b2db      	uxtb	r3, r3
    40ae:	d40e      	bmi.n	40ce <HeatColor(unsigned char)+0x3a>
        // we're in the hottest third
        heatcolor.r = 255; // full red
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
    40b0:	f001 0140 	and.w	r1, r1, #64	; 0x40
    40b4:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    40b8:	b919      	cbnz	r1, 40c2 <HeatColor(unsigned char)+0x2e>
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
    40ba:	7003      	strb	r3, [r0, #0]
        heatcolor.g = 0; // no green
    40bc:	7042      	strb	r2, [r0, #1]
        heatcolor.b = 0; // no blue
    40be:	7082      	strb	r2, [r0, #2]
    }

    return heatcolor;
}
    40c0:	4770      	bx	lr
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    40c2:	21ff      	movs	r1, #255	; 0xff
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    40c4:	2200      	movs	r2, #0
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
        heatcolor.g = heatramp; // ramp up green
    40c6:	7043      	strb	r3, [r0, #1]
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    40c8:	7001      	strb	r1, [r0, #0]
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    40ca:	7082      	strb	r2, [r0, #2]
    40cc:	4770      	bx	lr
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    40ce:	22ff      	movs	r2, #255	; 0xff
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue
    40d0:	7083      	strb	r3, [r0, #2]
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    40d2:	7002      	strb	r2, [r0, #0]
        heatcolor.g = 255; // full green
    40d4:	7042      	strb	r2, [r0, #1]
    40d6:	4770      	bx	lr

000040d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    40d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    40dc:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    40de:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    40e2:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    40e6:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    40e8:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    40ec:	d000      	beq.n	40f0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    40ee:	b9e6      	cbnz	r6, 412a <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    40f0:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    40f2:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    40f4:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    40f6:	2bff      	cmp	r3, #255	; 0xff
    40f8:	d012      	beq.n	4120 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    40fa:	2b00      	cmp	r3, #0
    40fc:	d043      	beq.n	4186 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    40fe:	3301      	adds	r3, #1
    4100:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    4102:	b11c      	cbz	r4, 410c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    4104:	fb03 4404 	mla	r4, r3, r4, r4
    4108:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    410c:	b119      	cbz	r1, 4116 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    410e:	fb03 1101 	mla	r1, r3, r1, r1
    4112:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    4116:	b11a      	cbz	r2, 4120 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    4118:	fb03 2202 	mla	r2, r3, r2, r2
    411c:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    4120:	7004      	strb	r4, [r0, #0]
    4122:	7041      	strb	r1, [r0, #1]
    4124:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    4126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    412a:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    412c:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    412e:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    4132:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    4134:	d000      	beq.n	4138 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    4136:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    4138:	0112      	lsls	r2, r2, #4
    413a:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    413e:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    4140:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    4144:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    4148:	f891 8002 	ldrb.w	r8, [r1, #2]
    414c:	fb04 f606 	mul.w	r6, r4, r6
    4150:	1c51      	adds	r1, r2, #1
    4152:	fb04 f509 	mul.w	r5, r4, r9
    4156:	fb04 f407 	mul.w	r4, r4, r7
    415a:	f3c4 2407 	ubfx	r4, r4, #8, #8
    415e:	f3c6 2707 	ubfx	r7, r6, #8, #8
    4162:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    4166:	fb01 f60c 	mul.w	r6, r1, ip
    416a:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    416e:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    4172:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    4176:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    417a:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    417e:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    4180:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    4182:	b2d2      	uxtb	r2, r2
    4184:	e7b7      	b.n	40f6 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    4186:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    4188:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    418a:	461c      	mov	r4, r3
    418c:	7004      	strb	r4, [r0, #0]
    418e:	7041      	strb	r1, [r0, #1]
    4190:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    4192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4196:	bf00      	nop

00004198 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>:
}
#endif


void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)
{
    4198:	b5f0      	push	{r4, r5, r6, r7, lr}
    419a:	3901      	subs	r1, #1
    419c:	1e44      	subs	r4, r0, #1
    uint8_t* p1;
    uint8_t* p2;
    uint8_t  changes = 0;
    419e:	2500      	movs	r5, #0
    41a0:	302f      	adds	r0, #47	; 0x2f
    41a2:	e001      	b.n	41a8 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x10>

    p1 = (uint8_t*)current.entries;
    p2 = (uint8_t*)target.entries;

    const uint8_t totalChannels = sizeof(CRGBPalette16);
    for( uint8_t i = 0; i < totalChannels; i++) {
    41a4:	4284      	cmp	r4, r0
    41a6:	d01e      	beq.n	41e6 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4e>
        // if the values are equal, no changes are needed
        if( p1[i] == p2[i] ) { continue; }
    41a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    41ac:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    41b0:	42b3      	cmp	r3, r6
    41b2:	d0f7      	beq.n	41a4 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>

        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }
    41b4:	f103 0701 	add.w	r7, r3, #1
    41b8:	d204      	bcs.n	41c4 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x2c>
    41ba:	b2fb      	uxtb	r3, r7
    41bc:	7023      	strb	r3, [r4, #0]
    41be:	3501      	adds	r5, #1
    41c0:	780e      	ldrb	r6, [r1, #0]
    41c2:	b2ed      	uxtb	r5, r5

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    41c4:	1e5f      	subs	r7, r3, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    41c6:	429e      	cmp	r6, r3
            p1[i]--; changes++;
    41c8:	b2ff      	uxtb	r7, r7
    41ca:	f105 0e01 	add.w	lr, r5, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    41ce:	d208      	bcs.n	41e2 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4a>
            p1[i]--; changes++;
    41d0:	7027      	strb	r7, [r4, #0]
            if( p1[i] > p2[i] ) { p1[i]--; }
    41d2:	780e      	ldrb	r6, [r1, #0]
    41d4:	42be      	cmp	r6, r7
    41d6:	bf38      	it	cc
    41d8:	3b02      	subcc	r3, #2
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    41da:	fa5f f58e 	uxtb.w	r5, lr
            if( p1[i] > p2[i] ) { p1[i]--; }
    41de:	bf38      	it	cc
    41e0:	7023      	strbcc	r3, [r4, #0]
        }

        // if we've hit the maximum number of changes, exit
        if( changes >= maxChanges) { break; }
    41e2:	4295      	cmp	r5, r2
    41e4:	d3de      	bcc.n	41a4 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>
    41e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000041e8 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    41e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    41ea:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    41ec:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    41ee:	4604      	mov	r4, r0
    41f0:	bfcc      	ite	gt
    41f2:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    41f6:	2500      	movle	r5, #0
    41f8:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    41fa:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    41fc:	bfd8      	it	le
    41fe:	4616      	movle	r6, r2

	pLed->init();
    4200:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    4202:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    4204:	6823      	ldr	r3, [r4, #0]
    4206:	6062      	str	r2, [r4, #4]
    4208:	695b      	ldr	r3, [r3, #20]
    420a:	4a0a      	ldr	r2, [pc, #40]	; (4234 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    420c:	6166      	str	r6, [r4, #20]
    420e:	4293      	cmp	r3, r2
    4210:	d101      	bne.n	4216 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    4212:	4620      	mov	r0, r4
    4214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    4216:	4620      	mov	r0, r4
    4218:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    421a:	2800      	cmp	r0, #0
    421c:	d0f9      	beq.n	4212 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    421e:	4a06      	ldr	r2, [pc, #24]	; (4238 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    4220:	4b06      	ldr	r3, [pc, #24]	; (423c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    4222:	6851      	ldr	r1, [r2, #4]
    4224:	fb93 f0f0 	sdiv	r0, r3, r0
    4228:	4288      	cmp	r0, r1
    422a:	bf38      	it	cc
    422c:	4608      	movcc	r0, r1
    422e:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    4230:	4620      	mov	r0, r4
    4232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4234:	00000471 	.word	0x00000471
    4238:	1fff8ff0 	.word	0x1fff8ff0
    423c:	000f4240 	.word	0x000f4240

00004240 <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    4240:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    4242:	4c0f      	ldr	r4, [pc, #60]	; (4280 <CFastLED::countFPS(int)+0x40>)
    4244:	6822      	ldr	r2, [r4, #0]
    4246:	1c53      	adds	r3, r2, #1
    4248:	428a      	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    424a:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    424c:	6023      	str	r3, [r4, #0]
    424e:	db13      	blt.n	4278 <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4250:	4d0c      	ldr	r5, [pc, #48]	; (4284 <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    4252:	4a0d      	ldr	r2, [pc, #52]	; (4288 <CFastLED::countFPS(int)+0x48>)
    4254:	6829      	ldr	r1, [r5, #0]
    4256:	9101      	str	r1, [sp, #4]
	return ret;
    4258:	9901      	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    425a:	682d      	ldr	r5, [r5, #0]
    425c:	9500      	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    425e:	6816      	ldr	r6, [r2, #0]
	return ret;
    4260:	9d00      	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    4262:	6015      	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    4264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    br = 0;
    4268:	2500      	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    426a:	1b89      	subs	r1, r1, r6
    426c:	fb02 f303 	mul.w	r3, r2, r3
    br = 0;
    4270:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    4272:	fbb3 f3f1 	udiv	r3, r3, r1
    4276:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    4278:	b003      	add	sp, #12
    427a:	bc70      	pop	{r4, r5, r6}
    427c:	4770      	bx	lr
    427e:	bf00      	nop
    4280:	1fff9004 	.word	0x1fff9004
    4284:	1fff9068 	.word	0x1fff9068
    4288:	1fff900c 	.word	0x1fff900c

0000428c <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    428c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4290:	6843      	ldr	r3, [r0, #4]
    4292:	4c2d      	ldr	r4, [pc, #180]	; (4348 <CFastLED::show(unsigned char)+0xbc>)
    4294:	b083      	sub	sp, #12
    4296:	4606      	mov	r6, r0
    4298:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    429a:	2b00      	cmp	r3, #0
    429c:	d14b      	bne.n	4336 <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    429e:	f000 fd5b 	bl	4d58 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    42a2:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    42a4:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    42a6:	b11b      	cbz	r3, 42b0 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    42a8:	4648      	mov	r0, r9
    42aa:	68b1      	ldr	r1, [r6, #8]
    42ac:	4798      	blx	r3
    42ae:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    42b0:	4b26      	ldr	r3, [pc, #152]	; (434c <CFastLED::show(unsigned char)+0xc0>)
    42b2:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    42b4:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    42b6:	2c00      	cmp	r4, #0
    42b8:	d036      	beq.n	4328 <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    42ba:	8873      	ldrh	r3, [r6, #2]
    42bc:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    42be:	6861      	ldr	r1, [r4, #4]
    42c0:	6962      	ldr	r2, [r4, #20]
    42c2:	2b63      	cmp	r3, #99	; 0x63
    42c4:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    42c6:	bf98      	it	ls
    42c8:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    42ca:	f8d3 8004 	ldr.w	r8, [r3, #4]
    42ce:	f88d 5004 	strb.w	r5, [sp, #4]
    42d2:	f88d 5005 	strb.w	r5, [sp, #5]
    42d6:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    42da:	f1b9 0f00 	cmp.w	r9, #0
    42de:	d01c      	beq.n	431a <CFastLED::show(unsigned char)+0x8e>
    42e0:	f104 030b 	add.w	r3, r4, #11
    42e4:	f10d 0e04 	add.w	lr, sp, #4
    42e8:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    42ec:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    42f0:	f1bb 0f00 	cmp.w	fp, #0
    42f4:	d00d      	beq.n	4312 <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    42f6:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    42fa:	f10a 0001 	add.w	r0, sl, #1
    42fe:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    4302:	f1ba 0f00 	cmp.w	sl, #0
    4306:	d004      	beq.n	4312 <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    4308:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    430c:	0c00      	lsrs	r0, r0, #16
    430e:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    4312:	4563      	cmp	r3, ip
    4314:	f10e 0e01 	add.w	lr, lr, #1
    4318:	d1e8      	bne.n	42ec <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    431a:	4620      	mov	r0, r4
    431c:	ab01      	add	r3, sp, #4
    431e:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    4320:	74a7      	strb	r7, [r4, #18]
    4322:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    4324:	2c00      	cmp	r4, #0
    4326:	d1c8      	bne.n	42ba <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    4328:	4630      	mov	r0, r6
    432a:	2119      	movs	r1, #25
    432c:	f7ff ff88 	bl	4240 <CFastLED::countFPS(int)>
}
    4330:	b003      	add	sp, #12
    4332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    4336:	f000 fd0f 	bl	4d58 <micros>
    433a:	6822      	ldr	r2, [r4, #0]
    433c:	6873      	ldr	r3, [r6, #4]
    433e:	1a80      	subs	r0, r0, r2
    4340:	4298      	cmp	r0, r3
    4342:	d3aa      	bcc.n	429a <CFastLED::show(unsigned char)+0xe>
    4344:	e7ab      	b.n	429e <CFastLED::show(unsigned char)+0x12>
    4346:	bf00      	nop
    4348:	1fff9008 	.word	0x1fff9008
    434c:	1fff9000 	.word	0x1fff9000

00004350 <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    4350:	2000      	movs	r0, #0
    4352:	4770      	bx	lr

00004354 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    4354:	4b04      	ldr	r3, [pc, #16]	; (4368 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    4356:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    4358:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    435a:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    435e:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    4360:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    4362:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    4364:	60da      	str	r2, [r3, #12]
    4366:	4770      	bx	lr
    4368:	1fff8ff0 	.word	0x1fff8ff0

0000436c <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    436c:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    436e:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    4370:	7846      	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    4372:	7882      	ldrb	r2, [r0, #2]
    4374:	00e0      	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    4376:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    437a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    437e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    4382:	4403      	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    4384:	0625      	lsls	r5, r4, #24
    4386:	f3c3 2307 	ubfx	r3, r3, #8, #8
    438a:	d45f      	bmi.n	444c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    438c:	f004 0540 	and.w	r5, r4, #64	; 0x40
    4390:	f005 07ff 	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    4394:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    4398:	2d00      	cmp	r5, #0
    439a:	d146      	bne.n	442a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    439c:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    43a0:	2c00      	cmp	r4, #0
    43a2:	d06c      	beq.n	447e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    43a4:	3355      	adds	r3, #85	; 0x55
    43a6:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    43a8:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    43aa:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    43ac:	2eff      	cmp	r6, #255	; 0xff
    43ae:	d01c      	beq.n	43ea <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    43b0:	2e00      	cmp	r6, #0
    43b2:	d079      	beq.n	44a8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    43b4:	b11c      	cbz	r4, 43be <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    43b6:	fb06 4404 	mla	r4, r6, r4, r4
    43ba:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    43be:	b11d      	cbz	r5, 43c8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    43c0:	fb06 5505 	mla	r5, r6, r5, r5
    43c4:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    43c8:	b11b      	cbz	r3, 43d2 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    43ca:	fb06 3303 	mla	r3, r6, r3, r3
    43ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    43d2:	43f0      	mvns	r0, r6
    43d4:	b2c0      	uxtb	r0, r0
    43d6:	fb00 0000 	mla	r0, r0, r0, r0
    43da:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    43de:	4404      	add	r4, r0
            g += brightness_floor;
    43e0:	4405      	add	r5, r0
            b += brightness_floor;
    43e2:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    43e4:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    43e6:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    43e8:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    43ea:	2aff      	cmp	r2, #255	; 0xff
    43ec:	d018      	beq.n	4420 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    43ee:	fb12 f002 	smulbb	r0, r2, r2
    43f2:	3200      	adds	r2, #0
    43f4:	bf18      	it	ne
    43f6:	2201      	movne	r2, #1
    43f8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    43fc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    4400:	d056      	beq.n	44b0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    4402:	b11c      	cbz	r4, 440c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    4404:	fb02 4404 	mla	r4, r2, r4, r4
    4408:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    440c:	b11d      	cbz	r5, 4416 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    440e:	fb02 5505 	mla	r5, r2, r5, r5
    4412:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    4416:	b11b      	cbz	r3, 4420 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    4418:	fb02 3303 	mla	r3, r2, r3, r3
    441c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    4420:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    4422:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    4424:	708b      	strb	r3, [r1, #2]
}
    4426:	bcf0      	pop	{r4, r5, r6, r7}
    4428:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    442a:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    442e:	bb5c      	cbnz	r4, 4488 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    4430:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    4434:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    4438:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    443c:	1204      	asrs	r4, r0, #8
                    g = K170 + third;
    443e:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    4440:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    4444:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    4446:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    4448:	463b      	mov	r3, r7
    444a:	e7af      	b.n	43ac <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    444c:	f004 0740 	and.w	r7, r4, #64	; 0x40
    4450:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    4454:	b9e7      	cbnz	r7, 4490 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    4456:	f004 0720 	and.w	r7, r4, #32
    445a:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    445e:	2f00      	cmp	r7, #0
    4460:	d136      	bne.n	44d0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    4462:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    4466:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    446a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    446e:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    4472:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    4476:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    4478:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    447a:	b2c3      	uxtb	r3, r0
    447c:	e796      	b.n	43ac <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    447e:	43dc      	mvns	r4, r3
    4480:	b2e4      	uxtb	r4, r4
                g = third;
    4482:	461d      	mov	r5, r3
                b = 0;
    4484:	4603      	mov	r3, r0
    4486:	e791      	b.n	43ac <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    4488:	2400      	movs	r4, #0
                g = K255 - third;
    448a:	43dd      	mvns	r5, r3
    448c:	b2ed      	uxtb	r5, r5
    448e:	e78d      	b.n	43ac <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    4490:	f004 0420 	and.w	r4, r4, #32
    4494:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    4498:	b994      	cbnz	r4, 44c0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    449a:	f103 0455 	add.w	r4, r3, #85	; 0x55
    449e:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    44a0:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    44a4:	b2db      	uxtb	r3, r3
    44a6:	e781      	b.n	43ac <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    44a8:	23ff      	movs	r3, #255	; 0xff
    44aa:	461d      	mov	r5, r3
    44ac:	461c      	mov	r4, r3
    44ae:	e79c      	b.n	43ea <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    44b0:	4615      	mov	r5, r2
    44b2:	4614      	mov	r4, r2
    44b4:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    44b6:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    44b8:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    44ba:	708b      	strb	r3, [r1, #2]
}
    44bc:	bcf0      	pop	{r4, r5, r6, r7}
    44be:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    44c0:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
    44c4:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    44c6:	2500      	movs	r5, #0
                b = K85 - third;
    44c8:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    44cc:	b2db      	uxtb	r3, r3
    44ce:	e76d      	b.n	43ac <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    44d0:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    44d2:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    44d4:	b2c3      	uxtb	r3, r0
    44d6:	e769      	b.n	43ac <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

000044d8 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    44d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    44da:	b361      	cbz	r1, 4536 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x5e>
    44dc:	f101 3eff 	add.w	lr, r1, #4294967295
    44e0:	fa1f fe8e 	uxth.w	lr, lr
    44e4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    44e8:	2200      	movs	r2, #0
    44ea:	f10e 0e06 	add.w	lr, lr, #6
    44ee:	4486      	add	lr, r0
    44f0:	1cc3      	adds	r3, r0, #3
    44f2:	4615      	mov	r5, r2
    44f4:	4614      	mov	r4, r2
        red32   += *p++;
    44f6:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        green32 += *p++;
    44fa:	f813 0c02 	ldrb.w	r0, [r3, #-2]
        blue32  += *p++;
    44fe:	f813 6c01 	ldrb.w	r6, [r3, #-1]
    4502:	3303      	adds	r3, #3
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    4504:	4573      	cmp	r3, lr
        red32   += *p++;
    4506:	443c      	add	r4, r7
        green32 += *p++;
    4508:	4405      	add	r5, r0
        blue32  += *p++;
    450a:	4432      	add	r2, r6
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    450c:	d1f3      	bne.n	44f6 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x1e>
    450e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    4512:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4516:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    451a:	f3c4 1317 	ubfx	r3, r4, #4, #24
    451e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    4522:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    4526:	0a12      	lsrs	r2, r2, #8
    4528:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    452c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4530:	1910      	adds	r0, r2, r4
}
    4532:	4408      	add	r0, r1
    4534:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    4536:	460c      	mov	r4, r1
    4538:	460a      	mov	r2, r1
    453a:	e7f7      	b.n	452c <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x54>

0000453c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    453c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    4540:	4b25      	ldr	r3, [pc, #148]	; (45d8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x9c>)
    4542:	681c      	ldr	r4, [r3, #0]
    4544:	b085      	sub	sp, #20
    4546:	4607      	mov	r7, r0
    4548:	4688      	mov	r8, r1
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    454a:	b19c      	cbz	r4, 4574 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x38>
    454c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 45e4 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>
    4550:	257d      	movs	r5, #125	; 0x7d
    4552:	e007      	b.n	4564 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    4554:	6960      	ldr	r0, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    4556:	b281      	uxth	r1, r0
    4558:	4630      	mov	r0, r6
    455a:	f7ff ffbd 	bl	44d8 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    455e:	68a4      	ldr	r4, [r4, #8]
    4560:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    4562:	b144      	cbz	r4, 4576 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    4564:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    4568:	691b      	ldr	r3, [r3, #16]
    456a:	454b      	cmp	r3, r9
    456c:	d0f2      	beq.n	4554 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    456e:	4620      	mov	r0, r4
    4570:	4798      	blx	r3
    4572:	e7f0      	b.n	4556 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;
    4574:	257d      	movs	r5, #125	; 0x7d
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    4576:	fb05 f507 	mul.w	r5, r5, r7
    457a:	0a2d      	lsrs	r5, r5, #8
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    457c:	4b17      	ldr	r3, [pc, #92]	; (45dc <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    457e:	4545      	cmp	r5, r8
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    4580:	781b      	ldrb	r3, [r3, #0]
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    4582:	d210      	bcs.n	45a6 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x6a>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    4584:	b323      	cbz	r3, 45d0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    4586:	4a16      	ldr	r2, [pc, #88]	; (45e0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    4588:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    458a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    458e:	f88d 100c 	strb.w	r1, [sp, #12]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    4592:	f89d 100c 	ldrb.w	r1, [sp, #12]
    4596:	7813      	ldrb	r3, [r2, #0]
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    4598:	4638      	mov	r0, r7
    459a:	ea23 0301 	bic.w	r3, r3, r1
    459e:	7013      	strb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    45a0:	b005      	add	sp, #20
    45a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    45a6:	fb08 f707 	mul.w	r7, r8, r7
    45aa:	fbb7 f0f5 	udiv	r0, r7, r5
    45ae:	b2c7      	uxtb	r7, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    45b0:	b173      	cbz	r3, 45d0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    45b2:	4a0b      	ldr	r2, [pc, #44]	; (45e0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    45b4:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    45b6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    45ba:	f88d 100c 	strb.w	r1, [sp, #12]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    45be:	f89d 100c 	ldrb.w	r1, [sp, #12]
    45c2:	7813      	ldrb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    45c4:	4638      	mov	r0, r7
    45c6:	430b      	orrs	r3, r1
    45c8:	7013      	strb	r3, [r2, #0]
}
    45ca:	b005      	add	sp, #20
    45cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    45d0:	4638      	mov	r0, r7
}
    45d2:	b005      	add	sp, #20
    45d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    45d8:	1fff9000 	.word	0x1fff9000
    45dc:	1fff9014 	.word	0x1fff9014
    45e0:	00008ac0 	.word	0x00008ac0
    45e4:	0000046d 	.word	0x0000046d

000045e8 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>:
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
    45e8:	4b03      	ldr	r3, [pc, #12]	; (45f8 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x10>)
    45ea:	4a04      	ldr	r2, [pc, #16]	; (45fc <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x14>)
    45ec:	60da      	str	r2, [r3, #12]
    45ee:	fb01 f100 	mul.w	r1, r1, r0
    45f2:	6099      	str	r1, [r3, #8]
    45f4:	4770      	bx	lr
    45f6:	bf00      	nop
    45f8:	1fff8ff0 	.word	0x1fff8ff0
    45fc:	0000453d 	.word	0x0000453d

00004600 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4600:	4807      	ldr	r0, [pc, #28]	; (4620 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    4602:	b082      	sub	sp, #8
    4604:	6803      	ldr	r3, [r0, #0]
    4606:	9301      	str	r3, [sp, #4]
	return ret;
    4608:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    460a:	4411      	add	r1, r2
    460c:	e001      	b.n	4612 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    460e:	4299      	cmp	r1, r3
    4610:	d304      	bcc.n	461c <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4612:	6803      	ldr	r3, [r0, #0]
    4614:	9300      	str	r3, [sp, #0]
	return ret;
    4616:	9b00      	ldr	r3, [sp, #0]
    4618:	429a      	cmp	r2, r3
    461a:	d9f8      	bls.n	460e <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    461c:	b002      	add	sp, #8
    461e:	4770      	bx	lr
    4620:	1fff9068 	.word	0x1fff9068

00004624 <VisualMicroDebug::DBG_Millis()>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4624:	4b03      	ldr	r3, [pc, #12]	; (4634 <VisualMicroDebug::DBG_Millis()+0x10>)
{
	return RTT::millis();
}
#else
unsigned long VisualMicroDebug::DBG_Millis()
{
    4626:	b082      	sub	sp, #8
    4628:	681b      	ldr	r3, [r3, #0]
    462a:	9301      	str	r3, [sp, #4]
	return ret;
    462c:	9801      	ldr	r0, [sp, #4]
	return millis();
}
    462e:	b002      	add	sp, #8
    4630:	4770      	bx	lr
    4632:	bf00      	nop
    4634:	1fff9068 	.word	0x1fff9068

00004638 <VisualMicroDebug::OnBreakPointBegin(unsigned long)>:
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
    4638:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    463a:	4b07      	ldr	r3, [pc, #28]	; (4658 <VisualMicroDebug::OnBreakPointBegin(unsigned long)+0x20>)
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
	BreakPrevMillis = BreakStartMillis;
    463c:	6882      	ldr	r2, [r0, #8]
    463e:	681b      	ldr	r3, [r3, #0]

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
    4640:	6101      	str	r1, [r0, #16]
{

}

void VisualMicroDebug::OnBreakPointBegin(unsigned long iInBreakMsgRepeatMS)
{
    4642:	b083      	sub	sp, #12
	InBreakMsgRepeatMS = iInBreakMsgRepeatMS;
	InBreakMsgSent = 0L;
    4644:	2400      	movs	r4, #0
    4646:	9301      	str	r3, [sp, #4]
	return ret;
    4648:	9b01      	ldr	r3, [sp, #4]
    464a:	6144      	str	r4, [r0, #20]
	BreakPrevMillis = BreakStartMillis;
    464c:	60c2      	str	r2, [r0, #12]
	BreakStartMillis = DBG_Millis();
    464e:	6083      	str	r3, [r0, #8]
}
    4650:	b003      	add	sp, #12
    4652:	bc10      	pop	{r4}
    4654:	4770      	bx	lr
    4656:	bf00      	nop
    4658:	1fff9068 	.word	0x1fff9068

0000465c <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)>:

void VisualMicroDebug::OnBreakPointPrintBegin(uint8_t breakpoint_id)
{
    465c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4660:	4b1b      	ldr	r3, [pc, #108]	; (46d0 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x74>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4662:	4c1c      	ldr	r4, [pc, #112]	; (46d4 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x78>)
    4664:	681b      	ldr	r3, [r3, #0]
    4666:	4e1c      	ldr	r6, [pc, #112]	; (46d8 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x7c>)
    4668:	b082      	sub	sp, #8
    466a:	4605      	mov	r5, r0
    466c:	9301      	str	r3, [sp, #4]
    466e:	4688      	mov	r8, r1
    4670:	481a      	ldr	r0, [pc, #104]	; (46dc <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x80>)
	return ret;
    4672:	9f01      	ldr	r7, [sp, #4]
    4674:	2106      	movs	r1, #6
    4676:	f001 fba9 	bl	5dcc <usb_serial_write>
    467a:	4641      	mov	r1, r8
    467c:	2300      	movs	r3, #0
    467e:	220a      	movs	r2, #10
    4680:	4620      	mov	r0, r4
    4682:	f001 fdb7 	bl	61f4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4686:	2103      	movs	r1, #3
    4688:	4815      	ldr	r0, [pc, #84]	; (46e0 <VisualMicroDebug::OnBreakPointPrintBegin(unsigned char)+0x84>)
    468a:	f001 fb9f 	bl	5dcc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    468e:	4639      	mov	r1, r7
    4690:	2300      	movs	r3, #0
    4692:	220a      	movs	r2, #10
    4694:	4620      	mov	r0, r4
    4696:	f001 fdad 	bl	61f4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    469a:	4630      	mov	r0, r6
    469c:	2101      	movs	r1, #1
    469e:	f001 fb95 	bl	5dcc <usb_serial_write>
    46a2:	68a9      	ldr	r1, [r5, #8]
    46a4:	2300      	movs	r3, #0
    46a6:	1a79      	subs	r1, r7, r1
    46a8:	220a      	movs	r2, #10
    46aa:	4620      	mov	r0, r4
    46ac:	f001 fda2 	bl	61f4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    46b0:	4630      	mov	r0, r6
    46b2:	2101      	movs	r1, #1
    46b4:	f001 fb8a 	bl	5dcc <usb_serial_write>
    46b8:	68eb      	ldr	r3, [r5, #12]
    46ba:	68a9      	ldr	r1, [r5, #8]
    46bc:	4620      	mov	r0, r4
    46be:	1ac9      	subs	r1, r1, r3
    46c0:	220a      	movs	r2, #10
    46c2:	2300      	movs	r3, #0
    46c4:	f001 fd96 	bl	61f4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	VM_DEBUGGER_SOFT_TRANSPORT.print((m - BreakStartMillis));
	VM_DEBUGGER_SOFT_TRANSPORT.print(":");
	//millis since last bp was hit
	VM_DEBUGGER_SOFT_TRANSPORT.print((BreakStartMillis - BreakPrevMillis));
#endif
}
    46c8:	b002      	add	sp, #8
    46ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    46ce:	bf00      	nop
    46d0:	1fff9068 	.word	0x1fff9068
    46d4:	1fff8774 	.word	0x1fff8774
    46d8:	00008a30 	.word	0x00008a30
    46dc:	00008a24 	.word	0x00008a24
    46e0:	00008a2c 	.word	0x00008a2c

000046e4 <VisualMicroDebug::OnBreakPointPrintEnd()>:
void VisualMicroDebug::OnBreakPointPrintEnd()
{
    46e4:	b508      	push	{r3, lr}
    46e6:	2106      	movs	r1, #6
    46e8:	4803      	ldr	r0, [pc, #12]	; (46f8 <VisualMicroDebug::OnBreakPointPrintEnd()+0x14>)
    46ea:	f001 fb6f 	bl	5dcc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    46ee:	4803      	ldr	r0, [pc, #12]	; (46fc <VisualMicroDebug::OnBreakPointPrintEnd()+0x18>)
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_SOFTWARESERIAL)
	transport->println("_VMDPE");
#else
	VM_DEBUGGER_SOFT_TRANSPORT.println("_VMDPE");
#endif
}
    46f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    46f4:	f001 bd6e 	b.w	61d4 <Print::println()>
    46f8:	00008a34 	.word	0x00008a34
    46fc:	1fff8774 	.word	0x1fff8774

00004700 <VisualMicroDebug::OnBreakPointEnd()>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4700:	4b03      	ldr	r3, [pc, #12]	; (4710 <VisualMicroDebug::OnBreakPointEnd()+0x10>)

void VisualMicroDebug::OnBreakPointEnd()
{
    4702:	b082      	sub	sp, #8
    4704:	681b      	ldr	r3, [r3, #0]
    4706:	9301      	str	r3, [sp, #4]
	return ret;
    4708:	9b01      	ldr	r3, [sp, #4]
	//update millis to now. ensure time taken for debug doesn't affect comparison of the time to the next point
	BreakStartMillis = DBG_Millis();
    470a:	6083      	str	r3, [r0, #8]
}
    470c:	b002      	add	sp, #8
    470e:	4770      	bx	lr
    4710:	1fff9068 	.word	0x1fff9068

00004714 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    4714:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4716:	4a10      	ldr	r2, [pc, #64]	; (4758 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    4718:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    471a:	b9a1      	cbnz	r1, 4746 <VisualMicroDebug::outPacketStart(bool)+0x32>
    471c:	6813      	ldr	r3, [r2, #0]
    471e:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    4720:	6841      	ldr	r1, [r0, #4]
	return ret;
    4722:	9b00      	ldr	r3, [sp, #0]
    4724:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    4726:	2931      	cmp	r1, #49	; 0x31
    4728:	d80d      	bhi.n	4746 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    472a:	6813      	ldr	r3, [r2, #0]
    472c:	9302      	str	r3, [sp, #8]
	return ret;
    472e:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    4730:	f104 0332 	add.w	r3, r4, #50	; 0x32
    4734:	1a59      	subs	r1, r3, r1
    4736:	e001      	b.n	473c <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    4738:	4299      	cmp	r1, r3
    473a:	d304      	bcc.n	4746 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    473c:	6813      	ldr	r3, [r2, #0]
    473e:	9301      	str	r3, [sp, #4]
	return ret;
    4740:	9b01      	ldr	r3, [sp, #4]
    4742:	429c      	cmp	r4, r3
    4744:	d9f8      	bls.n	4738 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4746:	6813      	ldr	r3, [r2, #0]
    4748:	9303      	str	r3, [sp, #12]
	return ret;
    474a:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    474c:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    474e:	2001      	movs	r0, #1
    4750:	b005      	add	sp, #20
    4752:	bc10      	pop	{r4}
    4754:	4770      	bx	lr
    4756:	bf00      	nop
    4758:	1fff9068 	.word	0x1fff9068

0000475c <VisualMicroDebug::outPacketEnd()>:
    475c:	4770      	bx	lr
    475e:	bf00      	nop

00004760 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    4760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4764:	f000 bb1a 	b.w	4d9c <delay>

00004768 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    4768:	2300      	movs	r3, #0
    476a:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    476c:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    476e:	b171      	cbz	r1, 478e <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4770:	4807      	ldr	r0, [pc, #28]	; (4790 <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    4772:	b082      	sub	sp, #8
    4774:	6803      	ldr	r3, [r0, #0]
    4776:	9301      	str	r3, [sp, #4]
	return ret;
    4778:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    477a:	4411      	add	r1, r2
    477c:	e001      	b.n	4782 <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    477e:	4299      	cmp	r1, r3
    4780:	d304      	bcc.n	478c <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4782:	6803      	ldr	r3, [r0, #0]
    4784:	9300      	str	r3, [sp, #0]
	return ret;
    4786:	9b00      	ldr	r3, [sp, #0]
    4788:	429a      	cmp	r2, r3
    478a:	d9f8      	bls.n	477e <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    478c:	b002      	add	sp, #8
    478e:	4770      	bx	lr
    4790:	1fff9068 	.word	0x1fff9068

00004794 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    4794:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4796:	4c13      	ldr	r4, [pc, #76]	; (47e4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    4798:	b085      	sub	sp, #20
    479a:	6823      	ldr	r3, [r4, #0]
    479c:	9303      	str	r3, [sp, #12]
	return ret;
    479e:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    47a0:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    47a2:	460d      	mov	r5, r1
    47a4:	4810      	ldr	r0, [pc, #64]	; (47e8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    47a6:	2106      	movs	r1, #6
    47a8:	f001 fb10 	bl	5dcc <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    47ac:	2300      	movs	r3, #0
    47ae:	220a      	movs	r2, #10
    47b0:	4629      	mov	r1, r5
    47b2:	480e      	ldr	r0, [pc, #56]	; (47ec <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    47b4:	f001 fd1e 	bl	61f4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    47b8:	2106      	movs	r1, #6
    47ba:	480d      	ldr	r0, [pc, #52]	; (47f0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    47bc:	f001 fb06 	bl	5dcc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    47c0:	480a      	ldr	r0, [pc, #40]	; (47ec <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    47c2:	f001 fd07 	bl	61d4 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    47c6:	6823      	ldr	r3, [r4, #0]
    47c8:	9302      	str	r3, [sp, #8]
	return ret;
    47ca:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    47cc:	f102 0132 	add.w	r1, r2, #50	; 0x32
    47d0:	e001      	b.n	47d6 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    47d2:	4299      	cmp	r1, r3
    47d4:	d304      	bcc.n	47e0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    47d6:	6823      	ldr	r3, [r4, #0]
    47d8:	9301      	str	r3, [sp, #4]
	return ret;
    47da:	9b01      	ldr	r3, [sp, #4]
    47dc:	429a      	cmp	r2, r3
    47de:	d9f8      	bls.n	47d2 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    47e0:	b005      	add	sp, #20
    47e2:	bd30      	pop	{r4, r5, pc}
    47e4:	1fff9068 	.word	0x1fff9068
    47e8:	00008a3c 	.word	0x00008a3c
    47ec:	1fff8774 	.word	0x1fff8774
    47f0:	00008a44 	.word	0x00008a44

000047f4 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    47f4:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    47f6:	7e03      	ldrb	r3, [r0, #24]
    47f8:	b90b      	cbnz	r3, 47fe <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    47fa:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    47fc:	bd38      	pop	{r3, r4, r5, pc}
    47fe:	460d      	mov	r5, r1
    4800:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4802:	f001 fab9 	bl	5d78 <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    4806:	f010 0fff 	tst.w	r0, #255	; 0xff
    480a:	d101      	bne.n	4810 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    480c:	2065      	movs	r0, #101	; 0x65
    480e:	bd38      	pop	{r3, r4, r5, pc}
    4810:	f001 fab2 	bl	5d78 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    4814:	f010 0fff 	tst.w	r0, #255	; 0xff
    4818:	d0f8      	beq.n	480c <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    481a:	f001 fa71 	bl	5d00 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    481e:	b2c0      	uxtb	r0, r0
    4820:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    4824:	2b1e      	cmp	r3, #30
    4826:	d8f3      	bhi.n	4810 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    4828:	a201      	add	r2, pc, #4	; (adr r2, 4830 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    482a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    482e:	bf00      	nop
    4830:	000048b9 	.word	0x000048b9
    4834:	00004811 	.word	0x00004811
    4838:	00004811 	.word	0x00004811
    483c:	00004811 	.word	0x00004811
    4840:	00004811 	.word	0x00004811
    4844:	00004811 	.word	0x00004811
    4848:	00004811 	.word	0x00004811
    484c:	00004811 	.word	0x00004811
    4850:	00004811 	.word	0x00004811
    4854:	00004811 	.word	0x00004811
    4858:	00004811 	.word	0x00004811
    485c:	000048ad 	.word	0x000048ad
    4860:	00004811 	.word	0x00004811
    4864:	00004811 	.word	0x00004811
    4868:	00004811 	.word	0x00004811
    486c:	00004811 	.word	0x00004811
    4870:	000047fb 	.word	0x000047fb
    4874:	00004811 	.word	0x00004811
    4878:	00004811 	.word	0x00004811
    487c:	00004811 	.word	0x00004811
    4880:	00004811 	.word	0x00004811
    4884:	00004811 	.word	0x00004811
    4888:	00004811 	.word	0x00004811
    488c:	00004811 	.word	0x00004811
    4890:	00004811 	.word	0x00004811
    4894:	000047fb 	.word	0x000047fb
    4898:	00004811 	.word	0x00004811
    489c:	00004811 	.word	0x00004811
    48a0:	00004811 	.word	0x00004811
    48a4:	00004811 	.word	0x00004811
    48a8:	000047fd 	.word	0x000047fd
		{

		case 'c':
			sendContinuedACK(breakPointId);
    48ac:	4620      	mov	r0, r4
    48ae:	4629      	mov	r1, r5
    48b0:	f7ff ff70 	bl	4794 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    48b4:	2063      	movs	r0, #99	; 0x63
    48b6:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    48b8:	2300      	movs	r3, #0
    48ba:	7623      	strb	r3, [r4, #24]
			return 'c';
    48bc:	2063      	movs	r0, #99	; 0x63
    48be:	bd38      	pop	{r3, r4, r5, pc}

000048c0 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    48c0:	b570      	push	{r4, r5, r6, lr}
    48c2:	4605      	mov	r5, r0
    48c4:	b082      	sub	sp, #8
    48c6:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    48c8:	b1c9      	cbz	r1, 48fe <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    48ca:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    48cc:	4c0d      	ldr	r4, [pc, #52]	; (4904 <VisualMicroDebug::start(bool, bool)+0x44>)
    48ce:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    48d0:	2100      	movs	r1, #0
    48d2:	4628      	mov	r0, r5
    48d4:	f7ff ff8e 	bl	47f4 <VisualMicroDebug::breakWait(unsigned char)>
    48d8:	2863      	cmp	r0, #99	; 0x63
    48da:	d010      	beq.n	48fe <VisualMicroDebug::start(bool, bool)+0x3e>
    48dc:	6823      	ldr	r3, [r4, #0]
    48de:	9301      	str	r3, [sp, #4]
	return ret;
    48e0:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    48e2:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    48e4:	6823      	ldr	r3, [r4, #0]
    48e6:	9300      	str	r3, [sp, #0]
	return ret;
    48e8:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    48ea:	429a      	cmp	r2, r3
    48ec:	d8f0      	bhi.n	48d0 <VisualMicroDebug::start(bool, bool)+0x10>
    48ee:	4299      	cmp	r1, r3
    48f0:	d2f8      	bcs.n	48e4 <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    48f2:	2100      	movs	r1, #0
    48f4:	4628      	mov	r0, r5
    48f6:	f7ff ff7d 	bl	47f4 <VisualMicroDebug::breakWait(unsigned char)>
    48fa:	2863      	cmp	r0, #99	; 0x63
    48fc:	d1ee      	bne.n	48dc <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    48fe:	762e      	strb	r6, [r5, #24]
#endif

}
    4900:	b002      	add	sp, #8
    4902:	bd70      	pop	{r4, r5, r6, pc}
    4904:	1fff9068 	.word	0x1fff9068

00004908 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    4908:	4b03      	ldr	r3, [pc, #12]	; (4918 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    490a:	2200      	movs	r2, #0
    490c:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    490e:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    4910:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    4912:	615a      	str	r2, [r3, #20]
    4914:	4770      	bx	lr
    4916:	bf00      	nop
    4918:	1fff9018 	.word	0x1fff9018

0000491c <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    491c:	4a37      	ldr	r2, [pc, #220]	; (49fc <wait_for_cal+0xe0>)
    491e:	4938      	ldr	r1, [pc, #224]	; (4a00 <wait_for_cal+0xe4>)
    4920:	6813      	ldr	r3, [r2, #0]
    4922:	061b      	lsls	r3, r3, #24
    4924:	d4fc      	bmi.n	4920 <wait_for_cal+0x4>
    4926:	680b      	ldr	r3, [r1, #0]
    4928:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    492c:	d1f8      	bne.n	4920 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    492e:	b672      	cpsid	i
	if (calibrating) {
    4930:	4934      	ldr	r1, [pc, #208]	; (4a04 <wait_for_cal+0xe8>)
    4932:	780a      	ldrb	r2, [r1, #0]
    4934:	2a00      	cmp	r2, #0
    4936:	d05f      	beq.n	49f8 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    4938:	4a33      	ldr	r2, [pc, #204]	; (4a08 <wait_for_cal+0xec>)
    493a:	4834      	ldr	r0, [pc, #208]	; (4a0c <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    493c:	b4f0      	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    493e:	4c34      	ldr	r4, [pc, #208]	; (4a10 <wait_for_cal+0xf4>)
    4940:	6817      	ldr	r7, [r2, #0]
    4942:	6806      	ldr	r6, [r0, #0]
    4944:	6825      	ldr	r5, [r4, #0]
    4946:	68d4      	ldr	r4, [r2, #12]
    4948:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    494a:	443e      	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    494c:	3214      	adds	r2, #20
    494e:	6800      	ldr	r0, [r0, #0]
    4950:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    4952:	4f30      	ldr	r7, [pc, #192]	; (4a14 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    4954:	4435      	add	r5, r6
    4956:	442c      	add	r4, r5
    4958:	4420      	add	r0, r4
    495a:	4402      	add	r2, r0
    495c:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    4960:	4e2d      	ldr	r6, [pc, #180]	; (4a18 <wait_for_cal+0xfc>)
    4962:	482e      	ldr	r0, [pc, #184]	; (4a1c <wait_for_cal+0x100>)
    4964:	4d2e      	ldr	r5, [pc, #184]	; (4a20 <wait_for_cal+0x104>)
    4966:	4c2f      	ldr	r4, [pc, #188]	; (4a24 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    4968:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    496c:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    496e:	6837      	ldr	r7, [r6, #0]
    4970:	6806      	ldr	r6, [r0, #0]
    4972:	682d      	ldr	r5, [r5, #0]
    4974:	4a2c      	ldr	r2, [pc, #176]	; (4a28 <wait_for_cal+0x10c>)
    4976:	6824      	ldr	r4, [r4, #0]
    4978:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    497a:	443e      	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    497c:	6800      	ldr	r0, [r0, #0]
    497e:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    4980:	4f2a      	ldr	r7, [pc, #168]	; (4a2c <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    4982:	4435      	add	r5, r6
    4984:	442c      	add	r4, r5
    4986:	4420      	add	r0, r4
    4988:	4402      	add	r2, r0
    498a:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    498e:	4e28      	ldr	r6, [pc, #160]	; (4a30 <wait_for_cal+0x114>)
    4990:	4828      	ldr	r0, [pc, #160]	; (4a34 <wait_for_cal+0x118>)
    4992:	4d29      	ldr	r5, [pc, #164]	; (4a38 <wait_for_cal+0x11c>)
    4994:	4c29      	ldr	r4, [pc, #164]	; (4a3c <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    4996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    499a:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    499c:	6837      	ldr	r7, [r6, #0]
    499e:	6806      	ldr	r6, [r0, #0]
    49a0:	682d      	ldr	r5, [r5, #0]
    49a2:	4a27      	ldr	r2, [pc, #156]	; (4a40 <wait_for_cal+0x124>)
    49a4:	6824      	ldr	r4, [r4, #0]
    49a6:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    49a8:	443e      	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    49aa:	6800      	ldr	r0, [r0, #0]
    49ac:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    49ae:	4f25      	ldr	r7, [pc, #148]	; (4a44 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    49b0:	4435      	add	r5, r6
    49b2:	442c      	add	r4, r5
    49b4:	4420      	add	r0, r4
    49b6:	4402      	add	r2, r0
    49b8:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    49bc:	4e22      	ldr	r6, [pc, #136]	; (4a48 <wait_for_cal+0x12c>)
    49be:	4823      	ldr	r0, [pc, #140]	; (4a4c <wait_for_cal+0x130>)
    49c0:	4d23      	ldr	r5, [pc, #140]	; (4a50 <wait_for_cal+0x134>)
    49c2:	4c24      	ldr	r4, [pc, #144]	; (4a54 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    49c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    49c8:	603a      	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    49ca:	6837      	ldr	r7, [r6, #0]
    49cc:	6806      	ldr	r6, [r0, #0]
    49ce:	682d      	ldr	r5, [r5, #0]
    49d0:	4a21      	ldr	r2, [pc, #132]	; (4a58 <wait_for_cal+0x13c>)
    49d2:	6824      	ldr	r4, [r4, #0]
    49d4:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    49d6:	443e      	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    49d8:	6800      	ldr	r0, [r0, #0]
    49da:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    49dc:	4435      	add	r5, r6
    49de:	442c      	add	r4, r5
    49e0:	4420      	add	r0, r4
    49e2:	4402      	add	r2, r0
    49e4:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    49e8:	481c      	ldr	r0, [pc, #112]	; (4a5c <wait_for_cal+0x140>)
    49ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    49ee:	6002      	str	r2, [r0, #0]
#endif
		calibrating = 0;
    49f0:	700b      	strb	r3, [r1, #0]
	}
	__enable_irq();
    49f2:	b662      	cpsie	i
}
    49f4:	bcf0      	pop	{r4, r5, r6, r7}
    49f6:	4770      	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    49f8:	b662      	cpsie	i
    49fa:	4770      	bx	lr
    49fc:	4003b024 	.word	0x4003b024
    4a00:	400bb024 	.word	0x400bb024
    4a04:	1fff9061 	.word	0x1fff9061
    4a08:	4003b038 	.word	0x4003b038
    4a0c:	4003b03c 	.word	0x4003b03c
    4a10:	4003b040 	.word	0x4003b040
    4a14:	4003b02c 	.word	0x4003b02c
    4a18:	4003b058 	.word	0x4003b058
    4a1c:	4003b05c 	.word	0x4003b05c
    4a20:	4003b060 	.word	0x4003b060
    4a24:	4003b064 	.word	0x4003b064
    4a28:	4003b06c 	.word	0x4003b06c
    4a2c:	4003b030 	.word	0x4003b030
    4a30:	400bb038 	.word	0x400bb038
    4a34:	400bb03c 	.word	0x400bb03c
    4a38:	400bb040 	.word	0x400bb040
    4a3c:	400bb044 	.word	0x400bb044
    4a40:	400bb04c 	.word	0x400bb04c
    4a44:	400bb02c 	.word	0x400bb02c
    4a48:	400bb058 	.word	0x400bb058
    4a4c:	400bb05c 	.word	0x400bb05c
    4a50:	400bb060 	.word	0x400bb060
    4a54:	400bb064 	.word	0x400bb064
    4a58:	400bb06c 	.word	0x400bb06c
    4a5c:	400bb030 	.word	0x400bb030

00004a60 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    4a60:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    4a62:	4829      	ldr	r0, [pc, #164]	; (4b08 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    4a64:	4a29      	ldr	r2, [pc, #164]	; (4b0c <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    4a66:	4b2a      	ldr	r3, [pc, #168]	; (4b10 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4a68:	4d2a      	ldr	r5, [pc, #168]	; (4b14 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    4a6a:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    4a6c:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    4a6e:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    4a70:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    4a72:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4a74:	4c28      	ldr	r4, [pc, #160]	; (4b18 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    4a76:	2b08      	cmp	r3, #8
    4a78:	d030      	beq.n	4adc <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    4a7a:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    4a7c:	4827      	ldr	r0, [pc, #156]	; (4b1c <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4a7e:	4928      	ldr	r1, [pc, #160]	; (4b20 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    4a80:	d037      	beq.n	4af2 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    4a82:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    4a84:	bf0c      	ite	eq
    4a86:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4a88:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    4a8a:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4a8c:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    4a8e:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4a90:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    4a92:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    4a94:	4b23      	ldr	r3, [pc, #140]	; (4b24 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4a96:	4924      	ldr	r1, [pc, #144]	; (4b28 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    4a98:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4a9a:	4a24      	ldr	r2, [pc, #144]	; (4b2c <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    4a9c:	b1bb      	cbz	r3, 4ace <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4a9e:	2301      	movs	r3, #1
    4aa0:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4aa2:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    4aa4:	4b22      	ldr	r3, [pc, #136]	; (4b30 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    4aa6:	4923      	ldr	r1, [pc, #140]	; (4b34 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    4aa8:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    4aaa:	4a23      	ldr	r2, [pc, #140]	; (4b38 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    4aac:	2b01      	cmp	r3, #1
    4aae:	d926      	bls.n	4afe <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    4ab0:	2b04      	cmp	r3, #4
    4ab2:	d90f      	bls.n	4ad4 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    4ab4:	2b08      	cmp	r3, #8
    4ab6:	d91e      	bls.n	4af6 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    4ab8:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    4aba:	bf94      	ite	ls
    4abc:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    4abe:	2387      	movhi	r3, #135	; 0x87
    4ac0:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    4ac2:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    4ac4:	4b1d      	ldr	r3, [pc, #116]	; (4b3c <analog_init+0xdc>)
    4ac6:	2201      	movs	r2, #1
    4ac8:	701a      	strb	r2, [r3, #0]
}
    4aca:	bc30      	pop	{r4, r5}
    4acc:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    4ace:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    4ad0:	6013      	str	r3, [r2, #0]
    4ad2:	e7e7      	b.n	4aa4 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    4ad4:	2384      	movs	r3, #132	; 0x84
    4ad6:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    4ad8:	6013      	str	r3, [r2, #0]
    4ada:	e7f3      	b.n	4ac4 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4adc:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4ae0:	490f      	ldr	r1, [pc, #60]	; (4b20 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4ae2:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4ae4:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4ae6:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    4ae8:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4aea:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    4aec:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4aee:	600b      	str	r3, [r1, #0]
    4af0:	e7d0      	b.n	4a94 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    4af2:	2239      	movs	r2, #57	; 0x39
    4af4:	e7f7      	b.n	4ae6 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    4af6:	2385      	movs	r3, #133	; 0x85
    4af8:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    4afa:	6013      	str	r3, [r2, #0]
    4afc:	e7e2      	b.n	4ac4 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    4afe:	2380      	movs	r3, #128	; 0x80
    4b00:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    4b02:	6013      	str	r3, [r2, #0]
    4b04:	e7de      	b.n	4ac4 <analog_init+0x64>
    4b06:	bf00      	nop
    4b08:	40074000 	.word	0x40074000
    4b0c:	40074001 	.word	0x40074001
    4b10:	1fff876e 	.word	0x1fff876e
    4b14:	4003b008 	.word	0x4003b008
    4b18:	4003b00c 	.word	0x4003b00c
    4b1c:	400bb008 	.word	0x400bb008
    4b20:	400bb00c 	.word	0x400bb00c
    4b24:	1fff9064 	.word	0x1fff9064
    4b28:	4003b020 	.word	0x4003b020
    4b2c:	400bb020 	.word	0x400bb020
    4b30:	1fff876f 	.word	0x1fff876f
    4b34:	4003b024 	.word	0x4003b024
    4b38:	400bb024 	.word	0x400bb024
    4b3c:	1fff9061 	.word	0x1fff9061

00004b40 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    4b40:	2828      	cmp	r0, #40	; 0x28
    4b42:	d82f      	bhi.n	4ba4 <analogRead+0x64>
	channel = pin2sc1a[pin];
    4b44:	4b33      	ldr	r3, [pc, #204]	; (4c14 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    4b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    4b4a:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    4b4c:	2eff      	cmp	r6, #255	; 0xff
    4b4e:	d02b      	beq.n	4ba8 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    4b50:	4b31      	ldr	r3, [pc, #196]	; (4c18 <analogRead+0xd8>)
    4b52:	781b      	ldrb	r3, [r3, #0]
    4b54:	2b00      	cmp	r3, #0
    4b56:	d12a      	bne.n	4bae <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    4b58:	0632      	lsls	r2, r6, #24
    4b5a:	d42c      	bmi.n	4bb6 <analogRead+0x76>
#endif

	__disable_irq();
    4b5c:	b672      	cpsid	i
    4b5e:	4d2f      	ldr	r5, [pc, #188]	; (4c1c <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    4b60:	4c2f      	ldr	r4, [pc, #188]	; (4c20 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    4b62:	462f      	mov	r7, r5
    4b64:	2301      	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    4b66:	6026      	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    4b68:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    4b6a:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    4b6c:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    4b6e:	6823      	ldr	r3, [r4, #0]
    4b70:	061b      	lsls	r3, r3, #24
    4b72:	d40c      	bmi.n	4b8e <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    4b74:	783b      	ldrb	r3, [r7, #0]
    4b76:	b91b      	cbnz	r3, 4b80 <analogRead+0x40>
    4b78:	e7f4      	b.n	4b64 <analogRead+0x24>
    4b7a:	782b      	ldrb	r3, [r5, #0]
    4b7c:	2b00      	cmp	r3, #0
    4b7e:	d0f1      	beq.n	4b64 <analogRead+0x24>
		__enable_irq();
    4b80:	b662      	cpsie	i
		yield();
    4b82:	f001 fb8d 	bl	62a0 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    4b86:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    4b88:	6823      	ldr	r3, [r4, #0]
    4b8a:	0618      	lsls	r0, r3, #24
    4b8c:	d5f5      	bpl.n	4b7a <analogRead+0x3a>
			result = ADC0_RA;
    4b8e:	4b25      	ldr	r3, [pc, #148]	; (4c24 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    4b90:	681b      	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    4b92:	2200      	movs	r2, #0
    4b94:	702a      	strb	r2, [r5, #0]
			__enable_irq();
    4b96:	b662      	cpsie	i
			result >>= analog_right_shift;
    4b98:	4a23      	ldr	r2, [pc, #140]	; (4c28 <analogRead+0xe8>)
    4b9a:	7810      	ldrb	r0, [r2, #0]
    4b9c:	fa43 f000 	asr.w	r0, r3, r0
			return result;
    4ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    4ba4:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    4ba6:	4770      	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    4ba8:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    4baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    4bae:	f7ff feb5 	bl	491c <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    4bb2:	0632      	lsls	r2, r6, #24
    4bb4:	d5d2      	bpl.n	4b5c <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    4bb6:	b672      	cpsid	i
    4bb8:	4d1c      	ldr	r5, [pc, #112]	; (4c2c <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    4bba:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4c38 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    4bbe:	4c1c      	ldr	r4, [pc, #112]	; (4c30 <analogRead+0xf0>)
    4bc0:	f006 0740 	and.w	r7, r6, #64	; 0x40
    4bc4:	b2ff      	uxtb	r7, r7
    4bc6:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    4bca:	f8d8 3000 	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    4bce:	b1df      	cbz	r7, 4c08 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    4bd0:	f023 0310 	bic.w	r3, r3, #16
    4bd4:	f8c8 3000 	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    4bd8:	2301      	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    4bda:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    4bdc:	4a13      	ldr	r2, [pc, #76]	; (4c2c <analogRead+0xec>)
    4bde:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    4be0:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    4be2:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    4be4:	6823      	ldr	r3, [r4, #0]
    4be6:	0619      	lsls	r1, r3, #24
    4be8:	d40c      	bmi.n	4c04 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    4bea:	7813      	ldrb	r3, [r2, #0]
    4bec:	b91b      	cbnz	r3, 4bf6 <analogRead+0xb6>
    4bee:	e7ec      	b.n	4bca <analogRead+0x8a>
    4bf0:	782b      	ldrb	r3, [r5, #0]
    4bf2:	2b00      	cmp	r3, #0
    4bf4:	d0e9      	beq.n	4bca <analogRead+0x8a>
		__enable_irq();
    4bf6:	b662      	cpsie	i
		yield();
    4bf8:	f001 fb52 	bl	62a0 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    4bfc:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    4bfe:	6823      	ldr	r3, [r4, #0]
    4c00:	061b      	lsls	r3, r3, #24
    4c02:	d5f5      	bpl.n	4bf0 <analogRead+0xb0>
			result = ADC1_RA;
    4c04:	4b0b      	ldr	r3, [pc, #44]	; (4c34 <analogRead+0xf4>)
    4c06:	e7c3      	b.n	4b90 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    4c08:	f043 0310 	orr.w	r3, r3, #16
    4c0c:	f8c8 3000 	str.w	r3, [r8]
    4c10:	e7e2      	b.n	4bd8 <analogRead+0x98>
    4c12:	bf00      	nop
    4c14:	00008a94 	.word	0x00008a94
    4c18:	1fff9061 	.word	0x1fff9061
    4c1c:	1fff9063 	.word	0x1fff9063
    4c20:	4003b000 	.word	0x4003b000
    4c24:	4003b010 	.word	0x4003b010
    4c28:	1fff9060 	.word	0x1fff9060
    4c2c:	1fff9062 	.word	0x1fff9062
    4c30:	400bb000 	.word	0x400bb000
    4c34:	400bb010 	.word	0x400bb010
    4c38:	400bb00c 	.word	0x400bb00c

00004c3c <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    4c3c:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    4c3e:	4c10      	ldr	r4, [pc, #64]	; (4c80 <fault_isr+0x44>)
    4c40:	e008      	b.n	4c54 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    4c42:	6823      	ldr	r3, [r4, #0]
    4c44:	0559      	lsls	r1, r3, #21
    4c46:	d40d      	bmi.n	4c64 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4c48:	6823      	ldr	r3, [r4, #0]
    4c4a:	051a      	lsls	r2, r3, #20
    4c4c:	d40f      	bmi.n	4c6e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    4c4e:	6823      	ldr	r3, [r4, #0]
    4c50:	04db      	lsls	r3, r3, #19
    4c52:	d411      	bmi.n	4c78 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    4c54:	6823      	ldr	r3, [r4, #0]
    4c56:	0358      	lsls	r0, r3, #13
    4c58:	d5f3      	bpl.n	4c42 <fault_isr+0x6>
    4c5a:	f000 fa37 	bl	50cc <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    4c5e:	6823      	ldr	r3, [r4, #0]
    4c60:	0559      	lsls	r1, r3, #21
    4c62:	d5f1      	bpl.n	4c48 <fault_isr+0xc>
    4c64:	f001 fba0 	bl	63a8 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4c68:	6823      	ldr	r3, [r4, #0]
    4c6a:	051a      	lsls	r2, r3, #20
    4c6c:	d5ef      	bpl.n	4c4e <fault_isr+0x12>
    4c6e:	f001 fc31 	bl	64d4 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    4c72:	6823      	ldr	r3, [r4, #0]
    4c74:	04db      	lsls	r3, r3, #19
    4c76:	d5ed      	bpl.n	4c54 <fault_isr+0x18>
    4c78:	f001 fcc2 	bl	6600 <uart2_status_isr>
    4c7c:	e7ea      	b.n	4c54 <fault_isr+0x18>
    4c7e:	bf00      	nop
    4c80:	40048034 	.word	0x40048034

00004c84 <unused_isr>:
	}
}

void unused_isr(void)
{
    4c84:	b508      	push	{r3, lr}
	fault_isr();
    4c86:	f7ff ffd9 	bl	4c3c <fault_isr>
    4c8a:	bf00      	nop

00004c8c <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    4c8c:	4b01      	ldr	r3, [pc, #4]	; (4c94 <startup_early_hook+0x8>)
    4c8e:	2210      	movs	r2, #16
    4c90:	801a      	strh	r2, [r3, #0]
    4c92:	4770      	bx	lr
    4c94:	40052000 	.word	0x40052000

00004c98 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    4c98:	4770      	bx	lr
    4c9a:	bf00      	nop

00004c9c <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    4c9c:	7800      	ldrb	r0, [r0, #0]
}
    4c9e:	fab0 f080 	clz	r0, r0
    4ca2:	0940      	lsrs	r0, r0, #5
    4ca4:	4770      	bx	lr
    4ca6:	bf00      	nop

00004ca8 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    4ca8:	2301      	movs	r3, #1
    4caa:	7003      	strb	r3, [r0, #0]
    4cac:	4770      	bx	lr
    4cae:	bf00      	nop

00004cb0 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    4cb0:	4a1c      	ldr	r2, [pc, #112]	; (4d24 <pinMode.part.2+0x74>)
    4cb2:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    4cb6:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    4cb8:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    4cba:	d011      	beq.n	4ce0 <pinMode.part.2+0x30>
    4cbc:	2904      	cmp	r1, #4
    4cbe:	d01b      	beq.n	4cf8 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    4cc0:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    4cc4:	2200      	movs	r2, #0
    4cc6:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    4cca:	b129      	cbz	r1, 4cd8 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    4ccc:	2902      	cmp	r1, #2
    4cce:	d020      	beq.n	4d12 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    4cd0:	2903      	cmp	r1, #3
    4cd2:	d022      	beq.n	4d1a <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    4cd4:	601a      	str	r2, [r3, #0]
    4cd6:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    4cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
    4cdc:	601a      	str	r2, [r3, #0]
    4cde:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4ce0:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    4ce4:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4ce8:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    4cec:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    4cee:	681a      	ldr	r2, [r3, #0]
    4cf0:	f022 0220 	bic.w	r2, r2, #32
    4cf4:	601a      	str	r2, [r3, #0]
    4cf6:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4cf8:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    4cfc:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    4d00:	2001      	movs	r0, #1
    4d02:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    4d06:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    4d08:	681a      	ldr	r2, [r3, #0]
    4d0a:	f042 0220 	orr.w	r2, r2, #32
    4d0e:	601a      	str	r2, [r3, #0]
    4d10:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    4d12:	f240 1203 	movw	r2, #259	; 0x103
    4d16:	601a      	str	r2, [r3, #0]
    4d18:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    4d1a:	f44f 7281 	mov.w	r2, #258	; 0x102
    4d1e:	601a      	str	r2, [r3, #0]
    4d20:	4770      	bx	lr
    4d22:	bf00      	nop
    4d24:	00008ac0 	.word	0x00008ac0

00004d28 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    4d28:	b430      	push	{r4, r5}
	RTC_SR = 0;
    4d2a:	4b05      	ldr	r3, [pc, #20]	; (4d40 <rtc_set+0x18>)
	RTC_TPR = 0;
    4d2c:	4d05      	ldr	r5, [pc, #20]	; (4d44 <rtc_set+0x1c>)
	RTC_TSR = t;
    4d2e:	4c06      	ldr	r4, [pc, #24]	; (4d48 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    4d30:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    4d32:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    4d34:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    4d36:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    4d38:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    4d3a:	6019      	str	r1, [r3, #0]
}
    4d3c:	bc30      	pop	{r4, r5}
    4d3e:	4770      	bx	lr
    4d40:	4003d014 	.word	0x4003d014
    4d44:	4003d004 	.word	0x4003d004
    4d48:	4003d000 	.word	0x4003d000

00004d4c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    4d4c:	2821      	cmp	r0, #33	; 0x21
    4d4e:	d801      	bhi.n	4d54 <pinMode+0x8>
    4d50:	f7ff bfae 	b.w	4cb0 <pinMode.part.2>
    4d54:	4770      	bx	lr
    4d56:	bf00      	nop

00004d58 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    4d58:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    4d5a:	490c      	ldr	r1, [pc, #48]	; (4d8c <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4d5c:	4b0c      	ldr	r3, [pc, #48]	; (4d90 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4d5e:	4a0d      	ldr	r2, [pc, #52]	; (4d94 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4d60:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    4d62:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4d64:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    4d66:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4d68:	0152      	lsls	r2, r2, #5
    4d6a:	d502      	bpl.n	4d72 <micros+0x1a>
    4d6c:	2b32      	cmp	r3, #50	; 0x32
    4d6e:	bf88      	it	hi
    4d70:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    4d72:	4909      	ldr	r1, [pc, #36]	; (4d98 <micros+0x40>)
    4d74:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    4d78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4d7c:	33ff      	adds	r3, #255	; 0xff
    4d7e:	fba1 1303 	umull	r1, r3, r1, r3
    4d82:	fb02 f000 	mul.w	r0, r2, r0
}
    4d86:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    4d8a:	4770      	bx	lr
    4d8c:	1fff9068 	.word	0x1fff9068
    4d90:	e000e018 	.word	0xe000e018
    4d94:	e000ed04 	.word	0xe000ed04
    4d98:	aaaaaaab 	.word	0xaaaaaaab

00004d9c <delay>:

void delay(uint32_t ms)
{
    4d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4da0:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    4da2:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    4da4:	4f20      	ldr	r7, [pc, #128]	; (4e28 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4da6:	4b21      	ldr	r3, [pc, #132]	; (4e2c <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4da8:	4a21      	ldr	r2, [pc, #132]	; (4e30 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4daa:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    4dac:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4dae:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    4db0:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4db2:	0152      	lsls	r2, r2, #5
    4db4:	d502      	bpl.n	4dbc <delay+0x20>
    4db6:	2b32      	cmp	r3, #50	; 0x32
    4db8:	bf88      	it	hi
    4dba:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    4dbc:	b395      	cbz	r5, 4e24 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    4dbe:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    4dc2:	4e1c      	ldr	r6, [pc, #112]	; (4e34 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4dc4:	f8df 9064 	ldr.w	r9, [pc, #100]	; 4e2c <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4dc8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4e30 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    4dcc:	33ff      	adds	r3, #255	; 0xff
    4dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4dd2:	fba6 1303 	umull	r1, r3, r6, r3
    4dd6:	fb02 f404 	mul.w	r4, r2, r4
    4dda:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    4dde:	b672      	cpsid	i
	current = SYST_CVR;
    4de0:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    4de4:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4de6:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    4dea:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    4dec:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    4df0:	33ff      	adds	r3, #255	; 0xff
    4df2:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4df6:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    4dfa:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    4dfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4e02:	d002      	beq.n	4e0a <delay+0x6e>
    4e04:	2932      	cmp	r1, #50	; 0x32
    4e06:	bf88      	it	hi
    4e08:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    4e0a:	fb00 3302 	mla	r3, r0, r2, r3
    4e0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    4e12:	d304      	bcc.n	4e1e <delay+0x82>
				ms--;
				if (ms == 0) return;
    4e14:	3d01      	subs	r5, #1
    4e16:	d005      	beq.n	4e24 <delay+0x88>
				start += 1000;
    4e18:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    4e1c:	e7df      	b.n	4dde <delay+0x42>
			}
			yield();
    4e1e:	f001 fa3f 	bl	62a0 <yield>
		}
    4e22:	e7dc      	b.n	4dde <delay+0x42>
    4e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4e28:	1fff9068 	.word	0x1fff9068
    4e2c:	e000e018 	.word	0xe000e018
    4e30:	e000ed04 	.word	0xe000ed04
    4e34:	aaaaaaab 	.word	0xaaaaaaab

00004e38 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    4e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    4e3a:	4b2d      	ldr	r3, [pc, #180]	; (4ef0 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    4e3c:	492d      	ldr	r1, [pc, #180]	; (4ef4 <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    4e3e:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 4f10 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    4e42:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 4f14 <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    4e46:	4e2c      	ldr	r6, [pc, #176]	; (4ef8 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    4e48:	4d2c      	ldr	r5, [pc, #176]	; (4efc <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    4e4a:	4c2d      	ldr	r4, [pc, #180]	; (4f00 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    4e4c:	4a2d      	ldr	r2, [pc, #180]	; (4f04 <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    4e4e:	4f2e      	ldr	r7, [pc, #184]	; (4f08 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    4e50:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    4e54:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    4e56:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    4e5a:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    4e5c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    4e60:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    4e62:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    4e66:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    4e68:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    4e6c:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    4e6e:	2000      	movs	r0, #0
    4e70:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    4e72:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    4e74:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    4e78:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    4e7c:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    4e80:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    4e82:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    4e84:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    4e86:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    4e88:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    4e8a:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    4e8c:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4e8e:	2209      	movs	r2, #9
    4e90:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    4e94:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    4e98:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    4e9c:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    4ea0:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    4ea4:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    4ea8:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    4eac:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    4eae:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4eb2:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    4eb6:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    4eba:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    4ebe:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    4ec0:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4ec4:	4811      	ldr	r0, [pc, #68]	; (4f0c <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    4ec6:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    4ec8:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    4ecc:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    4ed0:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    4ed2:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4ed4:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    4ed6:	f7ff fdc3 	bl	4a60 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    4eda:	2019      	movs	r0, #25
    4edc:	f7ff ff5e 	bl	4d9c <delay>
	usb_init();
    4ee0:	f000 fe5c 	bl	5b9c <usb_init>
	delay(275);
    4ee4:	f240 1013 	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    4ee8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    4eec:	f7ff bf56 	b.w	4d9c <delay>
    4ef0:	e000e108 	.word	0xe000e108
    4ef4:	40038004 	.word	0x40038004
    4ef8:	40038014 	.word	0x40038014
    4efc:	40038024 	.word	0x40038024
    4f00:	4003802c 	.word	0x4003802c
    4f04:	4003801c 	.word	0x4003801c
    4f08:	40038034 	.word	0x40038034
    4f0c:	400b8000 	.word	0x400b8000
    4f10:	4003800c 	.word	0x4003800c
    4f14:	40038008 	.word	0x40038008

00004f18 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    4f18:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    4f1a:	2b03      	cmp	r3, #3
    4f1c:	d814      	bhi.n	4f48 <usb_rx+0x30>
	__disable_irq();
    4f1e:	b672      	cpsid	i
	ret = rx_first[endpoint];
    4f20:	490a      	ldr	r1, [pc, #40]	; (4f4c <usb_rx+0x34>)
    4f22:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    4f26:	b168      	cbz	r0, 4f44 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    4f28:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    4f2a:	4c09      	ldr	r4, [pc, #36]	; (4f50 <usb_rx+0x38>)
    4f2c:	8805      	ldrh	r5, [r0, #0]
    4f2e:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    4f32:	6846      	ldr	r6, [r0, #4]
    4f34:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    4f38:	1b52      	subs	r2, r2, r5
    4f3a:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    4f3e:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    4f40:	bc70      	pop	{r4, r5, r6}
    4f42:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    4f44:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    4f46:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    4f48:	2000      	movs	r0, #0
    4f4a:	4770      	bx	lr
    4f4c:	1fff90c4 	.word	0x1fff90c4
    4f50:	1fff9314 	.word	0x1fff9314

00004f54 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    4f54:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    4f56:	2803      	cmp	r0, #3
    4f58:	d80b      	bhi.n	4f72 <usb_tx_packet_count+0x1e>
	__disable_irq();
    4f5a:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    4f5c:	4b07      	ldr	r3, [pc, #28]	; (4f7c <usb_tx_packet_count+0x28>)
    4f5e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4f62:	b143      	cbz	r3, 4f76 <usb_tx_packet_count+0x22>
    4f64:	2000      	movs	r0, #0
    4f66:	685b      	ldr	r3, [r3, #4]
    4f68:	3001      	adds	r0, #1
    4f6a:	2b00      	cmp	r3, #0
    4f6c:	d1fb      	bne.n	4f66 <usb_tx_packet_count+0x12>
	__enable_irq();
    4f6e:	b662      	cpsie	i
	return count;
    4f70:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    4f72:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    4f74:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    4f76:	4618      	mov	r0, r3
    4f78:	e7f9      	b.n	4f6e <usb_tx_packet_count+0x1a>
    4f7a:	bf00      	nop
    4f7c:	1fff9118 	.word	0x1fff9118

00004f80 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    4f80:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    4f82:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4f84:	4a2b      	ldr	r2, [pc, #172]	; (5034 <usb_rx_memory+0xb4>)
    4f86:	7813      	ldrb	r3, [r2, #0]
    4f88:	071d      	lsls	r5, r3, #28
    4f8a:	d506      	bpl.n	4f9a <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4f8c:	4b2a      	ldr	r3, [pc, #168]	; (5038 <usb_rx_memory+0xb8>)
    4f8e:	6a19      	ldr	r1, [r3, #32]
    4f90:	2900      	cmp	r1, #0
    4f92:	d036      	beq.n	5002 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4f94:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4f96:	2900      	cmp	r1, #0
    4f98:	d041      	beq.n	501e <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4f9a:	7853      	ldrb	r3, [r2, #1]
    4f9c:	071c      	lsls	r4, r3, #28
    4f9e:	d506      	bpl.n	4fae <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4fa0:	4b25      	ldr	r3, [pc, #148]	; (5038 <usb_rx_memory+0xb8>)
    4fa2:	6c19      	ldr	r1, [r3, #64]	; 0x40
    4fa4:	2900      	cmp	r1, #0
    4fa6:	d03e      	beq.n	5026 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4fa8:	6c99      	ldr	r1, [r3, #72]	; 0x48
    4faa:	2900      	cmp	r1, #0
    4fac:	d039      	beq.n	5022 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4fae:	7893      	ldrb	r3, [r2, #2]
    4fb0:	0719      	lsls	r1, r3, #28
    4fb2:	d505      	bpl.n	4fc0 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4fb4:	4b20      	ldr	r3, [pc, #128]	; (5038 <usb_rx_memory+0xb8>)
    4fb6:	6e19      	ldr	r1, [r3, #96]	; 0x60
    4fb8:	2900      	cmp	r1, #0
    4fba:	d036      	beq.n	502a <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4fbc:	6e99      	ldr	r1, [r3, #104]	; 0x68
    4fbe:	b189      	cbz	r1, 4fe4 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4fc0:	78d3      	ldrb	r3, [r2, #3]
    4fc2:	071b      	lsls	r3, r3, #28
    4fc4:	d507      	bpl.n	4fd6 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4fc6:	4b1c      	ldr	r3, [pc, #112]	; (5038 <usb_rx_memory+0xb8>)
    4fc8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    4fcc:	b37a      	cbz	r2, 502e <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4fce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4fd2:	2111      	movs	r1, #17
    4fd4:	b13a      	cbz	r2, 4fe6 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    4fd6:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    4fd8:	4b18      	ldr	r3, [pc, #96]	; (503c <usb_rx_memory+0xbc>)
    4fda:	2200      	movs	r2, #0
    4fdc:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    4fde:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    4fe0:	f000 be68 	b.w	5cb4 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4fe4:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    4fe6:	4c15      	ldr	r4, [pc, #84]	; (503c <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4fe8:	4d15      	ldr	r5, [pc, #84]	; (5040 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    4fea:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4fec:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    4ff0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    4ff4:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    4ff6:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    4ff8:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    4ffa:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    4ffc:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    4ffe:	bc30      	pop	{r4, r5}
    5000:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    5002:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    5004:	4c0d      	ldr	r4, [pc, #52]	; (503c <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5006:	4d0f      	ldr	r5, [pc, #60]	; (5044 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    5008:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    500a:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    500e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5012:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    5014:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    5016:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    5018:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    501a:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    501c:	e7ef      	b.n	4ffe <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    501e:	2105      	movs	r1, #5
    5020:	e7e1      	b.n	4fe6 <usb_rx_memory+0x66>
    5022:	2109      	movs	r1, #9
    5024:	e7df      	b.n	4fe6 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    5026:	2208      	movs	r2, #8
    5028:	e7ec      	b.n	5004 <usb_rx_memory+0x84>
    502a:	220c      	movs	r2, #12
    502c:	e7ea      	b.n	5004 <usb_rx_memory+0x84>
    502e:	2210      	movs	r2, #16
    5030:	e7e8      	b.n	5004 <usb_rx_memory+0x84>
    5032:	bf00      	nop
    5034:	00008bfc 	.word	0x00008bfc
    5038:	1fff8000 	.word	0x1fff8000
    503c:	1fff9141 	.word	0x1fff9141
    5040:	004000c8 	.word	0x004000c8
    5044:	00400088 	.word	0x00400088

00005048 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    5048:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    504a:	2b03      	cmp	r3, #3
    504c:	d81d      	bhi.n	508a <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    504e:	4a1b      	ldr	r2, [pc, #108]	; (50bc <usb_tx+0x74>)
    5050:	0140      	lsls	r0, r0, #5
    5052:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    5056:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    5058:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    505a:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    505c:	4c18      	ldr	r4, [pc, #96]	; (50c0 <usb_tx+0x78>)
    505e:	5ce2      	ldrb	r2, [r4, r3]
    5060:	2a03      	cmp	r2, #3
    5062:	d81b      	bhi.n	509c <usb_tx+0x54>
    5064:	e8df f002 	tbb	[pc, r2]
    5068:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    506c:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    506e:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    5070:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    5072:	f010 0f08 	tst.w	r0, #8
    5076:	bf14      	ite	ne
    5078:	23c8      	movne	r3, #200	; 0xc8
    507a:	2388      	moveq	r3, #136	; 0x88
    507c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    5080:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    5082:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    5084:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    5086:	b662      	cpsie	i
}
    5088:	bc30      	pop	{r4, r5}
    508a:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    508c:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    508e:	2202      	movs	r2, #2
		break;
    5090:	e7ed      	b.n	506e <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    5092:	2205      	movs	r2, #5
    5094:	e7eb      	b.n	506e <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    5096:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    5098:	2204      	movs	r2, #4
		break;
    509a:	e7e8      	b.n	506e <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    509c:	4a09      	ldr	r2, [pc, #36]	; (50c4 <usb_tx+0x7c>)
    509e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    50a2:	b138      	cbz	r0, 50b4 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    50a4:	4a08      	ldr	r2, [pc, #32]	; (50c8 <usb_tx+0x80>)
    50a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    50aa:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    50ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    50b0:	b662      	cpsie	i
		return;
    50b2:	e7e9      	b.n	5088 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    50b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    50b8:	4a03      	ldr	r2, [pc, #12]	; (50c8 <usb_tx+0x80>)
    50ba:	e7f7      	b.n	50ac <usb_tx+0x64>
    50bc:	1fff8000 	.word	0x1fff8000
    50c0:	1fff9150 	.word	0x1fff9150
    50c4:	1fff9118 	.word	0x1fff9118
    50c8:	1fff9128 	.word	0x1fff9128

000050cc <usb_isr>:
}



void usb_isr(void)
{
    50cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    50d0:	f8df b30c 	ldr.w	fp, [pc, #780]	; 53e0 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    50d4:	f8df a30c 	ldr.w	sl, [pc, #780]	; 53e4 <usb_isr+0x318>
}



void usb_isr(void)
{
    50d8:	b087      	sub	sp, #28
    50da:	e044      	b.n	5166 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    50dc:	4fab      	ldr	r7, [pc, #684]	; (538c <usb_isr+0x2c0>)
    50de:	ea4f 0893 	mov.w	r8, r3, lsr #2
    50e2:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    50e6:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    50e8:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    50ec:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    50f0:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    50f2:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    50f6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    50fa:	2b00      	cmp	r3, #0
    50fc:	f040 8102 	bne.w	5304 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    5100:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    5104:	0c1b      	lsrs	r3, r3, #16
    5106:	b299      	uxth	r1, r3
    5108:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    510c:	2b00      	cmp	r3, #0
    510e:	f000 80f0 	beq.w	52f2 <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    5112:	4b9f      	ldr	r3, [pc, #636]	; (5390 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    5114:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    5118:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    511c:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    5120:	2a00      	cmp	r2, #0
    5122:	f000 82c5 	beq.w	56b0 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    5126:	4d9b      	ldr	r5, [pc, #620]	; (5394 <usb_isr+0x2c8>)
    5128:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    512c:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    512e:	4c9a      	ldr	r4, [pc, #616]	; (5398 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    5130:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    5134:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    5138:	4419      	add	r1, r3
    513a:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    513e:	f000 fd99 	bl	5c74 <usb_malloc>
					if (packet) {
    5142:	2800      	cmp	r0, #0
    5144:	f000 82ad 	beq.w	56a2 <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    5148:	4a94      	ldr	r2, [pc, #592]	; (539c <usb_isr+0x2d0>)
    514a:	4b95      	ldr	r3, [pc, #596]	; (53a0 <usb_isr+0x2d4>)
    514c:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    5150:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    5154:	bf18      	it	ne
    5156:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    5158:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    515c:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    5160:	2308      	movs	r3, #8
    5162:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    5166:	f89b 4000 	ldrb.w	r4, [fp]
    516a:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    516c:	0761      	lsls	r1, r4, #29
    516e:	d51a      	bpl.n	51a6 <usb_isr+0xda>
		if (usb_configuration) {
    5170:	4b8c      	ldr	r3, [pc, #560]	; (53a4 <usb_isr+0x2d8>)
    5172:	781b      	ldrb	r3, [r3, #0]
    5174:	b1a3      	cbz	r3, 51a0 <usb_isr+0xd4>
			t = usb_reboot_timer;
    5176:	498c      	ldr	r1, [pc, #560]	; (53a8 <usb_isr+0x2dc>)
    5178:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    517a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    517e:	b122      	cbz	r2, 518a <usb_isr+0xbe>
				usb_reboot_timer = --t;
    5180:	3b01      	subs	r3, #1
    5182:	b2db      	uxtb	r3, r3
    5184:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    5186:	b903      	cbnz	r3, 518a <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    5188:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    518a:	4988      	ldr	r1, [pc, #544]	; (53ac <usb_isr+0x2e0>)
    518c:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    518e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    5192:	b12a      	cbz	r2, 51a0 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    5194:	3b01      	subs	r3, #1
    5196:	b2db      	uxtb	r3, r3
    5198:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    519a:	2b00      	cmp	r3, #0
    519c:	f000 8257 	beq.w	564e <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    51a0:	2304      	movs	r3, #4
    51a2:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    51a6:	f004 0308 	and.w	r3, r4, #8
    51aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    51ae:	2b00      	cmp	r3, #0
    51b0:	f000 80cc 	beq.w	534c <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    51b4:	f89a 3000 	ldrb.w	r3, [sl]
    51b8:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    51ba:	091e      	lsrs	r6, r3, #4
    51bc:	d18e      	bne.n	50dc <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    51be:	089c      	lsrs	r4, r3, #2
    51c0:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 538c <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    51c4:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    51c8:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    51cc:	f3c2 0283 	ubfx	r2, r2, #2, #4
    51d0:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    51d2:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    51d4:	2a0c      	cmp	r2, #12
    51d6:	f200 8088 	bhi.w	52ea <usb_isr+0x21e>
    51da:	e8df f002 	tbb	[pc, r2]
    51de:	7c7c      	.short	0x7c7c
    51e0:	86868686 	.word	0x86868686
    51e4:	86478686 	.word	0x86478686
    51e8:	8686      	.short	0x8686
    51ea:	07          	.byte	0x07
    51eb:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    51ec:	6808      	ldr	r0, [r1, #0]
    51ee:	4d70      	ldr	r5, [pc, #448]	; (53b0 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    51f0:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    51f2:	4f70      	ldr	r7, [pc, #448]	; (53b4 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    51f4:	4e70      	ldr	r6, [pc, #448]	; (53b8 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    51f6:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    51f8:	b281      	uxth	r1, r0
    51fa:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    51fe:	4b67      	ldr	r3, [pc, #412]	; (539c <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    5200:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    5202:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    5206:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    5208:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    520a:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    520e:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    5210:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    5214:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    5218:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    521c:	4c5b      	ldr	r4, [pc, #364]	; (538c <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    521e:	f200 80e3 	bhi.w	53e8 <usb_isr+0x31c>
    5222:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    5226:	f080 8346 	bcs.w	58b6 <usb_isr+0x7ea>
    522a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    522e:	f000 82fc 	beq.w	582a <usb_isr+0x75e>
    5232:	f200 828d 	bhi.w	5750 <usb_isr+0x684>
    5236:	2980      	cmp	r1, #128	; 0x80
    5238:	f000 8377 	beq.w	592a <usb_isr+0x85e>
    523c:	2982      	cmp	r1, #130	; 0x82
    523e:	f040 82fa 	bne.w	5836 <usb_isr+0x76a>
    5242:	88a9      	ldrh	r1, [r5, #4]
    5244:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    5248:	2904      	cmp	r1, #4
    524a:	f200 82f4 	bhi.w	5836 <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    524e:	485b      	ldr	r0, [pc, #364]	; (53bc <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    5250:	4c5b      	ldr	r4, [pc, #364]	; (53c0 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    5252:	0089      	lsls	r1, r1, #2
    5254:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    5256:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    5258:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    525a:	7802      	ldrb	r2, [r0, #0]
    525c:	0793      	lsls	r3, r2, #30
    525e:	f140 8458 	bpl.w	5b12 <usb_isr+0xa46>
    5262:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    5266:	f04f 0e02 	mov.w	lr, #2
    526a:	e342      	b.n	58f2 <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    526c:	4f51      	ldr	r7, [pc, #324]	; (53b4 <usb_isr+0x2e8>)
    526e:	683a      	ldr	r2, [r7, #0]
		if (data) {
    5270:	b332      	cbz	r2, 52c0 <usb_isr+0x1f4>
			size = ep0_tx_len;
    5272:	4b54      	ldr	r3, [pc, #336]	; (53c4 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5274:	4e50      	ldr	r6, [pc, #320]	; (53b8 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5276:	4954      	ldr	r1, [pc, #336]	; (53c8 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    5278:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    527a:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    527c:	780d      	ldrb	r5, [r1, #0]
    527e:	2840      	cmp	r0, #64	; 0x40
    5280:	4686      	mov	lr, r0
    5282:	f045 0802 	orr.w	r8, r5, #2
    5286:	bf28      	it	cs
    5288:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    528c:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    528e:	f084 0401 	eor.w	r4, r4, #1
    5292:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    5294:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5298:	bf0c      	ite	eq
    529a:	2488      	moveq	r4, #136	; 0x88
    529c:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    529e:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    52a2:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    52a4:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    52a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    52ac:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    52ae:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    52b0:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    52b4:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    52b6:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    52b8:	2800      	cmp	r0, #0
    52ba:	f000 8145 	beq.w	5548 <usb_isr+0x47c>
    52be:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    52c0:	4b3b      	ldr	r3, [pc, #236]	; (53b0 <usb_isr+0x2e4>)
    52c2:	881a      	ldrh	r2, [r3, #0]
    52c4:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    52c8:	d10f      	bne.n	52ea <usb_isr+0x21e>
			setup.bRequest = 0;
    52ca:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    52cc:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    52ce:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    52d0:	4b3e      	ldr	r3, [pc, #248]	; (53cc <usb_isr+0x300>)
    52d2:	701a      	strb	r2, [r3, #0]
    52d4:	e009      	b.n	52ea <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    52d6:	4a36      	ldr	r2, [pc, #216]	; (53b0 <usb_isr+0x2e4>)
    52d8:	8810      	ldrh	r0, [r2, #0]
    52da:	f242 0221 	movw	r2, #8225	; 0x2021
    52de:	4290      	cmp	r0, r2
    52e0:	f000 8137 	beq.w	5552 <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    52e4:	4a2d      	ldr	r2, [pc, #180]	; (539c <usb_isr+0x2d0>)
    52e6:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    52ea:	4a39      	ldr	r2, [pc, #228]	; (53d0 <usb_isr+0x304>)
    52ec:	2301      	movs	r3, #1
    52ee:	7013      	strb	r3, [r2, #0]
    52f0:	e736      	b.n	5160 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    52f2:	4a2a      	ldr	r2, [pc, #168]	; (539c <usb_isr+0x2d0>)
    52f4:	4b2a      	ldr	r3, [pc, #168]	; (53a0 <usb_isr+0x2d4>)
    52f6:	f019 0f08 	tst.w	r9, #8
    52fa:	bf18      	it	ne
    52fc:	4613      	movne	r3, r2
    52fe:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    5302:	e72d      	b.n	5160 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    5304:	f000 fcd6 	bl	5cb4 <usb_free>
				packet = tx_first[endpoint];
    5308:	4a32      	ldr	r2, [pc, #200]	; (53d4 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    530a:	4933      	ldr	r1, [pc, #204]	; (53d8 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    530c:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    5310:	2b00      	cmp	r3, #0
    5312:	f000 81d1 	beq.w	56b8 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    5316:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    5318:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    531a:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    531e:	f103 0208 	add.w	r2, r3, #8
    5322:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    5326:	2c03      	cmp	r4, #3
    5328:	d805      	bhi.n	5336 <usb_isr+0x26a>
    532a:	e8df f004 	tbb	[pc, r4]
    532e:	022c      	.short	0x022c
    5330:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    5332:	2202      	movs	r2, #2
    5334:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    5336:	881a      	ldrh	r2, [r3, #0]
    5338:	f019 0f08 	tst.w	r9, #8
    533c:	bf0c      	ite	eq
    533e:	2388      	moveq	r3, #136	; 0x88
    5340:	23c8      	movne	r3, #200	; 0xc8
    5342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    5346:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    534a:	e709      	b.n	5160 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    534c:	07e0      	lsls	r0, r4, #31
    534e:	f100 8181 	bmi.w	5654 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    5352:	0621      	lsls	r1, r4, #24
    5354:	f100 81f2 	bmi.w	573c <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    5358:	07a2      	lsls	r2, r4, #30
    535a:	d506      	bpl.n	536a <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    535c:	4a1f      	ldr	r2, [pc, #124]	; (53dc <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    535e:	4920      	ldr	r1, [pc, #128]	; (53e0 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    5360:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    5362:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    5364:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    5366:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    5368:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    536a:	06e3      	lsls	r3, r4, #27
    536c:	d502      	bpl.n	5374 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    536e:	4b1c      	ldr	r3, [pc, #112]	; (53e0 <usb_isr+0x314>)
    5370:	2210      	movs	r2, #16
    5372:	701a      	strb	r2, [r3, #0]
	}

}
    5374:	b007      	add	sp, #28
    5376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    537a:	2204      	movs	r2, #4
    537c:	558a      	strb	r2, [r1, r6]
						break;
    537e:	e7da      	b.n	5336 <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    5380:	2205      	movs	r2, #5
    5382:	558a      	strb	r2, [r1, r6]
						break;
    5384:	e7d7      	b.n	5336 <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    5386:	2203      	movs	r2, #3
    5388:	558a      	strb	r2, [r1, r6]
						break;
    538a:	e7d4      	b.n	5336 <usb_isr+0x26a>
    538c:	1fff8000 	.word	0x1fff8000
    5390:	1fff90c4 	.word	0x1fff90c4
    5394:	1fff9070 	.word	0x1fff9070
    5398:	1fff9314 	.word	0x1fff9314
    539c:	004000c8 	.word	0x004000c8
    53a0:	00400088 	.word	0x00400088
    53a4:	1fff914c 	.word	0x1fff914c
    53a8:	1fff90d5 	.word	0x1fff90d5
    53ac:	1fff9154 	.word	0x1fff9154
    53b0:	1fff9138 	.word	0x1fff9138
    53b4:	1fff906c 	.word	0x1fff906c
    53b8:	1fff90d4 	.word	0x1fff90d4
    53bc:	400720c0 	.word	0x400720c0
    53c0:	1fff9144 	.word	0x1fff9144
    53c4:	1fff9080 	.word	0x1fff9080
    53c8:	1fff9140 	.word	0x1fff9140
    53cc:	40072098 	.word	0x40072098
    53d0:	40072094 	.word	0x40072094
    53d4:	1fff9118 	.word	0x1fff9118
    53d8:	1fff9150 	.word	0x1fff9150
    53dc:	40072088 	.word	0x40072088
    53e0:	40072080 	.word	0x40072080
    53e4:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    53e8:	f242 0021 	movw	r0, #8225	; 0x2021
    53ec:	4281      	cmp	r1, r0
    53ee:	f000 812a 	beq.w	5646 <usb_isr+0x57a>
    53f2:	f200 80d8 	bhi.w	55a6 <usb_isr+0x4da>
    53f6:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    53fa:	f000 8276 	beq.w	58ea <usb_isr+0x81e>
    53fe:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    5402:	f040 8218 	bne.w	5836 <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    5406:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    5408:	49b3      	ldr	r1, [pc, #716]	; (56d8 <usb_isr+0x60c>)
    540a:	78a8      	ldrb	r0, [r5, #2]
    540c:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    540e:	0612      	lsls	r2, r2, #24
    5410:	f100 833a 	bmi.w	5a88 <usb_isr+0x9bc>
    5414:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    5418:	49b0      	ldr	r1, [pc, #704]	; (56dc <usb_isr+0x610>)
    541a:	0613      	lsls	r3, r2, #24
    541c:	f100 830c 	bmi.w	5a38 <usb_isr+0x96c>
    5420:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    5424:	49ad      	ldr	r1, [pc, #692]	; (56dc <usb_isr+0x610>)
    5426:	0615      	lsls	r5, r2, #24
    5428:	f100 8301 	bmi.w	5a2e <usb_isr+0x962>
    542c:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    5430:	49aa      	ldr	r1, [pc, #680]	; (56dc <usb_isr+0x610>)
    5432:	0614      	lsls	r4, r2, #24
    5434:	f100 82f6 	bmi.w	5a24 <usb_isr+0x958>
    5438:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    543c:	49a7      	ldr	r1, [pc, #668]	; (56dc <usb_isr+0x610>)
    543e:	0610      	lsls	r0, r2, #24
    5440:	f100 834a 	bmi.w	5ad8 <usb_isr+0xa0c>
    5444:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    5448:	49a4      	ldr	r1, [pc, #656]	; (56dc <usb_isr+0x610>)
    544a:	0612      	lsls	r2, r2, #24
    544c:	f100 833f 	bmi.w	5ace <usb_isr+0xa02>
    5450:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    5454:	49a1      	ldr	r1, [pc, #644]	; (56dc <usb_isr+0x610>)
    5456:	0613      	lsls	r3, r2, #24
    5458:	f100 8334 	bmi.w	5ac4 <usb_isr+0x9f8>
    545c:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    5460:	499e      	ldr	r1, [pc, #632]	; (56dc <usb_isr+0x610>)
    5462:	0615      	lsls	r5, r2, #24
    5464:	f100 8329 	bmi.w	5aba <usb_isr+0x9ee>
    5468:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    546c:	499b      	ldr	r1, [pc, #620]	; (56dc <usb_isr+0x610>)
    546e:	0614      	lsls	r4, r2, #24
    5470:	f100 831e 	bmi.w	5ab0 <usb_isr+0x9e4>
    5474:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    5478:	4998      	ldr	r1, [pc, #608]	; (56dc <usb_isr+0x610>)
    547a:	0610      	lsls	r0, r2, #24
    547c:	f100 8313 	bmi.w	5aa6 <usb_isr+0x9da>
    5480:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    5484:	4995      	ldr	r1, [pc, #596]	; (56dc <usb_isr+0x610>)
    5486:	0612      	lsls	r2, r2, #24
    5488:	f100 8308 	bmi.w	5a9c <usb_isr+0x9d0>
    548c:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    5490:	4992      	ldr	r1, [pc, #584]	; (56dc <usb_isr+0x610>)
    5492:	0613      	lsls	r3, r2, #24
    5494:	f100 82fd 	bmi.w	5a92 <usb_isr+0x9c6>
    5498:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    549c:	498f      	ldr	r1, [pc, #572]	; (56dc <usb_isr+0x610>)
    549e:	0615      	lsls	r5, r2, #24
    54a0:	f100 8331 	bmi.w	5b06 <usb_isr+0xa3a>
    54a4:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    54a8:	498c      	ldr	r1, [pc, #560]	; (56dc <usb_isr+0x610>)
    54aa:	0614      	lsls	r4, r2, #24
    54ac:	f100 8325 	bmi.w	5afa <usb_isr+0xa2e>
    54b0:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    54b4:	4989      	ldr	r1, [pc, #548]	; (56dc <usb_isr+0x610>)
    54b6:	0610      	lsls	r0, r2, #24
    54b8:	f100 8319 	bmi.w	5aee <usb_isr+0xa22>
    54bc:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    54c0:	4986      	ldr	r1, [pc, #536]	; (56dc <usb_isr+0x610>)
    54c2:	0612      	lsls	r2, r2, #24
    54c4:	f100 830d 	bmi.w	5ae2 <usb_isr+0xa16>
    54c8:	4885      	ldr	r0, [pc, #532]	; (56e0 <usb_isr+0x614>)
    54ca:	4a86      	ldr	r2, [pc, #536]	; (56e4 <usb_isr+0x618>)
    54cc:	4986      	ldr	r1, [pc, #536]	; (56e8 <usb_isr+0x61c>)
    54ce:	9001      	str	r0, [sp, #4]
    54d0:	4886      	ldr	r0, [pc, #536]	; (56ec <usb_isr+0x620>)
    54d2:	4d87      	ldr	r5, [pc, #540]	; (56f0 <usb_isr+0x624>)
    54d4:	4c87      	ldr	r4, [pc, #540]	; (56f4 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    54d6:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    54d8:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    54da:	9605      	str	r6, [sp, #20]
    54dc:	9502      	str	r5, [sp, #8]
    54de:	4680      	mov	r8, r0
    54e0:	460f      	mov	r7, r1
    54e2:	4616      	mov	r6, r2
    54e4:	461d      	mov	r5, r3
    54e6:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    54e8:	6830      	ldr	r0, [r6, #0]
			while (p) {
    54ea:	b128      	cbz	r0, 54f8 <usb_isr+0x42c>
				n = p->next;
    54ec:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    54ee:	f000 fbe1 	bl	5cb4 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    54f2:	4620      	mov	r0, r4
    54f4:	2c00      	cmp	r4, #0
    54f6:	d1f9      	bne.n	54ec <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    54f8:	2300      	movs	r3, #0
    54fa:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    54fc:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    54fe:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    5500:	461a      	mov	r2, r3
    5502:	2300      	movs	r3, #0
    5504:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    5508:	b128      	cbz	r0, 5516 <usb_isr+0x44a>
				n = p->next;
    550a:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    550c:	f000 fbd2 	bl	5cb4 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    5510:	4620      	mov	r0, r4
    5512:	2c00      	cmp	r4, #0
    5514:	d1f9      	bne.n	550a <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    5516:	2200      	movs	r2, #0
    5518:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    551a:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    551c:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    5520:	4611      	mov	r1, r2
    5522:	2200      	movs	r2, #0
    5524:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    5528:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    552a:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    552c:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    552e:	f04f 0100 	mov.w	r1, #0
    5532:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    5536:	2b03      	cmp	r3, #3
    5538:	f200 812b 	bhi.w	5792 <usb_isr+0x6c6>
    553c:	e8df f013 	tbh	[pc, r3, lsl #1]
    5540:	01250170 	.word	0x01250170
    5544:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    5548:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    554c:	bf18      	it	ne
    554e:	2200      	movne	r2, #0
    5550:	e6b5      	b.n	52be <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    5552:	4a69      	ldr	r2, [pc, #420]	; (56f8 <usb_isr+0x62c>)
    5554:	780d      	ldrb	r5, [r1, #0]
    5556:	7848      	ldrb	r0, [r1, #1]
    5558:	7015      	strb	r5, [r2, #0]
    555a:	7050      	strb	r0, [r2, #1]
    555c:	788d      	ldrb	r5, [r1, #2]
    555e:	78c8      	ldrb	r0, [r1, #3]
    5560:	7095      	strb	r5, [r2, #2]
    5562:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    5564:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    5566:	790d      	ldrb	r5, [r1, #4]
    5568:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    556a:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    556c:	794d      	ldrb	r5, [r1, #5]
    556e:	7989      	ldrb	r1, [r1, #6]
    5570:	7155      	strb	r5, [r2, #5]
    5572:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    5574:	f000 819b 	beq.w	58ae <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5578:	4960      	ldr	r1, [pc, #384]	; (56fc <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    557a:	4e61      	ldr	r6, [pc, #388]	; (5700 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    557c:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    557e:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5580:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5584:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5586:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    558a:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    558c:	bf0c      	ite	eq
    558e:	2188      	moveq	r1, #136	; 0x88
    5590:	21c8      	movne	r1, #200	; 0xc8
    5592:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5596:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    559a:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    559e:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    55a0:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    55a2:	6051      	str	r1, [r2, #4]
    55a4:	e69e      	b.n	52e4 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    55a6:	f242 2021 	movw	r0, #8737	; 0x2221
    55aa:	4281      	cmp	r1, r0
    55ac:	f040 81cb 	bne.w	5946 <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    55b0:	4b54      	ldr	r3, [pc, #336]	; (5704 <usb_isr+0x638>)
    55b2:	4c55      	ldr	r4, [pc, #340]	; (5708 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    55b4:	4955      	ldr	r1, [pc, #340]	; (570c <usb_isr+0x640>)
    55b6:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    55b8:	681d      	ldr	r5, [r3, #0]
    55ba:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    55bc:	f8cd e004 	str.w	lr, [sp, #4]
    55c0:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    55c2:	2000      	movs	r0, #0
    55c4:	9002      	str	r0, [sp, #8]
    55c6:	4680      	mov	r8, r0
    55c8:	4684      	mov	ip, r0
    55ca:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    55cc:	494b      	ldr	r1, [pc, #300]	; (56fc <usb_isr+0x630>)
    55ce:	780d      	ldrb	r5, [r1, #0]
    55d0:	f045 0e02 	orr.w	lr, r5, #2
    55d4:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    55d8:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    55da:	9b01      	ldr	r3, [sp, #4]
    55dc:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    55de:	9b03      	ldr	r3, [sp, #12]
    55e0:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    55e2:	bf0c      	ite	eq
    55e4:	2488      	moveq	r4, #136	; 0x88
    55e6:	24c8      	movne	r4, #200	; 0xc8
    55e8:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    55ec:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    55f0:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    55f4:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    55f6:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    55f8:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 56dc <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    55fc:	4b40      	ldr	r3, [pc, #256]	; (5700 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    55fe:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 56fc <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    5602:	2800      	cmp	r0, #0
    5604:	f040 811e 	bne.w	5844 <usb_isr+0x778>
    5608:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    560c:	d11b      	bne.n	5646 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    560e:	f044 0c02 	orr.w	ip, r4, #2
    5612:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    5616:	9c02      	ldr	r4, [sp, #8]
    5618:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 56dc <usb_isr+0x610>
    561c:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    561e:	2a00      	cmp	r2, #0
    5620:	f040 8126 	bne.w	5870 <usb_isr+0x7a4>
    5624:	0402      	lsls	r2, r0, #16
    5626:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    562a:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    562e:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5632:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    5634:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    5636:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5638:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    563a:	2840      	cmp	r0, #64	; 0x40
    563c:	d103      	bne.n	5646 <usb_isr+0x57a>
    563e:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    5640:	4a33      	ldr	r2, [pc, #204]	; (5710 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    5642:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    5644:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    5646:	4a33      	ldr	r2, [pc, #204]	; (5714 <usb_isr+0x648>)
    5648:	2301      	movs	r3, #1
    564a:	7013      	strb	r3, [r2, #0]
    564c:	e64d      	b.n	52ea <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    564e:	f000 fc9d 	bl	5f8c <usb_serial_flush_callback>
    5652:	e5a5      	b.n	51a0 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    5654:	4b21      	ldr	r3, [pc, #132]	; (56dc <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    5656:	482f      	ldr	r0, [pc, #188]	; (5714 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    5658:	4928      	ldr	r1, [pc, #160]	; (56fc <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    565a:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    565c:	f04f 0e02 	mov.w	lr, #2
    5660:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5664:	4f2c      	ldr	r7, [pc, #176]	; (5718 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    5666:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    5668:	492c      	ldr	r1, [pc, #176]	; (571c <usb_isr+0x650>)
    566a:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    566c:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    566e:	4e2c      	ldr	r6, [pc, #176]	; (5720 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    5670:	4d2c      	ldr	r5, [pc, #176]	; (5724 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    5672:	4c2d      	ldr	r4, [pc, #180]	; (5728 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    5674:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5676:	210d      	movs	r1, #13
    5678:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    567a:	21ff      	movs	r1, #255	; 0xff
    567c:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    567e:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 5738 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    5682:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    5684:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    5686:	4d29      	ldr	r5, [pc, #164]	; (572c <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    5688:	4a29      	ldr	r2, [pc, #164]	; (5730 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    568a:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    568e:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    5690:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    5692:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    5696:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    5698:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    569a:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    569c:	b007      	add	sp, #28
    569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    56a2:	4a24      	ldr	r2, [pc, #144]	; (5734 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    56a4:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    56a8:	7813      	ldrb	r3, [r2, #0]
    56aa:	3301      	adds	r3, #1
    56ac:	7013      	strb	r3, [r2, #0]
    56ae:	e557      	b.n	5160 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    56b0:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    56b4:	4d0e      	ldr	r5, [pc, #56]	; (56f0 <usb_isr+0x624>)
    56b6:	e53a      	b.n	512e <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    56b8:	5d8b      	ldrb	r3, [r1, r6]
    56ba:	2b03      	cmp	r3, #3
    56bc:	f200 80f0 	bhi.w	58a0 <usb_isr+0x7d4>
    56c0:	a201      	add	r2, pc, #4	; (adr r2, 56c8 <usb_isr+0x5fc>)
    56c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    56c6:	bf00      	nop
    56c8:	00005161 	.word	0x00005161
    56cc:	00005161 	.word	0x00005161
    56d0:	00005785 	.word	0x00005785
    56d4:	0000577f 	.word	0x0000577f
    56d8:	1fff914c 	.word	0x1fff914c
    56dc:	1fff8000 	.word	0x1fff8000
    56e0:	1fff9128 	.word	0x1fff9128
    56e4:	1fff90c4 	.word	0x1fff90c4
    56e8:	1fff9118 	.word	0x1fff9118
    56ec:	1fff9150 	.word	0x1fff9150
    56f0:	1fff9070 	.word	0x1fff9070
    56f4:	1fff9314 	.word	0x1fff9314
    56f8:	1fff931c 	.word	0x1fff931c
    56fc:	1fff9140 	.word	0x1fff9140
    5700:	1fff90d4 	.word	0x1fff90d4
    5704:	1fff9068 	.word	0x1fff9068
    5708:	1fff9324 	.word	0x1fff9324
    570c:	1fff9164 	.word	0x1fff9164
    5710:	1fff9080 	.word	0x1fff9080
    5714:	40072094 	.word	0x40072094
    5718:	400720c0 	.word	0x400720c0
    571c:	00400088 	.word	0x00400088
    5720:	40072088 	.word	0x40072088
    5724:	40072080 	.word	0x40072080
    5728:	40072098 	.word	0x40072098
    572c:	1fff9084 	.word	0x1fff9084
    5730:	1fff90d8 	.word	0x1fff90d8
    5734:	1fff9141 	.word	0x1fff9141
    5738:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    573c:	49c1      	ldr	r1, [pc, #772]	; (5a44 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    573e:	4bc2      	ldr	r3, [pc, #776]	; (5a48 <usb_isr+0x97c>)
    5740:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5742:	200d      	movs	r0, #13
    5744:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    5746:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    5748:	07a2      	lsls	r2, r4, #30
    574a:	f57f ae0e 	bpl.w	536a <usb_isr+0x29e>
    574e:	e605      	b.n	535c <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    5750:	f240 3202 	movw	r2, #770	; 0x302
    5754:	4291      	cmp	r1, r2
    5756:	f040 80ee 	bne.w	5936 <usb_isr+0x86a>
    575a:	88a9      	ldrh	r1, [r5, #4]
    575c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    5760:	2904      	cmp	r1, #4
    5762:	d868      	bhi.n	5836 <usb_isr+0x76a>
    5764:	886a      	ldrh	r2, [r5, #2]
    5766:	2a00      	cmp	r2, #0
    5768:	d165      	bne.n	5836 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    576a:	48b6      	ldr	r0, [pc, #728]	; (5a44 <usb_isr+0x978>)
    576c:	f8cd e004 	str.w	lr, [sp, #4]
    5770:	0089      	lsls	r1, r1, #2
    5772:	4408      	add	r0, r1
    5774:	7801      	ldrb	r1, [r0, #0]
    5776:	f041 0102 	orr.w	r1, r1, #2
    577a:	7001      	strb	r1, [r0, #0]
    577c:	e721      	b.n	55c2 <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    577e:	2301      	movs	r3, #1
    5780:	558b      	strb	r3, [r1, r6]
						break;
    5782:	e4ed      	b.n	5160 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    5784:	2300      	movs	r3, #0
    5786:	558b      	strb	r3, [r1, r6]
						break;
    5788:	e4ea      	b.n	5160 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    578a:	f04f 0301 	mov.w	r3, #1
    578e:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    5792:	3501      	adds	r5, #1
    5794:	2d04      	cmp	r5, #4
    5796:	f106 0604 	add.w	r6, r6, #4
    579a:	f107 0704 	add.w	r7, r7, #4
    579e:	f108 0801 	add.w	r8, r8, #1
    57a2:	f47f aea1 	bne.w	54e8 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    57a6:	4ca9      	ldr	r4, [pc, #676]	; (5a4c <usb_isr+0x980>)
			*reg = epconf;
    57a8:	4ba9      	ldr	r3, [pc, #676]	; (5a50 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    57aa:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    57ac:	4da9      	ldr	r5, [pc, #676]	; (5a54 <usb_isr+0x988>)
    57ae:	9f04      	ldr	r7, [sp, #16]
    57b0:	9e05      	ldr	r6, [sp, #20]
    57b2:	2100      	movs	r1, #0
    57b4:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    57b6:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    57b8:	0713      	lsls	r3, r2, #28
    57ba:	f100 8105 	bmi.w	59c8 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    57be:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    57c0:	49a5      	ldr	r1, [pc, #660]	; (5a58 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    57c2:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 5a64 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    57c6:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    57c8:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    57ca:	f04f 0100 	mov.w	r1, #0
    57ce:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    57d2:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    57d6:	f100 80e0 	bmi.w	599a <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    57da:	49a0      	ldr	r1, [pc, #640]	; (5a5c <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    57dc:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    57de:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    57e0:	2100      	movs	r1, #0
    57e2:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    57e6:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    57ea:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    57ec:	f8df 8274 	ldr.w	r8, [pc, #628]	; 5a64 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    57f0:	f100 8101 	bmi.w	59f6 <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    57f4:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    57f6:	499a      	ldr	r1, [pc, #616]	; (5a60 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    57f8:	4c9a      	ldr	r4, [pc, #616]	; (5a64 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    57fa:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    57fc:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    57fe:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    5800:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    5804:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    5808:	f100 80b0 	bmi.w	596c <usb_isr+0x8a0>
    580c:	7833      	ldrb	r3, [r6, #0]
    580e:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    5810:	2100      	movs	r1, #0
    5812:	f083 0201 	eor.w	r2, r3, #1
    5816:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    581a:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    581e:	e6d0      	b.n	55c2 <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    5820:	f04f 0300 	mov.w	r3, #0
    5824:	f888 3000 	strb.w	r3, [r8]
    5828:	e7b3      	b.n	5792 <usb_isr+0x6c6>
    582a:	88a9      	ldrh	r1, [r5, #4]
    582c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    5830:	2904      	cmp	r1, #4
    5832:	f240 808d 	bls.w	5950 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5836:	4a83      	ldr	r2, [pc, #524]	; (5a44 <usb_isr+0x978>)
    5838:	230f      	movs	r3, #15
    583a:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    583c:	4a8a      	ldr	r2, [pc, #552]	; (5a68 <usb_isr+0x99c>)
    583e:	2301      	movs	r3, #1
    5840:	7013      	strb	r3, [r2, #0]
    5842:	e552      	b.n	52ea <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    5844:	2840      	cmp	r0, #64	; 0x40
    5846:	f67f aee2 	bls.w	560e <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    584a:	f044 0402 	orr.w	r4, r4, #2
    584e:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    5852:	9e02      	ldr	r6, [sp, #8]
    5854:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5856:	b1ba      	cbz	r2, 5888 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    5858:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    585c:	4a83      	ldr	r2, [pc, #524]	; (5a6c <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    585e:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5860:	4633      	mov	r3, r6
    5862:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5864:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5868:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    586a:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    586e:	e6e7      	b.n	5640 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    5870:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5874:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5876:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5878:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    587a:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    587c:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5880:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5882:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    5886:	e6d8      	b.n	563a <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    5888:	f89d 1004 	ldrb.w	r1, [sp, #4]
    588c:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    588e:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5890:	4a77      	ldr	r2, [pc, #476]	; (5a70 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5892:	f888 5000 	strb.w	r5, [r8]
    5896:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5898:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    589a:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    589e:	e6cf      	b.n	5640 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    58a0:	f019 0f08 	tst.w	r9, #8
    58a4:	bf0c      	ite	eq
    58a6:	2302      	moveq	r3, #2
    58a8:	2303      	movne	r3, #3
    58aa:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    58ac:	e458      	b.n	5160 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    58ae:	4a71      	ldr	r2, [pc, #452]	; (5a74 <usb_isr+0x9a8>)
    58b0:	210f      	movs	r1, #15
    58b2:	7011      	strb	r1, [r2, #0]
    58b4:	e660      	b.n	5578 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    58b6:	4a70      	ldr	r2, [pc, #448]	; (5a78 <usb_isr+0x9ac>)
    58b8:	6854      	ldr	r4, [r2, #4]
    58ba:	2c00      	cmp	r4, #0
    58bc:	d0bb      	beq.n	5836 <usb_isr+0x76a>
    58be:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    58c0:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    58c4:	e003      	b.n	58ce <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    58c6:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    58c8:	6854      	ldr	r4, [r2, #4]
    58ca:	2c00      	cmp	r4, #0
    58cc:	d0b3      	beq.n	5836 <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    58ce:	8813      	ldrh	r3, [r2, #0]
    58d0:	4283      	cmp	r3, r0
    58d2:	d1f8      	bne.n	58c6 <usb_isr+0x7fa>
    58d4:	8853      	ldrh	r3, [r2, #2]
    58d6:	4573      	cmp	r3, lr
    58d8:	d1f5      	bne.n	58c6 <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    58da:	0a00      	lsrs	r0, r0, #8
    58dc:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    58de:	bf0c      	ite	eq
    58e0:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    58e4:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    58e8:	e003      	b.n	58f2 <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    58ea:	4a64      	ldr	r2, [pc, #400]	; (5a7c <usb_isr+0x9b0>)
    58ec:	4c64      	ldr	r4, [pc, #400]	; (5a80 <usb_isr+0x9b4>)
    58ee:	7812      	ldrb	r2, [r2, #0]
    58f0:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    58f2:	88e8      	ldrh	r0, [r5, #6]
    58f4:	4570      	cmp	r0, lr
    58f6:	f080 813f 	bcs.w	5b78 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    58fa:	4962      	ldr	r1, [pc, #392]	; (5a84 <usb_isr+0x9b8>)
    58fc:	780d      	ldrb	r5, [r1, #0]
    58fe:	2840      	cmp	r0, #64	; 0x40
    5900:	4684      	mov	ip, r0
    5902:	f045 0e02 	orr.w	lr, r5, #2
    5906:	bf28      	it	cs
    5908:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    590c:	eb04 030c 	add.w	r3, r4, ip
    5910:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    5914:	9302      	str	r3, [sp, #8]
    5916:	2301      	movs	r3, #1
    5918:	6054      	str	r4, [r2, #4]
    591a:	ebcc 0000 	rsb	r0, ip, r0
    591e:	ea4f 480c 	mov.w	r8, ip, lsl #16
    5922:	2200      	movs	r2, #0
    5924:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5926:	24c8      	movs	r4, #200	; 0xc8
    5928:	e65e      	b.n	55e8 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    592a:	4c55      	ldr	r4, [pc, #340]	; (5a80 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    592c:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    5930:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    5932:	7062      	strb	r2, [r4, #1]
    5934:	e7dd      	b.n	58f2 <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    5936:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    593a:	f47f af7c 	bne.w	5836 <usb_isr+0x76a>
    593e:	2301      	movs	r3, #1
    5940:	2200      	movs	r2, #0
    5942:	9301      	str	r3, [sp, #4]
    5944:	e63d      	b.n	55c2 <usb_isr+0x4f6>
    5946:	f242 3221 	movw	r2, #8993	; 0x2321
    594a:	4291      	cmp	r1, r2
    594c:	d0f7      	beq.n	593e <usb_isr+0x872>
    594e:	e772      	b.n	5836 <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    5950:	886a      	ldrh	r2, [r5, #2]
    5952:	2a00      	cmp	r2, #0
    5954:	f47f af6f 	bne.w	5836 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    5958:	483a      	ldr	r0, [pc, #232]	; (5a44 <usb_isr+0x978>)
    595a:	f8cd e004 	str.w	lr, [sp, #4]
    595e:	0089      	lsls	r1, r1, #2
    5960:	4408      	add	r0, r1
    5962:	7801      	ldrb	r1, [r0, #0]
    5964:	f021 0102 	bic.w	r1, r1, #2
    5968:	7001      	strb	r1, [r0, #0]
    596a:	e62a      	b.n	55c2 <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    596c:	f000 f982 	bl	5c74 <usb_malloc>
				if (p) {
    5970:	2800      	cmp	r0, #0
    5972:	f000 80ef 	beq.w	5b54 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    5976:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5978:	4a3d      	ldr	r2, [pc, #244]	; (5a70 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    597a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    597e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    5982:	f000 f977 	bl	5c74 <usb_malloc>
				if (p) {
    5986:	2800      	cmp	r0, #0
    5988:	f000 80de 	beq.w	5b48 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    598c:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    598e:	4a37      	ldr	r2, [pc, #220]	; (5a6c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    5990:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5994:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    5998:	e738      	b.n	580c <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    599a:	f000 f96b 	bl	5c74 <usb_malloc>
				if (p) {
    599e:	2800      	cmp	r0, #0
    59a0:	f000 80c0 	beq.w	5b24 <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    59a4:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    59a6:	4a32      	ldr	r2, [pc, #200]	; (5a70 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    59a8:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    59ac:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    59b0:	f000 f960 	bl	5c74 <usb_malloc>
				if (p) {
    59b4:	2800      	cmp	r0, #0
    59b6:	f000 80af 	beq.w	5b18 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    59ba:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    59bc:	4a2b      	ldr	r2, [pc, #172]	; (5a6c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    59be:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    59c2:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    59c6:	e708      	b.n	57da <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    59c8:	f000 f954 	bl	5c74 <usb_malloc>
				if (p) {
    59cc:	2800      	cmp	r0, #0
    59ce:	f000 80cd 	beq.w	5b6c <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    59d2:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    59d4:	4a26      	ldr	r2, [pc, #152]	; (5a70 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    59d6:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    59da:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    59de:	f000 f949 	bl	5c74 <usb_malloc>
				if (p) {
    59e2:	2800      	cmp	r0, #0
    59e4:	f000 80bc 	beq.w	5b60 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    59e8:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    59ea:	4a20      	ldr	r2, [pc, #128]	; (5a6c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    59ec:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    59f0:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    59f4:	e6e3      	b.n	57be <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    59f6:	f000 f93d 	bl	5c74 <usb_malloc>
				if (p) {
    59fa:	2800      	cmp	r0, #0
    59fc:	f000 809e 	beq.w	5b3c <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    5a00:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5a02:	4a1b      	ldr	r2, [pc, #108]	; (5a70 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    5a04:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5a08:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    5a0c:	f000 f932 	bl	5c74 <usb_malloc>
				if (p) {
    5a10:	2800      	cmp	r0, #0
    5a12:	f000 808d 	beq.w	5b30 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    5a16:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5a18:	4a14      	ldr	r2, [pc, #80]	; (5a6c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    5a1a:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5a1e:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    5a22:	e6e7      	b.n	57f4 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    5a24:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    5a26:	3808      	subs	r0, #8
    5a28:	f000 f944 	bl	5cb4 <usb_free>
    5a2c:	e504      	b.n	5438 <usb_isr+0x36c>
    5a2e:	6b48      	ldr	r0, [r1, #52]	; 0x34
    5a30:	3808      	subs	r0, #8
    5a32:	f000 f93f 	bl	5cb4 <usb_free>
    5a36:	e4f9      	b.n	542c <usb_isr+0x360>
    5a38:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    5a3a:	3808      	subs	r0, #8
    5a3c:	f000 f93a 	bl	5cb4 <usb_free>
    5a40:	e4ee      	b.n	5420 <usb_isr+0x354>
    5a42:	bf00      	nop
    5a44:	400720c0 	.word	0x400720c0
    5a48:	40072080 	.word	0x40072080
    5a4c:	00008bfc 	.word	0x00008bfc
    5a50:	400720c4 	.word	0x400720c4
    5a54:	1fff9141 	.word	0x1fff9141
    5a58:	400720c8 	.word	0x400720c8
    5a5c:	400720cc 	.word	0x400720cc
    5a60:	400720d0 	.word	0x400720d0
    5a64:	1fff8000 	.word	0x1fff8000
    5a68:	40072094 	.word	0x40072094
    5a6c:	004000c8 	.word	0x004000c8
    5a70:	00400088 	.word	0x00400088
    5a74:	1fff90d5 	.word	0x1fff90d5
    5a78:	00008c00 	.word	0x00008c00
    5a7c:	1fff914c 	.word	0x1fff914c
    5a80:	1fff9144 	.word	0x1fff9144
    5a84:	1fff9140 	.word	0x1fff9140
    5a88:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5a8a:	3808      	subs	r0, #8
    5a8c:	f000 f912 	bl	5cb4 <usb_free>
    5a90:	e4c0      	b.n	5414 <usb_isr+0x348>
    5a92:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    5a94:	3808      	subs	r0, #8
    5a96:	f000 f90d 	bl	5cb4 <usb_free>
    5a9a:	e4fd      	b.n	5498 <usb_isr+0x3cc>
    5a9c:	6f48      	ldr	r0, [r1, #116]	; 0x74
    5a9e:	3808      	subs	r0, #8
    5aa0:	f000 f908 	bl	5cb4 <usb_free>
    5aa4:	e4f2      	b.n	548c <usb_isr+0x3c0>
    5aa6:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    5aa8:	3808      	subs	r0, #8
    5aaa:	f000 f903 	bl	5cb4 <usb_free>
    5aae:	e4e7      	b.n	5480 <usb_isr+0x3b4>
    5ab0:	6e48      	ldr	r0, [r1, #100]	; 0x64
    5ab2:	3808      	subs	r0, #8
    5ab4:	f000 f8fe 	bl	5cb4 <usb_free>
    5ab8:	e4dc      	b.n	5474 <usb_isr+0x3a8>
    5aba:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    5abc:	3808      	subs	r0, #8
    5abe:	f000 f8f9 	bl	5cb4 <usb_free>
    5ac2:	e4d1      	b.n	5468 <usb_isr+0x39c>
    5ac4:	6d48      	ldr	r0, [r1, #84]	; 0x54
    5ac6:	3808      	subs	r0, #8
    5ac8:	f000 f8f4 	bl	5cb4 <usb_free>
    5acc:	e4c6      	b.n	545c <usb_isr+0x390>
    5ace:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    5ad0:	3808      	subs	r0, #8
    5ad2:	f000 f8ef 	bl	5cb4 <usb_free>
    5ad6:	e4bb      	b.n	5450 <usb_isr+0x384>
    5ad8:	6c48      	ldr	r0, [r1, #68]	; 0x44
    5ada:	3808      	subs	r0, #8
    5adc:	f000 f8ea 	bl	5cb4 <usb_free>
    5ae0:	e4b0      	b.n	5444 <usb_isr+0x378>
    5ae2:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    5ae6:	3808      	subs	r0, #8
    5ae8:	f000 f8e4 	bl	5cb4 <usb_free>
    5aec:	e4ec      	b.n	54c8 <usb_isr+0x3fc>
    5aee:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    5af2:	3808      	subs	r0, #8
    5af4:	f000 f8de 	bl	5cb4 <usb_free>
    5af8:	e4e0      	b.n	54bc <usb_isr+0x3f0>
    5afa:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    5afe:	3808      	subs	r0, #8
    5b00:	f000 f8d8 	bl	5cb4 <usb_free>
    5b04:	e4d4      	b.n	54b0 <usb_isr+0x3e4>
    5b06:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    5b0a:	3808      	subs	r0, #8
    5b0c:	f000 f8d2 	bl	5cb4 <usb_free>
    5b10:	e4c8      	b.n	54a4 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    5b12:	f04f 0e02 	mov.w	lr, #2
    5b16:	e6ec      	b.n	58f2 <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5b18:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5b1a:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    5b1e:	3201      	adds	r2, #1
    5b20:	702a      	strb	r2, [r5, #0]
    5b22:	e65a      	b.n	57da <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5b24:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5b26:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    5b2a:	3201      	adds	r2, #1
    5b2c:	702a      	strb	r2, [r5, #0]
    5b2e:	e73f      	b.n	59b0 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5b30:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5b32:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    5b36:	3201      	adds	r2, #1
    5b38:	702a      	strb	r2, [r5, #0]
    5b3a:	e65b      	b.n	57f4 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5b3c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5b3e:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    5b42:	3201      	adds	r2, #1
    5b44:	702a      	strb	r2, [r5, #0]
    5b46:	e761      	b.n	5a0c <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5b48:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5b4a:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    5b4e:	3201      	adds	r2, #1
    5b50:	702a      	strb	r2, [r5, #0]
    5b52:	e65b      	b.n	580c <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5b54:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5b56:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    5b5a:	3201      	adds	r2, #1
    5b5c:	702a      	strb	r2, [r5, #0]
    5b5e:	e710      	b.n	5982 <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5b60:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5b62:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    5b66:	3201      	adds	r2, #1
    5b68:	702a      	strb	r2, [r5, #0]
    5b6a:	e628      	b.n	57be <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5b6c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5b6e:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    5b72:	3201      	adds	r2, #1
    5b74:	702a      	strb	r2, [r5, #0]
    5b76:	e732      	b.n	59de <usb_isr+0x912>
    5b78:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    5b7c:	46f4      	mov	ip, lr
    5b7e:	bf28      	it	cs
    5b80:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    5b84:	eb04 030c 	add.w	r3, r4, ip
    5b88:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    5b8a:	2301      	movs	r3, #1
    5b8c:	ebcc 000e 	rsb	r0, ip, lr
    5b90:	ea4f 480c 	mov.w	r8, ip, lsl #16
    5b94:	2200      	movs	r2, #0
    5b96:	9301      	str	r3, [sp, #4]
    5b98:	e518      	b.n	55cc <usb_isr+0x500>
    5b9a:	bf00      	nop

00005b9c <usb_init>:
}



void usb_init(void)
{
    5b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    5b9e:	f000 fd9b 	bl	66d8 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5ba2:	4b29      	ldr	r3, [pc, #164]	; (5c48 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    5ba4:	4829      	ldr	r0, [pc, #164]	; (5c4c <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    5ba6:	4c2a      	ldr	r4, [pc, #168]	; (5c50 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5ba8:	4f2a      	ldr	r7, [pc, #168]	; (5c54 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5baa:	4d2b      	ldr	r5, [pc, #172]	; (5c58 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    5bac:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 5c6c <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    5bb0:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 5c70 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    5bb4:	4e29      	ldr	r6, [pc, #164]	; (5c5c <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bb6:	2200      	movs	r2, #0
    5bb8:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    5bba:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bbc:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    5bbe:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bc0:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    5bc2:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bc4:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    5bc6:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bc8:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    5bca:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bcc:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    5bce:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bd0:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    5bd2:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bd4:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    5bd6:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bd8:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    5bda:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bdc:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    5bde:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5be0:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    5be2:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5be4:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    5be6:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5be8:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    5bea:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bec:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    5bee:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bf0:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    5bf2:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bf4:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    5bf6:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    5bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    5bfc:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    5bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    5c02:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    5c06:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    5c08:	f3c3 2107 	ubfx	r1, r3, #8, #8
    5c0c:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5c0e:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    5c12:	4913      	ldr	r1, [pc, #76]	; (5c60 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5c14:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5c16:	0e1b      	lsrs	r3, r3, #24
    5c18:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    5c1a:	23ff      	movs	r3, #255	; 0xff
    5c1c:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    5c20:	4d10      	ldr	r5, [pc, #64]	; (5c64 <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    5c22:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    5c26:	4810      	ldr	r0, [pc, #64]	; (5c68 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    5c28:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    5c2a:	2301      	movs	r3, #1
    5c2c:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    5c2e:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    5c32:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    5c34:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    5c38:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    5c3a:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    5c3e:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    5c40:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    5c42:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    5c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c48:	1fff8000 	.word	0x1fff8000
    5c4c:	40048034 	.word	0x40048034
    5c50:	4007209c 	.word	0x4007209c
    5c54:	400720b0 	.word	0x400720b0
    5c58:	400720b4 	.word	0x400720b4
    5c5c:	40072094 	.word	0x40072094
    5c60:	40072010 	.word	0x40072010
    5c64:	e000e449 	.word	0xe000e449
    5c68:	e000e108 	.word	0xe000e108
    5c6c:	40072080 	.word	0x40072080
    5c70:	40072088 	.word	0x40072088

00005c74 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    5c74:	b672      	cpsid	i
	avail = usb_buffer_available;
    5c76:	480d      	ldr	r0, [pc, #52]	; (5cac <usb_malloc+0x38>)
    5c78:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    5c7a:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    5c7e:	2b0b      	cmp	r3, #11
    5c80:	dc10      	bgt.n	5ca4 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    5c82:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    5c86:	40d9      	lsrs	r1, r3
    5c88:	ea22 0201 	bic.w	r2, r2, r1
    5c8c:	6002      	str	r2, [r0, #0]
	__enable_irq();
    5c8e:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    5c90:	4807      	ldr	r0, [pc, #28]	; (5cb0 <usb_malloc+0x3c>)
    5c92:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    5c96:	00db      	lsls	r3, r3, #3
    5c98:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    5c9a:	2100      	movs	r1, #0
    5c9c:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    5c9e:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    5ca0:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    5ca2:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    5ca4:	b662      	cpsie	i
		return NULL;
    5ca6:	2000      	movs	r0, #0
    5ca8:	4770      	bx	lr
    5caa:	bf00      	nop
    5cac:	1fff8770 	.word	0x1fff8770
    5cb0:	1fff83bc 	.word	0x1fff83bc

00005cb4 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    5cb4:	4b0d      	ldr	r3, [pc, #52]	; (5cec <usb_free+0x38>)
    5cb6:	4a0e      	ldr	r2, [pc, #56]	; (5cf0 <usb_free+0x3c>)
    5cb8:	1ac3      	subs	r3, r0, r3
    5cba:	fba2 2303 	umull	r2, r3, r2, r3
    5cbe:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    5cc0:	2b0b      	cmp	r3, #11
    5cc2:	d80c      	bhi.n	5cde <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    5cc4:	4a0b      	ldr	r2, [pc, #44]	; (5cf4 <usb_free+0x40>)
    5cc6:	7812      	ldrb	r2, [r2, #0]
    5cc8:	b952      	cbnz	r2, 5ce0 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    5cca:	b672      	cpsid	i
	usb_buffer_available |= mask;
    5ccc:	480a      	ldr	r0, [pc, #40]	; (5cf8 <usb_free+0x44>)
    5cce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    5cd2:	6802      	ldr	r2, [r0, #0]
    5cd4:	fa21 f303 	lsr.w	r3, r1, r3
    5cd8:	431a      	orrs	r2, r3
    5cda:	6002      	str	r2, [r0, #0]
	__enable_irq();
    5cdc:	b662      	cpsie	i
    5cde:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    5ce0:	4a06      	ldr	r2, [pc, #24]	; (5cfc <usb_free+0x48>)
    5ce2:	7812      	ldrb	r2, [r2, #0]
    5ce4:	2a00      	cmp	r2, #0
    5ce6:	d0f0      	beq.n	5cca <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    5ce8:	f7ff b94a 	b.w	4f80 <usb_rx_memory>
    5cec:	1fff83bc 	.word	0x1fff83bc
    5cf0:	38e38e39 	.word	0x38e38e39
    5cf4:	1fff9141 	.word	0x1fff9141
    5cf8:	1fff8770 	.word	0x1fff8770
    5cfc:	1fff914c 	.word	0x1fff914c

00005d00 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    5d00:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    5d02:	4d0f      	ldr	r5, [pc, #60]	; (5d40 <usb_serial_getchar+0x40>)
    5d04:	6828      	ldr	r0, [r5, #0]
    5d06:	b178      	cbz	r0, 5d28 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    5d08:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    5d0a:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    5d0c:	18c1      	adds	r1, r0, r3
    5d0e:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    5d10:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    5d12:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    5d14:	d202      	bcs.n	5d1c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    5d16:	8043      	strh	r3, [r0, #2]
	}
	return c;
    5d18:	4620      	mov	r0, r4
}
    5d1a:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    5d1c:	f7ff ffca 	bl	5cb4 <usb_free>
		rx_packet = NULL;
    5d20:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    5d22:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    5d24:	602b      	str	r3, [r5, #0]
    5d26:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5d28:	4b06      	ldr	r3, [pc, #24]	; (5d44 <usb_serial_getchar+0x44>)
    5d2a:	781b      	ldrb	r3, [r3, #0]
    5d2c:	b12b      	cbz	r3, 5d3a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    5d2e:	2003      	movs	r0, #3
    5d30:	f7ff f8f2 	bl	4f18 <usb_rx>
    5d34:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    5d36:	2800      	cmp	r0, #0
    5d38:	d1e6      	bne.n	5d08 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5d3a:	f04f 30ff 	mov.w	r0, #4294967295
    5d3e:	bd38      	pop	{r3, r4, r5, pc}
    5d40:	1fff9160 	.word	0x1fff9160
    5d44:	1fff914c 	.word	0x1fff914c

00005d48 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    5d48:	b510      	push	{r4, lr}
	if (!rx_packet) {
    5d4a:	4c09      	ldr	r4, [pc, #36]	; (5d70 <usb_serial_peekchar+0x28>)
    5d4c:	6820      	ldr	r0, [r4, #0]
    5d4e:	b118      	cbz	r0, 5d58 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    5d50:	8843      	ldrh	r3, [r0, #2]
    5d52:	4418      	add	r0, r3
    5d54:	7a00      	ldrb	r0, [r0, #8]
}
    5d56:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5d58:	4b06      	ldr	r3, [pc, #24]	; (5d74 <usb_serial_peekchar+0x2c>)
    5d5a:	781b      	ldrb	r3, [r3, #0]
    5d5c:	b12b      	cbz	r3, 5d6a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    5d5e:	2003      	movs	r0, #3
    5d60:	f7ff f8da 	bl	4f18 <usb_rx>
    5d64:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    5d66:	2800      	cmp	r0, #0
    5d68:	d1f2      	bne.n	5d50 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5d6a:	f04f 30ff 	mov.w	r0, #4294967295
    5d6e:	bd10      	pop	{r4, pc}
    5d70:	1fff9160 	.word	0x1fff9160
    5d74:	1fff914c 	.word	0x1fff914c

00005d78 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    5d78:	4b04      	ldr	r3, [pc, #16]	; (5d8c <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    5d7a:	4a05      	ldr	r2, [pc, #20]	; (5d90 <usb_serial_available+0x18>)
    5d7c:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    5d7e:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    5d80:	b11b      	cbz	r3, 5d8a <usb_serial_available+0x12>
    5d82:	881a      	ldrh	r2, [r3, #0]
    5d84:	885b      	ldrh	r3, [r3, #2]
    5d86:	1ad3      	subs	r3, r2, r3
    5d88:	4418      	add	r0, r3
	return count;
}
    5d8a:	4770      	bx	lr
    5d8c:	1fff9160 	.word	0x1fff9160
    5d90:	1fff9314 	.word	0x1fff9314

00005d94 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    5d94:	4b0b      	ldr	r3, [pc, #44]	; (5dc4 <usb_serial_flush_input+0x30>)
    5d96:	781b      	ldrb	r3, [r3, #0]
    5d98:	b19b      	cbz	r3, 5dc2 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    5d9a:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    5d9c:	4c0a      	ldr	r4, [pc, #40]	; (5dc8 <usb_serial_flush_input+0x34>)
    5d9e:	6820      	ldr	r0, [r4, #0]
    5da0:	b148      	cbz	r0, 5db6 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    5da2:	f7ff ff87 	bl	5cb4 <usb_free>
		rx_packet = NULL;
    5da6:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5da8:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    5daa:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5dac:	f7ff f8b4 	bl	4f18 <usb_rx>
		if (!rx) break;
    5db0:	b130      	cbz	r0, 5dc0 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    5db2:	f7ff ff7f 	bl	5cb4 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5db6:	2003      	movs	r0, #3
    5db8:	f7ff f8ae 	bl	4f18 <usb_rx>
		if (!rx) break;
    5dbc:	2800      	cmp	r0, #0
    5dbe:	d1f8      	bne.n	5db2 <usb_serial_flush_input+0x1e>
    5dc0:	bd10      	pop	{r4, pc}
    5dc2:	4770      	bx	lr
    5dc4:	1fff914c 	.word	0x1fff914c
    5dc8:	1fff9160 	.word	0x1fff9160

00005dcc <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    5dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    5dd0:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 5ecc <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    5dd4:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    5dd6:	2201      	movs	r2, #1
    5dd8:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    5ddc:	9101      	str	r1, [sp, #4]
    5dde:	b369      	cbz	r1, 5e3c <usb_serial_write+0x70>
    5de0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 5ed0 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5de4:	4f36      	ldr	r7, [pc, #216]	; (5ec0 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    5de6:	9e01      	ldr	r6, [sp, #4]
    5de8:	4683      	mov	fp, r0
		if (!tx_packet) {
    5dea:	f8d8 0000 	ldr.w	r0, [r8]
    5dee:	b3b0      	cbz	r0, 5e5e <usb_serial_write+0x92>
    5df0:	4d34      	ldr	r5, [pc, #208]	; (5ec4 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    5df2:	8844      	ldrh	r4, [r0, #2]
    5df4:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    5df8:	42b1      	cmp	r1, r6
    5dfa:	bf28      	it	cs
    5dfc:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5dfe:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    5e02:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5e04:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    5e08:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    5e0a:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5e0c:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    5e10:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    5e14:	b151      	cbz	r1, 5e2c <usb_serial_write+0x60>
    5e16:	3c01      	subs	r4, #1
    5e18:	4422      	add	r2, r4
    5e1a:	4459      	add	r1, fp
    5e1c:	f81b 4b01 	ldrb.w	r4, [fp], #1
    5e20:	f802 4f01 	strb.w	r4, [r2, #1]!
    5e24:	458b      	cmp	fp, r1
    5e26:	d1f9      	bne.n	5e1c <usb_serial_write+0x50>
    5e28:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    5e2c:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    5e30:	d80b      	bhi.n	5e4a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    5e32:	4a25      	ldr	r2, [pc, #148]	; (5ec8 <usb_serial_write+0xfc>)
    5e34:	2105      	movs	r1, #5
    5e36:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    5e38:	2e00      	cmp	r6, #0
    5e3a:	d1d6      	bne.n	5dea <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    5e3c:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    5e3e:	2300      	movs	r3, #0
    5e40:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    5e44:	b003      	add	sp, #12
    5e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    5e4a:	2240      	movs	r2, #64	; 0x40
    5e4c:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5e4e:	4601      	mov	r1, r0
    5e50:	2004      	movs	r0, #4
    5e52:	f7ff f8f9 	bl	5048 <usb_tx>
			tx_packet = NULL;
    5e56:	2200      	movs	r2, #0
    5e58:	f8c8 2000 	str.w	r2, [r8]
    5e5c:	e7e9      	b.n	5e32 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5e5e:	783a      	ldrb	r2, [r7, #0]
    5e60:	b32a      	cbz	r2, 5eae <usb_serial_write+0xe2>
    5e62:	4d18      	ldr	r5, [pc, #96]	; (5ec4 <usb_serial_write+0xf8>)
    5e64:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    5e68:	f04f 0a01 	mov.w	sl, #1
    5e6c:	e007      	b.n	5e7e <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5e6e:	3c01      	subs	r4, #1
    5e70:	d016      	beq.n	5ea0 <usb_serial_write+0xd4>
    5e72:	782a      	ldrb	r2, [r5, #0]
    5e74:	b9a2      	cbnz	r2, 5ea0 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    5e76:	f000 fa13 	bl	62a0 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5e7a:	783a      	ldrb	r2, [r7, #0]
    5e7c:	b1ba      	cbz	r2, 5eae <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    5e7e:	2004      	movs	r0, #4
    5e80:	f7ff f868 	bl	4f54 <usb_tx_packet_count>
    5e84:	2807      	cmp	r0, #7
    5e86:	d8f2      	bhi.n	5e6e <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    5e88:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    5e8c:	f7ff fef2 	bl	5c74 <usb_malloc>
    5e90:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    5e94:	2800      	cmp	r0, #0
    5e96:	d1ac      	bne.n	5df2 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    5e98:	4b0c      	ldr	r3, [pc, #48]	; (5ecc <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5e9a:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    5e9c:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5e9e:	d1e8      	bne.n	5e72 <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    5ea0:	2301      	movs	r3, #1
					return -1;
    5ea2:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    5ea6:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    5ea8:	b003      	add	sp, #12
    5eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    5eae:	2300      	movs	r3, #0
					return -1;
    5eb0:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    5eb4:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    5eb8:	b003      	add	sp, #12
    5eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ebe:	bf00      	nop
    5ec0:	1fff914c 	.word	0x1fff914c
    5ec4:	1fff915c 	.word	0x1fff915c
    5ec8:	1fff9154 	.word	0x1fff9154
    5ecc:	1fff9155 	.word	0x1fff9155
    5ed0:	1fff9158 	.word	0x1fff9158

00005ed4 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    5ed4:	b500      	push	{lr}
    5ed6:	b083      	sub	sp, #12
    5ed8:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    5eda:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    5edc:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    5ee0:	4618      	mov	r0, r3
    5ee2:	f7ff ff73 	bl	5dcc <usb_serial_write>
}
    5ee6:	b003      	add	sp, #12
    5ee8:	f85d fb04 	ldr.w	pc, [sp], #4

00005eec <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    5eec:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    5eee:	4d0e      	ldr	r5, [pc, #56]	; (5f28 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    5ef0:	4c0e      	ldr	r4, [pc, #56]	; (5f2c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    5ef2:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    5ef4:	2301      	movs	r3, #1
    5ef6:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    5ef8:	b128      	cbz	r0, 5f06 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    5efa:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    5efc:	2300      	movs	r3, #0
    5efe:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    5f00:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    5f04:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    5f06:	4b0a      	ldr	r3, [pc, #40]	; (5f30 <usb_serial_write_buffer_free+0x44>)
    5f08:	781b      	ldrb	r3, [r3, #0]
    5f0a:	b913      	cbnz	r3, 5f12 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    5f0c:	2000      	movs	r0, #0
    5f0e:	7020      	strb	r0, [r4, #0]
			return 0;
    5f10:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    5f12:	2004      	movs	r0, #4
    5f14:	f7ff f81e 	bl	4f54 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    5f18:	2807      	cmp	r0, #7
    5f1a:	d8f7      	bhi.n	5f0c <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    5f1c:	f7ff feaa 	bl	5c74 <usb_malloc>
    5f20:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    5f22:	2800      	cmp	r0, #0
    5f24:	d1e9      	bne.n	5efa <usb_serial_write_buffer_free+0xe>
    5f26:	e7f1      	b.n	5f0c <usb_serial_write_buffer_free+0x20>
    5f28:	1fff9158 	.word	0x1fff9158
    5f2c:	1fff9155 	.word	0x1fff9155
    5f30:	1fff914c 	.word	0x1fff914c

00005f34 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    5f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    5f36:	4b11      	ldr	r3, [pc, #68]	; (5f7c <usb_serial_flush_output+0x48>)
    5f38:	781b      	ldrb	r3, [r3, #0]
    5f3a:	b18b      	cbz	r3, 5f60 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    5f3c:	4e10      	ldr	r6, [pc, #64]	; (5f80 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    5f3e:	4d11      	ldr	r5, [pc, #68]	; (5f84 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    5f40:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    5f42:	2701      	movs	r7, #1
    5f44:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    5f46:	b164      	cbz	r4, 5f62 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    5f48:	4a0f      	ldr	r2, [pc, #60]	; (5f88 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    5f4a:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    5f4c:	2700      	movs	r7, #0
    5f4e:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5f50:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    5f52:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5f54:	2004      	movs	r0, #4
    5f56:	f7ff f877 	bl	5048 <usb_tx>
		tx_packet = NULL;
    5f5a:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    5f5c:	2300      	movs	r3, #0
    5f5e:	702b      	strb	r3, [r5, #0]
    5f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    5f62:	f7ff fe87 	bl	5c74 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    5f66:	4b08      	ldr	r3, [pc, #32]	; (5f88 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    5f68:	b128      	cbz	r0, 5f76 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    5f6a:	4601      	mov	r1, r0
    5f6c:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    5f6e:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    5f70:	f7ff f86a 	bl	5048 <usb_tx>
    5f74:	e7f2      	b.n	5f5c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    5f76:	701f      	strb	r7, [r3, #0]
    5f78:	e7f0      	b.n	5f5c <usb_serial_flush_output+0x28>
    5f7a:	bf00      	nop
    5f7c:	1fff914c 	.word	0x1fff914c
    5f80:	1fff9158 	.word	0x1fff9158
    5f84:	1fff9155 	.word	0x1fff9155
    5f88:	1fff9154 	.word	0x1fff9154

00005f8c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    5f8c:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    5f8e:	4b0e      	ldr	r3, [pc, #56]	; (5fc8 <usb_serial_flush_callback+0x3c>)
    5f90:	781b      	ldrb	r3, [r3, #0]
    5f92:	b973      	cbnz	r3, 5fb2 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    5f94:	4c0d      	ldr	r4, [pc, #52]	; (5fcc <usb_serial_flush_callback+0x40>)
    5f96:	6821      	ldr	r1, [r4, #0]
    5f98:	b161      	cbz	r1, 5fb4 <usb_serial_flush_callback+0x28>
    5f9a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    5f9e:	884b      	ldrh	r3, [r1, #2]
    5fa0:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5fa2:	2004      	movs	r0, #4
    5fa4:	f7ff f850 	bl	5048 <usb_tx>
		tx_packet = NULL;
    5fa8:	6025      	str	r5, [r4, #0]
    5faa:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    5fac:	4b08      	ldr	r3, [pc, #32]	; (5fd0 <usb_serial_flush_callback+0x44>)
    5fae:	2201      	movs	r2, #1
    5fb0:	701a      	strb	r2, [r3, #0]
    5fb2:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    5fb4:	f7ff fe5e 	bl	5c74 <usb_malloc>
		if (tx) {
    5fb8:	2800      	cmp	r0, #0
    5fba:	d0f7      	beq.n	5fac <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    5fbc:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    5fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    5fc2:	2004      	movs	r0, #4
    5fc4:	f7ff b840 	b.w	5048 <usb_tx>
    5fc8:	1fff9155 	.word	0x1fff9155
    5fcc:	1fff9158 	.word	0x1fff9158
    5fd0:	1fff9154 	.word	0x1fff9154

00005fd4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    5fd4:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5fd6:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5fda:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    5fdc:	7f43      	ldrb	r3, [r0, #29]
    5fde:	b933      	cbnz	r3, 5fee <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    5fe0:	7f01      	ldrb	r1, [r0, #28]
    5fe2:	2901      	cmp	r1, #1
    5fe4:	d007      	beq.n	5ff6 <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    5fe6:	2903      	cmp	r1, #3
    5fe8:	d00f      	beq.n	600a <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    5fea:	2301      	movs	r3, #1
    5fec:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5fee:	b902      	cbnz	r2, 5ff2 <EventResponder::triggerEventNotImmediate()+0x1e>
    5ff0:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    5ff2:	bc10      	pop	{r4}
    5ff4:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    5ff6:	4c12      	ldr	r4, [pc, #72]	; (6040 <EventResponder::triggerEventNotImmediate()+0x6c>)
    5ff8:	6821      	ldr	r1, [r4, #0]
    5ffa:	b1a1      	cbz	r1, 6026 <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    5ffc:	4911      	ldr	r1, [pc, #68]	; (6044 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    5ffe:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    6000:	680b      	ldr	r3, [r1, #0]
    6002:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    6004:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    6006:	6158      	str	r0, [r3, #20]
    6008:	e7ef      	b.n	5fea <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    600a:	4c0f      	ldr	r4, [pc, #60]	; (6048 <EventResponder::triggerEventNotImmediate()+0x74>)
    600c:	6821      	ldr	r1, [r4, #0]
    600e:	b181      	cbz	r1, 6032 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    6010:	490e      	ldr	r1, [pc, #56]	; (604c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    6012:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    6014:	680b      	ldr	r3, [r1, #0]
    6016:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    6018:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    601a:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    601c:	4b0c      	ldr	r3, [pc, #48]	; (6050 <EventResponder::triggerEventNotImmediate()+0x7c>)
    601e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    6022:	6019      	str	r1, [r3, #0]
    6024:	e7e1      	b.n	5fea <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    6026:	4b07      	ldr	r3, [pc, #28]	; (6044 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    6028:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    602a:	6181      	str	r1, [r0, #24]
				firstYield = this;
    602c:	6020      	str	r0, [r4, #0]
				lastYield = this;
    602e:	6018      	str	r0, [r3, #0]
    6030:	e7db      	b.n	5fea <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    6032:	4b06      	ldr	r3, [pc, #24]	; (604c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    6034:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    6036:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    6038:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    603a:	6018      	str	r0, [r3, #0]
    603c:	e7ee      	b.n	601c <EventResponder::triggerEventNotImmediate()+0x48>
    603e:	bf00      	nop
    6040:	1fff9178 	.word	0x1fff9178
    6044:	1fff9174 	.word	0x1fff9174
    6048:	1fff9168 	.word	0x1fff9168
    604c:	1fff916c 	.word	0x1fff916c
    6050:	e000ed04 	.word	0xe000ed04

00006054 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    6054:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    6056:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    6058:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    605a:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    605c:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    605e:	d002      	beq.n	6066 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    6060:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    6062:	f7ff bfb7 	b.w	5fd4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    6066:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    6068:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    606a:	4718      	bx	r3

0000606c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    606c:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    606e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    6072:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    6074:	4c0c      	ldr	r4, [pc, #48]	; (60a8 <EventResponder::runFromInterrupt()+0x3c>)
    6076:	6820      	ldr	r0, [r4, #0]
		if (first) {
    6078:	b180      	cbz	r0, 609c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    607a:	4e0c      	ldr	r6, [pc, #48]	; (60ac <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    607c:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    607e:	6943      	ldr	r3, [r0, #20]
    6080:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    6082:	b173      	cbz	r3, 60a2 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    6084:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    6086:	b902      	cbnz	r2, 608a <EventResponder::runFromInterrupt()+0x1e>
    6088:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    608a:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    608c:	6883      	ldr	r3, [r0, #8]
    608e:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    6090:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    6094:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    6096:	6820      	ldr	r0, [r4, #0]
		if (first) {
    6098:	2800      	cmp	r0, #0
    609a:	d1f0      	bne.n	607e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    609c:	b902      	cbnz	r2, 60a0 <EventResponder::runFromInterrupt()+0x34>
    609e:	b662      	cpsie	i
    60a0:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    60a2:	6033      	str	r3, [r6, #0]
    60a4:	e7ef      	b.n	6086 <EventResponder::runFromInterrupt()+0x1a>
    60a6:	bf00      	nop
    60a8:	1fff9168 	.word	0x1fff9168
    60ac:	1fff916c 	.word	0x1fff916c

000060b0 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    60b0:	f7ff bfdc 	b.w	606c <EventResponder::runFromInterrupt()>

000060b4 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    60b4:	4a18      	ldr	r2, [pc, #96]	; (6118 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    60b6:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    60b8:	6814      	ldr	r4, [r2, #0]
    60ba:	2c00      	cmp	r4, #0
    60bc:	d027      	beq.n	610e <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    60be:	6803      	ldr	r3, [r0, #0]
    60c0:	6821      	ldr	r1, [r4, #0]
    60c2:	428b      	cmp	r3, r1
    60c4:	d20e      	bcs.n	60e4 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    60c6:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    60c8:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    60ca:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    60cc:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    60ce:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    60d0:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    60d2:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    60d4:	2302      	movs	r3, #2
    60d6:	7503      	strb	r3, [r0, #20]
}
    60d8:	bc30      	pop	{r4, r5}
    60da:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    60dc:	6811      	ldr	r1, [r2, #0]
    60de:	428b      	cmp	r3, r1
    60e0:	4614      	mov	r4, r2
    60e2:	d308      	bcc.n	60f6 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    60e4:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    60e6:	1a5b      	subs	r3, r3, r1
    60e8:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    60ea:	2a00      	cmp	r2, #0
    60ec:	d1f6      	bne.n	60dc <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    60ee:	6082      	str	r2, [r0, #8]
		_prev = timer;
    60f0:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    60f2:	60a0      	str	r0, [r4, #8]
    60f4:	e7ee      	b.n	60d4 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    60f6:	68d2      	ldr	r2, [r2, #12]
    60f8:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    60fa:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    60fc:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    60fe:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    6100:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    6102:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    6104:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    6106:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    6108:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    610a:	bc30      	pop	{r4, r5}
    610c:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    610e:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    6110:	60c4      	str	r4, [r0, #12]
		listActive = this;
    6112:	6010      	str	r0, [r2, #0]
    6114:	e7de      	b.n	60d4 <MillisTimer::addToActiveList()+0x20>
    6116:	bf00      	nop
    6118:	1fff9170 	.word	0x1fff9170

0000611c <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    611c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    611e:	4e22      	ldr	r6, [pc, #136]	; (61a8 <MillisTimer::runFromTimer()+0x8c>)
    6120:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    6122:	b32c      	cbz	r4, 6170 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    6124:	6823      	ldr	r3, [r4, #0]
    6126:	2b00      	cmp	r3, #0
    6128:	d13a      	bne.n	61a0 <MillisTimer::runFromTimer()+0x84>
    612a:	4f20      	ldr	r7, [pc, #128]	; (61ac <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    612c:	461d      	mov	r5, r3
    612e:	e004      	b.n	613a <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    6130:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    6132:	b1ec      	cbz	r4, 6170 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    6134:	6823      	ldr	r3, [r4, #0]
    6136:	2b00      	cmp	r3, #0
    6138:	d132      	bne.n	61a0 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    613a:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    613c:	b103      	cbz	r3, 6140 <MillisTimer::runFromTimer()+0x24>
    613e:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    6140:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    6142:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    6144:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    6146:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    6148:	681b      	ldr	r3, [r3, #0]
    614a:	42bb      	cmp	r3, r7
    614c:	d121      	bne.n	6192 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    614e:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    6150:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    6152:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    6154:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    6156:	d020      	beq.n	619a <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    6158:	f7ff ff3c 	bl	5fd4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    615c:	6863      	ldr	r3, [r4, #4]
    615e:	2b00      	cmp	r3, #0
    6160:	d0e6      	beq.n	6130 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    6162:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    6164:	4620      	mov	r0, r4
    6166:	f7ff ffa5 	bl	60b4 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    616a:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    616c:	2c00      	cmp	r4, #0
    616e:	d1e1      	bne.n	6134 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    6170:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    6174:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    6176:	4a0e      	ldr	r2, [pc, #56]	; (61b0 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    6178:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    617a:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    617c:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    617e:	b903      	cbnz	r3, 6182 <MillisTimer::runFromTimer()+0x66>
    6180:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    6182:	b128      	cbz	r0, 6190 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    6184:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    6186:	f7ff ff95 	bl	60b4 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    618a:	4620      	mov	r0, r4
    618c:	2800      	cmp	r0, #0
    618e:	d1f9      	bne.n	6184 <MillisTimer::runFromTimer()+0x68>
    6190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    6192:	4622      	mov	r2, r4
    6194:	2100      	movs	r1, #0
    6196:	4798      	blx	r3
    6198:	e7e0      	b.n	615c <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    619a:	6883      	ldr	r3, [r0, #8]
    619c:	4798      	blx	r3
    619e:	e7dd      	b.n	615c <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    61a0:	3b01      	subs	r3, #1
    61a2:	6023      	str	r3, [r4, #0]
			break;
    61a4:	e7e4      	b.n	6170 <MillisTimer::runFromTimer()+0x54>
    61a6:	bf00      	nop
    61a8:	1fff9170 	.word	0x1fff9170
    61ac:	00006055 	.word	0x00006055
    61b0:	1fff9180 	.word	0x1fff9180

000061b4 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    61b4:	4a02      	ldr	r2, [pc, #8]	; (61c0 <systick_isr+0xc>)
    61b6:	6813      	ldr	r3, [r2, #0]
    61b8:	3301      	adds	r3, #1
    61ba:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    61bc:	f7ff bfae 	b.w	611c <MillisTimer::runFromTimer()>
    61c0:	1fff9068 	.word	0x1fff9068

000061c4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    61c4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    61c6:	f7fd fb3b 	bl	3840 <setup>
	while (1) {
		loop();
    61ca:	f7fd fc51 	bl	3a70 <loop>
		yield();
    61ce:	f000 f867 	bl	62a0 <yield>
    61d2:	e7fa      	b.n	61ca <main+0x6>

000061d4 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    61d4:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    61d6:	4a06      	ldr	r2, [pc, #24]	; (61f0 <Print::println()+0x1c>)
	return write(buf, 2);
    61d8:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    61da:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    61dc:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    61de:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    61e0:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    61e2:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    61e6:	2202      	movs	r2, #2
    61e8:	4798      	blx	r3
}
    61ea:	b003      	add	sp, #12
    61ec:	f85d fb04 	ldr.w	pc, [sp], #4
    61f0:	00008bd0 	.word	0x00008bd0

000061f4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    61f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    61f6:	4607      	mov	r7, r0
    61f8:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    61fa:	2a00      	cmp	r2, #0
    61fc:	d033      	beq.n	6266 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    61fe:	2a01      	cmp	r2, #1
    6200:	bf08      	it	eq
    6202:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    6204:	b351      	cbz	r1, 625c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    6206:	2421      	movs	r4, #33	; 0x21
    6208:	e000      	b.n	620c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    620a:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    620c:	fbb1 f5f2 	udiv	r5, r1, r2
    6210:	fb02 1115 	mls	r1, r2, r5, r1
    6214:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    6216:	2909      	cmp	r1, #9
    6218:	f100 0130 	add.w	r1, r0, #48	; 0x30
    621c:	bf98      	it	ls
    621e:	b2c8      	uxtbls	r0, r1
    6220:	a90a      	add	r1, sp, #40	; 0x28
    6222:	bf88      	it	hi
    6224:	3037      	addhi	r0, #55	; 0x37
    6226:	4421      	add	r1, r4
    6228:	bf88      	it	hi
    622a:	b2c0      	uxtbhi	r0, r0
    622c:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    6230:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    6232:	4629      	mov	r1, r5
    6234:	2d00      	cmp	r5, #0
    6236:	d1e8      	bne.n	620a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    6238:	b133      	cbz	r3, 6248 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    623a:	3c01      	subs	r4, #1
    623c:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    623e:	ab0a      	add	r3, sp, #40	; 0x28
    6240:	4423      	add	r3, r4
    6242:	222d      	movs	r2, #45	; 0x2d
    6244:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    6248:	683b      	ldr	r3, [r7, #0]
    624a:	aa01      	add	r2, sp, #4
    624c:	1911      	adds	r1, r2, r4
    624e:	685b      	ldr	r3, [r3, #4]
    6250:	4638      	mov	r0, r7
    6252:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    6256:	4798      	blx	r3
}
    6258:	b00b      	add	sp, #44	; 0x2c
    625a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    625c:	2230      	movs	r2, #48	; 0x30
    625e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    6262:	2421      	movs	r4, #33	; 0x21
    6264:	e7e8      	b.n	6238 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    6266:	6803      	ldr	r3, [r0, #0]
    6268:	b2c9      	uxtb	r1, r1
    626a:	681b      	ldr	r3, [r3, #0]
    626c:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    626e:	b00b      	add	sp, #44	; 0x2c
    6270:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6272:	bf00      	nop

00006274 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    6274:	f7ff bd8e 	b.w	5d94 <usb_serial_flush_input>

00006278 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    6278:	f7ff bd66 	b.w	5d48 <usb_serial_peekchar>

0000627c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    627c:	f7ff bd40 	b.w	5d00 <usb_serial_getchar>

00006280 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    6280:	f7ff bd7a 	b.w	5d78 <usb_serial_available>

00006284 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    6284:	f7ff be56 	b.w	5f34 <usb_serial_flush_output>

00006288 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    6288:	f7ff be30 	b.w	5eec <usb_serial_write_buffer_free>

0000628c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    628c:	4608      	mov	r0, r1
    628e:	4611      	mov	r1, r2
    6290:	f7ff bd9c 	b.w	5dcc <usb_serial_write>

00006294 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    6294:	4608      	mov	r0, r1
    6296:	f7ff be1d 	b.w	5ed4 <usb_serial_putchar>
    629a:	bf00      	nop

0000629c <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    629c:	4770      	bx	lr
    629e:	bf00      	nop

000062a0 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    62a0:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    62a2:	4c22      	ldr	r4, [pc, #136]	; (632c <yield+0x8c>)
    62a4:	7823      	ldrb	r3, [r4, #0]
    62a6:	b103      	cbz	r3, 62aa <yield+0xa>
    62a8:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    62aa:	2301      	movs	r3, #1
    62ac:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    62ae:	f7ff fd63 	bl	5d78 <usb_serial_available>
	if (Serial.available()) serialEvent();
    62b2:	bb70      	cbnz	r0, 6312 <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    62b4:	f000 f868 	bl	6388 <serial_available>
	if (Serial1.available()) serialEvent1();
    62b8:	bb40      	cbnz	r0, 630c <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    62ba:	f000 f8fb 	bl	64b4 <serial2_available>
	if (Serial2.available()) serialEvent2();
    62be:	bb10      	cbnz	r0, 6306 <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    62c0:	f000 f98e 	bl	65e0 <serial3_available>
	if (Serial3.available()) serialEvent3();
    62c4:	b9e0      	cbnz	r0, 6300 <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    62c6:	2300      	movs	r3, #0
    62c8:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    62ca:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    62ce:	2b00      	cmp	r3, #0
    62d0:	d1ea      	bne.n	62a8 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    62d2:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    62d6:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    62d8:	4b15      	ldr	r3, [pc, #84]	; (6330 <yield+0x90>)
    62da:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    62dc:	b1e0      	cbz	r0, 6318 <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    62de:	4c15      	ldr	r4, [pc, #84]	; (6334 <yield+0x94>)
    62e0:	7822      	ldrb	r2, [r4, #0]
    62e2:	b9ca      	cbnz	r2, 6318 <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    62e4:	6945      	ldr	r5, [r0, #20]
    62e6:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    62e8:	2301      	movs	r3, #1
    62ea:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    62ec:	b1c5      	cbz	r5, 6320 <yield+0x80>
			firstYield->_prev = nullptr;
    62ee:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    62f0:	b901      	cbnz	r1, 62f4 <yield+0x54>
    62f2:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    62f4:	2500      	movs	r5, #0
    62f6:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    62f8:	6883      	ldr	r3, [r0, #8]
    62fa:	4798      	blx	r3
		runningFromYield = false;
    62fc:	7025      	strb	r5, [r4, #0]
    62fe:	e7d3      	b.n	62a8 <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    6300:	f000 fa30 	bl	6764 <serialEvent3()>
    6304:	e7df      	b.n	62c6 <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    6306:	f000 fa2b 	bl	6760 <serialEvent2()>
    630a:	e7d9      	b.n	62c0 <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    630c:	f000 fa26 	bl	675c <serialEvent1()>
    6310:	e7d3      	b.n	62ba <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    6312:	f7ff ffc3 	bl	629c <serialEvent()>
    6316:	e7cd      	b.n	62b4 <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    6318:	2900      	cmp	r1, #0
    631a:	d1c5      	bne.n	62a8 <yield+0x8>
    631c:	b662      	cpsie	i
    631e:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    6320:	4b05      	ldr	r3, [pc, #20]	; (6338 <yield+0x98>)
    6322:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    6324:	2900      	cmp	r1, #0
    6326:	d1e5      	bne.n	62f4 <yield+0x54>
    6328:	e7e3      	b.n	62f2 <yield+0x52>
    632a:	bf00      	nop
    632c:	1fff9184 	.word	0x1fff9184
    6330:	1fff9178 	.word	0x1fff9178
    6334:	1fff917c 	.word	0x1fff917c
    6338:	1fff9174 	.word	0x1fff9174

0000633c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    633c:	b4f0      	push	{r4, r5, r6, r7}
    633e:	1e4d      	subs	r5, r1, #1
    6340:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    6342:	2400      	movs	r4, #0
    6344:	e000      	b.n	6348 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    6346:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    6348:	fbb0 f3f2 	udiv	r3, r0, r2
    634c:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    6350:	2809      	cmp	r0, #9
    6352:	f100 0730 	add.w	r7, r0, #48	; 0x30
    6356:	bf8a      	itet	hi
    6358:	3037      	addhi	r0, #55	; 0x37
    635a:	b2f8      	uxtbls	r0, r7
    635c:	b2c0      	uxtbhi	r0, r0
    635e:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    6362:	4618      	mov	r0, r3
    6364:	2b00      	cmp	r3, #0
    6366:	d1ee      	bne.n	6346 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    6368:	190a      	adds	r2, r1, r4
    636a:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    636c:	b14c      	cbz	r4, 6382 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    636e:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    6370:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    6374:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    6376:	3301      	adds	r3, #1
    6378:	1ae0      	subs	r0, r4, r3
    637a:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    637c:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    6380:	dbf5      	blt.n	636e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    6382:	4608      	mov	r0, r1
    6384:	bcf0      	pop	{r4, r5, r6, r7}
    6386:	4770      	bx	lr

00006388 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6388:	4a05      	ldr	r2, [pc, #20]	; (63a0 <serial_available+0x18>)
	tail = rx_buffer_tail;
    638a:	4b06      	ldr	r3, [pc, #24]	; (63a4 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    638c:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    638e:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6390:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    6392:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    6394:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    6396:	bf38      	it	cc
    6398:	3040      	addcc	r0, #64	; 0x40
    639a:	1ac0      	subs	r0, r0, r3
}
    639c:	4770      	bx	lr
    639e:	bf00      	nop
    63a0:	1fff918c 	.word	0x1fff918c
    63a4:	1fff918d 	.word	0x1fff918d

000063a8 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    63a8:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    63aa:	4b38      	ldr	r3, [pc, #224]	; (648c <uart0_status_isr+0xe4>)
    63ac:	791a      	ldrb	r2, [r3, #4]
    63ae:	f012 0f30 	tst.w	r2, #48	; 0x30
    63b2:	d02c      	beq.n	640e <uart0_status_isr+0x66>
		__disable_irq();
    63b4:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    63b6:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    63b8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    63bc:	2900      	cmp	r1, #0
    63be:	d03d      	beq.n	643c <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    63c0:	b662      	cpsie	i
			head = rx_buffer_head;
    63c2:	4f33      	ldr	r7, [pc, #204]	; (6490 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    63c4:	4933      	ldr	r1, [pc, #204]	; (6494 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    63c6:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    63c8:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    63ca:	4e33      	ldr	r6, [pc, #204]	; (6498 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    63cc:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    63ce:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    63d0:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    63d2:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    63d4:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    63d6:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    63d8:	bf28      	it	cs
    63da:	2300      	movcs	r3, #0
				if (newhead != tail) {
    63dc:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    63de:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    63e2:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    63e4:	bf1c      	itt	ne
    63e6:	54f1      	strbne	r1, [r6, r3]
    63e8:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    63ea:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    63ee:	d1f0      	bne.n	63d2 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    63f0:	4b2a      	ldr	r3, [pc, #168]	; (649c <uart0_status_isr+0xf4>)
    63f2:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    63f4:	b2c2      	uxtb	r2, r0
    63f6:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    63f8:	b14b      	cbz	r3, 640e <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    63fa:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    63fc:	bf36      	itet	cc
    63fe:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    6402:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    6404:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    6406:	2827      	cmp	r0, #39	; 0x27
    6408:	bfc4      	itt	gt
    640a:	2201      	movgt	r2, #1
    640c:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    640e:	491f      	ldr	r1, [pc, #124]	; (648c <uart0_status_isr+0xe4>)
    6410:	78ca      	ldrb	r2, [r1, #3]
    6412:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    6414:	0615      	lsls	r5, r2, #24
    6416:	d416      	bmi.n	6446 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    6418:	0652      	lsls	r2, r2, #25
    641a:	d50d      	bpl.n	6438 <uart0_status_isr+0x90>
    641c:	4b1b      	ldr	r3, [pc, #108]	; (648c <uart0_status_isr+0xe4>)
    641e:	791b      	ldrb	r3, [r3, #4]
    6420:	065b      	lsls	r3, r3, #25
    6422:	d509      	bpl.n	6438 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    6424:	4b1e      	ldr	r3, [pc, #120]	; (64a0 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    6426:	491f      	ldr	r1, [pc, #124]	; (64a4 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    6428:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    642a:	2200      	movs	r2, #0
    642c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    642e:	b103      	cbz	r3, 6432 <uart0_status_isr+0x8a>
    6430:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    6432:	4b16      	ldr	r3, [pc, #88]	; (648c <uart0_status_isr+0xe4>)
    6434:	223c      	movs	r2, #60	; 0x3c
    6436:	70da      	strb	r2, [r3, #3]
	}
}
    6438:	bcf0      	pop	{r4, r5, r6, r7}
    643a:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    643c:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    643e:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    6440:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    6442:	b662      	cpsie	i
    6444:	e7e3      	b.n	640e <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    6446:	790b      	ldrb	r3, [r1, #4]
    6448:	061c      	lsls	r4, r3, #24
    644a:	d5e5      	bpl.n	6418 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    644c:	4b16      	ldr	r3, [pc, #88]	; (64a8 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    644e:	4e17      	ldr	r6, [pc, #92]	; (64ac <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    6450:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    6452:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    6454:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    6456:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    6458:	429c      	cmp	r4, r3
    645a:	d00e      	beq.n	647a <uart0_status_isr+0xd2>
    645c:	4d14      	ldr	r5, [pc, #80]	; (64b0 <uart0_status_isr+0x108>)
    645e:	e001      	b.n	6464 <uart0_status_isr+0xbc>
    6460:	42a3      	cmp	r3, r4
    6462:	d00a      	beq.n	647a <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    6464:	3301      	adds	r3, #1
    6466:	2b40      	cmp	r3, #64	; 0x40
    6468:	bf28      	it	cs
    646a:	2300      	movcs	r3, #0
			avail = UART0_S1;
    646c:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    646e:	5ce8      	ldrb	r0, [r5, r3]
    6470:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    6472:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    6474:	7d08      	ldrb	r0, [r1, #20]
    6476:	2807      	cmp	r0, #7
    6478:	d9f2      	bls.n	6460 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    647a:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    647c:	4903      	ldr	r1, [pc, #12]	; (648c <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    647e:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    6480:	790b      	ldrb	r3, [r1, #4]
    6482:	0618      	lsls	r0, r3, #24
    6484:	bf44      	itt	mi
    6486:	237c      	movmi	r3, #124	; 0x7c
    6488:	70cb      	strbmi	r3, [r1, #3]
    648a:	e7c5      	b.n	6418 <uart0_status_isr+0x70>
    648c:	4006a000 	.word	0x4006a000
    6490:	1fff918c 	.word	0x1fff918c
    6494:	1fff918d 	.word	0x1fff918d
    6498:	1fff91d0 	.word	0x1fff91d0
    649c:	1fff9188 	.word	0x1fff9188
    64a0:	1fff9214 	.word	0x1fff9214
    64a4:	1fff9210 	.word	0x1fff9210
    64a8:	1fff9218 	.word	0x1fff9218
    64ac:	1fff9211 	.word	0x1fff9211
    64b0:	1fff9190 	.word	0x1fff9190

000064b4 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    64b4:	4a05      	ldr	r2, [pc, #20]	; (64cc <serial2_available+0x18>)
	tail = rx_buffer_tail;
    64b6:	4b06      	ldr	r3, [pc, #24]	; (64d0 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    64b8:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    64ba:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    64bc:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    64be:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    64c0:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    64c2:	bf38      	it	cc
    64c4:	3040      	addcc	r0, #64	; 0x40
    64c6:	1ac0      	subs	r0, r0, r3
}
    64c8:	4770      	bx	lr
    64ca:	bf00      	nop
    64cc:	1fff928c 	.word	0x1fff928c
    64d0:	1fff9221 	.word	0x1fff9221

000064d4 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    64d4:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    64d6:	4b38      	ldr	r3, [pc, #224]	; (65b8 <uart1_status_isr+0xe4>)
    64d8:	791a      	ldrb	r2, [r3, #4]
    64da:	f012 0f30 	tst.w	r2, #48	; 0x30
    64de:	d02c      	beq.n	653a <uart1_status_isr+0x66>
		__disable_irq();
    64e0:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    64e2:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    64e4:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    64e8:	2900      	cmp	r1, #0
    64ea:	d03d      	beq.n	6568 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    64ec:	b662      	cpsie	i
			head = rx_buffer_head;
    64ee:	4f33      	ldr	r7, [pc, #204]	; (65bc <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    64f0:	4933      	ldr	r1, [pc, #204]	; (65c0 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    64f2:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    64f4:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    64f6:	4e33      	ldr	r6, [pc, #204]	; (65c4 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    64f8:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    64fa:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    64fc:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    64fe:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    6500:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    6502:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    6504:	bf28      	it	cs
    6506:	2300      	movcs	r3, #0
				if (newhead != tail) {
    6508:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    650a:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    650e:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    6510:	bf1c      	itt	ne
    6512:	54f1      	strbne	r1, [r6, r3]
    6514:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    6516:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    651a:	d1f0      	bne.n	64fe <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    651c:	4b2a      	ldr	r3, [pc, #168]	; (65c8 <uart1_status_isr+0xf4>)
    651e:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    6520:	b2c2      	uxtb	r2, r0
    6522:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    6524:	b14b      	cbz	r3, 653a <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    6526:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    6528:	bf36      	itet	cc
    652a:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    652e:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    6530:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    6532:	2827      	cmp	r0, #39	; 0x27
    6534:	bfc4      	itt	gt
    6536:	2201      	movgt	r2, #1
    6538:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    653a:	491f      	ldr	r1, [pc, #124]	; (65b8 <uart1_status_isr+0xe4>)
    653c:	78ca      	ldrb	r2, [r1, #3]
    653e:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    6540:	0615      	lsls	r5, r2, #24
    6542:	d416      	bmi.n	6572 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    6544:	0652      	lsls	r2, r2, #25
    6546:	d50d      	bpl.n	6564 <uart1_status_isr+0x90>
    6548:	4b1b      	ldr	r3, [pc, #108]	; (65b8 <uart1_status_isr+0xe4>)
    654a:	791b      	ldrb	r3, [r3, #4]
    654c:	065b      	lsls	r3, r3, #25
    654e:	d509      	bpl.n	6564 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    6550:	4b1e      	ldr	r3, [pc, #120]	; (65cc <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    6552:	491f      	ldr	r1, [pc, #124]	; (65d0 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    6554:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    6556:	2200      	movs	r2, #0
    6558:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    655a:	b103      	cbz	r3, 655e <uart1_status_isr+0x8a>
    655c:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    655e:	4b16      	ldr	r3, [pc, #88]	; (65b8 <uart1_status_isr+0xe4>)
    6560:	223c      	movs	r2, #60	; 0x3c
    6562:	70da      	strb	r2, [r3, #3]
	}
}
    6564:	bcf0      	pop	{r4, r5, r6, r7}
    6566:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    6568:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    656a:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    656c:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    656e:	b662      	cpsie	i
    6570:	e7e3      	b.n	653a <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    6572:	790b      	ldrb	r3, [r1, #4]
    6574:	061c      	lsls	r4, r3, #24
    6576:	d5e5      	bpl.n	6544 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    6578:	4b16      	ldr	r3, [pc, #88]	; (65d4 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    657a:	4e17      	ldr	r6, [pc, #92]	; (65d8 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    657c:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    657e:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    6580:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    6582:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    6584:	429c      	cmp	r4, r3
    6586:	d00e      	beq.n	65a6 <uart1_status_isr+0xd2>
    6588:	4d14      	ldr	r5, [pc, #80]	; (65dc <uart1_status_isr+0x108>)
    658a:	e001      	b.n	6590 <uart1_status_isr+0xbc>
    658c:	42a3      	cmp	r3, r4
    658e:	d00a      	beq.n	65a6 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    6590:	3301      	adds	r3, #1
    6592:	2b28      	cmp	r3, #40	; 0x28
    6594:	bf28      	it	cs
    6596:	2300      	movcs	r3, #0
			avail = UART1_S1;
    6598:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    659a:	5ce8      	ldrb	r0, [r5, r3]
    659c:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    659e:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    65a0:	7d08      	ldrb	r0, [r1, #20]
    65a2:	2807      	cmp	r0, #7
    65a4:	d9f2      	bls.n	658c <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    65a6:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    65a8:	4903      	ldr	r1, [pc, #12]	; (65b8 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    65aa:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    65ac:	790b      	ldrb	r3, [r1, #4]
    65ae:	0618      	lsls	r0, r3, #24
    65b0:	bf44      	itt	mi
    65b2:	237c      	movmi	r3, #124	; 0x7c
    65b4:	70cb      	strbmi	r3, [r1, #3]
    65b6:	e7c5      	b.n	6544 <uart1_status_isr+0x70>
    65b8:	4006b000 	.word	0x4006b000
    65bc:	1fff928c 	.word	0x1fff928c
    65c0:	1fff9221 	.word	0x1fff9221
    65c4:	1fff924c 	.word	0x1fff924c
    65c8:	1fff921c 	.word	0x1fff921c
    65cc:	1fff9290 	.word	0x1fff9290
    65d0:	1fff9220 	.word	0x1fff9220
    65d4:	1fff9294 	.word	0x1fff9294
    65d8:	1fff928d 	.word	0x1fff928d
    65dc:	1fff9224 	.word	0x1fff9224

000065e0 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    65e0:	4a05      	ldr	r2, [pc, #20]	; (65f8 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    65e2:	4b06      	ldr	r3, [pc, #24]	; (65fc <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    65e4:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    65e6:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    65e8:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    65ea:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    65ec:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    65ee:	bf38      	it	cc
    65f0:	3040      	addcc	r0, #64	; 0x40
    65f2:	1ac0      	subs	r0, r0, r3
}
    65f4:	4770      	bx	lr
    65f6:	bf00      	nop
    65f8:	1fff929c 	.word	0x1fff929c
    65fc:	1fff929d 	.word	0x1fff929d

00006600 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    6600:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    6602:	4b2b      	ldr	r3, [pc, #172]	; (66b0 <uart2_status_isr+0xb0>)
    6604:	791a      	ldrb	r2, [r3, #4]
    6606:	0694      	lsls	r4, r2, #26
    6608:	d51f      	bpl.n	664a <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    660a:	482a      	ldr	r0, [pc, #168]	; (66b4 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    660c:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    660e:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6610:	4929      	ldr	r1, [pc, #164]	; (66b8 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    6612:	3301      	adds	r3, #1
    6614:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6616:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    6618:	bfc8      	it	gt
    661a:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    661c:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    661e:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6620:	d003      	beq.n	662a <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    6622:	4c26      	ldr	r4, [pc, #152]	; (66bc <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    6624:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    6626:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    6628:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    662a:	4a25      	ldr	r2, [pc, #148]	; (66c0 <uart2_status_isr+0xc0>)
    662c:	6811      	ldr	r1, [r2, #0]
    662e:	b161      	cbz	r1, 664a <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    6630:	4a24      	ldr	r2, [pc, #144]	; (66c4 <uart2_status_isr+0xc4>)
    6632:	7812      	ldrb	r2, [r2, #0]
    6634:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    6636:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    6638:	bf36      	itet	cc
    663a:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    663e:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    6640:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    6642:	2b27      	cmp	r3, #39	; 0x27
    6644:	bfc4      	itt	gt
    6646:	2301      	movgt	r3, #1
    6648:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    664a:	4a19      	ldr	r2, [pc, #100]	; (66b0 <uart2_status_isr+0xb0>)
    664c:	78d3      	ldrb	r3, [r2, #3]
    664e:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    6650:	0618      	lsls	r0, r3, #24
    6652:	d411      	bmi.n	6678 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    6654:	065a      	lsls	r2, r3, #25
    6656:	d50d      	bpl.n	6674 <uart2_status_isr+0x74>
    6658:	4b15      	ldr	r3, [pc, #84]	; (66b0 <uart2_status_isr+0xb0>)
    665a:	791b      	ldrb	r3, [r3, #4]
    665c:	065b      	lsls	r3, r3, #25
    665e:	d509      	bpl.n	6674 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    6660:	4b19      	ldr	r3, [pc, #100]	; (66c8 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    6662:	491a      	ldr	r1, [pc, #104]	; (66cc <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    6664:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    6666:	2200      	movs	r2, #0
    6668:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    666a:	b103      	cbz	r3, 666e <uart2_status_isr+0x6e>
    666c:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    666e:	4b10      	ldr	r3, [pc, #64]	; (66b0 <uart2_status_isr+0xb0>)
    6670:	222c      	movs	r2, #44	; 0x2c
    6672:	70da      	strb	r2, [r3, #3]
	}
}
    6674:	bc30      	pop	{r4, r5}
    6676:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    6678:	7911      	ldrb	r1, [r2, #4]
    667a:	0609      	lsls	r1, r1, #24
    667c:	d5ea      	bpl.n	6654 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    667e:	4914      	ldr	r1, [pc, #80]	; (66d0 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    6680:	4810      	ldr	r0, [pc, #64]	; (66c4 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    6682:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    6684:	7801      	ldrb	r1, [r0, #0]
    6686:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    6688:	428c      	cmp	r4, r1
    668a:	d00d      	beq.n	66a8 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    668c:	1c4a      	adds	r2, r1, #1
    668e:	2a27      	cmp	r2, #39	; 0x27
    6690:	bf84      	itt	hi
    6692:	2100      	movhi	r1, #0
    6694:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    6696:	4d0f      	ldr	r5, [pc, #60]	; (66d4 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    6698:	4c05      	ldr	r4, [pc, #20]	; (66b0 <uart2_status_isr+0xb0>)
    669a:	bf98      	it	ls
    669c:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    669e:	5caa      	ldrb	r2, [r5, r2]
    66a0:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    66a2:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    66a4:	7001      	strb	r1, [r0, #0]
    66a6:	e7d5      	b.n	6654 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    66a8:	216c      	movs	r1, #108	; 0x6c
    66aa:	70d1      	strb	r1, [r2, #3]
    66ac:	e7d2      	b.n	6654 <uart2_status_isr+0x54>
    66ae:	bf00      	nop
    66b0:	4006c000 	.word	0x4006c000
    66b4:	1fff929c 	.word	0x1fff929c
    66b8:	1fff929d 	.word	0x1fff929d
    66bc:	1fff92c8 	.word	0x1fff92c8
    66c0:	1fff9298 	.word	0x1fff9298
    66c4:	1fff9309 	.word	0x1fff9309
    66c8:	1fff930c 	.word	0x1fff930c
    66cc:	1fff9308 	.word	0x1fff9308
    66d0:	1fff9310 	.word	0x1fff9310
    66d4:	1fff92a0 	.word	0x1fff92a0

000066d8 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    66d8:	b570      	push	{r4, r5, r6, lr}
    66da:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    66dc:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    66de:	4b19      	ldr	r3, [pc, #100]	; (6744 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    66e0:	4d19      	ldr	r5, [pc, #100]	; (6748 <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    66e2:	481a      	ldr	r0, [pc, #104]	; (674c <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    66e4:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    66e6:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    66e8:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    66ea:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    66ec:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    66ee:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    66f0:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    66f2:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    66f4:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    66f6:	7813      	ldrb	r3, [r2, #0]
    66f8:	061b      	lsls	r3, r3, #24
    66fa:	d5fc      	bpl.n	66f6 <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    66fc:	4b14      	ldr	r3, [pc, #80]	; (6750 <usb_init_serialnumber+0x78>)
    66fe:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    6700:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    6702:	4b14      	ldr	r3, [pc, #80]	; (6754 <usb_init_serialnumber+0x7c>)
    6704:	4c14      	ldr	r4, [pc, #80]	; (6758 <usb_init_serialnumber+0x80>)
    6706:	4298      	cmp	r0, r3
    6708:	bf98      	it	ls
    670a:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    670e:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    6710:	bf98      	it	ls
    6712:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    6714:	220a      	movs	r2, #10
    6716:	f7ff fe11 	bl	633c <ultoa>
    671a:	a901      	add	r1, sp, #4
    671c:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    671e:	2300      	movs	r3, #0
		char c = buf[i];
    6720:	f811 2b01 	ldrb.w	r2, [r1], #1
    6724:	3301      	adds	r3, #1
		if (!c) break;
    6726:	b13a      	cbz	r2, 6738 <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    6728:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    672a:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    672e:	d1f7      	bne.n	6720 <usb_init_serialnumber+0x48>
    6730:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    6732:	7023      	strb	r3, [r4, #0]
}
    6734:	b004      	add	sp, #16
    6736:	bd70      	pop	{r4, r5, r6, pc}
    6738:	005b      	lsls	r3, r3, #1
    673a:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    673c:	7023      	strb	r3, [r4, #0]
}
    673e:	b004      	add	sp, #16
    6740:	bd70      	pop	{r4, r5, r6, pc}
    6742:	bf00      	nop
    6744:	40020000 	.word	0x40020000
    6748:	40020007 	.word	0x40020007
    674c:	40020006 	.word	0x40020006
    6750:	40020008 	.word	0x40020008
    6754:	0098967f 	.word	0x0098967f
    6758:	1fff8810 	.word	0x1fff8810

0000675c <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    675c:	4770      	bx	lr
    675e:	bf00      	nop

00006760 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    6760:	4770      	bx	lr
    6762:	bf00      	nop

00006764 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    6764:	4770      	bx	lr
    6766:	bf00      	nop

00006768 <__aeabi_frsub>:
    6768:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    676c:	e002      	b.n	6774 <__addsf3>
    676e:	bf00      	nop

00006770 <__aeabi_fsub>:
    6770:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00006774 <__addsf3>:
    6774:	0042      	lsls	r2, r0, #1
    6776:	bf1f      	itttt	ne
    6778:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    677c:	ea92 0f03 	teqne	r2, r3
    6780:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    6784:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6788:	d06a      	beq.n	6860 <__addsf3+0xec>
    678a:	ea4f 6212 	mov.w	r2, r2, lsr #24
    678e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    6792:	bfc1      	itttt	gt
    6794:	18d2      	addgt	r2, r2, r3
    6796:	4041      	eorgt	r1, r0
    6798:	4048      	eorgt	r0, r1
    679a:	4041      	eorgt	r1, r0
    679c:	bfb8      	it	lt
    679e:	425b      	neglt	r3, r3
    67a0:	2b19      	cmp	r3, #25
    67a2:	bf88      	it	hi
    67a4:	4770      	bxhi	lr
    67a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    67aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    67ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    67b2:	bf18      	it	ne
    67b4:	4240      	negne	r0, r0
    67b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    67ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    67be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    67c2:	bf18      	it	ne
    67c4:	4249      	negne	r1, r1
    67c6:	ea92 0f03 	teq	r2, r3
    67ca:	d03f      	beq.n	684c <__addsf3+0xd8>
    67cc:	f1a2 0201 	sub.w	r2, r2, #1
    67d0:	fa41 fc03 	asr.w	ip, r1, r3
    67d4:	eb10 000c 	adds.w	r0, r0, ip
    67d8:	f1c3 0320 	rsb	r3, r3, #32
    67dc:	fa01 f103 	lsl.w	r1, r1, r3
    67e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    67e4:	d502      	bpl.n	67ec <__addsf3+0x78>
    67e6:	4249      	negs	r1, r1
    67e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    67ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    67f0:	d313      	bcc.n	681a <__addsf3+0xa6>
    67f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    67f6:	d306      	bcc.n	6806 <__addsf3+0x92>
    67f8:	0840      	lsrs	r0, r0, #1
    67fa:	ea4f 0131 	mov.w	r1, r1, rrx
    67fe:	f102 0201 	add.w	r2, r2, #1
    6802:	2afe      	cmp	r2, #254	; 0xfe
    6804:	d251      	bcs.n	68aa <__addsf3+0x136>
    6806:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    680a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    680e:	bf08      	it	eq
    6810:	f020 0001 	biceq.w	r0, r0, #1
    6814:	ea40 0003 	orr.w	r0, r0, r3
    6818:	4770      	bx	lr
    681a:	0049      	lsls	r1, r1, #1
    681c:	eb40 0000 	adc.w	r0, r0, r0
    6820:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    6824:	f1a2 0201 	sub.w	r2, r2, #1
    6828:	d1ed      	bne.n	6806 <__addsf3+0x92>
    682a:	fab0 fc80 	clz	ip, r0
    682e:	f1ac 0c08 	sub.w	ip, ip, #8
    6832:	ebb2 020c 	subs.w	r2, r2, ip
    6836:	fa00 f00c 	lsl.w	r0, r0, ip
    683a:	bfaa      	itet	ge
    683c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    6840:	4252      	neglt	r2, r2
    6842:	4318      	orrge	r0, r3
    6844:	bfbc      	itt	lt
    6846:	40d0      	lsrlt	r0, r2
    6848:	4318      	orrlt	r0, r3
    684a:	4770      	bx	lr
    684c:	f092 0f00 	teq	r2, #0
    6850:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    6854:	bf06      	itte	eq
    6856:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    685a:	3201      	addeq	r2, #1
    685c:	3b01      	subne	r3, #1
    685e:	e7b5      	b.n	67cc <__addsf3+0x58>
    6860:	ea4f 0341 	mov.w	r3, r1, lsl #1
    6864:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    6868:	bf18      	it	ne
    686a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    686e:	d021      	beq.n	68b4 <__addsf3+0x140>
    6870:	ea92 0f03 	teq	r2, r3
    6874:	d004      	beq.n	6880 <__addsf3+0x10c>
    6876:	f092 0f00 	teq	r2, #0
    687a:	bf08      	it	eq
    687c:	4608      	moveq	r0, r1
    687e:	4770      	bx	lr
    6880:	ea90 0f01 	teq	r0, r1
    6884:	bf1c      	itt	ne
    6886:	2000      	movne	r0, #0
    6888:	4770      	bxne	lr
    688a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    688e:	d104      	bne.n	689a <__addsf3+0x126>
    6890:	0040      	lsls	r0, r0, #1
    6892:	bf28      	it	cs
    6894:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    6898:	4770      	bx	lr
    689a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    689e:	bf3c      	itt	cc
    68a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    68a4:	4770      	bxcc	lr
    68a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    68aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    68ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    68b2:	4770      	bx	lr
    68b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
    68b8:	bf16      	itet	ne
    68ba:	4608      	movne	r0, r1
    68bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    68c0:	4601      	movne	r1, r0
    68c2:	0242      	lsls	r2, r0, #9
    68c4:	bf06      	itte	eq
    68c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    68ca:	ea90 0f01 	teqeq	r0, r1
    68ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    68d2:	4770      	bx	lr

000068d4 <__aeabi_ui2f>:
    68d4:	f04f 0300 	mov.w	r3, #0
    68d8:	e004      	b.n	68e4 <__aeabi_i2f+0x8>
    68da:	bf00      	nop

000068dc <__aeabi_i2f>:
    68dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    68e0:	bf48      	it	mi
    68e2:	4240      	negmi	r0, r0
    68e4:	ea5f 0c00 	movs.w	ip, r0
    68e8:	bf08      	it	eq
    68ea:	4770      	bxeq	lr
    68ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    68f0:	4601      	mov	r1, r0
    68f2:	f04f 0000 	mov.w	r0, #0
    68f6:	e01c      	b.n	6932 <__aeabi_l2f+0x2a>

000068f8 <__aeabi_ul2f>:
    68f8:	ea50 0201 	orrs.w	r2, r0, r1
    68fc:	bf08      	it	eq
    68fe:	4770      	bxeq	lr
    6900:	f04f 0300 	mov.w	r3, #0
    6904:	e00a      	b.n	691c <__aeabi_l2f+0x14>
    6906:	bf00      	nop

00006908 <__aeabi_l2f>:
    6908:	ea50 0201 	orrs.w	r2, r0, r1
    690c:	bf08      	it	eq
    690e:	4770      	bxeq	lr
    6910:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    6914:	d502      	bpl.n	691c <__aeabi_l2f+0x14>
    6916:	4240      	negs	r0, r0
    6918:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    691c:	ea5f 0c01 	movs.w	ip, r1
    6920:	bf02      	ittt	eq
    6922:	4684      	moveq	ip, r0
    6924:	4601      	moveq	r1, r0
    6926:	2000      	moveq	r0, #0
    6928:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    692c:	bf08      	it	eq
    692e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    6932:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    6936:	fabc f28c 	clz	r2, ip
    693a:	3a08      	subs	r2, #8
    693c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    6940:	db10      	blt.n	6964 <__aeabi_l2f+0x5c>
    6942:	fa01 fc02 	lsl.w	ip, r1, r2
    6946:	4463      	add	r3, ip
    6948:	fa00 fc02 	lsl.w	ip, r0, r2
    694c:	f1c2 0220 	rsb	r2, r2, #32
    6950:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    6954:	fa20 f202 	lsr.w	r2, r0, r2
    6958:	eb43 0002 	adc.w	r0, r3, r2
    695c:	bf08      	it	eq
    695e:	f020 0001 	biceq.w	r0, r0, #1
    6962:	4770      	bx	lr
    6964:	f102 0220 	add.w	r2, r2, #32
    6968:	fa01 fc02 	lsl.w	ip, r1, r2
    696c:	f1c2 0220 	rsb	r2, r2, #32
    6970:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    6974:	fa21 f202 	lsr.w	r2, r1, r2
    6978:	eb43 0002 	adc.w	r0, r3, r2
    697c:	bf08      	it	eq
    697e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    6982:	4770      	bx	lr

00006984 <__aeabi_fmul>:
    6984:	f04f 0cff 	mov.w	ip, #255	; 0xff
    6988:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    698c:	bf1e      	ittt	ne
    698e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    6992:	ea92 0f0c 	teqne	r2, ip
    6996:	ea93 0f0c 	teqne	r3, ip
    699a:	d06f      	beq.n	6a7c <__aeabi_fmul+0xf8>
    699c:	441a      	add	r2, r3
    699e:	ea80 0c01 	eor.w	ip, r0, r1
    69a2:	0240      	lsls	r0, r0, #9
    69a4:	bf18      	it	ne
    69a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    69aa:	d01e      	beq.n	69ea <__aeabi_fmul+0x66>
    69ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    69b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    69b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    69b8:	fba0 3101 	umull	r3, r1, r0, r1
    69bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    69c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    69c4:	bf3e      	ittt	cc
    69c6:	0049      	lslcc	r1, r1, #1
    69c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    69cc:	005b      	lslcc	r3, r3, #1
    69ce:	ea40 0001 	orr.w	r0, r0, r1
    69d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    69d6:	2afd      	cmp	r2, #253	; 0xfd
    69d8:	d81d      	bhi.n	6a16 <__aeabi_fmul+0x92>
    69da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    69de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    69e2:	bf08      	it	eq
    69e4:	f020 0001 	biceq.w	r0, r0, #1
    69e8:	4770      	bx	lr
    69ea:	f090 0f00 	teq	r0, #0
    69ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    69f2:	bf08      	it	eq
    69f4:	0249      	lsleq	r1, r1, #9
    69f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    69fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    69fe:	3a7f      	subs	r2, #127	; 0x7f
    6a00:	bfc2      	ittt	gt
    6a02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    6a06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    6a0a:	4770      	bxgt	lr
    6a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6a10:	f04f 0300 	mov.w	r3, #0
    6a14:	3a01      	subs	r2, #1
    6a16:	dc5d      	bgt.n	6ad4 <__aeabi_fmul+0x150>
    6a18:	f112 0f19 	cmn.w	r2, #25
    6a1c:	bfdc      	itt	le
    6a1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    6a22:	4770      	bxle	lr
    6a24:	f1c2 0200 	rsb	r2, r2, #0
    6a28:	0041      	lsls	r1, r0, #1
    6a2a:	fa21 f102 	lsr.w	r1, r1, r2
    6a2e:	f1c2 0220 	rsb	r2, r2, #32
    6a32:	fa00 fc02 	lsl.w	ip, r0, r2
    6a36:	ea5f 0031 	movs.w	r0, r1, rrx
    6a3a:	f140 0000 	adc.w	r0, r0, #0
    6a3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    6a42:	bf08      	it	eq
    6a44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    6a48:	4770      	bx	lr
    6a4a:	f092 0f00 	teq	r2, #0
    6a4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    6a52:	bf02      	ittt	eq
    6a54:	0040      	lsleq	r0, r0, #1
    6a56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    6a5a:	3a01      	subeq	r2, #1
    6a5c:	d0f9      	beq.n	6a52 <__aeabi_fmul+0xce>
    6a5e:	ea40 000c 	orr.w	r0, r0, ip
    6a62:	f093 0f00 	teq	r3, #0
    6a66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    6a6a:	bf02      	ittt	eq
    6a6c:	0049      	lsleq	r1, r1, #1
    6a6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    6a72:	3b01      	subeq	r3, #1
    6a74:	d0f9      	beq.n	6a6a <__aeabi_fmul+0xe6>
    6a76:	ea41 010c 	orr.w	r1, r1, ip
    6a7a:	e78f      	b.n	699c <__aeabi_fmul+0x18>
    6a7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    6a80:	ea92 0f0c 	teq	r2, ip
    6a84:	bf18      	it	ne
    6a86:	ea93 0f0c 	teqne	r3, ip
    6a8a:	d00a      	beq.n	6aa2 <__aeabi_fmul+0x11e>
    6a8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    6a90:	bf18      	it	ne
    6a92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    6a96:	d1d8      	bne.n	6a4a <__aeabi_fmul+0xc6>
    6a98:	ea80 0001 	eor.w	r0, r0, r1
    6a9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    6aa0:	4770      	bx	lr
    6aa2:	f090 0f00 	teq	r0, #0
    6aa6:	bf17      	itett	ne
    6aa8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    6aac:	4608      	moveq	r0, r1
    6aae:	f091 0f00 	teqne	r1, #0
    6ab2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    6ab6:	d014      	beq.n	6ae2 <__aeabi_fmul+0x15e>
    6ab8:	ea92 0f0c 	teq	r2, ip
    6abc:	d101      	bne.n	6ac2 <__aeabi_fmul+0x13e>
    6abe:	0242      	lsls	r2, r0, #9
    6ac0:	d10f      	bne.n	6ae2 <__aeabi_fmul+0x15e>
    6ac2:	ea93 0f0c 	teq	r3, ip
    6ac6:	d103      	bne.n	6ad0 <__aeabi_fmul+0x14c>
    6ac8:	024b      	lsls	r3, r1, #9
    6aca:	bf18      	it	ne
    6acc:	4608      	movne	r0, r1
    6ace:	d108      	bne.n	6ae2 <__aeabi_fmul+0x15e>
    6ad0:	ea80 0001 	eor.w	r0, r0, r1
    6ad4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    6ad8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    6adc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6ae0:	4770      	bx	lr
    6ae2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    6ae6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    6aea:	4770      	bx	lr

00006aec <__aeabi_fdiv>:
    6aec:	f04f 0cff 	mov.w	ip, #255	; 0xff
    6af0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    6af4:	bf1e      	ittt	ne
    6af6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    6afa:	ea92 0f0c 	teqne	r2, ip
    6afe:	ea93 0f0c 	teqne	r3, ip
    6b02:	d069      	beq.n	6bd8 <__aeabi_fdiv+0xec>
    6b04:	eba2 0203 	sub.w	r2, r2, r3
    6b08:	ea80 0c01 	eor.w	ip, r0, r1
    6b0c:	0249      	lsls	r1, r1, #9
    6b0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
    6b12:	d037      	beq.n	6b84 <__aeabi_fdiv+0x98>
    6b14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6b18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    6b1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    6b20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    6b24:	428b      	cmp	r3, r1
    6b26:	bf38      	it	cc
    6b28:	005b      	lslcc	r3, r3, #1
    6b2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    6b2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    6b32:	428b      	cmp	r3, r1
    6b34:	bf24      	itt	cs
    6b36:	1a5b      	subcs	r3, r3, r1
    6b38:	ea40 000c 	orrcs.w	r0, r0, ip
    6b3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    6b40:	bf24      	itt	cs
    6b42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    6b46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    6b4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    6b4e:	bf24      	itt	cs
    6b50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    6b54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    6b58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    6b5c:	bf24      	itt	cs
    6b5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    6b62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    6b66:	011b      	lsls	r3, r3, #4
    6b68:	bf18      	it	ne
    6b6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    6b6e:	d1e0      	bne.n	6b32 <__aeabi_fdiv+0x46>
    6b70:	2afd      	cmp	r2, #253	; 0xfd
    6b72:	f63f af50 	bhi.w	6a16 <__aeabi_fmul+0x92>
    6b76:	428b      	cmp	r3, r1
    6b78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    6b7c:	bf08      	it	eq
    6b7e:	f020 0001 	biceq.w	r0, r0, #1
    6b82:	4770      	bx	lr
    6b84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    6b88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    6b8c:	327f      	adds	r2, #127	; 0x7f
    6b8e:	bfc2      	ittt	gt
    6b90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    6b94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    6b98:	4770      	bxgt	lr
    6b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6b9e:	f04f 0300 	mov.w	r3, #0
    6ba2:	3a01      	subs	r2, #1
    6ba4:	e737      	b.n	6a16 <__aeabi_fmul+0x92>
    6ba6:	f092 0f00 	teq	r2, #0
    6baa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    6bae:	bf02      	ittt	eq
    6bb0:	0040      	lsleq	r0, r0, #1
    6bb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    6bb6:	3a01      	subeq	r2, #1
    6bb8:	d0f9      	beq.n	6bae <__aeabi_fdiv+0xc2>
    6bba:	ea40 000c 	orr.w	r0, r0, ip
    6bbe:	f093 0f00 	teq	r3, #0
    6bc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    6bc6:	bf02      	ittt	eq
    6bc8:	0049      	lsleq	r1, r1, #1
    6bca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    6bce:	3b01      	subeq	r3, #1
    6bd0:	d0f9      	beq.n	6bc6 <__aeabi_fdiv+0xda>
    6bd2:	ea41 010c 	orr.w	r1, r1, ip
    6bd6:	e795      	b.n	6b04 <__aeabi_fdiv+0x18>
    6bd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    6bdc:	ea92 0f0c 	teq	r2, ip
    6be0:	d108      	bne.n	6bf4 <__aeabi_fdiv+0x108>
    6be2:	0242      	lsls	r2, r0, #9
    6be4:	f47f af7d 	bne.w	6ae2 <__aeabi_fmul+0x15e>
    6be8:	ea93 0f0c 	teq	r3, ip
    6bec:	f47f af70 	bne.w	6ad0 <__aeabi_fmul+0x14c>
    6bf0:	4608      	mov	r0, r1
    6bf2:	e776      	b.n	6ae2 <__aeabi_fmul+0x15e>
    6bf4:	ea93 0f0c 	teq	r3, ip
    6bf8:	d104      	bne.n	6c04 <__aeabi_fdiv+0x118>
    6bfa:	024b      	lsls	r3, r1, #9
    6bfc:	f43f af4c 	beq.w	6a98 <__aeabi_fmul+0x114>
    6c00:	4608      	mov	r0, r1
    6c02:	e76e      	b.n	6ae2 <__aeabi_fmul+0x15e>
    6c04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    6c08:	bf18      	it	ne
    6c0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    6c0e:	d1ca      	bne.n	6ba6 <__aeabi_fdiv+0xba>
    6c10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    6c14:	f47f af5c 	bne.w	6ad0 <__aeabi_fmul+0x14c>
    6c18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    6c1c:	f47f af3c 	bne.w	6a98 <__aeabi_fmul+0x114>
    6c20:	e75f      	b.n	6ae2 <__aeabi_fmul+0x15e>
    6c22:	bf00      	nop

00006c24 <__aeabi_f2uiz>:
    6c24:	0042      	lsls	r2, r0, #1
    6c26:	d20e      	bcs.n	6c46 <__aeabi_f2uiz+0x22>
    6c28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    6c2c:	d30b      	bcc.n	6c46 <__aeabi_f2uiz+0x22>
    6c2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
    6c32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    6c36:	d409      	bmi.n	6c4c <__aeabi_f2uiz+0x28>
    6c38:	ea4f 2300 	mov.w	r3, r0, lsl #8
    6c3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6c40:	fa23 f002 	lsr.w	r0, r3, r2
    6c44:	4770      	bx	lr
    6c46:	f04f 0000 	mov.w	r0, #0
    6c4a:	4770      	bx	lr
    6c4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
    6c50:	d101      	bne.n	6c56 <__aeabi_f2uiz+0x32>
    6c52:	0242      	lsls	r2, r0, #9
    6c54:	d102      	bne.n	6c5c <__aeabi_f2uiz+0x38>
    6c56:	f04f 30ff 	mov.w	r0, #4294967295
    6c5a:	4770      	bx	lr
    6c5c:	f04f 0000 	mov.w	r0, #0
    6c60:	4770      	bx	lr
    6c62:	bf00      	nop

00006c64 <__libc_init_array>:
    6c64:	b570      	push	{r4, r5, r6, lr}
    6c66:	4e0f      	ldr	r6, [pc, #60]	; (6ca4 <__libc_init_array+0x40>)
    6c68:	4d0f      	ldr	r5, [pc, #60]	; (6ca8 <__libc_init_array+0x44>)
    6c6a:	1b76      	subs	r6, r6, r5
    6c6c:	10b6      	asrs	r6, r6, #2
    6c6e:	bf18      	it	ne
    6c70:	2400      	movne	r4, #0
    6c72:	d005      	beq.n	6c80 <__libc_init_array+0x1c>
    6c74:	3401      	adds	r4, #1
    6c76:	f855 3b04 	ldr.w	r3, [r5], #4
    6c7a:	4798      	blx	r3
    6c7c:	42a6      	cmp	r6, r4
    6c7e:	d1f9      	bne.n	6c74 <__libc_init_array+0x10>
    6c80:	4e0a      	ldr	r6, [pc, #40]	; (6cac <__libc_init_array+0x48>)
    6c82:	4d0b      	ldr	r5, [pc, #44]	; (6cb0 <__libc_init_array+0x4c>)
    6c84:	1b76      	subs	r6, r6, r5
    6c86:	f001 ffe5 	bl	8c54 <_init>
    6c8a:	10b6      	asrs	r6, r6, #2
    6c8c:	bf18      	it	ne
    6c8e:	2400      	movne	r4, #0
    6c90:	d006      	beq.n	6ca0 <__libc_init_array+0x3c>
    6c92:	3401      	adds	r4, #1
    6c94:	f855 3b04 	ldr.w	r3, [r5], #4
    6c98:	4798      	blx	r3
    6c9a:	42a6      	cmp	r6, r4
    6c9c:	d1f9      	bne.n	6c92 <__libc_init_array+0x2e>
    6c9e:	bd70      	pop	{r4, r5, r6, pc}
    6ca0:	bd70      	pop	{r4, r5, r6, pc}
    6ca2:	bf00      	nop
    6ca4:	00008c60 	.word	0x00008c60
    6ca8:	00008c60 	.word	0x00008c60
    6cac:	00008c74 	.word	0x00008c74
    6cb0:	00008c60 	.word	0x00008c60

00006cb4 <register_fini>:
    6cb4:	4b02      	ldr	r3, [pc, #8]	; (6cc0 <register_fini+0xc>)
    6cb6:	b113      	cbz	r3, 6cbe <register_fini+0xa>
    6cb8:	4802      	ldr	r0, [pc, #8]	; (6cc4 <register_fini+0x10>)
    6cba:	f7fd bb49 	b.w	4350 <atexit>
    6cbe:	4770      	bx	lr
    6cc0:	00000000 	.word	0x00000000
    6cc4:	00006cc9 	.word	0x00006cc9

00006cc8 <__libc_fini_array>:
    6cc8:	b538      	push	{r3, r4, r5, lr}
    6cca:	4d07      	ldr	r5, [pc, #28]	; (6ce8 <__libc_fini_array+0x20>)
    6ccc:	4c07      	ldr	r4, [pc, #28]	; (6cec <__libc_fini_array+0x24>)
    6cce:	1b2c      	subs	r4, r5, r4
    6cd0:	10a4      	asrs	r4, r4, #2
    6cd2:	d005      	beq.n	6ce0 <__libc_fini_array+0x18>
    6cd4:	3c01      	subs	r4, #1
    6cd6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    6cda:	4798      	blx	r3
    6cdc:	2c00      	cmp	r4, #0
    6cde:	d1f9      	bne.n	6cd4 <__libc_fini_array+0xc>
    6ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6ce4:	f001 bfc6 	b.w	8c74 <__init_array_end>
	...

00006cf0 <vtable for APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, (unsigned char)4>>:
	...
    6cf8:	2139 0000 21fd 0000 06c9 0000 0715 0000     9!...!..........
    6d08:	046d 0000 0471 0000 153d 0000               m...q...=...

00006d14 <Fire_1_gp>:
    6d14:	ff00 0000 ff7f 0037 ffff 00ff               ......7.....

00006d20 <b_gp>:
    6d20:	0000 0000 003f ff00 ff7f 0000 ffbf 00ff     ....?...........
    6d30:	ffff ffff                                   ....

00006d34 <es_pinksplash_08_gp>:
    6d34:	7e00 ff0b c57f 1601 d2af ac9d 9ddd 7003     .~.............p
    6d44:	9dff 7003                                   ...p

00006d48 <hallows_gp>:
    6d48:	0100 0101 f714 011c ea19 0388 0123 0101     ............#...
    6d58:	f730 011c ea33 0388 013d 0101 f74c 011c     0...3...=...L...
    6d68:	f45b 01b0 ea6b 0388 017a 0101 ea8c 0388     [...k...z.......
    6d78:	f499 01b0 f7a8 011c 01ba 0101 f7c4 011c     ................
    6d88:	eacc 0388 01d8 0101 eae5 0388 f7ef 011c     ................
    6d98:	01f9 0101 01ff 0101                         ........

00006da0 <scoutie_gp>:
    6da0:	ff00 009c 007f 12c3 01d8 2700 01ff 2700     ...........'...'

00006db0 <Cyan_Magenta_Blue_gp>:
    6db0:	0000 ffff 2a3f ff37 ff7f ff00 2abf ff00     ....?*7......*..
    6dc0:	00ff ff00                                   ....

00006dc4 <purple_flower_gp>:
    6dc4:	0000 0000 1442 2d04 7984 ff14 b3b4 ff49     ....B..-.y....I.
    6dd4:	ffe4 ffa4 fff1 ffcf ffff ffff               ............

00006de0 <sea_treasure_gp>:
    6de0:	0100 050d 0319 1939 122d acbf 023d 0c1d     ......9.-...=...
    6df0:	034c 1939 1265 acbf 0a7c 1436 0199 0c1e     L.9.e...|.6.....
    6e00:	0ab2 160e 09d1 2f5d 08e8 1637 01ff 050d     ......]/..7.....

00006e10 <Orange_to_Purple_gp>:
    6e10:	d000 0132 927f 2d1b 61ff b20c               ..2....-.a..

00006e1c <Magenta_Evening_gp>:
    6e1c:	4700 271b 821f 330b d53f 4002 e846 4201     .G.'...3?..@F..B
    6e2c:	fc4c 4501 7b6c 3302 2eff 2309               L..El{.3...#

00006e38 <vibrant_gp>:
    6e38:	ff00 ffff 011e 1d90 e547 0cf6 ff77 0801     ........G...w...
    6e48:	b8a5 cb01 03d6 fa1c 00ff 0000               ............

00006e54 <Complementary_01a_gp>:
    6e54:	0000 ff21 2a7f 2d21 ffff 0021               ..!..*!-..!.

00006e60 <a_gp>:
    6e60:	0000 0000 001f 0037 003f 2dff ff7f ff00     ......7.?..-....
    6e70:	ffa3 2d00 ffc4 0000 ffff 00ff               ...-........

00006e7c <RedsandCyans_gp>:
    6e7c:	0f00 8760 284e 4a57 5366 2250 7172 1d47     ..`.N(WJfSP"rqG.
    6e8c:	967f 193f 3c8f 424f 0fb6 8760 0fdf 8760     ..?..<OB..`...`.
    6e9c:	0fff 8760                                   ..`.

00006ea0 <es_pinksplash_07_gp>:
    6ea0:	e500 0101 f23d 3f04 ff65 ff0c f97f fc51     ....=..?e.....Q.
    6eb0:	ff99 eb0b f4c1 4405 e8ff 0501               .......D....

00006ebc <es_seadreams_09_gp>:
    6ebc:	7900 7d88 223a a661 0265 d442 0277 b61d     .y.}:"a.e.B.w...
    6ecc:	0399 9908 52ff b26b 6c61 5f6c 6873 6c65     .....Rk.all_shel
    6edc:	6576 0073 6172 6e69 6f62 5f77 616d 6372     ves.rainbow_marc
    6eec:	0068 0000 7566 6c6c 735f 6568 766c 7365     h...full_shelves
    6efc:	705f 6c61 7465 6574 0000 0000 6172 6e69     _palette....rain
    6f0c:	6f62 5f77 7073 696c 0074 0000 6f63 666e     bow_split...conf
    6f1c:	7465 6974 0000 0000 7566 6c6c 735f 6568     etti....full_she
    6f2c:	766c 7365 665f 6461 6e69 0067 6966 6572     lves_fading.fire
    6f3c:	0000 0000 756a 6767 656c 705f 6c61 6f5f     ....juggle_pal_o
    6f4c:	646e 6965 0072 0000 6966 6572 6d5f 7269     ndeir...fire_mir
    6f5c:	6f72 0072 756a 6767 656c 705f 6c61 0000     ror.juggle_pal..
    6f6c:	7270 6469 0065 0000 6f63 6f6c 7772 7661     pride...colorwav
    6f7c:	0065 0000 6973 656e 6f6c 006e 6973 656e     e...sinelon.sine
    6f8c:	6f6c 5f6e 7173 6975 6767 656c 0000 0000     lon_squiggle....
    6f9c:	6966 6572 705f 6c61 0000 0000 6966 6572     fire_pal....fire
    6fac:	6d5f 7269 6f72 5f72 6170 006c 7566 6c6c     _mirror_pal.full
    6fbc:	735f 6568 766c 7365 0000 0000 4d56 5044     _shelves....VMDP
    6fcc:	5f56 7c31 5f31 4d56 5044 0a56 0000 0000     V_1|1_VMDPV.....
    6fdc:	007c ffff                                   |...

00006fe0 <ultraviolet_mold_gp>:
    6fe0:	0000 0000 0102 0101 0105 0101 0107 0101     ................
    6ff0:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    7000:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    7010:	011e 0101 0120 0102 0123 0102 0125 0202     .... ...#...%...
    7020:	0228 0203 022a 0203 022d 0303 032f 0304     (...*...-.../...
    7030:	0332 0404 0335 0504 0437 0505 043a 0605     2...5...7...:...
    7040:	043c 0705 053f 0706 0541 0806 0544 0907     <...?...A...D...
    7050:	0546 0a07 0649 0b08 064b 0c08 064e 0d08     F...I...K...N...
    7060:	0650 0e09 0653 0f09 0655 1009 0783 3034     P...S...U.....40
    7070:	0785 3339 0788 343f 078a 3443 078d 3245     ..93..?4..C4..E2
    7080:	078f 3048 0792 2e4a 0794 2b4e 0697 2950     ..H0..J...N+..P)
    7090:	069a 2554 069c 2257 069f 1f5a 06a1 1c5d     ..T%..W"..Z...].
    70a0:	05a4 1960 05a6 1664 05a9 1267 05ab 0f6b     ..`...d...g...k.
    70b0:	05ae 0d6d 05b0 0a72 04b3 0775 04b5 0579     ..m...r...u...y.
    70c0:	05b8 057c 07ba 0480 09bd 0483 0cbf 0488     ..|.............
    70d0:	10c2 048b 14c4 0390 19c7 0393 1ec9 0398     ................
    70e0:	26cc 039d 2ecf 02a1 37d1 02a6 43d4 02a9     .&.......7...C..
    70f0:	50d6 02af 5fd9 01b2 71db 01b8 85de 01bb     .P..._...q......
    7100:	9de0 01c1 b8e3 01c5 c2e5 01b8 c7e8 01a8     ................
    7110:	ceea 0198 d2ed 0187 d9ef 0177 def2 0167     ..........w...g.
    7120:	e5f4 0158 eaf7 0149 f2f9 013b f7fc 012f     ..X...I...;.../.
    7130:	ffff 0124                                   ..$.

00007134 <faint_rainbow_gp>:
    7134:	4300 4700 4502 4101 4805 3b01 4a07 3501     .C.G.E.A.H.;.J.5
    7144:	4d0a 3001 4e0c 2b01 500f 2601 5311 2201     .M.0.N.+.P.&.S."
    7154:	5614 1d01 5816 1901 5b19 1601 5e1b 1201     .V...X...[...^..
    7164:	611e 0f01 6220 0c01 6523 0a01 6825 0701     .a.. b..#e..%h..
    7174:	6b28 0501 6e2a 0401 712d 0201 752f 0101     (k..*n..-q../u..
    7184:	7832 0101 7935 0101 7d37 0101 803a 0101     2x..5y..7}..:...
    7194:	843c 0103 873f 0105 8b41 0108 8e44 010c     <...?...A...D...
    71a4:	9046 010e 9049 0110 924b 0111 944e 0113     F...I...K...N...
    71b4:	9450 0116 9653 0117 9855 011a af83 0158     P...S...U.....X.
    71c4:	b185 015d b388 0163 b38a 0168 b68d 016c     ..]...c...h...l.
    71d4:	b88f 0172 b892 0177 ba94 017d bc97 0183     ..r...w...}.....
    71e4:	bc9a 018a be9c 0190 c09f 0197 c0a1 019d     ................
    71f4:	c2a4 01a4 c5a6 01ab c7a9 01b2 c7ab 01ba     ................
    7204:	c9ae 01c1 cbb0 02c9 cbb3 02d1 c9b5 02d5     ................
    7214:	c5b8 02d7 beba 02d7 b8bd 02d9 b3bf 02db     ................
    7224:	adc2 02db a7c4 02dd a1c7 02df 9dc9 02df     ................
    7234:	98cc 02e1 92cf 02e3 8ed1 02e5 89d4 02e5     ................
    7244:	84d6 03e7 7ed9 03e9 79db 03e9 76de 03eb     .....~...y...v..
    7254:	71e0 03ed 6de3 03ed 68e5 03ef 65e8 03f1     .q...m...h...e..
    7264:	61ea 03f1 5ced 03f4 58ef 03f6 54f2 04f8     .a...\...X...T..
    7274:	50f4 04f8 4ef7 04fa 4af9 04fc 47fc 04fc     .P...N...J...G..
    7284:	43ff 04ff                                   .C..

00007288 <bhw2_10_gp>:
    7288:	0000 000c 993d 70ef 007f 000c 6aa5 02ef     ....=..p.....j..
    7298:	a7c4 47e5 6ae5 02ef 00ff 000c               ...G.j......

000072a4 <es_ocean_breeze_068_gp>:
    72a4:	6400 999c 0133 8963 0165 5444 2368 a88e     .d..3.c.e.DTh#..
    72b4:	00b2 753f 01ff 0a0a                         ..?u....

000072bc <rgi_15_gp>:
    72bc:	0400 1f01 371f 1001 c53f 0703 3b5f 1102     .....7..?..._;..
    72cc:	067f 2202 279f 2106 70bf 200d 38df 2309     ...".'.!.p. .8.#
    72dc:	16ff 2606                                   ...&

000072e0 <otis_gp>:
    72e0:	1a00 5901 117f 00c1 00d8 6222 00ff 6222     ...Y......"b.."b

000072f0 <fire_gp>:
    72f0:	0100 0001 204c 0005 c092 0018 dcc5 0569     ....L ........i.
    7300:	fcf0 1fff fcfa 6fff ffff ffff               .......o....

0000730c <blueice_gp>:
    730c:	0000 0000 011f 0f02 013f 590a 0142 5d0c     ........?..YB..]
    731c:	0144 600d 0147 640f 0149 6910 014c 6c12     D..`G..dI..iL..l
    732c:	014e 7014 0151 7316 0153 7817 0156 7b1a     N..pQ..sS..xV..{
    733c:	0158 801d 015b 841f 015d 8921 0160 8c24     X...[...].!.`.$.
    734c:	0162 9128 0165 972b 0167 9b2e 016a a032     b.(.e.+.g...j.2.
    735c:	016c a436 016f a638 0171 aa3c 0174 ac41     l.6.o.8.q.<.t.A.
    736c:	0176 ae45 0179 b248 017b b44d 017e b651     v.E.y.H.{.M.~.Q.
    737c:	0180 b856 0183 bc5b 0186 be60 0188 c065     ..V...[...`...e.
    738c:	018b c56b 018d c770 0190 c976 0192 cb7c     ..k...p...v...|.
    739c:	0195 cf82 0197 d28a 019a d490 019c d697     ................
    73ac:	019f db9f 01a1 dda6 01a4 dfad 01a6 e4b6     ................
    73bc:	01a9 e6bd 01ab e9c7 01ae ebcf 01b0 f0d9     ................
    73cc:	01b3 f2e1 01b5 f5eb 02b8 f7f6 02ba f7fc     ................
    73dc:	02bd f2ff 3dde f7ff ffff ffff               .....=......

000073e8 <BlacK_Blue_Magenta_White_gp>:
    73e8:	0000 0000 002a 2d00 0054 ff00 2a7f ff00     ....*..-T....*..
    73f8:	ffaa ff00 ffd4 ff37 ffff ffff               ......7.....

00007404 <bhw3_61_gp>:
    7404:	0e00 1b01 1130 5801 0168 9c58 01a0 2a36     ....0..Xh.X...6*
    7414:	09db 34eb 8bff e9eb                         ...4....

0000741c <es_landscape_33_gp>:
    741c:	0100 0005 2013 0117 a126 0137 e53f 0190     ..... ..&.7.?...
    742c:	2742 4a8e 01ff 0104                         B'.J....

00007434 <froth316_gp>:
    7434:	f700 0000 f711 0000 9d11 0000 9d21 0000     ............!...
    7444:	5621 0000 5633 0000 2733 0000 2744 0000     !V..3V..3'..D'..
    7454:	0c44 0000 0c54 0000 0054 00f8 0066 00f8     D...T...T...f...
    7464:	0066 00a9 0077 00a9 0077 0065 0087 0065     f...w...w.e...e.
    7474:	0087 0034 0099 0034 0099 0013 00aa 0013     ..4...4.........
    7484:	00aa f700 00ba f700 00ba a000 00cc a000     ................
    7494:	00cc 5900 00dd 5900 00dd 2a00 00ed 2a00     ...Y...Y...*...*
    74a4:	00ed 0e00 00ff 0e00                         ........

000074ac <fierce_ice_gp>:
    74ac:	0000 0000 003b 2d07 0077 ff21 0395 ff52     ....;..-w.!...R.
    74bc:	17b4 ff9c 64d9 ffcb ffff ffff               .....d......

000074c8 <lava_gp>:
    74c8:	0000 0000 122e 0000 7160 0000 8e6c 0103     ........`q..l...
    74d8:	af77 0111 d592 022c ffae 0452 ffbc 0473     w.....,...R...s.
    74e8:	ffca 049c ffda 04cb ffea 04ff fff4 47ff     ...............G
    74f8:	ffff ffff                                   ....

000074fc <Sunset_Real_gp>:
    74fc:	7800 0000 b316 0016 ff33 0068 a755 1216     .x......3.h.U...
    750c:	6487 6700 10c6 8200 00ff a000               .d.g........

00007518 <Fuschia_7_gp>:
    7518:	2b00 9903 643f 6704 bc7f 4205 a1bf 730b     .+..?d.g...B...s
    7528:	87ff b614                                   ....

0000752c <Colorfull_gp>:
    752c:	0a00 0555 1d19 126d 3b3c 2a8a 535d 3463     ..U...m.<;.*]Sc4
    753c:	6e6a 4042 7b6d 4131 8b71 4223 c074 6275     jnB@m{1Aq.#Bt.ub
    754c:	ff7c 89ff 64a8 9bb4 16ff ae79               |....d....y.

00007558 <Split_03_gp>:
    7558:	0000 7b12 003f 1d4b 007f 01b2 1bbf 0130     ...{?.K.......0.
    7568:	a7ff 0201                                   ....

0000756c <GMT_drywet_gp>:
    756c:	2f00 021e d52a 1893 6754 34db 037f cfdb     ./..*...Tg.4....
    757c:	01aa d630 01d4 6f01 01ff 2107               ..0....o...!

00007588 <cloudcolors_gp>:
    7588:	0000 ff00 000f 8b00 006f 8b00 007f ff00     ........o.......
    7598:	008f 8b00 879f face 87af face adbf e6d8     ................
    75a8:	c8cf c8c8 addf e6d8 87ef ebce 00ff ffbf     ................

000075b8 <cw1_029_gp>:
    75b8:	0c00 d250 ff7f 13eb e0ff 0f42               ..P.......B.

000075c4 <BlacK_Red_Magenta_Yellow_gp>:
    75c4:	0000 0000 2a2a 0000 ff54 0000 ff7f 2d00     ....**..T......-
    75d4:	ffaa ff00 ffd4 2d37 ffff 00ff               ......7-....

000075e0 <bhw4_009_gp>:
    75e0:	4200 c0ba 012b 4716 024f 8e68 4275 c0ba     .B..+..GO.h.uB..
    75f0:	0293 8e68 01ba 4716 02e0 8e68 04ff 1c1b     ..h....G..h.....

00007600 <bhw3_13_gp>:
    7600:	0300 4806 0c26 bc32 d96d 0123 f287 0caf     ...H&.2.m.#.....
    7610:	a1b2 5720 18ff 6c06                         .. W...l

00007618 <GMT_cool_gp>:
    7618:	0000 ffff ffff ff00                         ........

00007620 <es_landscape_64_gp>:
    7620:	0000 0000 0225 0119 0f4c 0573 4f7f 01d5     ....%...L.s..O..
    7630:	7e80 2fd3 bc82 f7d1 9099 cdb6 3bcc fa75     .~./.........;u.
    7640:	01ff c025                                   ..%.

00007644 <es_emerald_dragon_01_gp>:
    7644:	0100 0101 014f 0713 0182 193b 1ce5 ffff     ....O.....;.....
    7654:	1cff ffff                                   ....

00007658 <alarm_p4_0_2_gp>:
    7658:	e300 dfff ff0c 0424 ff19 0102 ff26 1001     ......$.....&...
    7668:	ff33 6201 ff3f e601 8c4c ff01 3f59 ff01     3..b?...L...Y?..
    7678:	1866 ff01 0572 ff01 017f ff01 018c ff04     f...r...........
    7688:	0199 ff10 01a5 ff24 01b2 ff3e 01bf ff5f     ......$...>..._.
    7698:	01cc ff83 01d8 ffad 01e5 ffdd 01f2 ebff     ................
    76a8:	01ff baff                                   ....

000076ac <water1_gp>:
    76ac:	0100 2e01 4f1c be88 1035 b851 4f49 be88     .....O..5.Q.IO..
    76bc:	4b63 e9c9 067c 670c 4b9e e9c9 54ba 6c6d     cK..|..g.K...Tml
    76cc:	10c6 b851 4fe8 be88 01ff 2e01               ..Q..O......

000076d8 <bhw1_28_gp>:
    76d8:	4b00 dd01 fc1e ff49 a930 f200 0077 f295     .K....I.0...w...
    76e8:	2baa f200 fcce ff49 4ee8 d60c 00ff f295     .+....I..N......

000076f8 <es_vintage_01_gp>:
    76f8:	0400 0101 1033 0100 614c 0368 ff65 1383     ....3...Lah.e...
    7708:	437f 0409 1099 0100 04e5 0101 04ff 0101     .C..............

00007718 <rainbow_gp>:
    7718:	ff00 0000 ab20 0055 ab40 00ab 0060 00ff     .... .U.@...`...
    7728:	0080 55ab 00a0 ff00 55c0 ab00 abe0 5500     ...U.....U.....U
    7738:	ffff 0000                                   ....

0000773c <Coral_reef_gp>:
    773c:	2800 c5c7 0a32 9b98 0160 786f 2b60 a27f     .(..2...`.ox`+..
    774c:	0a8b 6f49 01ff 4722                         ..Io.."G

00007754 <Pink_Purple_gp>:
    7754:	1300 2702 1a19 2d04 2133 3406 444c 7d3e     ...'...-3!.4LD>}
    7764:	7666 f0bb a36d f7d7 d972 fff4 9f7a dd95     fv..m...r...z...
    7774:	7195 bc4e 80b7 9b39 92ff 7b28               .qN...9...({

00007780 <sin16_C(unsigned short)::slope>:
    7780:	3031 262c 171f 040e                         10,&....

00007788 <bhw2_23_gp>:
    7788:	0000 0000 3942 e9e3 ff60 08ff ff7c ffff     ....B9..`...|...
    7798:	ff99 08ff 39bc e9e3 00ff 0000               .....9......

000077a4 <bhw1_05_gp>:
    77a4:	0100 35dd 49ff b203                         ...5.I..

000077ac <g_gradient_palettes>:
    77ac:	8884 0000 8948 0000 76f8 0000 84d0 0000     ....H....v......
    77bc:	72bc 0000 8894 0000 8398 0000 6d34 0000     .r..........4m..
    77cc:	6ea0 0000 773c 0000 72a4 0000 84c0 0000     .n..<w...r......
    77dc:	889c 0000 7620 0000 741c 0000 88e0 0000     .... v...t......
    77ec:	895c 0000 87a8 0000 756c 0000 8614 0000     \.......lu......
    77fc:	7518 0000 83ac 0000 74c8 0000 72f0 0000     .u.......t...r..
    780c:	752c 0000 6e1c 0000 7754 0000 74fc 0000     ,u...n..Tw...t..
    781c:	8310 0000 73e8 0000 89e0 0000 75c4 0000     .....s.......u..
    782c:	8a10 0000 89cc 0000 87dc 0000 76d8 0000     .............v..
    783c:	7788 0000 8360 0000 82f4 0000 7288 0000     .w..`........r..
    784c:	85a0 0000 8784 0000 8998 0000 6e38 0000     ............8n..
    785c:	75b8 0000 7658 0000 8374 0000 6e10 0000     .u..Xv..t....n..
    786c:	6d14 0000 83bc 0000 6e60 0000 6d20 0000     .m......`n.. m..
    787c:	7644 0000 892c 0000 6ebc 0000 7434 0000     Dv..,....n..4t..
    788c:	7934 0000 7eac 0000 8810 0000 82d4 0000     4y...~..........
    789c:	8524 0000 6d48 0000 6de0 0000 88cc 0000     $...Hm...m......
    78ac:	7558 0000 85bc 0000 7718 0000 7588 0000     Xu.......w...u..
    78bc:	8974 0000 6dc4 0000 74ac 0000 730c 0000     t....m...t...s..
    78cc:	862c 0000 8910 0000 6fe0 0000 7d54 0000     ,........o..T}..
    78dc:	7134 0000 72e0 0000 88fc 0000 6da0 0000     4q...r.......m..
    78ec:	84e4 0000 7618 0000 8514 0000 77a4 0000     .....v.......w..
    78fc:	8344 0000 7600 0000 7404 0000 75e0 0000     D....v...t...u..
    790c:	7d38 0000 7d28 0000 89f4 0000 76ac 0000     8}..(}.......v..
    791c:	83d4 0000 6e7c 0000 6db0 0000 6e54 0000     ....|n...m..Tn..
    792c:	87c8 0000 82ac 0000                         ........

00007934 <Skydye11_gp>:
    7934:	0800 0400 0801 0400 0c02 0800 1003 0c00     ................
    7944:	1404 0c00 1405 1000 1806 1000 1c07 1400     ................
    7954:	1c09 1400 200a 1800 240b 1800 240c 1c00     ..... ...$...$..
    7964:	280d 1c00 2c0e 2000 300f 2400 3410 2400     .(...,. .0.$.4.$
    7974:	3811 2800 3c12 2c00 3c14 2c00 4015 3000     .8.(.<.,.<.,.@.0
    7984:	4416 3400 4817 3400 4c18 3800 4c19 3804     .D.4.H.4.L.8.L.8
    7994:	501a 3c04 541b 3c04 581c 4004 5c1d 4404     .P.<.T.<.X.@.\.D
    79a4:	601e 4808 601f 4c08 5c20 5008 5821 5408     .`.H.`.L \.P!X.T
    79b4:	5422 5c08 5423 6008 5024 6808 4c25 6c08     "T.\#T.`$P.h%L.l
    79c4:	4826 7008 4827 7808 4428 7c08 4029 8408     &H.p'H.x(D.|)@..
    79d4:	3c2a 8808 3c2b 9008 382c 9408 342d 9808     *<..+<..,8..-4..
    79e4:	302e a008 302f a404 2c30 ac04 2831 b004     .0../0..0,..1(..
    79f4:	2432 b404 2433 bc04 2034 c004 1c35 c804     2$..3$..4 ..5...
    7a04:	1836 cc04 1837 d404 1438 d804 1039 dc04     6...7...8...9...
    7a14:	0c3a e404 0c3b e804 083c f004 043d f404     :...;...<...=...
    7a24:	003e fc00 003f f804 0040 f40c 0041 f014     >...?...@...A...
    7a34:	0042 ec1c 0043 e824 0044 e42c 0045 e034     B...C.$.D.,.E.4.
    7a44:	0046 dc3c 0047 d844 0048 d44c 0049 d054     F.<.G.D.H.L.I.T.
    7a54:	004a cc5c 004b c864 004c c46c 004d c074     J.\.K.d.L.l.M.t.
    7a64:	004e bc7c 004f b884 0050 b48c 0051 b094     N.|.O...P...Q...
    7a74:	0052 ac9c 0053 a8a4 0054 a4ac 0055 a0b4     R...S...T...U...
    7a84:	0056 9cbc 0057 98c4 0058 94cc 0059 90d4     V...W...X...Y...
    7a94:	005a 8cdc 005b 88e4 005c 84ec 005d 7ce8     Z...[...\...]..|
    7aa4:	005e 78e0 005f 70dc 0060 68d8 0061 60d0     ^..x_..p`..ha..`
    7ab4:	0062 5cc8 0063 58c0 0064 50b8 0065 4cac     b..\c..Xd..Pe..L
    7ac4:	0066 44a4 0067 409c 0068 3894 0069 348c     f..Dg..@h..8i..4
    7ad4:	006a 2c80 006b 2878 006c 2070 006d 1c68     j..,k.x(l.p m.h.
    7ae4:	006e 145c 006f 1054 0070 084c 0071 0040     n.\.o.T.p.L.q.@.
    7af4:	0072 003c 0073 0038 0074 0034 0075 0030     r.<.s.8.t.4.u.0.
    7b04:	0076 002c 0077 0028 0078 0024 0479 0020     v.,.w.(.x.$.y. .
    7b14:	047a 001c 047b 0018 047c 0014 047d 0010     z...{...|...}...
    7b24:	047e 000c 047f 0008 0480 0004 0881 0400     ~...............
    7b34:	0c82 0800 1083 0c00 1484 0c00 1485 1000     ................
    7b44:	1886 1000 1c87 1400 2088 1400 2089 1800     ......... ... ..
    7b54:	248a 1800 288b 1c00 2c8c 2000 308d 2400     .$...(...,. .0.$
    7b64:	348e 2404 388f 2804 3891 2804 3c92 2c04     .4.$.8.(.8.(.<.,
    7b74:	4093 3004 4494 3004 4495 3404 4896 3404     .@.0.D.0.D.4.H.4
    7b84:	4c97 3804 5098 3804 5099 3c04 549a 3c04     .L.8.P.8.P.<.T.<
    7b94:	589b 4004 5c9c 4404 609d 4808 609e 4c08     .X.@.\.D.`.H.`.L
    7ba4:	689f 4808 70a0 4408 7ca1 4008 84a2 3c08     .h.H.p.D.|.@...<
    7bb4:	90a3 3408 98a4 3008 a4a5 2c08 aca6 2808     ...4...0...,...(
    7bc4:	b4a7 2404 c0a8 2004 c8a9 1c04 d4aa 1404     ...$... ........
    7bd4:	dcab 1004 e8ac 0c04 f0ad 0804 fcae 0000     ................
    7be4:	fcaf 0008 fcb0 0014 fcb1 001c fcb2 0028     ..............(.
    7bf4:	fcb3 0030 fcb4 003c fcb5 0044 fcb6 0050     ..0...<...D...P.
    7c04:	fcb7 0058 fcb8 0064 fcb9 006c fcba 0078     ..X...d...l...x.
    7c14:	fcbb 0084 fcbc 008c fcbd 0098 fcbe 00a0     ................
    7c24:	fcbf 00ac fcc0 00b4 fcc1 00c0 fcc2 00c8     ................
    7c34:	fcc3 00d4 fcc4 00dc fcc5 00e8 fcc6 00f0     ................
    7c44:	fcc7 00fc fcc8 00f0 fcc9 00e8 fcca 00dc     ................
    7c54:	fccb 00d0 fccc 00c4 fccd 00bc fcce 00b0     ................
    7c64:	fccf 00a4 fcd0 0098 fcd1 0090 fcd2 0084     ................
    7c74:	fcd3 0078 fcd4 0070 fcd5 0064 fcd6 0058     ..x...p...d...X.
    7c84:	fcd7 004c fcd8 0044 fcd9 0038 fcda 002c     ..L...D...8...,.
    7c94:	fcdb 0020 fcdc 0018 fcdd 000c fcde 0000     .. .............
    7ca4:	f4df 0400 ece0 0800 e0e1 0c00 d8e2 1000     ................
    7cb4:	cce3 1800 c4e4 1c00 b8e5 2000 b0e6 2404     ........... ...$
    7cc4:	a8e7 2804 9ce8 2c04 94e9 3004 88ea 3804     ...(...,...0...8
    7cd4:	80eb 3c04 74ec 4004 6ced 4404 60ee 4c08     ...<.t.@.l.D.`.L
    7ce4:	5cef 4808 54f0 4408 50f1 4008 48f2 3808     .\.H.T.D.P.@.H.8
    7cf4:	44f3 3404 3cf4 3004 38f5 2c04 30f6 2804     .D.4.<.0.8.,.0.(
    7d04:	2cf7 2004 24f8 1c04 20f9 1804 18fa 1404     .,. .$... ......
    7d14:	14fb 1000 0cfc 0800 00fd 0000 04fe 0400     ................
    7d24:	04ff 0400                                   ....

00007d28 <es_emerald_dragon_09_gp>:
    7d28:	0100 0101 014c 0102 0a99 012f 61ff 01ff     ....L...../..a..

00007d38 <bhw3_34_gp>:
    7d38:	1d00 cd70 5c30 faff 345b 0cdf 047c 150d     ..p.0\..[4..|...
    7d48:	09b7 0f67 0ad8 0250 26ff 34ff               ..g...P..&.4

00007d54 <apple_green_gp>:
    7d54:	0000 0000 0102 0101 0104 0101 0107 0101     ................
    7d64:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    7d74:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    7d84:	011e 0102 0120 0102 0123 0103 0125 0103     .... ...#...%...
    7d94:	0128 0104 012a 0105 012d 0105 012f 0106     (...*...-.../...
    7da4:	0132 0107 0134 0108 0137 0108 0139 0209     2...4...7...9...
    7db4:	013c 020a 013e 030b 0141 040c 0143 050d     <...>...A...C...
    7dc4:	0146 070e 0148 0710 014b 0811 014d 0812     F...H...K...M...
    7dd4:	0150 0813 0152 0915 0155 0916 0157 0918     P...R...U...W...
    7de4:	0182 083a 0185 073c 0187 073f 018a 0642     ..:...<...?...B.
    7df4:	018d 0645 018f 0547 0192 054a 0194 044e     ..E...G...J...N.
    7e04:	0197 0450 0199 0354 019c 0356 019e 025a     ..P...T...V...Z.
    7e14:	01a1 025c 01a3 0160 01a6 0163 01a8 0167     ..\...`...c...g.
    7e24:	01ab 0169 02ad 016d 02b0 0170 03b3 0175     ..i...m...p...u.
    7e34:	03b5 0177 04b8 017c 05ba 0180 05bd 0183     ..w...|.........
    7e44:	06bf 0188 07c2 018b 09c4 0190 0ac7 0193     ................
    7e54:	0bc9 0198 0dcc 019c 0fce 01a1 11d1 01a4     ................
    7e64:	13d3 01a9 16d6 01ad 18d9 01b2 1bdb 01b8     ................
    7e74:	1fde 01bb 23e0 01c1 27e3 01c5 2ce5 01cb     .....#...'...,..
    7e84:	31e8 01cf 36ea 01d5 3ced 01d9 43ef 01df     .1...6...<...C..
    7e94:	4af2 01e3 52f4 01e9 5bf7 01ed 64f9 01f4     .J...R...[...d..
    7ea4:	6efc 01f8 79ff 00ff                         .n...y..

00007eac <Wizzl019_gp>:
    7eac:	8c00 ac14 8c01 ac14 9402 b814 a003 c810     ................
    7ebc:	9c04 c410 9805 bc10 9406 b410 8c07 ac0c     ................
    7ecc:	8808 a40c 8409 9c0c 800a 940c 780b 8c08     .............x..
    7edc:	740c 8808 700d 8008 6c0e 7808 640f 7004     .t...p...l.x.d.p
    7eec:	6010 6804 5c11 6004 5812 5804 5013 5000     .`.h.\.`.X.X.P.P
    7efc:	5414 4c04 5c15 480c 6416 4414 6c17 3c1c     .T.L.\.H.d.D.l.<
    7f0c:	7418 3824 7c19 342c 841a 3034 8c1b 283c     .t$8.|,4..40..<(
    7f1c:	901c 2440 981d 2048 a01e 1c50 a81f 1458     ..@$..H ..P...X.
    7f2c:	b020 1060 b821 0c68 c022 0870 c823 0078      .`.!.h.".p.#.x.
    7f3c:	c424 0074 bc25 0070 b426 006c ac27 0064     $.t.%.p.&.l.'.d.
    7f4c:	a428 0060 9c29 005c 942a 0058 8c2b 0050     (.`.).\.*.X.+.P.
    7f5c:	882c 004c 802d 0048 782e 0044 702f 003c     ,.L.-.H..xD./p<.
    7f6c:	6830 0038 6031 0034 5832 0030 5033 0028     0h8.1`4.2X0.3P(.
    7f7c:	4c34 0430 4835 083c 4436 0c44 3c37 1450     4L0.5H<.6DD.7<P.
    7f8c:	3838 1858 3439 1c64 303a 206c 283b 2878     88X.94d.:0l ;(x(
    7f9c:	243c 2c80 203d 308c 1c3e 3494 143f 3ca0     <$.,= .0>..4?..<
    7fac:	1040 40a8 0c41 44b4 0842 48bc 0043 50c8     @..@A..DB..HC..P
    7fbc:	0044 4cc0 0045 48b4 0046 44ac 0047 3ca0     D..LE..HF..DG..<
    7fcc:	0048 3898 0049 348c 004a 3084 004b 2878     H..8I..4J..0K.x(
    7fdc:	004c 2470 004d 2064 004e 1c5c 004f 1450     L.p$M.d N.\.O.P.
    7fec:	0050 1048 0051 0c3c 0052 0834 0053 0028     P.H.Q.<.R.4.S.(.
    7ffc:	0054 0c28 0455 1c24 0456 2c24 0857 3c20     T.(.U.$.V.$,W. <
    800c:	0c58 481c 0c59 581c 105a 6818 145b 7814     X..HY..XZ..h[..x
    801c:	145c 8414 185d 9410 185e a410 1c5f b40c     \...]...^..._...
    802c:	2060 c008 2061 d008 2462 e004 2863 f000     ` ..a ..b$..c(..
    803c:	2864 e800 2465 dc00 2466 d400 2067 c800     d(..e$..f$..g ..
    804c:	1c68 c000 1c69 b400 186a ac00 146b a000     h...i...j...k...
    805c:	146c 9800 106d 8c00 106e 8400 0c6f 7800     l...m...n...o..x
    806c:	0870 7000 0871 6400 0472 5c00 0073 5000     p..pq..dr..\s..P
    807c:	0c74 5400 1875 5c00 2476 6400 3077 6c00     t..Tu..\v$.dw0.l
    808c:	3c78 7400 4879 7c00 547a 8400 647b 8c00     x<.tyH.|zT..{d..
    809c:	707c 9000 7c7d 9800 887e a000 947f a800     |p..}|..~.......
    80ac:	a080 b000 ac81 b800 b882 c000 c883 c800     ................
    80bc:	c084 c000 b485 b400 ac86 ac00 a087 a000     ................
    80cc:	9888 9800 8c89 8c00 848a 8400 788b 7800     .............x.x
    80dc:	708c 7000 648d 6400 5c8e 5c00 508f 5000     .p.p.d.d.\.\.P.P
    80ec:	4890 4800 3c91 3c00 3492 3400 2893 2800     .H.H.<.<.4.4.(.(
    80fc:	3494 2800 4095 2800 4c96 2800 5897 2800     .4.(.@.(.L.(.X.(
    810c:	6498 2800 7099 2800 7c9a 2800 8c9b 2400     .d.(.p.(.|.(...$
    811c:	989c 2400 a49d 2400 b09e 2400 bc9f 2400     ...$...$...$...$
    812c:	c8a0 2400 d4a1 2400 e0a2 2400 f0a3 2000     ...$...$...$... 
    813c:	e8a4 2000 dca5 1c00 d4a6 1c00 c8a7 1800     ... ............
    814c:	c0a8 1800 b4a9 1400 acaa 1400 a0ab 1000     ................
    815c:	98ac 1000 8cad 0c00 84ae 0c00 78af 0800     .............x..
    816c:	70b0 0800 64b1 0400 5cb2 0400 50b3 0000     .p...d...\...P..
    817c:	58b4 0008 60b5 0010 68b6 0018 74b7 0020     .X...`...h...t .
    818c:	7cb8 0028 84b9 0030 8cba 0038 98bb 0040     .|(...0...8...@.
    819c:	a0bc 0048 a8bd 0050 b0be 0058 bcbf 0060     ..H...P...X...`.
    81ac:	c4c0 0068 ccc1 0070 d4c2 0078 e0c3 0080     ..h...p...x.....
    81bc:	d8c4 007c ccc5 0074 c0c6 0070 b4c7 0068     ..|...t...p...h.
    81cc:	a8c8 0064 a0c9 005c 94ca 0058 88cb 0050     ..d...\...X...P.
    81dc:	7ccc 0048 70cd 0044 68ce 003c 5ccf 0038     .|H..pD..h<..\8.
    81ec:	50d0 0030 44d1 002c 38d2 0024 40d3 0824     .P0..D,..8$..@$.
    81fc:	4cd4 1424 58d5 1c24 64d6 2820 70d7 3020     .L$..X$..d (.p 0
    820c:	7cd8 3c20 88d9 4420 94da 501c 9cdb 581c     .| <.. D...P...X
    821c:	a8dc 641c b4dd 6c1c c0de 7818 ccdf 8018     ...d...l...x....
    822c:	d8e0 8c18 e4e1 9418 f0e2 a014 e4e3 9814     ................
    823c:	d4e4 8c14 c4e5 8418 b4e6 7818 a8e7 7018     ...........x...p
    824c:	98e8 641c 88e9 5c1c 78ea 5020 6ceb 4820     ...d...\.x P.l H
    825c:	5cec 3c20 4ced 3424 3cee 2824 30ef 2024     .\ <.L$4.<$(.0$ 
    826c:	20f0 1428 10f1 0c28 00f2 002c 08f3 0c2c     . (...(...,...,.
    827c:	14f4 182c 1cf5 2428 28f6 3028 30f7 3c24     ..,...($.((0.0$<
    828c:	3cf8 4824 44f9 5420 50fa 6420 58fb 7020     .<$H.D T.P d.X p
    829c:	64fc 7c1c 6cfd 881c 78fe 9418 80ff a018     .d.|.l...x......

000082ac <blade_runner_2049_gp>:
    82ac:	c900 ad50 ab19 9b39 6832 7323 5e4b 6e21     ..P...9.2h#sK^!n
    82bc:	7f64 ac78 4d7d a98d 74a0 b255 14aa 731b     d.x.}M...tU....s
    82cc:	4bc8 4915 2cff 2a09                         .K.I.,.*

000082d4 <slope_gp>:
    82d4:	ff00 ffff ff05 00ff 000e 00ff 001c ffff     ................
    82e4:	002a ff00 ff54 ff00 ff8d 0000 00ff 0000     *...T...........

000082f4 <bhw2_49_gp>:
    82f4:	0900 0f0f 0028 2d37 0956 0f0f 1d82 3e29     ....(.7-V.....)>
    8304:	09aa 0f0f 40d3 c708 06ff 1601               .....@......

00008310 <es_autumn_19_gp>:
    8310:	1a00 0101 4333 0104 7654 010e 8968 3498     ....3C..Tv..h..4
    8320:	7170 0141 857a 3b95 897c 3498 7187 0141     pqA.z..;|..4.qA.
    8330:	8b8e 2e9a 71a3 010d 37cc 0103 11f9 0101     .....q...7......
    8340:	11ff 0101                                   ....

00008344 <bhw2_turq_gp>:
    8344:	0100 5f21 0126 256b 2a4c 2dff ff7f 2dff     ..!_&.k%L*.-...-
    8354:	2ab2 2dff 01d8 256b 01ff 5f21               .*.-..k%..!_

00008360 <bhw2_22_gp>:
    8360:	0000 0000 e363 0101 f982 5fc7 e39b 0101     ....c......_....
    8370:	00ff 0000                                   ....

00008374 <Ribbon_Colors_gp>:
    8374:	e300 0902 c21f 0933 a73f 08af 1b5f 4ed1     ......3.?..._..N
    8384:	017f f7f8 019f a64e 01bf 6605 2adf 124f     ......N....f.*O.
    8394:	ffff 00ff                                   ....

00008398 <Analogous_1_gp>:
    8398:	0300 ff00 173f ff00 437f ff00 8ebf 2d00     ....?....C.....-
    83a8:	ffff 0000                                   ....

000083ac <es_emerald_dragon_08_gp>:
    83ac:	6100 01ff 2f65 0185 0db2 012b 02ff 010a     .a..e/....+.....

000083bc <standard_gp>:
    83bc:	0000 0000 0a54 ff11 0054 0011 0aa9 0cff     ....T...T.......
    83cc:	0aa9 0000 ffff 0c11                         ........

000083d4 <stratosphere_sunset_gp>:
    83d4:	0100 0902 0104 0902 0108 0a02 010d 0b02     ................
    83e4:	0111 0b02 0115 0d03 011a 0f03 011e 1003     ................
    83f4:	0123 1204 0127 1304 012b 1504 0130 1705     #...'...+...0...
    8404:	0134 1b05 0139 2006 013d 2607 0141 3109     4...9.. =..&A..1
    8414:	0146 3d0b 014a 5011 014f 6717 0153 871f     F..=J..PO..gS...
    8424:	0257 ac2a 045c be30 0960 d236 0b65 d637     W.*.\.0.`.6.e.7.
    8434:	0d69 dd3a 106d db3c 1372 d83e 1876 d242     i.:.m.<.r.>.v.B.
    8444:	1e7b c945 237f b446 2783 a246 4088 9054     {.E..#F..'F..@T.
    8454:	618c 8061 9491 7b79 d295 7792 b899 5c7a     .aa...y{...w..z\
    8464:	9f9e 4564 85a2 2144 6ea7 0b2a 98ab 0635     ..dE..D!.n*...5.
    8474:	cbaf 0341 deb4 0563 f2b8 078e debd 057a     ..A...c.......z.
    8484:	cbc1 0369 d0c5 0149 d2ca 0130 dece 012d     ..i...I...0...-.
    8494:	ead3 012a 96d7 0117 56db 010a 23e0 0103     ..*......V...#..
    84a4:	09e4 0101 04e9 0101 01ed 0101 01f1 0101     ................
    84b4:	01f6 0101 01fa 0101 01ff 0101               ............

000084c0 <es_ocean_breeze_036_gp>:
    84c0:	0100 0706 0159 6f63 9099 ffd1 00ff 5249     ....Y.co......IR

000084d0 <es_rivendell_15_gp>:
    84d0:	0100 050e 1065 0e24 38a5 1e44 96f2 639c     ....e.$..8D....c
    84e0:	96ff 639c                                   ...c

000084e4 <sunlitwave_gp>:
    84e4:	0500 5409 252d 6f18 1051 3b05 1870 1401     ...T-%.oQ..;p...
    84f4:	2296 0201 afc6 0724 d0ed 1068 efff 9ed3     ."....$...h.....

00008504 <sin16_C(unsigned short)::base>:
    8504:	0000 18f9 30fb 471c 5a82 6a6d 7641 7d89     .....0.G.ZmjAv.}

00008514 <bhw1_sunconure_gp>:
    8514:	1400 0ddf e8a0 0141 e8fc 0105 e8ff 0105     ......A.........

00008524 <ofaurora_gp>:
    8524:	ff00 f2f1 ed0a 0901 2a0f 0201 0116 0101     .........*......
    8534:	ed23 0901 ff30 f2f1 ef3a 0139 0142 0101     #...0...:.9.B...
    8544:	ef4c 0139 ff54 f2f1 f25e 01d9 0165 0101     L.9.T...^...e...
    8554:	f26d 01d9 ff77 f2f1 097f 2490 0184 0101     m...w......$....
    8564:	098c 2490 ff93 f2f1 019e ba9c 01a8 0101     ...$............
    8574:	01b2 ba9c ffba f2f1 10c6 ff0d 01ce 0101     ................
    8584:	10d8 ff0d ffe0 f2f1 4eea 9c01 0eed 1e01     .........N......
    8594:	01ef 0101 4ef4 9c01 ffff f2f1               .....N......

000085a0 <bhw2_14_gp>:
    85a0:	0000 0800 002d 2d00 074f ff0c 2a77 ff37     ....-..-O...w*7.
    85b0:	079e ff0c 00d1 2d00 00ff 0800               .......-....

000085bc <GMT_seafloor_gp>:
    85bc:	1900 6d00 1c0a 7700 2015 7f00 231f 8c00     ...m...w. ...#..
    85cc:	1b2a 9101 1435 9701 0e4a 9c04 0954 a409     *...5...J...T...
    85dc:	055f aa0f 026a b018 0174 b623 018a bc31     _...j...t.#...1.
    85ec:	0094 c542 019f cb4f 03aa d25d 0ab4 d86d     ..B...O...]...m.
    85fc:	18bf df80 2bd4 e695 48df f0ad 70e9 f7c5     .....+...H...p..
    860c:	a3f4 ffe1 dcff fff8                         ........

00008614 <ib15_gp>:
    8614:	7100 935b 9d48 4e58 d059 2155 ff6b 0b1d     .q[.H.XNY.U!k...
    8624:	898d 271f 3bff 5921                         ...'.;!Y

0000862c <twilight_gp>:
    862c:	0000 0000 0102 0101 0105 0101 0107 0101     ................
    863c:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    864c:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    865c:	011e 0101 0120 0102 0123 0102 0125 0102     .... ...#...%...
    866c:	0228 0203 022a 0203 022d 0203 032f 0304     (...*...-.../...
    867c:	0332 0304 0435 0405 0437 0405 053a 0505     2...5...7...:...
    868c:	063c 0606 063f 0606 0741 0707 0844 0807     <...?...A...D...
    869c:	0946 0908 0949 0a08 0a4b 0b08 0b4e 0d09     F...I...K...N...
    86ac:	0c50 0e09 0d53 0f09 0e55 100a 0e58 110a     P...S...U...X...
    86bc:	1185 330e 1088 340e 0f8a 370e 0e8d 390e     ...3...4...7...9
    86cc:	0d8f 3d0e 0c92 3f0e 0c95 420e 0a97 450d     ...=...?...B...E
    86dc:	0a9a 480d 099c 4b0d 089f 4e0d 07a1 520e     ...H...K...N...R
    86ec:	07a4 5410 07a6 5811 07a9 5b13 07ab 5f15     ...T...X...[..._
    86fc:	07ae 6216 07b0 6619 06b3 691b 06b5 6d1d     ...b...f...i...m
    870c:	06b8 7020 07ba 7525 08bd 782a 09bf 7d2f     .. p..%u..*x../}
    871c:	0ac2 8036 0bc4 843b 0cc7 8942 0ec9 8c49     ..6...;...B...I.
    872c:	10cc 9150 12ce 9557 14d0 995f 16d3 9e67     ..P...W..._...g.
    873c:	18d5 a26f 1bd8 a877 1eda ac80 20dd b08a     ..o...w...... ..
    874c:	23df b693 27e2 ba9c 2ae4 c0a6 2ee7 c5b0     .#...'...*......
    875c:	34e9 c9b6 3aeb cfbb 41ee d4c1 49f0 dbc7     .4...:...A...I..
    876c:	50f2 dfcd 5af5 e6d5 64f7 ebdb 6dfa f2e1     .P...Z...d...m..
    877c:	78fc f7e7 84ff ffed                         .x......

00008784 <bhw3_21_gp>:
    8784:	0100 6228 0130 4441 024c 60a1 0068 1951     ..(b0.ADL..`h.Q.
    8794:	4182 52b6 0099 aa56 11b5 b6cf 11cc b6cf     .A.R..V.........
    87a4:	01ff 2e17                                   ....

000087a8 <gr64_hult_gp>:
    87a8:	0100 6d7c 0142 4f5d 3468 0141 7382 017f     ..|mB.]Oh4A..s..
    87b8:	3496 0141 01c9 4856 00ef 2d37 00ff 2d37     .4A...VH..7-..7-

000087c8 <cyberpunk_neon_gp>:
    87c8:	7100 911c ea3f d900 0a7f c6bd 13bf 7c3e     .q..?.........>|
    87d8:	09ff 3318                                   ...3

000087dc <bhw1_26_gp>:
    87dc:	6b00 cd01 ff23 ffff 6b49 cd01 0a6b d295     .k..#...Ik..k...
    87ec:	ff82 ffff 0a99 d295 1baa 77af 35c6 38cb     ...........w.5.8
    87fc:	84cf 87e5 ffdb ffff 84e7 87e5 35fc 38cb     .............5.8
    880c:	35ff 38cb                                   .5.8

00008810 <Tropical_Colors_gp>:
    8810:	0100 0104 010e 010a 0115 0013 0123 012a     ............#.*.
    8820:	0331 014b 383b 0167 d046 0487 d954 0236     1.K.;8g.F...T.6.
    8830:	e062 010a 7582 030f 308d 0614 2a9b 4d12     b....u...0...*.M
    8840:	24aa ff11 37c5 f261 50d2 e4ff 2fdc 4ddb     .$...7a..P.../.M
    8850:	18e1 0abb 18e4 09b4 18e6 08ab 17e8 06a1     ................
    8860:	17eb 0595 16ed 0488 16f0 027c 15f2 0170     ..........|...p.
    8870:	15f5 0164 14f7 0158 13fa 014d 13fc 0142     ..d...X...M...B.
    8880:	12ff 0037                                   ..7.

00008884 <ib_jul01_gp>:
    8884:	c200 0101 015e 121d 3984 1c83 71ff 0101     ....^....9...q..

00008894 <retro2_16_gp>:
    8894:	bc00 0187 2eff 0107                         ........

0000889c <departure_gp>:
    889c:	0800 0003 172a 0007 4b3f 0626 a954 2663     ....*...?K&.T.c&
    88ac:	d56a 77a9 ff74 ffff 878a 8aff 1694 18ff     j..wt...........
    88bc:	00aa 00ff 00bf 0088 00d4 0037 00ff 0037     ..........7...7.

000088cc <Secondary_01a_gp>:
    88cc:	0300 ff00 433f 2d07 ff7f 0021 2abf 0173     ....?C.-..!..*s.
    88dc:	00ff 01ff                                   ....

000088e0 <rainbowsherbet_gp>:
    88e0:	ff00 0421 ff2b 1944 ff56 1907 ff7f 6752     ..!.+.D.V.....Rg
    88f0:	ffaa f2ff 2ad1 16ff 57ff 41ff               .....*...W.A

000088fc <parrot_gp>:
    88fc:	7e00 0100 c572 10a8 c58c 10a8 00d8 2002     .~..r.......... 
    890c:	00ff 2002                                   ... 

00008910 <green_gp>:
    8910:	0000 0000 003f 0011 007e 0052 009b 0080     ....?...~.R.....
    8920:	00b8 00ba 2adb 2ddb ffff ffff               .....*.-....

0000892c <es_landscape_59_gp>:
    892c:	d700 0972 ff33 22b6 ff59 30cd d55e d2e5     ..r.3.."Y..0^...
    893c:	6a99 91a1 14cc 6f65 01ff 4b30               .j....eo..0K

00008948 <es_vintage_57_gp>:
    8948:	0200 0101 1235 0001 4568 011d a799 0a87     ....5...hE......
    8958:	2eff 0438                                   ..8.

0000895c <gr65_hult_gp>:
    895c:	f700 f7b0 ff30 ff88 dc59 e21d 07a0 b252     ....0...Y.....R.
    896c:	01d8 6d7c 01ff 6d7c                         ..|m..|m

00008974 <cequal_gp>:
    8974:	0100 0101 0124 0103 014c 7b29 3b70 fc01     ....$...L.){p;..
    8984:	757f b401 efac 0151 fcc3 01b4 fcde 93fa     .u....Q.........
    8994:	fcff fcfc                                   ....

00008998 <bhw3_30_gp>:
    8998:	0100 0104 010c 021c 101c 0b44 123a 1c0b     ..........D.:...
    89a8:	1f4f 301b 0260 220d 1e75 7b56 0287 3e2a     O..0`.."u.V{..*>
    89b8:	4a99 9b80 3cb5 291f a7d6 dfd3 b3ed 4e46     .J...<.)......FN
    89c8:	39ff 0702                                   .9..

000089cc <bhw1_greeny_gp>:
    89cc:	0000 0000 0727 0837 2a63 2dff 0799 0837     ....'.7.c*.-..7.
    89dc:	00ff 0000                                   ....

000089e0 <BlacK_Magenta_Red_gp>:
    89e0:	0000 0000 2a3f 2d00 ff7f ff00 ffbf 2d00     ....?*.-.......-
    89f0:	ffff 0000                                   ....

000089f4 <xanidu_2_gp>:
    89f4:	7600 e2a1 4f35 a201 435e 0701 0184 9c37     .v..5O..^C....7.
    8a04:	01ad 3d7f 27d3 482d 76ff e2a1               ...=.'-H.v..

00008a10 <Blue_Cyan_Yellow_gp>:
    8a10:	0000 ff00 003f ff37 007f ffff 2abf 2dff     ....?.7......*.-
    8a20:	ffff 00ff 4d56 5044 5f45 0000 323a 003a     ....VMDPE_..:2:.
    8a30:	003a 0000 565f 444d 4550 0000 4d56 5044     :..._VMDPE..VMDP
    8a40:	5f43 0000 565f 444d 4350 0000 7245 6f72     C_.._VMDPC..Erro
    8a50:	3a72 4120 7474 6d65 7470 7420 206f 6573     r: Attempt to se
    8a60:	2074 2061 6572 6461 6f2d 6c6e 2079 6176     t a read-only va
    8a70:	6972 6261 656c 6f20 2072 6164 6174 7420     riable or data t
    8a80:	7079 2065 6f6e 2074 7573 7070 726f 6574     ype not supporte
    8a90:	0d64 000a                                   d...

00008a94 <pin2sc1a>:
    8a94:	0e05 0908 0c0d 0706 040f 1300 9303 0e05     ................
    8aa4:	0908 0c0d 0706 040f ffff 85c5 8684 c487     ................
    8ab4:	ffff 1300 9303 921a ff17 ffff               ............

00008ac0 <digital_pin_to_info_PGM>:
    8ac0:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
    8ad0:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
    8ae0:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
    8af0:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
    8b00:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
    8b10:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
    8b20:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
    8b30:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
    8b40:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
    8b50:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
    8b60:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
    8b70:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
    8b80:	0014 43fe 9014 4004 084c 43fe a04c 4004     ...C...@L..CL..@
    8b90:	2004 43fe d004 4004 1024 43fe b024 4004     . .C...@$..C$..@
    8ba0:	1020 43fe b020 4004 1028 43fe b028 4004      ..C ..@(..C(..@
    8bb0:	102c 43fe b02c 4004 2000 43fe d000 4004     ,..C,..@. .C...@
    8bc0:	0848 43fe a048 4004 0010 43fe 9010 4004     H..CH..@...C...@
    8bd0:	0a0d ffff                                   ....

00008bd4 <vtable for usb_serial_class>:
	...
    8bdc:	6295 0000 628d 0000 6289 0000 6285 0000     .b...b...b...b..
    8bec:	6281 0000 627d 0000 6279 0000 6275 0000     .b..}b..yb..ub..

00008bfc <usb_endpoint_config_table>:
    8bfc:	1500 1519                                   ....

00008c00 <usb_descriptor_list>:
    8c00:	0100 0000 8784 1fff 0012 0000 0200 0000     ................
    8c10:	87b0 1fff 0043 0000 0300 0000 880c 1fff     ....C...........
    8c20:	0000 0000 0301 0409 8798 1fff 0000 0000     ................
    8c30:	0302 0409 87f4 1fff 0000 0000 0303 0409     ................
    8c40:	8810 1fff 0000 0000 0000 0000 0000 0000     ................
    8c50:	0000 0000                                   ....

00008c54 <_init>:
    8c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c56:	bf00      	nop
    8c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8c5a:	bc08      	pop	{r3}
    8c5c:	469e      	mov	lr, r3
    8c5e:	4770      	bx	lr

00008c60 <__init_array_start>:
    8c60:	00006cb5 	.word	0x00006cb5

00008c64 <__frame_dummy_init_array_entry>:
    8c64:	00000435 00003ea1 00004355 00004909     5....>..UC...I..

Disassembly of section .fini:

00008c74 <_fini>:
    8c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c76:	bf00      	nop
