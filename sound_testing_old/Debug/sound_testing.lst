
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\sound_testing\teensy40\Debug/sound_testing.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 20 00     .............. .
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 20 62 00 00 00 00 00 00                 ...` b......

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b74      	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a74      	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4874      	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a74      	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a73      	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	4974      	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	428a      	cmp	r2, r1
6000104e:	d00f      	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	4b73      	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	429a      	cmp	r2, r3
60001054:	d20c      	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	43d4      	mvns	r4, r2
60001058:	4608      	mov	r0, r1
6000105a:	4423      	add	r3, r4
6000105c:	f023 0303 	bic.w	r3, r3, #3
60001060:	3304      	adds	r3, #4
60001062:	440b      	add	r3, r1
		*dest++ = *src++;
60001064:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000106a:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	d1f9      	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	4a6c      	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	496d      	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	428a      	cmp	r2, r1
60001076:	d00f      	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	4b6c      	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	429a      	cmp	r2, r3
6000107c:	d20c      	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	43d4      	mvns	r4, r2
60001080:	4608      	mov	r0, r1
60001082:	4423      	add	r3, r4
60001084:	f023 0303 	bic.w	r3, r3, #3
60001088:	3304      	adds	r3, #4
6000108a:	440b      	add	r3, r1
		*dest++ = *src++;
6000108c:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001092:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	d1f9      	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	4a65      	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	4b66      	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	429a      	cmp	r2, r3
6000109e:	d20b      	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	43d0      	mvns	r0, r2
600010a2:	4611      	mov	r1, r2
		*dest++ = 0;
600010a4:	2400      	movs	r4, #0
600010a6:	4403      	add	r3, r0
600010a8:	f023 0303 	bic.w	r3, r3, #3
600010ac:	3304      	adds	r3, #4
600010ae:	4413      	add	r3, r2
600010b0:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	428b      	cmp	r3, r1
600010b6:	d1fb      	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	4a5f      	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010be:	4b5f      	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	6011      	str	r1, [r2, #0]
600010c2:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010c6:	4a5e      	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	f843 2f04 	str.w	r2, [r3, #4]!
600010cc:	4299      	cmp	r1, r3
600010ce:	d1fb      	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	4b5c      	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	2180      	movs	r1, #128	; 0x80
600010d4:	4a5c      	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	f803 1b01 	strb.w	r1, [r3], #1
600010da:	4293      	cmp	r3, r2
600010dc:	d1fb      	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	4c5b      	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	4e5a      	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	4b56      	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	4943      	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	69f3      	ldr	r3, [r6, #28]
60001112:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
6000111a:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	6a73      	ldr	r3, [r6, #36]	; 0x24
6000111e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001126:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	f000 f8e0 	bl	600012f4 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	4a48      	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	4b48      	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	4949      	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	4946      	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	4a46      	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	4847      	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	4a46      	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	4844      	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	4944      	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	f043 0301 	orr.w	r3, r3, #1
6000116c:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	6803      	ldr	r3, [r0, #0]
60001170:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	f000 f91f 	bl	600013b4 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	4840      	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	f000 fab6 	bl	600016f8 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	bf00      	nop
6000118e:	bf00      	nop
60001190:	bf00      	nop
60001192:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	4a3a      	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	4b39      	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011b4:	07d2      	lsls	r2, r2, #31
600011b6:	d408      	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	4932      	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011c4:	f042 0201 	orr.w	r2, r2, #1
600011c8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	4a2e      	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	4c2f      	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	6893      	ldr	r3, [r2, #8]
600011d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011d4:	6093      	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	f000 fa93 	bl	60001700 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	2b13      	cmp	r3, #19
600011de:	d9fc      	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	f000 f9a8 	bl	60001534 <usb_init>
	analog_init();
600011e4:	f000 f85a 	bl	6000129c <analog_init>
	pwm_init();
600011e8:	f000 fa8e 	bl	60001708 <__pwm_init_veneer>
	tempmon_init();
600011ec:	f000 f914 	bl	60001418 <tempmon_init>

	startup_late_hook();
600011f0:	f000 fa8e 	bl	60001710 <__startup_late_hook_veneer>
600011f4:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600011fa:	d3fb      	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	f000 fa90 	bl	60001720 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	f000 fa96 	bl	60001730 <__main_veneer>
60001204:	e7fe      	b.n	60001204 <ResetHandler+0x1d0>
60001206:	bf00      	nop
60001208:	400ac000 	.word	0x400ac000
6000120c:	aaaaaaab 	.word	0xaaaaaaab
60001210:	00200007 	.word	0x00200007
60001214:	20078000 	.word	0x20078000
60001218:	00000000 	.word	0x00000000
6000121c:	60001750 	.word	0x60001750
60001220:	000046a0 	.word	0x000046a0
60001224:	20000000 	.word	0x20000000
60001228:	60005df4 	.word	0x60005df4
6000122c:	20000430 	.word	0x20000430
60001230:	20000430 	.word	0x20000430
60001234:	200022c0 	.word	0x200022c0
60001238:	e000ed88 	.word	0xe000ed88
6000123c:	20000bfc 	.word	0x20000bfc
60001240:	00002bcd 	.word	0x00002bcd
60001244:	e000e400 	.word	0xe000e400
60001248:	e000e4a0 	.word	0xe000e4a0
6000124c:	400d8000 	.word	0x400d8000
60001250:	400fc000 	.word	0x400fc000
60001254:	e000ed08 	.word	0xe000ed08
60001258:	e000e014 	.word	0xe000e014
6000125c:	e000e018 	.word	0xe000e018
60001260:	00003e15 	.word	0x00003e15
60001264:	e000edfc 	.word	0xe000edfc
60001268:	20200000 	.word	0x20200000
6000126c:	00003f19 	.word	0x00003f19
60001270:	e0001000 	.word	0xe0001000
60001274:	e0001004 	.word	0xe0001004
60001278:	200006cc 	.word	0x200006cc
6000127c:	23c34600 	.word	0x23c34600
60001280:	40084000 	.word	0x40084000
60001284:	400d4000 	.word	0x400d4000
60001288:	56c00000 	.word	0x56c00000
6000128c:	200006d4 	.word	0x200006d4
60001290:	20000c00 	.word	0x20000c00
60001294:	2018101b 	.word	0x2018101b
60001298:	13110d0c 	.word	0x13110d0c

6000129c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000129c:	4b11      	ldr	r3, [pc, #68]	; (600012e4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000129e:	4912      	ldr	r1, [pc, #72]	; (600012e8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012a0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600012a2:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012a4:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600012a8:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012aa:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600012ac:	f240 65b7 	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600012b0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600012b2:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600012b4:	f440 7040 	orr.w	r0, r0, #768	; 0x300
600012b8:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600012ba:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600012bc:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600012be:	6c93      	ldr	r3, [r2, #72]	; 0x48
600012c0:	061b      	lsls	r3, r3, #24
600012c2:	d4fc      	bmi.n	600012be <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600012c4:	4b09      	ldr	r3, [pc, #36]	; (600012ec <analog_init+0x50>)
600012c6:	f240 60b7 	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600012ca:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600012cc:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600012ce:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600012d0:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600012d2:	6c93      	ldr	r3, [r2, #72]	; 0x48
600012d4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600012d8:	d1fb      	bne.n	600012d2 <analog_init+0x36>
	calibrating = 0;
600012da:	4a05      	ldr	r2, [pc, #20]	; (600012f0 <analog_init+0x54>)
600012dc:	7013      	strb	r3, [r2, #0]
}
600012de:	bc30      	pop	{r4, r5}
600012e0:	4770      	bx	lr
600012e2:	bf00      	nop
600012e4:	400fc000 	.word	0x400fc000
600012e8:	400c4000 	.word	0x400c4000
600012ec:	400c8000 	.word	0x400c8000
600012f0:	200006c9 	.word	0x200006c9

600012f4 <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define SIZE_256M	(SCB_MPU_RASR_SIZE(26) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012f4:	b5f0      	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012f6:	4a1d      	ldr	r2, [pc, #116]	; (6000136c <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012f8:	2100      	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012fa:	4b1d      	ldr	r3, [pc, #116]	; (60001370 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012fc:	f04f 0e10 	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001300:	481c      	ldr	r0, [pc, #112]	; (60001374 <configure_cache+0x80>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001302:	2401      	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001304:	4f1c      	ldr	r7, [pc, #112]	; (60001378 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
60001306:	4e1d      	ldr	r6, [pc, #116]	; (6000137c <configure_cache+0x88>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001308:	4d1d      	ldr	r5, [pc, #116]	; (60001380 <configure_cache+0x8c>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000130a:	6001      	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000130c:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001310:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
60001312:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
60001314:	4f1b      	ldr	r7, [pc, #108]	; (60001384 <configure_cache+0x90>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001316:	601d      	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001318:	4e1b      	ldr	r6, [pc, #108]	; (60001388 <configure_cache+0x94>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
6000131a:	4d1c      	ldr	r5, [pc, #112]	; (6000138c <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
6000131c:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000131e:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001320:	4f1b      	ldr	r7, [pc, #108]	; (60001390 <configure_cache+0x9c>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
60001322:	6015      	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
60001324:	4e1b      	ldr	r6, [pc, #108]	; (60001394 <configure_cache+0xa0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001326:	4d1c      	ldr	r5, [pc, #112]	; (60001398 <configure_cache+0xa4>)

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001328:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
6000132a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
6000132c:	4f1b      	ldr	r7, [pc, #108]	; (6000139c <configure_cache+0xa8>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000132e:	601d      	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001330:	4e1b      	ldr	r6, [pc, #108]	; (600013a0 <configure_cache+0xac>)

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
60001332:	4d1c      	ldr	r5, [pc, #112]	; (600013a4 <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
60001334:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001336:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
60001338:	4f1b      	ldr	r7, [pc, #108]	; (600013a8 <configure_cache+0xb4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
6000133a:	6015      	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
6000133c:	4e1b      	ldr	r6, [pc, #108]	; (600013ac <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
6000133e:	4d1c      	ldr	r5, [pc, #112]	; (600013b0 <configure_cache+0xbc>)

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
60001340:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
60001342:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
60001344:	601d      	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001346:	6004      	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001348:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000134c:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001350:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
60001354:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001358:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000135c:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001360:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001364:	f842 3c88 	str.w	r3, [r2, #-136]
60001368:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000136a:	bf00      	nop
6000136c:	e000ed9c 	.word	0xe000ed9c
60001370:	e000eda0 	.word	0xe000eda0
60001374:	e000ed94 	.word	0xe000ed94
60001378:	03080025 	.word	0x03080025
6000137c:	00200011 	.word	0x00200011
60001380:	07020021 	.word	0x07020021
60001384:	20000012 	.word	0x20000012
60001388:	13080025 	.word	0x13080025
6000138c:	20200013 	.word	0x20200013
60001390:	130b0027 	.word	0x130b0027
60001394:	40000014 	.word	0x40000014
60001398:	13100033 	.word	0x13100033
6000139c:	60000015 	.word	0x60000015
600013a0:	070b002f 	.word	0x070b002f
600013a4:	70000016 	.word	0x70000016
600013a8:	070b0035 	.word	0x070b0035
600013ac:	70000017 	.word	0x70000017
600013b0:	030b002f 	.word	0x030b002f

600013b4 <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
600013b4:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013b6:	4a17      	ldr	r2, [pc, #92]	; (60001414 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013b8:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013ba:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013be:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600013c2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600013c6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600013ca:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013ce:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013d0:	f013 0f02 	tst.w	r3, #2
600013d4:	d006      	beq.n	600013e4 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600013d6:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600013d8:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600013da:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013dc:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013de:	f013 0f02 	tst.w	r3, #2
600013e2:	d1f8      	bne.n	600013d6 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600013e4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600013e8:	d101      	bne.n	600013ee <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600013ea:	6155      	str	r5, [r2, #20]
			continue;
600013ec:	e7ef      	b.n	600013ce <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600013ee:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600013f2:	d101      	bne.n	600013f8 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013f4:	6156      	str	r6, [r2, #20]
			continue;
600013f6:	e7ea      	b.n	600013ce <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600013f8:	2b00      	cmp	r3, #0
600013fa:	dae8      	bge.n	600013ce <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600013fc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001400:	d001      	beq.n	60001406 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001402:	6191      	str	r1, [r2, #24]
			continue;
60001404:	e7e3      	b.n	600013ce <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001406:	065b      	lsls	r3, r3, #25
60001408:	d401      	bmi.n	6000140e <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000140a:	6157      	str	r7, [r2, #20]
			continue;
6000140c:	e7df      	b.n	600013ce <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
6000140e:	bcf0      	pop	{r4, r5, r6, r7}
60001410:	4770      	bx	lr
60001412:	bf00      	nop
60001414:	400d8000 	.word	0x400d8000

60001418 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001418:	4a3b      	ldr	r2, [pc, #236]	; (60001508 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000141a:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000141e:	493b      	ldr	r1, [pc, #236]	; (6000150c <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001420:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001422:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001424:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001426:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000142a:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000142c:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001530 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001430:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001432:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001436:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000143a:	4f35      	ldr	r7, [pc, #212]	; (60001510 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000143c:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000143e:	f3c3 240b 	ubfx	r4, r3, #8, #12
60001442:	4e34      	ldr	r6, [pc, #208]	; (60001514 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001444:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001448:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000144c:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001450:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001454:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001458:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000145c:	ee07 4a90 	vmov	s15, r4
60001460:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001464:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001466:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000146a:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000146e:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001472:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001474:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001478:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000147c:	4d26      	ldr	r5, [pc, #152]	; (60001518 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000147e:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001482:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001484:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001488:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000148c:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000148e:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001492:	4e22      	ldr	r6, [pc, #136]	; (6000151c <tempmon_init+0x104>)
60001494:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001496:	4922      	ldr	r1, [pc, #136]	; (60001520 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001498:	4c22      	ldr	r4, [pc, #136]	; (60001524 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000149a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000149e:	ee07 3a90 	vmov	s15, r3
600014a2:	4b21      	ldr	r3, [pc, #132]	; (60001528 <tempmon_init+0x110>)
600014a4:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
600014a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
600014ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014b0:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014b4:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014b8:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014bc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014c0:	ee15 3a90 	vmov	r3, s11
600014c4:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014c8:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014cc:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014d0:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014d2:	ea01 4105 	and.w	r1, r1, r5, lsl #16
600014d6:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014de:	430b      	orrs	r3, r1
600014e0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014e4:	ee17 3a90 	vmov	r3, s15
600014e8:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
600014ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
600014f0:	430b      	orrs	r3, r1
600014f2:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600014f6:	6813      	ldr	r3, [r2, #0]
600014f8:	f043 0302 	orr.w	r3, r3, #2
600014fc:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014fe:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001500:	4b0a      	ldr	r3, [pc, #40]	; (6000152c <tempmon_init+0x114>)
60001502:	2201      	movs	r2, #1
60001504:	601a      	str	r2, [r3, #0]
60001506:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001508:	400d8180 	.word	0x400d8180
6000150c:	401f4400 	.word	0x401f4400
60001510:	200006e0 	.word	0x200006e0
60001514:	200006e4 	.word	0x200006e4
60001518:	200006dc 	.word	0x200006dc
6000151c:	20000c00 	.word	0x20000c00
60001520:	0fff0000 	.word	0x0fff0000
60001524:	e000e440 	.word	0xe000e440
60001528:	00002c79 	.word	0x00002c79
6000152c:	e000e108 	.word	0xe000e108
60001530:	200006d8 	.word	0x200006d8

60001534 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001534:	4b30      	ldr	r3, [pc, #192]	; (600015f8 <usb_init+0xc4>)
60001536:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
6000153a:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000153c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001540:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001544:	f000 f8f0 	bl	60001728 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001548:	492c      	ldr	r1, [pc, #176]	; (600015fc <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000154a:	482d      	ldr	r0, [pc, #180]	; (60001600 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000154c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001550:	4c2c      	ldr	r4, [pc, #176]	; (60001604 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001552:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001556:	4b2c      	ldr	r3, [pc, #176]	; (60001608 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001558:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000155c:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001560:	6822      	ldr	r2, [r4, #0]
60001562:	4013      	ands	r3, r2
60001564:	b91b      	cbnz	r3, 6000156e <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001566:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
6000156a:	079a      	lsls	r2, r3, #30
6000156c:	d01a      	beq.n	600015a4 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000156e:	4b24      	ldr	r3, [pc, #144]	; (60001600 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001570:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001574:	4a23      	ldr	r2, [pc, #140]	; (60001604 <usb_init+0xd0>)
60001576:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001578:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000157a:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
6000157e:	f041 0102 	orr.w	r1, r1, #2
60001582:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001586:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
6000158a:	079b      	lsls	r3, r3, #30
6000158c:	d4fb      	bmi.n	60001586 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000158e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001592:	491e      	ldr	r1, [pc, #120]	; (6000160c <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001594:	4b1b      	ldr	r3, [pc, #108]	; (60001604 <usb_init+0xd0>)
60001596:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000159a:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000159c:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000159e:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600015a0:	f000 f8ba 	bl	60001718 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015a4:	4d1a      	ldr	r5, [pc, #104]	; (60001610 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600015a6:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600015a8:	4b16      	ldr	r3, [pc, #88]	; (60001604 <usb_init+0xd0>)
600015aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015ae:	4c14      	ldr	r4, [pc, #80]	; (60001600 <usb_init+0xcc>)
600015b0:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600015b2:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015b4:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600015b6:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015b8:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015ba:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015be:	f44f 7220 	mov.w	r2, #640	; 0x280
600015c2:	f000 f8b9 	bl	60001738 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600015c6:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
600015ca:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600015ce:	f240 1343 	movw	r3, #323	; 0x143
600015d2:	4a10      	ldr	r2, [pc, #64]	; (60001614 <usb_init+0xe0>)
600015d4:	4910      	ldr	r1, [pc, #64]	; (60001618 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600015d6:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
600015d8:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600015da:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
600015de:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600015e2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600015e6:	4a0d      	ldr	r2, [pc, #52]	; (6000161c <usb_init+0xe8>)
600015e8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600015ec:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600015ee:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600015f0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
600015f4:	bd70      	pop	{r4, r5, r6, pc}
600015f6:	bf00      	nop
600015f8:	400d8000 	.word	0x400d8000
600015fc:	400fc000 	.word	0x400fc000
60001600:	402e0000 	.word	0x402e0000
60001604:	400d9000 	.word	0x400d9000
60001608:	001e1c00 	.word	0x001e1c00
6000160c:	e000e28c 	.word	0xe000e28c
60001610:	20002000 	.word	0x20002000
60001614:	20000c00 	.word	0x20000c00
60001618:	00002dd5 	.word	0x00002dd5
6000161c:	e000e10c 	.word	0xe000e10c

60001620 <usb_string_product_name_default>:
60001620:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
60001630:	00610069 0000006c                       i.a.l...

60001638 <usb_string_manufacturer_name_default>:
60001638:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001648:	00690075 006f006e                       u.i.n.o.

60001650 <string0>:
60001650:	04090304                                ....

60001654 <usb_config_descriptor_12>:
60001654:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001664:	24050001 05011000 01010124 06022404     ...$....$....$..
60001674:	00062405 82050701 10001003 00010409     .$..............
60001684:	00000a02 03050700 00004002 02840507     .........@......
60001694:	00000040                                @...

60001698 <usb_config_descriptor_480>:
60001698:	00430209 c0000102 00040932 02020100     ..C.....2.......
600016a8:	24050001 05011000 01010124 06022404     ...$....$....$..
600016b8:	00062405 82050701 10001003 00010409     .$..............
600016c8:	00000a02 03050700 00020002 02840507     ................
600016d8:	00000200                                ....

600016dc <qualifier_descriptor>:
600016dc:	0200060a 40000002 ffff0001              .......@....

600016e8 <_init>:
600016e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600016ea:	bf00      	nop
600016ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
600016ee:	bc08      	pop	{r3}
600016f0:	469e      	mov	lr, r3
600016f2:	4770      	bx	lr
600016f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

600016f8 <__set_arm_clock_veneer>:
600016f8:	f85f f000 	ldr.w	pc, [pc]	; 600016fc <__set_arm_clock_veneer+0x4>
600016fc:	00002759 	.word	0x00002759

60001700 <__startup_early_hook_veneer>:
60001700:	f85f f000 	ldr.w	pc, [pc]	; 60001704 <__startup_early_hook_veneer+0x4>
60001704:	00002be5 	.word	0x00002be5

60001708 <__pwm_init_veneer>:
60001708:	f85f f000 	ldr.w	pc, [pc]	; 6000170c <__pwm_init_veneer+0x4>
6000170c:	000042c5 	.word	0x000042c5

60001710 <__startup_late_hook_veneer>:
60001710:	f85f f000 	ldr.w	pc, [pc]	; 60001714 <__startup_late_hook_veneer+0x4>
60001714:	00002be9 	.word	0x00002be9

60001718 <__delay_veneer>:
60001718:	f85f f000 	ldr.w	pc, [pc]	; 6000171c <__delay_veneer+0x4>
6000171c:	00002a1d 	.word	0x00002a1d

60001720 <____libc_init_array_veneer>:
60001720:	f85f f000 	ldr.w	pc, [pc]	; 60001724 <____libc_init_array_veneer+0x4>
60001724:	000045a5 	.word	0x000045a5

60001728 <__usb_init_serialnumber_veneer>:
60001728:	f85f f000 	ldr.w	pc, [pc]	; 6000172c <__usb_init_serialnumber_veneer+0x4>
6000172c:	000035b9 	.word	0x000035b9

60001730 <__main_veneer>:
60001730:	f85f f000 	ldr.w	pc, [pc]	; 60001734 <__main_veneer+0x4>
60001734:	00003f39 	.word	0x00003f39

60001738 <__memset_veneer>:
60001738:	f85f f000 	ldr.w	pc, [pc]	; 6000173c <__memset_veneer+0x4>
6000173c:	000045f5 	.word	0x000045f5

60001740 <__init_array_start>:
60001740:	00000045 	.word	0x00000045
60001744:	00002289 	.word	0x00002289
60001748:	00002441 	.word	0x00002441

6000174c <__init_array_end>:
6000174c:	ffffffff 	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	4c05b510 	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	7823      	ldrb	r3, [r4, #0]
      26:	b933      	cbnz	r3, 36 <_teensy_model_identifier+0x12>
	}
	__enable_irq();
      28:	b1134b04 	.word	0xb1134b04
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	.short	0x2301
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	7023      	strb	r3, [r4, #0]
      36:	bd10      	pop	{r4, pc}
      38:	0430      	lsls	r0, r6, #16
      3a:	2000      	.short	0x2000
      3c:	0000      	movs	r0, r0
      3e:	0000      	movs	r0, r0
}
      40:	000046a4 	.word	0x000046a4

00000044 <frame_dummy>:
      44:	4b08      	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	b510      	.short	0xb510
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af 8000 	nop.w
      52:	4808      	ldr	r0, [pc, #32]	; (74 <frame_dummy+0x30>)
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	cbnz	r3, 5a <frame_dummy+0x16>
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	2b00      	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	d0fb      	.short	0xd0fb
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      mode |= ADC_CFG_AVGS(1);
      64:	4718      	bx	r3
      mode1 |= ADC_CFG_AVGS(1);
      66:	bf00      	.short	0xbf00
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	.short	0x0000
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	0434      	lsls	r4, r6, #16
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2000      	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	46a4      	mov	ip, r4
  ADC2_CFG = mode1;
      72:	0000      	movs	r0, r0
  
  if(num >= 4){
      74:	20000430 	.word	0x20000430
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      78:	0000      	movs	r0, r0
	...

0000007c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
      7c:	47706940 	.word	0x47706940

00000080 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
      80:	2000      	movs	r0, #0
      82:	4770      	.short	0x4770

00000084 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
      84:	6842      	ldr	r2, [r0, #4]
      86:	68c1      	.short	0x68c1
      88:	6813      	ldr	r3, [r2, #0]
      8a:	430b      	.short	0x430b
      8c:	6013      	str	r3, [r2, #0]
      8e:	4770      	.short	0x4770

00000090 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
      90:	6842      	ldr	r2, [r0, #4]
      92:	68c1      	ldr	r1, [r0, #12]
      94:	ea236813 	.word	0xea236813
      98:	0301      	lsls	r1, r0, #12
      9a:	6013      	.short	0x6013
      9c:	4770      	bx	lr

void CFastLED::countFPS(int nFrames) {
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      9e:	bf00      	.short	0xbf00

000000a0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
      a0:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _BIT, uint32_t _MASK, typename _GPIO_DR, typename _GPIO_DR_SET, typename _GPIO_DR_CLEAR, typename _GPIO_DR_TOGGLE> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
      a2:	2101      	.short	0x2101
      a4:	4604      	mov	r4, r0
      a6:	200e      	.short	0x200e
      a8:	f002 fd50 	bl	2b4c <pinMode>
      ac:	2007      	movs	r0, #7
      ae:	2101      	.short	0x2101
      b0:	f002 fd4c 	bl	2b4c <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
      b4:	b15869a0 	.word	0xb15869a0
      b8:	6803      	ldr	r3, [r0, #0]
      ba:	4a07      	.short	0x4a07
      bc:	685b      	ldr	r3, [r3, #4]
      be:	4293      	.short	0x4293
      c0:	d107      	bne.n	d2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::init()+0x32>
      c2:	6842      	.short	0x6842
      c4:	68c1      	ldr	r1, [r0, #12]
      c6:	6813      	ldr	r3, [r2, #0]
      c8:	0301ea23 	.word	0x0301ea23
      cc:	6013      	str	r3, [r2, #0]
      ce:	bd10      	.short	0xbd10
      d0:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
      d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      d6:	4718      	.short	0x4718
      d8:	0091      	lsls	r1, r2, #2
	...

000000dc <CLEDController::clearLeds(int)>:
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
      dc:	2300b5f0 	.word	0x2300b5f0
      e0:	b08b      	sub	sp, #44	; 0x2c
      e2:	6805      	ldr	r5, [r0, #0]
      e4:	f88d4a3b 	.word	0xf88d4a3b
      e8:	3004      	adds	r0, #4
      ea:	f88d      	.short	0xf88d
      ec:	3005      	adds	r0, #5
      ee:	f88d      	.short	0xf88d
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
      f0:	3006      	adds	r0, #6
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
      f2:	682e      	ldr	r6, [r5, #0]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
      f4:	3008f88d 	.word	0x3008f88d
      f8:	4296      	cmp	r6, r2
      fa:	f88d      	.short	0xf88d
      fc:	3009      	adds	r0, #9
      fe:	f88d      	.short	0xf88d
     100:	300a      	adds	r0, #10
     102:	d160      	bne.n	1c6 <CLEDController::clearLeds(int)+0xea>
     104:	4604      	mov	r4, r0
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     106:	a801      	add	r0, sp, #4
     108:	7ca29104 	.word	0x7ca29104
     10c:	9105      	str	r1, [sp, #20]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     10e:	2a01      	.short	0x2a01
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     110:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     114:	301ff88d 	.word	0x301ff88d
        b = rhs.b;
     118:	f88d 3020 	strb.w	r3, [sp, #32]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     11c:	d0159003 	.word	0xd0159003

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     120:	f88d 301d 	strb.w	r3, [sp, #29]
     124:	301cf88d 	.word	0x301cf88d
     128:	f88d 301b 	strb.w	r3, [sp, #27]
     12c:	f88d 301a 	strb.w	r3, [sp, #26]
     130:	3019f88d 	.word	0x3019f88d
     134:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     138:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     13a:	69aa      	ldr	r2, [r5, #24]
     13c:	a9034620 	.word	0xa9034620
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     140:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     144:	47909309 	.word	0x47909309

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     148:	b00b      	add	sp, #44	; 0x2c
     14a:	bdf0      	.short	0xbdf0
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     14c:	4a22      	ldr	r2, [pc, #136]	; (1d8 <CLEDController::clearLeds(int)+0xfc>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     14e:	7813      	ldrb	r3, [r2, #0]
     150:	3301      	adds	r3, #1
     152:	f003      	.short	0xf003
     154:	0307      	lsls	r7, r0, #12

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     156:	f013      	.short	0xf013
     158:	0f01      	lsrs	r1, r0, #28
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     15a:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     15c:	2180bf14 	.word	0x2180bf14
     160:	2100      	moveq	r1, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     162:	079a      	.short	0x079a
     164:	d502      	bpl.n	16c <CLEDController::clearLeds(int)+0x90>
     166:	f041      	.short	0xf041
     168:	0140      	lsls	r0, r0, #5
     16a:	b2c9      	uxtb	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     16c:	075b      	lsls	r3, r3, #29
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     16e:	f04f      	.short	0xf04f
     170:	0200      	lsls	r0, r0, #8
     172:	f10d      	.short	0xf10d
     174:	031b      	lsls	r3, r3, #12
     176:	f10d      	.short	0xf10d
     178:	071e      	lsls	r6, r3, #28

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     17a:	bf48      	.short	0xbf48
     17c:	f041 0120 	orrmi.w	r1, r1, #32
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     180:	7e80f44f 	.word	0x7e80f44f
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     184:	3110      	adds	r1, #16
     186:	b2c9      	.short	0xb2c9
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     188:	b1aa      	cbz	r2, 1b6 <CLEDController::clearLeds(int)+0xda>
     18a:	fb9e      	.short	0xfb9e
     18c:	f2f2 b2d2 	b.w	6f2734 <_flashimagelen+0x6ec514>
     190:	b2c01c50 	.word	0xb2c01c50
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     194:	fb00 1501 	mla	r5, r0, r1, r1
     198:	122d7018 	.word	0x122d7018
     19c:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     19e:	b105      	.short	0xb105
     1a0:	3e01      	subs	r6, #1
     1a2:	f803      	.short	0xf803
     1a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
#endif
                    if(e[i]) e[i]--;
     1a6:	b100      	.short	0xb100
     1a8:	701a      	strb	r2, [r3, #0]
     1aa:	3301      	.short	0x3301
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     1ac:	429f      	cmp	r7, r3
     1ae:	d008      	.short	0xd008
     1b0:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     1b2:	2a00      	.short	0x2a00
     1b4:	d1e9      	bne.n	18a <CLEDController::clearLeds(int)+0xae>
     1b6:	701a      	strb	r2, [r3, #0]
     1b8:	3301      	adds	r3, #1
                    d[i] = scale8(Q, e[i]);
     1ba:	f803 2c04 	strb.w	r2, [r3, #-4]
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     1be:	429f      	cmp	r7, r3
     1c0:	d1f6      	bne.n	1b0 <CLEDController::clearLeds(int)+0xd4>
     1c2:	6825      	ldr	r5, [r4, #0]
     1c4:	e7b8      	b.n	138 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     1c6:	460a      	mov	r2, r1
     1c8:	ab02      	add	r3, sp, #8
     1ca:	a901      	add	r1, sp, #4
     1cc:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     1ce:	b00b      	add	sp, #44	; 0x2c
     1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1d2:	bf00      	nop
     1d4:	000002a1 	.word	0x000002a1
     1d8:	2000044c 	.word	0x2000044c

000001dc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     1de:	b089      	sub	sp, #36	; 0x24

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     1e0:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
     1e2:	789c      	ldrb	r4, [r3, #2]
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     1e4:	9101      	str	r1, [sp, #4]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     1e6:	7819      	ldrb	r1, [r3, #0]
     1e8:	7c83      	ldrb	r3, [r0, #18]
     1ea:	9202      	str	r2, [sp, #8]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     1ec:	2b01      	cmp	r3, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     1ee:	9203      	str	r2, [sp, #12]
     1f0:	f88d 1016 	strb.w	r1, [sp, #22]
        g = rhs.g;
     1f4:	f88d 5017 	strb.w	r5, [sp, #23]
        b = rhs.b;
     1f8:	f88d 4018 	strb.w	r4, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     1fc:	d017      	beq.n	22e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     1fe:	2300      	movs	r3, #0
     200:	f88d 3015 	strb.w	r3, [sp, #21]
     204:	f88d 3014 	strb.w	r3, [sp, #20]
     208:	f88d 3013 	strb.w	r3, [sp, #19]
     20c:	f88d 3012 	strb.w	r3, [sp, #18]
     210:	f88d 3011 	strb.w	r3, [sp, #17]
     214:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     218:	6803      	ldr	r3, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     21a:	2103      	movs	r1, #3
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     21c:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     21e:	f88d 1019 	strb.w	r1, [sp, #25]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     222:	a901      	add	r1, sp, #4
     224:	699b      	ldr	r3, [r3, #24]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     226:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     228:	4798      	blx	r3
  }
     22a:	b009      	add	sp, #36	; 0x24
     22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     22e:	4a1b      	ldr	r2, [pc, #108]	; (29c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     230:	7813      	ldrb	r3, [r2, #0]
     232:	3301      	adds	r3, #1
     234:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     238:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     23c:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     23e:	bf14      	ite	ne
     240:	2280      	movne	r2, #128	; 0x80
     242:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     244:	079c      	lsls	r4, r3, #30
     246:	d502      	bpl.n	24e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x72>
     248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     24c:	b2d2      	uxtb	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     24e:	075b      	lsls	r3, r3, #29
     250:	f10d 0716 	add.w	r7, sp, #22
     254:	f10d 0313 	add.w	r3, sp, #19
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     258:	f44f 7e80 	mov.w	lr, #256	; 0x100

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     25c:	bf48      	it	mi
     25e:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     262:	3210      	adds	r2, #16
     264:	b2d2      	uxtb	r2, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     266:	b1a9      	cbz	r1, 294 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     268:	fb9e f1f1 	sdiv	r1, lr, r1
     26c:	b2c9      	uxtb	r1, r1
     26e:	1c4c      	adds	r4, r1, #1
     270:	b2e4      	uxtb	r4, r4
     272:	fb04 2502 	mla	r5, r4, r2, r2
     276:	701c      	strb	r4, [r3, #0]
     278:	122d      	asrs	r5, r5, #8
     27a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     27c:	b105      	cbz	r5, 280 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     27e:	3e01      	subs	r6, #1
     280:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     284:	b104      	cbz	r4, 288 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     286:	7019      	strb	r1, [r3, #0]
     288:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     28a:	42bb      	cmp	r3, r7
     28c:	d0c4      	beq.n	218 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     28e:	78d9      	ldrb	r1, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     290:	2900      	cmp	r1, #0
     292:	d1e9      	bne.n	268 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     294:	7019      	strb	r1, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     296:	f803 1c03 	strb.w	r1, [r3, #-3]
     29a:	e7f5      	b.n	288 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     29c:	2000044c 	.word	0x2000044c

000002a0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     2a2:	b089      	sub	sp, #36	; 0x24

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     2a4:	785d      	ldrb	r5, [r3, #1]
        b = rhs.b;
     2a6:	789c      	ldrb	r4, [r3, #2]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     2a8:	9101      	str	r1, [sp, #4]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     2aa:	7819      	ldrb	r1, [r3, #0]
     2ac:	7c83      	ldrb	r3, [r0, #18]
     2ae:	9202      	str	r2, [sp, #8]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     2b0:	2b01      	cmp	r3, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     2b2:	9203      	str	r2, [sp, #12]
     2b4:	f88d 1016 	strb.w	r1, [sp, #22]
        g = rhs.g;
     2b8:	f88d 5017 	strb.w	r5, [sp, #23]
        b = rhs.b;
     2bc:	f88d 4018 	strb.w	r4, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     2c0:	d016      	beq.n	2f0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     2c2:	2300      	movs	r3, #0
     2c4:	f88d 3015 	strb.w	r3, [sp, #21]
     2c8:	f88d 3014 	strb.w	r3, [sp, #20]
     2cc:	f88d 3013 	strb.w	r3, [sp, #19]
     2d0:	f88d 3012 	strb.w	r3, [sp, #18]
     2d4:	f88d 3011 	strb.w	r3, [sp, #17]
     2d8:	f88d 3010 	strb.w	r3, [sp, #16]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     2dc:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     2de:	6802      	ldr	r2, [r0, #0]
     2e0:	a901      	add	r1, sp, #4
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     2e2:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     2e6:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     2e8:	6993      	ldr	r3, [r2, #24]
     2ea:	4798      	blx	r3
  }
     2ec:	b009      	add	sp, #36	; 0x24
     2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     2f0:	4a1b      	ldr	r2, [pc, #108]	; (360 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     2f2:	7813      	ldrb	r3, [r2, #0]
     2f4:	3301      	adds	r3, #1
     2f6:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     2fa:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     2fe:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     300:	bf14      	ite	ne
     302:	2280      	movne	r2, #128	; 0x80
     304:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     306:	079c      	lsls	r4, r3, #30
     308:	d502      	bpl.n	310 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x70>
     30a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     30e:	b2d2      	uxtb	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     310:	075b      	lsls	r3, r3, #29
     312:	f10d 0716 	add.w	r7, sp, #22
     316:	f10d 0313 	add.w	r3, sp, #19
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     31a:	f44f 7e80 	mov.w	lr, #256	; 0x100

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
                if(R & 0x04) { Q |= 0x20; }
     31e:	bf48      	it	mi
     320:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     324:	3210      	adds	r2, #16
     326:	b2d2      	uxtb	r2, r2
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     328:	b1a9      	cbz	r1, 356 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     32a:	fb9e f1f1 	sdiv	r1, lr, r1
     32e:	b2c9      	uxtb	r1, r1
     330:	1c4c      	adds	r4, r1, #1
     332:	b2e4      	uxtb	r4, r4
     334:	fb04 2502 	mla	r5, r4, r2, r2
     338:	701c      	strb	r4, [r3, #0]
     33a:	122d      	asrs	r5, r5, #8
     33c:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     33e:	b105      	cbz	r5, 342 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     340:	3e01      	subs	r6, #1
     342:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     346:	b104      	cbz	r4, 34a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     348:	7019      	strb	r1, [r3, #0]
     34a:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     34c:	42bb      	cmp	r3, r7
     34e:	d0c5      	beq.n	2dc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     350:	78d9      	ldrb	r1, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     352:	2900      	cmp	r1, #0
     354:	d1e9      	bne.n	32a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     356:	7019      	strb	r1, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     358:	f803 1c03 	strb.w	r1, [r3, #-3]
     35c:	e7f5      	b.n	34a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     35e:	bf00      	nop
     360:	2000044c 	.word	0x2000044c

00000364 <setup>:
int step = -1;                                                // -1 is the initializing step.
uint8_t myfade = 255;                                         // Starting brightness.
#define maxsteps 16                                           // Case statement wouldn't allow a variable.



     364:	b570      	push	{r4, r5, r6, lr}
     366:	f640 31b8 	movw	r1, #3000	; 0xbb8
     36a:	4827      	ldr	r0, [pc, #156]	; (408 <setup+0xa4>)
     36c:	f001 fed0 	bl	2110 <VisualMicroDebug::init(unsigned long)>
     370:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     374:	4824      	ldr	r0, [pc, #144]	; (408 <setup+0xa4>)
     376:	f001 fec7 	bl	2108 <VisualMicroDebug::begin(unsigned long)>
     37a:	2101      	movs	r1, #1
     37c:	4822      	ldr	r0, [pc, #136]	; (408 <setup+0xa4>)
     37e:	f001 fea5 	bl	20cc <VisualMicroDebug::outPacketStart(bool)>
     382:	b150      	cbz	r0, 39a <setup+0x36>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     384:	2110      	movs	r1, #16
     386:	4821      	ldr	r0, [pc, #132]	; (40c <setup+0xa8>)
     388:	f003 fc60 	bl	3c4c <usb_serial_write>
     38c:	481e      	ldr	r0, [pc, #120]	; (408 <setup+0xa4>)
     38e:	210a      	movs	r1, #10
     390:	f001 fe90 	bl	20b4 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
     394:	481c      	ldr	r0, [pc, #112]	; (408 <setup+0xa4>)
     396:	f001 feb5 	bl	2104 <VisualMicroDebug::outPacketEnd()>
     39a:	2201      	movs	r2, #1
     39c:	481a      	ldr	r0, [pc, #104]	; (408 <setup+0xa4>)
     39e:	2100      	movs	r1, #0
     3a0:	f001 ff54 	bl	224c <VisualMicroDebug::start(bool, bool)>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
     3a4:	481a      	ldr	r0, [pc, #104]	; (410 <setup+0xac>)
     3a6:	6803      	ldr	r3, [r0, #0]
     3a8:	f013 0201 	ands.w	r2, r3, #1
     3ac:	d11a      	bne.n	3e4 <setup+0x80>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     3ae:	4c19      	ldr	r4, [pc, #100]	; (414 <setup+0xb0>)
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     3b0:	21ff      	movs	r1, #255	; 0xff
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     3b2:	4b19      	ldr	r3, [pc, #100]	; (418 <setup+0xb4>)
     3b4:	2601      	movs	r6, #1
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     3b6:	6825      	ldr	r5, [r4, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     3b8:	605a      	str	r2, [r3, #4]
     3ba:	615a      	str	r2, [r3, #20]
        m_pNext = NULL;
     3bc:	609a      	str	r2, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
     3be:	749e      	strb	r6, [r3, #18]
     3c0:	7319      	strb	r1, [r3, #12]
     3c2:	7359      	strb	r1, [r3, #13]
     3c4:	7399      	strb	r1, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     3c6:	73d9      	strb	r1, [r3, #15]
     3c8:	7419      	strb	r1, [r3, #16]
     3ca:	7459      	strb	r1, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     3cc:	b1d5      	cbz	r5, 404 <setup+0xa0>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
     3ce:	4a13      	ldr	r2, [pc, #76]	; (41c <setup+0xb8>)
     3d0:	6811      	ldr	r1, [r2, #0]
     3d2:	b101      	cbz	r1, 3d6 <setup+0x72>
     3d4:	608b      	str	r3, [r1, #8]
		mSPI.writeWord(w);
#endif
	}

public:
	APA102Controller() {}
     3d6:	4d12      	ldr	r5, [pc, #72]	; (420 <setup+0xbc>)
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
     3d8:	2400      	movs	r4, #0
     3da:	2101      	movs	r1, #1
        m_pTail = this;
     3dc:	6013      	str	r3, [r2, #0]
     3de:	601d      	str	r5, [r3, #0]
     3e0:	619c      	str	r4, [r3, #24]
     3e2:	6001      	str	r1, [r0, #0]
     3e4:	2300      	movs	r3, #0
     3e6:	2296      	movs	r2, #150	; 0x96
     3e8:	490e      	ldr	r1, [pc, #56]	; (424 <setup+0xc0>)
     3ea:	480b      	ldr	r0, [pc, #44]	; (418 <setup+0xb4>)
     3ec:	f001 ff80 	bl	22f0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
 
  Serial.begin(115200);

  //LEDS.addLeds<LED_TYPE, LED_DT, COLOR_ORDER>(leds, NUM_LEDS);  // Use this for WS2812B
  LEDS.addLeds<LED_TYPE, LED_DT, LED_CK, COLOR_ORDER>(leds, NUM_LEDS);  // Use this for WS2801 or APA102

     3f0:	490d      	ldr	r1, [pc, #52]	; (428 <setup+0xc4>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     3f2:	4b0e      	ldr	r3, [pc, #56]	; (42c <setup+0xc8>)
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
     3f4:	f640 12c4 	movw	r2, #2500	; 0x9c4
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     3f8:	6808      	ldr	r0, [r1, #0]
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
     3fa:	490d      	ldr	r1, [pc, #52]	; (430 <setup+0xcc>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
     3fc:	7018      	strb	r0, [r3, #0]
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
     3fe:	60d9      	str	r1, [r3, #12]
     400:	609a      	str	r2, [r3, #8]
     402:	bd70      	pop	{r4, r5, r6, pc}

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
     404:	6023      	str	r3, [r4, #0]
     406:	e7e2      	b.n	3ce <setup+0x6a>
     408:	2000065c 	.word	0x2000065c
     40c:	20000024 	.word	0x20000024
     410:	20000450 	.word	0x20000450
     414:	200006b4 	.word	0x200006b4
     418:	20000454 	.word	0x20000454
     41c:	200006c4 	.word	0x200006c4
     420:	20000008 	.word	0x20000008
     424:	20000474 	.word	0x20000474
     428:	200003e0 	.word	0x200003e0
     42c:	200006a4 	.word	0x200006a4
     430:	00002625 	.word	0x00002625

00000434 <getSample()>:
   FastLED.show();

} // loop()



     434:	b500      	push	{lr}
void getSample() {
  
  int16_t micIn;                                              // Current sample starts with negative values and large values, which is why it's 16 bit signed.
  static long peakTime;
  
     436:	2005      	movs	r0, #5
   FastLED.show();

} // loop()



     438:	b083      	sub	sp, #12
void getSample() {
  
  int16_t micIn;                                              // Current sample starts with negative values and large values, which is why it's 16 bit signed.
  static long peakTime;
  
     43a:	f002 f959 	bl	26f0 <analogRead>
  micIn = analogRead(MIC_PIN);                                // Poor man's analog Read.
     43e:	4b2f      	ldr	r3, [pc, #188]	; (4fc <getSample()+0xc8>)
     440:	b200      	sxth	r0, r0
     442:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
     446:	ed93 6a00 	vldr	s12, [r3]
     44a:	ee07 0a90 	vmov	s15, r0
     44e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 500 <getSample()+0xcc>
  micLev = ((micLev * 31) + micIn) / 32;                      // Smooth it out over the last 32 samples for automatic centering.
  micIn -= micLev;                                            // Let's center it to 0 now.
  micIn = abs(micIn);                                         // And get the absolute value of each sample.
     452:	4a2c      	ldr	r2, [pc, #176]	; (504 <getSample()+0xd0>)
void getSample() {
  
  int16_t micIn;                                              // Current sample starts with negative values and large values, which is why it's 16 bit signed.
  static long peakTime;
  
  micIn = analogRead(MIC_PIN);                                // Poor man's analog Read.
     454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  micLev = ((micLev * 31) + micIn) / 32;                      // Smooth it out over the last 32 samples for automatic centering.
  micIn -= micLev;                                            // Let's center it to 0 now.
  micIn = abs(micIn);                                         // And get the absolute value of each sample.
     458:	7812      	ldrb	r2, [r2, #0]
void getSample() {
  
  int16_t micIn;                                              // Current sample starts with negative values and large values, which is why it's 16 bit signed.
  static long peakTime;
  
  micIn = analogRead(MIC_PIN);                                // Poor man's analog Read.
     45a:	eef0 5a67 	vmov.f32	s11, s15
     45e:	eee6 5a07 	vfma.f32	s11, s12, s14
     462:	ee25 7aa6 	vmul.f32	s14, s11, s13
  micLev = ((micLev * 31) + micIn) / 32;                      // Smooth it out over the last 32 samples for automatic centering.
  micIn -= micLev;                                            // Let's center it to 0 now.
     466:	ee77 7ac7 	vsub.f32	s15, s15, s14
void getSample() {
  
  int16_t micIn;                                              // Current sample starts with negative values and large values, which is why it's 16 bit signed.
  static long peakTime;
  
  micIn = analogRead(MIC_PIN);                                // Poor man's analog Read.
     46a:	ed83 7a00 	vstr	s14, [r3]
  micLev = ((micLev * 31) + micIn) / 32;                      // Smooth it out over the last 32 samples for automatic centering.
  micIn -= micLev;                                            // Let's center it to 0 now.
     46e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
     472:	edcd 7a01 	vstr	s15, [sp, #4]
     476:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
     47a:	2b00      	cmp	r3, #0
     47c:	bfb8      	it	lt
     47e:	425b      	neglt	r3, r3
  micIn = abs(micIn);                                         // And get the absolute value of each sample.
     480:	b21b      	sxth	r3, r3
     482:	4293      	cmp	r3, r2
     484:	dd35      	ble.n	4f2 <getSample()+0xbe>
     486:	4920      	ldr	r1, [pc, #128]	; (508 <getSample()+0xd4>)
     488:	680a      	ldr	r2, [r1, #0]
     48a:	189b      	adds	r3, r3, r2
     48c:	bf48      	it	mi
     48e:	3301      	addmi	r3, #1
     490:	105b      	asrs	r3, r3, #1
     492:	ee07 3a90 	vmov	s15, r3
     496:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  sample = (micIn <= squelch) ? 0 : (sample + micIn) / 2;     // Using a ternary operator, the resultant sample is either 0 or it's a bit smoothed out with the last sample.
     49a:	4a1c      	ldr	r2, [pc, #112]	; (50c <getSample()+0xd8>)
     49c:	eef3 7a0f 	vmov.f32	s15, #63	; 0x41f80000  31.0
     4a0:	eef0 5a66 	vmov.f32	s11, s13
  sampleAvg = ((sampleAvg * 31) + sample) / 32;               // Smooth it out over the last 32 samples.

     4a4:	481a      	ldr	r0, [pc, #104]	; (510 <getSample()+0xdc>)
  
  micIn = analogRead(MIC_PIN);                                // Poor man's analog Read.
  micLev = ((micLev * 31) + micIn) / 32;                      // Smooth it out over the last 32 samples for automatic centering.
  micIn -= micLev;                                            // Let's center it to 0 now.
  micIn = abs(micIn);                                         // And get the absolute value of each sample.
  sample = (micIn <= squelch) ? 0 : (sample + micIn) / 2;     // Using a ternary operator, the resultant sample is either 0 or it's a bit smoothed out with the last sample.
     4a6:	ed92 7a00 	vldr	s14, [r2]
  sampleAvg = ((sampleAvg * 31) + sample) / 32;               // Smooth it out over the last 32 samples.

     4aa:	7800      	ldrb	r0, [r0, #0]
  
  micIn = analogRead(MIC_PIN);                                // Poor man's analog Read.
  micLev = ((micLev * 31) + micIn) / 32;                      // Smooth it out over the last 32 samples for automatic centering.
  micIn -= micLev;                                            // Let's center it to 0 now.
  micIn = abs(micIn);                                         // And get the absolute value of each sample.
  sample = (micIn <= squelch) ? 0 : (sample + micIn) / 2;     // Using a ternary operator, the resultant sample is either 0 or it's a bit smoothed out with the last sample.
     4ac:	eee7 5a27 	vfma.f32	s11, s14, s15
     4b0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 500 <getSample()+0xcc>
  sampleAvg = ((sampleAvg * 31) + sample) / 32;               // Smooth it out over the last 32 samples.

     4b4:	ee07 0a90 	vmov	s15, r0
  static long peakTime;
  
  micIn = analogRead(MIC_PIN);                                // Poor man's analog Read.
  micLev = ((micLev * 31) + micIn) / 32;                      // Smooth it out over the last 32 samples for automatic centering.
  micIn -= micLev;                                            // Let's center it to 0 now.
  micIn = abs(micIn);                                         // And get the absolute value of each sample.
     4b8:	600b      	str	r3, [r1, #0]
  sample = (micIn <= squelch) ? 0 : (sample + micIn) / 2;     // Using a ternary operator, the resultant sample is either 0 or it's a bit smoothed out with the last sample.
  sampleAvg = ((sampleAvg * 31) + sample) / 32;               // Smooth it out over the last 32 samples.

     4ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  
  micIn = analogRead(MIC_PIN);                                // Poor man's analog Read.
  micLev = ((micLev * 31) + micIn) / 32;                      // Smooth it out over the last 32 samples for automatic centering.
  micIn -= micLev;                                            // Let's center it to 0 now.
  micIn = abs(micIn);                                         // And get the absolute value of each sample.
  sample = (micIn <= squelch) ? 0 : (sample + micIn) / 2;     // Using a ternary operator, the resultant sample is either 0 or it's a bit smoothed out with the last sample.
     4be:	ee25 7a86 	vmul.f32	s14, s11, s12
  sampleAvg = ((sampleAvg * 31) + sample) / 32;               // Smooth it out over the last 32 samples.

     4c2:	ee77 7a87 	vadd.f32	s15, s15, s14
  
  micIn = analogRead(MIC_PIN);                                // Poor man's analog Read.
  micLev = ((micLev * 31) + micIn) / 32;                      // Smooth it out over the last 32 samples for automatic centering.
  micIn -= micLev;                                            // Let's center it to 0 now.
  micIn = abs(micIn);                                         // And get the absolute value of each sample.
  sample = (micIn <= squelch) ? 0 : (sample + micIn) / 2;     // Using a ternary operator, the resultant sample is either 0 or it's a bit smoothed out with the last sample.
     4c6:	ed82 7a00 	vstr	s14, [r2]
  sampleAvg = ((sampleAvg * 31) + sample) / 32;               // Smooth it out over the last 32 samples.

     4ca:	eef4 7ae6 	vcmpe.f32	s15, s13
     4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     4d2:	d50b      	bpl.n	4ec <getSample()+0xb8>
     4d4:	4a0f      	ldr	r2, [pc, #60]	; (514 <getSample()+0xe0>)
     4d6:	4910      	ldr	r1, [pc, #64]	; (518 <getSample()+0xe4>)
     4d8:	6813      	ldr	r3, [r2, #0]
     4da:	6808      	ldr	r0, [r1, #0]
     4dc:	3332      	adds	r3, #50	; 0x32
     4de:	4283      	cmp	r3, r0
     4e0:	d204      	bcs.n	4ec <getSample()+0xb8>
     4e2:	6808      	ldr	r0, [r1, #0]
  if (sample > (sampleAvg+maxVol) && millis() > (peakTime + 50)) {    // Poor man's beat detection by seeing if sample > Average + some value.
     4e4:	2101      	movs	r1, #1
     4e6:	4b0d      	ldr	r3, [pc, #52]	; (51c <getSample()+0xe8>)
    samplePeak = 1;                                                   // Then we got a peak, else we don't. Display routines need to reset the samplepeak value in case they miss the trigger.
     4e8:	6010      	str	r0, [r2, #0]
  micIn -= micLev;                                            // Let's center it to 0 now.
  micIn = abs(micIn);                                         // And get the absolute value of each sample.
  sample = (micIn <= squelch) ? 0 : (sample + micIn) / 2;     // Using a ternary operator, the resultant sample is either 0 or it's a bit smoothed out with the last sample.
  sampleAvg = ((sampleAvg * 31) + sample) / 32;               // Smooth it out over the last 32 samples.

  if (sample > (sampleAvg+maxVol) && millis() > (peakTime + 50)) {    // Poor man's beat detection by seeing if sample > Average + some value.
     4ea:	7019      	strb	r1, [r3, #0]
    samplePeak = 1;                                                   // Then we got a peak, else we don't. Display routines need to reset the samplepeak value in case they miss the trigger.
    peakTime=millis();                
  }                                                           

     4ec:	b003      	add	sp, #12
     4ee:	f85d fb04 	ldr.w	pc, [sp], #4
     4f2:	eddf 6a0b 	vldr	s13, [pc, #44]	; 520 <getSample()+0xec>
  static long peakTime;
  
  micIn = analogRead(MIC_PIN);                                // Poor man's analog Read.
  micLev = ((micLev * 31) + micIn) / 32;                      // Smooth it out over the last 32 samples for automatic centering.
  micIn -= micLev;                                            // Let's center it to 0 now.
  micIn = abs(micIn);                                         // And get the absolute value of each sample.
     4f6:	2300      	movs	r3, #0
     4f8:	4903      	ldr	r1, [pc, #12]	; (508 <getSample()+0xd4>)
     4fa:	e7ce      	b.n	49a <getSample()+0x66>
     4fc:	20000658 	.word	0x20000658
     500:	3d000000 	.word	0x3d000000
     504:	200003e8 	.word	0x200003e8
     508:	20000638 	.word	0x20000638
     50c:	20000644 	.word	0x20000644
     510:	200003dd 	.word	0x200003dd
     514:	20000650 	.word	0x20000650
     518:	200006d4 	.word	0x200006d4
     51c:	20000654 	.word	0x20000654
     520:	00000000 	.word	0x00000000

00000524 <ripple()>:
}  // getSample()



void ripple() {

     524:	4b75      	ldr	r3, [pc, #468]	; (6fc <ripple()+0x1d8>)
     526:	781a      	ldrb	r2, [r3, #0]
  }                                                           

}  // getSample()



     528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
void ripple() {

     52c:	4e74      	ldr	r6, [pc, #464]	; (700 <ripple()+0x1dc>)
  }                                                           

}  // getSample()



     52e:	b082      	sub	sp, #8
void ripple() {

     530:	b122      	cbz	r2, 53c <ripple()+0x18>
     532:	f04f 31ff 	mov.w	r1, #4294967295
     536:	2200      	movs	r2, #0
     538:	6031      	str	r1, [r6, #0]
     53a:	701a      	strb	r2, [r3, #0]
  if (samplePeak == 1) {step = -1; samplePeak = 0; }          // If we have a peak, let's reset our ripple.

     53c:	4c71      	ldr	r4, [pc, #452]	; (704 <ripple()+0x1e0>)
     53e:	2240      	movs	r2, #64	; 0x40
     540:	2196      	movs	r1, #150	; 0x96
  fadeToBlackBy(leds, NUM_LEDS, 64);                          // 8 bit, 1 = slow, 255 = fast
  
     542:	4d6f      	ldr	r5, [pc, #444]	; (700 <ripple()+0x1dc>)


void ripple() {

  if (samplePeak == 1) {step = -1; samplePeak = 0; }          // If we have a peak, let's reset our ripple.

     544:	4620      	mov	r0, r4
     546:	f001 fed1 	bl	22ec <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
  fadeToBlackBy(leds, NUM_LEDS, 64);                          // 8 bit, 1 = slow, 255 = fast
  
     54a:	6833      	ldr	r3, [r6, #0]
     54c:	2b00      	cmp	r3, #0
     54e:	f000 80bd 	beq.w	6cc <ripple()+0x1a8>
     552:	2b10      	cmp	r3, #16
     554:	f000 809c 	beq.w	690 <ripple()+0x16c>
     558:	1c5a      	adds	r2, r3, #1
     55a:	f000 809c 	beq.w	696 <ripple()+0x172>

    case maxsteps:                                            // At the end of the ripples.
      // step = -1;
      break;

    default:                                                  // Middle of the ripples.
     55e:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 714 <ripple()+0x1f0>
     562:	f04f 0e96 	mov.w	lr, #150	; 0x96
     566:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 718 <ripple()+0x1f4>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     56a:	f04f 0aff 	mov.w	sl, #255	; 0xff
     56e:	f8d9 2000 	ldr.w	r2, [r9]
     572:	f898 1000 	ldrb.w	r1, [r8]
     576:	441a      	add	r2, r3
     578:	4d63      	ldr	r5, [pc, #396]	; (708 <ripple()+0x1e4>)
     57a:	4f64      	ldr	r7, [pc, #400]	; (70c <ripple()+0x1e8>)
     57c:	4472      	add	r2, lr
     57e:	f88d a001 	strb.w	sl, [sp, #1]
     582:	fb91 f3f3 	sdiv	r3, r1, r3
     586:	fb85 0102 	smull	r0, r1, r5, r2
     58a:	17d5      	asrs	r5, r2, #31
     58c:	005b      	lsls	r3, r3, #1
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     58e:	4668      	mov	r0, sp
     590:	ebc5 1521 	rsb	r5, r5, r1, asr #4
     594:	a901      	add	r1, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     596:	f88d 3002 	strb.w	r3, [sp, #2]
     59a:	fb0e 2515 	mls	r5, lr, r5, r2
     59e:	783b      	ldrb	r3, [r7, #0]
     5a0:	f88d 3000 	strb.w	r3, [sp]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     5a4:	f001 ff58 	bl	2458 <hsv2rgb_rainbow(CHSV const&, CRGB&)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     5a8:	006b      	lsls	r3, r5, #1
     5aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
        g = qadd8( g, rhs.g);
        b = qadd8( b, rhs.b);
     5ae:	f89d 0006 	ldrb.w	r0, [sp, #6]


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     5b2:	1959      	adds	r1, r3, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     5b4:	783f      	ldrb	r7, [r7, #0]


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     5b6:	5c61      	ldrb	r1, [r4, r1]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     5b8:	f88d 7000 	strb.w	r7, [sp]
     5bc:	27ff      	movs	r7, #255	; 0xff
/// @returns the sum of i & j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    if( t > 255) t = 255;
     5be:	440a      	add	r2, r1


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     5c0:	1959      	adds	r1, r3, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     5c2:	f88d 7001 	strb.w	r7, [sp, #1]
     5c6:	4552      	cmp	r2, sl
     5c8:	bfd8      	it	le
     5ca:	fa5f fa82 	uxtble.w	sl, r2

    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
        g = qadd8( g, rhs.g);
     5ce:	f89d 2005 	ldrb.w	r2, [sp, #5]


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     5d2:	f804 a001 	strb.w	sl, [r4, r1]
     5d6:	4421      	add	r1, r4
        g = qadd8( g, rhs.g);
     5d8:	7849      	ldrb	r1, [r1, #1]
     5da:	440a      	add	r2, r1
     5dc:	1959      	adds	r1, r3, r5
        b = qadd8( b, rhs.b);
     5de:	441d      	add	r5, r3
     5e0:	2aff      	cmp	r2, #255	; 0xff

    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
        g = qadd8( g, rhs.g);
     5e2:	4421      	add	r1, r4
        b = qadd8( b, rhs.b);
     5e4:	eb04 0305 	add.w	r3, r4, r5
      leds[(center + step + NUM_LEDS) % NUM_LEDS] += CHSV(colour, 255, myfade/step*2);       // Simple wrap.
     5e8:	4d47      	ldr	r5, [pc, #284]	; (708 <ripple()+0x1e4>)
     5ea:	f891 e002 	ldrb.w	lr, [r1, #2]
     5ee:	bfd4      	ite	le
     5f0:	b2d2      	uxtble	r2, r2
     5f2:	22ff      	movgt	r2, #255	; 0xff

    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
        g = qadd8( g, rhs.g);
     5f4:	704a      	strb	r2, [r1, #1]
     5f6:	eb0e 0200 	add.w	r2, lr, r0
     5fa:	f898 e000 	ldrb.w	lr, [r8]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     5fe:	a901      	add	r1, sp, #4
     600:	2aff      	cmp	r2, #255	; 0xff
     602:	4668      	mov	r0, sp
     604:	bfd8      	it	le
     606:	fa5f fc82 	uxtble.w	ip, r2
     60a:	f8d9 2000 	ldr.w	r2, [r9]
     60e:	f8d6 9000 	ldr.w	r9, [r6]
     612:	bfc8      	it	gt
     614:	f04f 0cff 	movgt.w	ip, #255	; 0xff
     618:	ebc9 0202 	rsb	r2, r9, r2
    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
        g = qadd8( g, rhs.g);
        b = qadd8( b, rhs.b);
     61c:	f883 c002 	strb.w	ip, [r3, #2]
     620:	f04f 0c96 	mov.w	ip, #150	; 0x96
     624:	3296      	adds	r2, #150	; 0x96
     626:	fb85 5302 	smull	r5, r3, r5, r2
     62a:	17d5      	asrs	r5, r2, #31
     62c:	ebc5 1523 	rsb	r5, r5, r3, asr #4
     630:	fb9e f3f9 	sdiv	r3, lr, r9
     634:	fb0c 2515 	mls	r5, ip, r5, r2
     638:	005b      	lsls	r3, r3, #1
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     63a:	f88d 3002 	strb.w	r3, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     63e:	f001 ff0b 	bl	2458 <hsv2rgb_rainbow(CHSV const&, CRGB&)>


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     642:	0069      	lsls	r1, r5, #1
     644:	f89d 3004 	ldrb.w	r3, [sp, #4]
     648:	194a      	adds	r2, r1, r5
     64a:	5ca2      	ldrb	r2, [r4, r2]
     64c:	4413      	add	r3, r2
     64e:	194a      	adds	r2, r1, r5
     650:	42bb      	cmp	r3, r7
     652:	eb04 0002 	add.w	r0, r4, r2
     656:	bfd8      	it	le
     658:	b2df      	uxtble	r7, r3
        g = qadd8( g, rhs.g);
     65a:	f89d 3005 	ldrb.w	r3, [sp, #5]


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     65e:	54a7      	strb	r7, [r4, r2]
        g = qadd8( g, rhs.g);
     660:	7842      	ldrb	r2, [r0, #1]
     662:	1948      	adds	r0, r1, r5
        b = qadd8( b, rhs.b);
     664:	440d      	add	r5, r1
     666:	4413      	add	r3, r2

    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
        g = qadd8( g, rhs.g);
     668:	4420      	add	r0, r4
        b = qadd8( b, rhs.b);
     66a:	442c      	add	r4, r5
     66c:	2bff      	cmp	r3, #255	; 0xff
     66e:	7887      	ldrb	r7, [r0, #2]
     670:	bfd8      	it	le
     672:	b2da      	uxtble	r2, r3
     674:	f89d 3006 	ldrb.w	r3, [sp, #6]
     678:	bfc8      	it	gt
     67a:	22ff      	movgt	r2, #255	; 0xff
     67c:	443b      	add	r3, r7

    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
        g = qadd8( g, rhs.g);
     67e:	7042      	strb	r2, [r0, #1]
     680:	2bff      	cmp	r3, #255	; 0xff
      leds[(center - step + NUM_LEDS) % NUM_LEDS] += CHSV(colour, 255, myfade/step*2);
     682:	6832      	ldr	r2, [r6, #0]
     684:	bfd4      	ite	le
     686:	b2db      	uxtble	r3, r3
     688:	23ff      	movgt	r3, #255	; 0xff
     68a:	3201      	adds	r2, #1
        b = qadd8( b, rhs.b);
     68c:	70a3      	strb	r3, [r4, #2]
     68e:	6032      	str	r2, [r6, #0]
      step ++;                                                // Next step.
      break;  
  } // switch step
  
     690:	b002      	add	sp, #8
     692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  fadeToBlackBy(leds, NUM_LEDS, 64);                          // 8 bit, 1 = slow, 255 = fast
  
  switch (step) {

    case -1:                                                  // Initialize ripple variables.
     696:	2096      	movs	r0, #150	; 0x96
      center = random(NUM_LEDS);
      colour = random8();                                     // More peaks/s = higher the hue colour.
     698:	2700      	movs	r7, #0

  fadeToBlackBy(leds, NUM_LEDS, 64);                          // 8 bit, 1 = slow, 255 = fast
  
  switch (step) {

    case -1:                                                  // Initialize ripple variables.
     69a:	f003 fcfd 	bl	4098 <random(unsigned long)>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     69e:	491c      	ldr	r1, [pc, #112]	; (710 <ripple()+0x1ec>)
     6a0:	f243 6319 	movw	r3, #13849	; 0x3619
     6a4:	f8df e06c 	ldr.w	lr, [pc, #108]	; 714 <ripple()+0x1f0>
     6a8:	880a      	ldrh	r2, [r1, #0]
      center = random(NUM_LEDS);
     6aa:	4c18      	ldr	r4, [pc, #96]	; (70c <ripple()+0x1e8>)
     6ac:	eb02 2642 	add.w	r6, r2, r2, lsl #9

  fadeToBlackBy(leds, NUM_LEDS, 64);                          // 8 bit, 1 = slow, 255 = fast
  
  switch (step) {

    case -1:                                                  // Initialize ripple variables.
     6b0:	f8ce 0000 	str.w	r0, [lr]
      center = random(NUM_LEDS);
      colour = random8();                                     // More peaks/s = higher the hue colour.
     6b4:	602f      	str	r7, [r5, #0]
     6b6:	eb02 0286 	add.w	r2, r2, r6, lsl #2
     6ba:	4413      	add	r3, r2
     6bc:	b29b      	uxth	r3, r3
  fadeToBlackBy(leds, NUM_LEDS, 64);                          // 8 bit, 1 = slow, 255 = fast
  
  switch (step) {

    case -1:                                                  // Initialize ripple variables.
      center = random(NUM_LEDS);
     6be:	eb03 2213 	add.w	r2, r3, r3, lsr #8
     6c2:	800b      	strh	r3, [r1, #0]
     6c4:	7022      	strb	r2, [r4, #0]
      leds[(center + step + NUM_LEDS) % NUM_LEDS] += CHSV(colour, 255, myfade/step*2);       // Simple wrap.
      leds[(center - step + NUM_LEDS) % NUM_LEDS] += CHSV(colour, 255, myfade/step*2);
      step ++;                                                // Next step.
      break;  
  } // switch step
  
     6c6:	b002      	add	sp, #8
     6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      center = random(NUM_LEDS);
      colour = random8();                                     // More peaks/s = higher the hue colour.
      step = 0;
      break;

    case 0:
     6cc:	4911      	ldr	r1, [pc, #68]	; (714 <ripple()+0x1f0>)
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     6ce:	23ff      	movs	r3, #255	; 0xff
     6d0:	4a0e      	ldr	r2, [pc, #56]	; (70c <ripple()+0x1e8>)
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     6d2:	a801      	add	r0, sp, #4
     6d4:	6809      	ldr	r1, [r1, #0]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     6d6:	7812      	ldrb	r2, [r2, #0]
     6d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     6dc:	f88d 3005 	strb.w	r3, [sp, #5]
     6e0:	f88d 3006 	strb.w	r3, [sp, #6]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     6e4:	4421      	add	r1, r4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
     6e6:	f88d 2004 	strb.w	r2, [sp, #4]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
     6ea:	f001 feb5 	bl	2458 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
      leds[center] = CHSV(colour, 255, 255);                  // Display the first pixel of the ripple.
     6ee:	682b      	ldr	r3, [r5, #0]
     6f0:	3301      	adds	r3, #1
     6f2:	602b      	str	r3, [r5, #0]
      leds[(center + step + NUM_LEDS) % NUM_LEDS] += CHSV(colour, 255, myfade/step*2);       // Simple wrap.
      leds[(center - step + NUM_LEDS) % NUM_LEDS] += CHSV(colour, 255, myfade/step*2);
      step ++;                                                // Next step.
      break;  
  } // switch step
  
     6f4:	b002      	add	sp, #8
     6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     6fa:	bf00      	nop
     6fc:	20000654 	.word	0x20000654
     700:	200003e4 	.word	0x200003e4
     704:	20000474 	.word	0x20000474
     708:	1b4e81b5 	.word	0x1b4e81b5
     70c:	2000063c 	.word	0x2000063c
     710:	200003ea 	.word	0x200003ea
     714:	20000470 	.word	0x20000470
     718:	200003dc 	.word	0x200003dc

0000071c <loop>:
  FastLED.setMaxPowerInVoltsAndMilliamps(5, 500);

} // setup()



     71c:	b570      	push	{r4, r5, r6, lr}
void loop() {

     71e:	f7ff fe89 	bl	434 <getSample()>
  getSample();

     722:	4913      	ldr	r1, [pc, #76]	; (770 <loop+0x54>)
     724:	4a13      	ldr	r2, [pc, #76]	; (774 <loop+0x58>)
     726:	680b      	ldr	r3, [r1, #0]
     728:	07db      	lsls	r3, r3, #31
     72a:	d414      	bmi.n	756 <loop+0x3a>
     72c:	6814      	ldr	r4, [r2, #0]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
     72e:	2614      	movs	r6, #20
     730:	6810      	ldr	r0, [r2, #0]
     732:	2501      	movs	r5, #1
     734:	4b10      	ldr	r3, [pc, #64]	; (778 <loop+0x5c>)
     736:	1b00      	subs	r0, r0, r4
     738:	600d      	str	r5, [r1, #0]
     73a:	601c      	str	r4, [r3, #0]
     73c:	2813      	cmp	r0, #19
     73e:	605e      	str	r6, [r3, #4]
     740:	d903      	bls.n	74a <loop+0x2e>
     742:	6812      	ldr	r2, [r2, #0]
     744:	601a      	str	r2, [r3, #0]
  EVERY_N_MILLISECONDS(20) {
     746:	f7ff feed 	bl	524 <ripple()>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
     74a:	480c      	ldr	r0, [pc, #48]	; (77c <loop+0x60>)
   ripple();
  }

   FastLED.show();

     74c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     750:	7801      	ldrb	r1, [r0, #0]
     752:	f001 bdfb 	b.w	234c <CFastLED::show(unsigned char)>
     756:	4b08      	ldr	r3, [pc, #32]	; (778 <loop+0x5c>)
     758:	6811      	ldr	r1, [r2, #0]
     75a:	681c      	ldr	r4, [r3, #0]
     75c:	6858      	ldr	r0, [r3, #4]
     75e:	1b09      	subs	r1, r1, r4
     760:	4281      	cmp	r1, r0
     762:	d3f2      	bcc.n	74a <loop+0x2e>
     764:	6812      	ldr	r2, [r2, #0]
     766:	601a      	str	r2, [r3, #0]

void loop() {

  getSample();

  EVERY_N_MILLISECONDS(20) {
     768:	f7ff fedc 	bl	524 <ripple()>
     76c:	e7ed      	b.n	74a <loop+0x2e>
     76e:	bf00      	nop
     770:	20000640 	.word	0x20000640
     774:	200006d4 	.word	0x200006d4
     778:	20000648 	.word	0x20000648
     77c:	200006a4 	.word	0x200006a4

00000780 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
     780:	b470      	push	{r4, r5, r6}
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     782:	0604      	lsls	r4, r0, #24
     784:	f100 82cc 	bmi.w	d20 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x5a0>
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     788:	4bb3      	ldr	r3, [pc, #716]	; (a58 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2d8>)
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     78a:	f44f 2680 	mov.w	r6, #262144	; 0x40000
     78e:	4db3      	ldr	r5, [pc, #716]	; (a5c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2dc>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     790:	f44f 3400 	mov.w	r4, #131072	; 0x20000
     794:	49b2      	ldr	r1, [pc, #712]	; (a60 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e0>)
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     796:	4ab3      	ldr	r2, [pc, #716]	; (a64 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e4>)
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     798:	602e      	str	r6, [r5, #0]
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     79a:	461e      	mov	r6, r3
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     79c:	600c      	str	r4, [r1, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     79e:	681d      	ldr	r5, [r3, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     7a0:	6813      	ldr	r3, [r2, #0]
     7a2:	49b1      	ldr	r1, [pc, #708]	; (a68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e8>)
     7a4:	0c1b      	lsrs	r3, r3, #16
     7a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     7aa:	005b      	lsls	r3, r3, #1
     7ac:	fba1 3103 	umull	r3, r1, r1, r3
     7b0:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     7b2:	6833      	ldr	r3, [r6, #0]
     7b4:	4ca8      	ldr	r4, [pc, #672]	; (a58 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2d8>)
     7b6:	1b5b      	subs	r3, r3, r5
     7b8:	4299      	cmp	r1, r3
     7ba:	d8fa      	bhi.n	7b2 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x32>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     7bc:	4bab      	ldr	r3, [pc, #684]	; (a6c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2ec>)
     7be:	f44f 3600 	mov.w	r6, #131072	; 0x20000
     7c2:	4625      	mov	r5, r4

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     7c4:	49a8      	ldr	r1, [pc, #672]	; (a68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e8>)
     7c6:	601e      	str	r6, [r3, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     7c8:	6824      	ldr	r4, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     7ca:	6813      	ldr	r3, [r2, #0]
     7cc:	0c1b      	lsrs	r3, r3, #16
     7ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     7d2:	005b      	lsls	r3, r3, #1
     7d4:	fba1 3103 	umull	r3, r1, r1, r3
     7d8:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     7da:	682b      	ldr	r3, [r5, #0]
     7dc:	1b1b      	subs	r3, r3, r4
     7de:	4299      	cmp	r1, r3
     7e0:	d8fb      	bhi.n	7da <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x5a>
     7e2:	0641      	lsls	r1, r0, #25
     7e4:	f140 8265 	bpl.w	cb2 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x532>
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     7e8:	4b9b      	ldr	r3, [pc, #620]	; (a58 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2d8>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     7ea:	f44f 2680 	mov.w	r6, #262144	; 0x40000
     7ee:	4da0      	ldr	r5, [pc, #640]	; (a70 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2f0>)
     7f0:	f44f 3400 	mov.w	r4, #131072	; 0x20000
     7f4:	499a      	ldr	r1, [pc, #616]	; (a60 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e0>)
     7f6:	602e      	str	r6, [r5, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     7f8:	461e      	mov	r6, r3
     7fa:	600c      	str	r4, [r1, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     7fc:	681d      	ldr	r5, [r3, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     7fe:	6813      	ldr	r3, [r2, #0]
     800:	4999      	ldr	r1, [pc, #612]	; (a68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e8>)
     802:	0c1b      	lsrs	r3, r3, #16
     804:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     808:	005b      	lsls	r3, r3, #1
     80a:	fba1 3103 	umull	r3, r1, r1, r3
     80e:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     810:	6833      	ldr	r3, [r6, #0]
     812:	4c91      	ldr	r4, [pc, #580]	; (a58 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2d8>)
     814:	1b5b      	subs	r3, r3, r5
     816:	4299      	cmp	r1, r3
     818:	d8fa      	bhi.n	810 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x90>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     81a:	4b94      	ldr	r3, [pc, #592]	; (a6c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2ec>)
     81c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
     820:	4625      	mov	r5, r4

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     822:	4991      	ldr	r1, [pc, #580]	; (a68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e8>)
     824:	601e      	str	r6, [r3, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     826:	6824      	ldr	r4, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     828:	6813      	ldr	r3, [r2, #0]
     82a:	0c1b      	lsrs	r3, r3, #16
     82c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     830:	005b      	lsls	r3, r3, #1
     832:	fba1 3103 	umull	r3, r1, r1, r3
     836:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     838:	682b      	ldr	r3, [r5, #0]
     83a:	1b1b      	subs	r3, r3, r4
     83c:	4299      	cmp	r1, r3
     83e:	d8fb      	bhi.n	838 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0xb8>
     840:	0683      	lsls	r3, r0, #26
     842:	f140 8209 	bpl.w	c58 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x4d8>
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     846:	4b84      	ldr	r3, [pc, #528]	; (a58 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2d8>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     848:	f44f 2680 	mov.w	r6, #262144	; 0x40000
     84c:	4d88      	ldr	r5, [pc, #544]	; (a70 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2f0>)
     84e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
     852:	4983      	ldr	r1, [pc, #524]	; (a60 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e0>)
     854:	602e      	str	r6, [r5, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     856:	461e      	mov	r6, r3
     858:	600c      	str	r4, [r1, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     85a:	681d      	ldr	r5, [r3, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     85c:	6813      	ldr	r3, [r2, #0]
     85e:	4982      	ldr	r1, [pc, #520]	; (a68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e8>)
     860:	0c1b      	lsrs	r3, r3, #16
     862:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     866:	005b      	lsls	r3, r3, #1
     868:	fba1 3103 	umull	r3, r1, r1, r3
     86c:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     86e:	6833      	ldr	r3, [r6, #0]
     870:	4c79      	ldr	r4, [pc, #484]	; (a58 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2d8>)
     872:	1b5b      	subs	r3, r3, r5
     874:	4299      	cmp	r1, r3
     876:	d8fa      	bhi.n	86e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0xee>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     878:	4b7c      	ldr	r3, [pc, #496]	; (a6c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2ec>)
     87a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
     87e:	4625      	mov	r5, r4

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     880:	4979      	ldr	r1, [pc, #484]	; (a68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e8>)
     882:	601e      	str	r6, [r3, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     884:	6824      	ldr	r4, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     886:	6813      	ldr	r3, [r2, #0]
     888:	0c1b      	lsrs	r3, r3, #16
     88a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     88e:	005b      	lsls	r3, r3, #1
     890:	fba1 3103 	umull	r3, r1, r1, r3
     894:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     896:	682b      	ldr	r3, [r5, #0]
     898:	1b1b      	subs	r3, r3, r4
     89a:	4299      	cmp	r1, r3
     89c:	d8fb      	bhi.n	896 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x116>
     89e:	06c6      	lsls	r6, r0, #27
     8a0:	f140 81ad 	bpl.w	bfe <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x47e>
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     8a4:	4b6c      	ldr	r3, [pc, #432]	; (a58 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2d8>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     8a6:	f44f 2680 	mov.w	r6, #262144	; 0x40000
     8aa:	4d71      	ldr	r5, [pc, #452]	; (a70 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2f0>)
     8ac:	f44f 3400 	mov.w	r4, #131072	; 0x20000
     8b0:	496b      	ldr	r1, [pc, #428]	; (a60 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e0>)
     8b2:	602e      	str	r6, [r5, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     8b4:	461e      	mov	r6, r3
     8b6:	600c      	str	r4, [r1, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     8b8:	681d      	ldr	r5, [r3, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     8ba:	6813      	ldr	r3, [r2, #0]
     8bc:	496a      	ldr	r1, [pc, #424]	; (a68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e8>)
     8be:	0c1b      	lsrs	r3, r3, #16
     8c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     8c4:	005b      	lsls	r3, r3, #1
     8c6:	fba1 3103 	umull	r3, r1, r1, r3
     8ca:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     8cc:	6833      	ldr	r3, [r6, #0]
     8ce:	4c62      	ldr	r4, [pc, #392]	; (a58 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2d8>)
     8d0:	1b5b      	subs	r3, r3, r5
     8d2:	4299      	cmp	r1, r3
     8d4:	d8fa      	bhi.n	8cc <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x14c>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     8d6:	4b65      	ldr	r3, [pc, #404]	; (a6c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2ec>)
     8d8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
     8dc:	4625      	mov	r5, r4

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     8de:	4962      	ldr	r1, [pc, #392]	; (a68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e8>)
     8e0:	601e      	str	r6, [r3, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     8e2:	6824      	ldr	r4, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     8e4:	6813      	ldr	r3, [r2, #0]
     8e6:	0c1b      	lsrs	r3, r3, #16
     8e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     8ec:	005b      	lsls	r3, r3, #1
     8ee:	fba1 3103 	umull	r3, r1, r1, r3
     8f2:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     8f4:	682b      	ldr	r3, [r5, #0]
     8f6:	1b1b      	subs	r3, r3, r4
     8f8:	4299      	cmp	r1, r3
     8fa:	d8fb      	bhi.n	8f4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x174>
     8fc:	0705      	lsls	r5, r0, #28
     8fe:	f140 8151 	bpl.w	ba4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x424>
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     902:	4b55      	ldr	r3, [pc, #340]	; (a58 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2d8>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     904:	f44f 2680 	mov.w	r6, #262144	; 0x40000
     908:	4d59      	ldr	r5, [pc, #356]	; (a70 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2f0>)
     90a:	f44f 3400 	mov.w	r4, #131072	; 0x20000
     90e:	4954      	ldr	r1, [pc, #336]	; (a60 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e0>)
     910:	602e      	str	r6, [r5, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     912:	461e      	mov	r6, r3
     914:	600c      	str	r4, [r1, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     916:	681d      	ldr	r5, [r3, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     918:	6813      	ldr	r3, [r2, #0]
     91a:	4953      	ldr	r1, [pc, #332]	; (a68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e8>)
     91c:	0c1b      	lsrs	r3, r3, #16
     91e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     922:	005b      	lsls	r3, r3, #1
     924:	fba1 3103 	umull	r3, r1, r1, r3
     928:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     92a:	6833      	ldr	r3, [r6, #0]
     92c:	4c4a      	ldr	r4, [pc, #296]	; (a58 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2d8>)
     92e:	1b5b      	subs	r3, r3, r5
     930:	4299      	cmp	r1, r3
     932:	d8fa      	bhi.n	92a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x1aa>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     934:	4b4d      	ldr	r3, [pc, #308]	; (a6c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2ec>)
     936:	f44f 3600 	mov.w	r6, #131072	; 0x20000
     93a:	4625      	mov	r5, r4

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     93c:	494a      	ldr	r1, [pc, #296]	; (a68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e8>)
     93e:	601e      	str	r6, [r3, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     940:	6824      	ldr	r4, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     942:	6813      	ldr	r3, [r2, #0]
     944:	0c1b      	lsrs	r3, r3, #16
     946:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     94a:	005b      	lsls	r3, r3, #1
     94c:	fba1 3103 	umull	r3, r1, r1, r3
     950:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     952:	682b      	ldr	r3, [r5, #0]
     954:	1b1b      	subs	r3, r3, r4
     956:	4299      	cmp	r1, r3
     958:	d8fb      	bhi.n	952 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x1d2>
     95a:	0744      	lsls	r4, r0, #29
     95c:	f140 80f5 	bpl.w	b4a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x3ca>
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     960:	4b3d      	ldr	r3, [pc, #244]	; (a58 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2d8>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     962:	f44f 2680 	mov.w	r6, #262144	; 0x40000
     966:	4d42      	ldr	r5, [pc, #264]	; (a70 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2f0>)
     968:	f44f 3400 	mov.w	r4, #131072	; 0x20000
     96c:	493c      	ldr	r1, [pc, #240]	; (a60 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e0>)
     96e:	602e      	str	r6, [r5, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     970:	461e      	mov	r6, r3
     972:	600c      	str	r4, [r1, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     974:	681d      	ldr	r5, [r3, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     976:	6813      	ldr	r3, [r2, #0]
     978:	493b      	ldr	r1, [pc, #236]	; (a68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e8>)
     97a:	0c1b      	lsrs	r3, r3, #16
     97c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     980:	005b      	lsls	r3, r3, #1
     982:	fba1 3103 	umull	r3, r1, r1, r3
     986:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     988:	6833      	ldr	r3, [r6, #0]
     98a:	4c33      	ldr	r4, [pc, #204]	; (a58 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2d8>)
     98c:	1b5b      	subs	r3, r3, r5
     98e:	4299      	cmp	r1, r3
     990:	d8fa      	bhi.n	988 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x208>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     992:	4b36      	ldr	r3, [pc, #216]	; (a6c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2ec>)
     994:	f44f 3600 	mov.w	r6, #131072	; 0x20000
     998:	4625      	mov	r5, r4

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     99a:	4933      	ldr	r1, [pc, #204]	; (a68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e8>)
     99c:	601e      	str	r6, [r3, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     99e:	6824      	ldr	r4, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     9a0:	6813      	ldr	r3, [r2, #0]
     9a2:	0c1b      	lsrs	r3, r3, #16
     9a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     9a8:	005b      	lsls	r3, r3, #1
     9aa:	fba1 3103 	umull	r3, r1, r1, r3
     9ae:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     9b0:	682b      	ldr	r3, [r5, #0]
     9b2:	1b1b      	subs	r3, r3, r4
     9b4:	4299      	cmp	r1, r3
     9b6:	d8fb      	bhi.n	9b0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x230>
     9b8:	0781      	lsls	r1, r0, #30
     9ba:	f140 8099 	bpl.w	af0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x370>
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     9be:	4b26      	ldr	r3, [pc, #152]	; (a58 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2d8>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     9c0:	f44f 2680 	mov.w	r6, #262144	; 0x40000
     9c4:	4d2a      	ldr	r5, [pc, #168]	; (a70 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2f0>)
     9c6:	f44f 3400 	mov.w	r4, #131072	; 0x20000
     9ca:	4925      	ldr	r1, [pc, #148]	; (a60 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e0>)
     9cc:	602e      	str	r6, [r5, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     9ce:	461e      	mov	r6, r3
     9d0:	600c      	str	r4, [r1, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     9d2:	681d      	ldr	r5, [r3, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     9d4:	6813      	ldr	r3, [r2, #0]
     9d6:	4924      	ldr	r1, [pc, #144]	; (a68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e8>)
     9d8:	0c1b      	lsrs	r3, r3, #16
     9da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     9de:	005b      	lsls	r3, r3, #1
     9e0:	fba1 3103 	umull	r3, r1, r1, r3
     9e4:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     9e6:	6833      	ldr	r3, [r6, #0]
     9e8:	4c1b      	ldr	r4, [pc, #108]	; (a58 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2d8>)
     9ea:	1b5b      	subs	r3, r3, r5
     9ec:	4299      	cmp	r1, r3
     9ee:	d8fa      	bhi.n	9e6 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x266>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     9f0:	4b1e      	ldr	r3, [pc, #120]	; (a6c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2ec>)
     9f2:	f44f 3600 	mov.w	r6, #131072	; 0x20000
     9f6:	4625      	mov	r5, r4

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     9f8:	491b      	ldr	r1, [pc, #108]	; (a68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e8>)
     9fa:	601e      	str	r6, [r3, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     9fc:	6824      	ldr	r4, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     9fe:	6813      	ldr	r3, [r2, #0]
     a00:	0c1b      	lsrs	r3, r3, #16
     a02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     a06:	005b      	lsls	r3, r3, #1
     a08:	fba1 3103 	umull	r3, r1, r1, r3
     a0c:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     a0e:	682b      	ldr	r3, [r5, #0]
     a10:	1b1b      	subs	r3, r3, r4
     a12:	4299      	cmp	r1, r3
     a14:	d8fb      	bhi.n	a0e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x28e>
     a16:	07c3      	lsls	r3, r0, #31
     a18:	d53c      	bpl.n	a94 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x314>
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     a1a:	4b0f      	ldr	r3, [pc, #60]	; (a58 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2d8>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     a1c:	f44f 2580 	mov.w	r5, #262144	; 0x40000
     a20:	4c13      	ldr	r4, [pc, #76]	; (a70 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2f0>)
     a22:	f44f 3000 	mov.w	r0, #131072	; 0x20000
     a26:	490e      	ldr	r1, [pc, #56]	; (a60 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e0>)
     a28:	6025      	str	r5, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     a2a:	461d      	mov	r5, r3
     a2c:	6008      	str	r0, [r1, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     a2e:	681c      	ldr	r4, [r3, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     a30:	6813      	ldr	r3, [r2, #0]
     a32:	490d      	ldr	r1, [pc, #52]	; (a68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e8>)
     a34:	0c1b      	lsrs	r3, r3, #16
     a36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     a3a:	005b      	lsls	r3, r3, #1
     a3c:	fba1 3103 	umull	r3, r1, r1, r3
     a40:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     a42:	682b      	ldr	r3, [r5, #0]
     a44:	4804      	ldr	r0, [pc, #16]	; (a58 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2d8>)
     a46:	1b1b      	subs	r3, r3, r4
     a48:	4299      	cmp	r1, r3
     a4a:	d8fa      	bhi.n	a42 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2c2>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     a4c:	4b07      	ldr	r3, [pc, #28]	; (a6c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2ec>)
     a4e:	f44f 3100 	mov.w	r1, #131072	; 0x20000

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     a52:	4d05      	ldr	r5, [pc, #20]	; (a68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2e8>)
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     a54:	4604      	mov	r4, r0
     a56:	e00d      	b.n	a74 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x2f4>
     a58:	e0001004 	.word	0xe0001004
     a5c:	42000088 	.word	0x42000088
     a60:	42004084 	.word	0x42004084
     a64:	200003f0 	.word	0x200003f0
     a68:	08972311 	.word	0x08972311
     a6c:	42004088 	.word	0x42004088
     a70:	42000084 	.word	0x42000084
     a74:	6019      	str	r1, [r3, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     a76:	6801      	ldr	r1, [r0, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     a78:	6813      	ldr	r3, [r2, #0]
     a7a:	0c1b      	lsrs	r3, r3, #16
     a7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     a80:	005b      	lsls	r3, r3, #1
     a82:	fba5 3203 	umull	r3, r2, r5, r3
     a86:	0a12      	lsrs	r2, r2, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     a88:	6823      	ldr	r3, [r4, #0]
     a8a:	1a5b      	subs	r3, r3, r1
     a8c:	429a      	cmp	r2, r3
     a8e:	d8fb      	bhi.n	a88 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x308>
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
     a90:	bc70      	pop	{r4, r5, r6}
     a92:	4770      	bx	lr
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     a94:	4b9d      	ldr	r3, [pc, #628]	; (d0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x58c>)
     a96:	f44f 2580 	mov.w	r5, #262144	; 0x40000
     a9a:	4c9d      	ldr	r4, [pc, #628]	; (d10 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x590>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     a9c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
     aa0:	499c      	ldr	r1, [pc, #624]	; (d14 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x594>)
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     aa2:	6025      	str	r5, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     aa4:	461d      	mov	r5, r3
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     aa6:	6008      	str	r0, [r1, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     aa8:	681c      	ldr	r4, [r3, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     aaa:	6813      	ldr	r3, [r2, #0]
     aac:	499a      	ldr	r1, [pc, #616]	; (d18 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x598>)
     aae:	0c1b      	lsrs	r3, r3, #16
     ab0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     ab4:	005b      	lsls	r3, r3, #1
     ab6:	fba1 3103 	umull	r3, r1, r1, r3
     aba:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     abc:	682b      	ldr	r3, [r5, #0]
     abe:	4893      	ldr	r0, [pc, #588]	; (d0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x58c>)
     ac0:	1b1b      	subs	r3, r3, r4
     ac2:	4299      	cmp	r1, r3
     ac4:	d8fa      	bhi.n	abc <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x33c>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     ac6:	4b95      	ldr	r3, [pc, #596]	; (d1c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x59c>)
     ac8:	f44f 3100 	mov.w	r1, #131072	; 0x20000

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     acc:	4d92      	ldr	r5, [pc, #584]	; (d18 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x598>)
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     ace:	4604      	mov	r4, r0
     ad0:	6019      	str	r1, [r3, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     ad2:	6801      	ldr	r1, [r0, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     ad4:	6813      	ldr	r3, [r2, #0]
     ad6:	0c1b      	lsrs	r3, r3, #16
     ad8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     adc:	005b      	lsls	r3, r3, #1
     ade:	fba5 3203 	umull	r3, r2, r5, r3
     ae2:	0a12      	lsrs	r2, r2, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     ae4:	6823      	ldr	r3, [r4, #0]
     ae6:	1a5b      	subs	r3, r3, r1
     ae8:	429a      	cmp	r2, r3
     aea:	d8fb      	bhi.n	ae4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x364>
     aec:	bc70      	pop	{r4, r5, r6}
     aee:	4770      	bx	lr
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     af0:	4b86      	ldr	r3, [pc, #536]	; (d0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x58c>)
     af2:	f44f 2680 	mov.w	r6, #262144	; 0x40000
     af6:	4d86      	ldr	r5, [pc, #536]	; (d10 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x590>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     af8:	f44f 3400 	mov.w	r4, #131072	; 0x20000
     afc:	4985      	ldr	r1, [pc, #532]	; (d14 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x594>)
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     afe:	602e      	str	r6, [r5, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     b00:	461e      	mov	r6, r3
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     b02:	600c      	str	r4, [r1, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     b04:	681d      	ldr	r5, [r3, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     b06:	6813      	ldr	r3, [r2, #0]
     b08:	4983      	ldr	r1, [pc, #524]	; (d18 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x598>)
     b0a:	0c1b      	lsrs	r3, r3, #16
     b0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     b10:	005b      	lsls	r3, r3, #1
     b12:	fba1 3103 	umull	r3, r1, r1, r3
     b16:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     b18:	6833      	ldr	r3, [r6, #0]
     b1a:	4c7c      	ldr	r4, [pc, #496]	; (d0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x58c>)
     b1c:	1b5b      	subs	r3, r3, r5
     b1e:	4299      	cmp	r1, r3
     b20:	d8fa      	bhi.n	b18 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x398>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     b22:	4b7e      	ldr	r3, [pc, #504]	; (d1c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x59c>)
     b24:	f44f 3600 	mov.w	r6, #131072	; 0x20000
     b28:	4625      	mov	r5, r4

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     b2a:	497b      	ldr	r1, [pc, #492]	; (d18 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x598>)
     b2c:	601e      	str	r6, [r3, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     b2e:	6824      	ldr	r4, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     b30:	6813      	ldr	r3, [r2, #0]
     b32:	0c1b      	lsrs	r3, r3, #16
     b34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     b38:	005b      	lsls	r3, r3, #1
     b3a:	fba1 3103 	umull	r3, r1, r1, r3
     b3e:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     b40:	682b      	ldr	r3, [r5, #0]
     b42:	1b1b      	subs	r3, r3, r4
     b44:	4299      	cmp	r1, r3
     b46:	d8fb      	bhi.n	b40 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x3c0>
     b48:	e765      	b.n	a16 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x296>
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     b4a:	4b70      	ldr	r3, [pc, #448]	; (d0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x58c>)
     b4c:	f44f 2680 	mov.w	r6, #262144	; 0x40000
     b50:	4d6f      	ldr	r5, [pc, #444]	; (d10 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x590>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     b52:	f44f 3400 	mov.w	r4, #131072	; 0x20000
     b56:	496f      	ldr	r1, [pc, #444]	; (d14 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x594>)
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     b58:	602e      	str	r6, [r5, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     b5a:	461e      	mov	r6, r3
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     b5c:	600c      	str	r4, [r1, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     b5e:	681d      	ldr	r5, [r3, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     b60:	6813      	ldr	r3, [r2, #0]
     b62:	496d      	ldr	r1, [pc, #436]	; (d18 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x598>)
     b64:	0c1b      	lsrs	r3, r3, #16
     b66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     b6a:	005b      	lsls	r3, r3, #1
     b6c:	fba1 3103 	umull	r3, r1, r1, r3
     b70:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     b72:	6833      	ldr	r3, [r6, #0]
     b74:	4c65      	ldr	r4, [pc, #404]	; (d0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x58c>)
     b76:	1b5b      	subs	r3, r3, r5
     b78:	4299      	cmp	r1, r3
     b7a:	d8fa      	bhi.n	b72 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x3f2>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     b7c:	4b67      	ldr	r3, [pc, #412]	; (d1c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x59c>)
     b7e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
     b82:	4625      	mov	r5, r4

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     b84:	4964      	ldr	r1, [pc, #400]	; (d18 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x598>)
     b86:	601e      	str	r6, [r3, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     b88:	6824      	ldr	r4, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     b8a:	6813      	ldr	r3, [r2, #0]
     b8c:	0c1b      	lsrs	r3, r3, #16
     b8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     b92:	005b      	lsls	r3, r3, #1
     b94:	fba1 3103 	umull	r3, r1, r1, r3
     b98:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     b9a:	682b      	ldr	r3, [r5, #0]
     b9c:	1b1b      	subs	r3, r3, r4
     b9e:	4299      	cmp	r1, r3
     ba0:	d8fb      	bhi.n	b9a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x41a>
     ba2:	e709      	b.n	9b8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x238>
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     ba4:	4b59      	ldr	r3, [pc, #356]	; (d0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x58c>)
     ba6:	f44f 2680 	mov.w	r6, #262144	; 0x40000
     baa:	4d59      	ldr	r5, [pc, #356]	; (d10 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x590>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     bac:	f44f 3400 	mov.w	r4, #131072	; 0x20000
     bb0:	4958      	ldr	r1, [pc, #352]	; (d14 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x594>)
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     bb2:	602e      	str	r6, [r5, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     bb4:	461e      	mov	r6, r3
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     bb6:	600c      	str	r4, [r1, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     bb8:	681d      	ldr	r5, [r3, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     bba:	6813      	ldr	r3, [r2, #0]
     bbc:	4956      	ldr	r1, [pc, #344]	; (d18 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x598>)
     bbe:	0c1b      	lsrs	r3, r3, #16
     bc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     bc4:	005b      	lsls	r3, r3, #1
     bc6:	fba1 3103 	umull	r3, r1, r1, r3
     bca:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     bcc:	6833      	ldr	r3, [r6, #0]
     bce:	4c4f      	ldr	r4, [pc, #316]	; (d0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x58c>)
     bd0:	1b5b      	subs	r3, r3, r5
     bd2:	4299      	cmp	r1, r3
     bd4:	d8fa      	bhi.n	bcc <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x44c>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     bd6:	4b51      	ldr	r3, [pc, #324]	; (d1c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x59c>)
     bd8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
     bdc:	4625      	mov	r5, r4

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     bde:	494e      	ldr	r1, [pc, #312]	; (d18 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x598>)
     be0:	601e      	str	r6, [r3, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     be2:	6824      	ldr	r4, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     be4:	6813      	ldr	r3, [r2, #0]
     be6:	0c1b      	lsrs	r3, r3, #16
     be8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     bec:	005b      	lsls	r3, r3, #1
     bee:	fba1 3103 	umull	r3, r1, r1, r3
     bf2:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     bf4:	682b      	ldr	r3, [r5, #0]
     bf6:	1b1b      	subs	r3, r3, r4
     bf8:	4299      	cmp	r1, r3
     bfa:	d8fb      	bhi.n	bf4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x474>
     bfc:	e6ad      	b.n	95a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x1da>
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     bfe:	4b43      	ldr	r3, [pc, #268]	; (d0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x58c>)
     c00:	f44f 2680 	mov.w	r6, #262144	; 0x40000
     c04:	4d42      	ldr	r5, [pc, #264]	; (d10 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x590>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     c06:	f44f 3400 	mov.w	r4, #131072	; 0x20000
     c0a:	4942      	ldr	r1, [pc, #264]	; (d14 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x594>)
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     c0c:	602e      	str	r6, [r5, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c0e:	461e      	mov	r6, r3
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     c10:	600c      	str	r4, [r1, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     c12:	681d      	ldr	r5, [r3, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     c14:	6813      	ldr	r3, [r2, #0]
     c16:	4940      	ldr	r1, [pc, #256]	; (d18 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x598>)
     c18:	0c1b      	lsrs	r3, r3, #16
     c1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     c1e:	005b      	lsls	r3, r3, #1
     c20:	fba1 3103 	umull	r3, r1, r1, r3
     c24:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c26:	6833      	ldr	r3, [r6, #0]
     c28:	4c38      	ldr	r4, [pc, #224]	; (d0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x58c>)
     c2a:	1b5b      	subs	r3, r3, r5
     c2c:	4299      	cmp	r1, r3
     c2e:	d8fa      	bhi.n	c26 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x4a6>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     c30:	4b3a      	ldr	r3, [pc, #232]	; (d1c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x59c>)
     c32:	f44f 3600 	mov.w	r6, #131072	; 0x20000
     c36:	4625      	mov	r5, r4

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     c38:	4937      	ldr	r1, [pc, #220]	; (d18 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x598>)
     c3a:	601e      	str	r6, [r3, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     c3c:	6824      	ldr	r4, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     c3e:	6813      	ldr	r3, [r2, #0]
     c40:	0c1b      	lsrs	r3, r3, #16
     c42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     c46:	005b      	lsls	r3, r3, #1
     c48:	fba1 3103 	umull	r3, r1, r1, r3
     c4c:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c4e:	682b      	ldr	r3, [r5, #0]
     c50:	1b1b      	subs	r3, r3, r4
     c52:	4299      	cmp	r1, r3
     c54:	d8fb      	bhi.n	c4e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x4ce>
     c56:	e651      	b.n	8fc <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x17c>
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     c58:	4b2c      	ldr	r3, [pc, #176]	; (d0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x58c>)
     c5a:	f44f 2680 	mov.w	r6, #262144	; 0x40000
     c5e:	4d2c      	ldr	r5, [pc, #176]	; (d10 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x590>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     c60:	f44f 3400 	mov.w	r4, #131072	; 0x20000
     c64:	492b      	ldr	r1, [pc, #172]	; (d14 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x594>)
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     c66:	602e      	str	r6, [r5, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c68:	461e      	mov	r6, r3
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     c6a:	600c      	str	r4, [r1, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     c6c:	681d      	ldr	r5, [r3, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     c6e:	6813      	ldr	r3, [r2, #0]
     c70:	4929      	ldr	r1, [pc, #164]	; (d18 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x598>)
     c72:	0c1b      	lsrs	r3, r3, #16
     c74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     c78:	005b      	lsls	r3, r3, #1
     c7a:	fba1 3103 	umull	r3, r1, r1, r3
     c7e:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c80:	6833      	ldr	r3, [r6, #0]
     c82:	4c22      	ldr	r4, [pc, #136]	; (d0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x58c>)
     c84:	1b5b      	subs	r3, r3, r5
     c86:	4299      	cmp	r1, r3
     c88:	d8fa      	bhi.n	c80 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x500>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     c8a:	4b24      	ldr	r3, [pc, #144]	; (d1c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x59c>)
     c8c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
     c90:	4625      	mov	r5, r4

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     c92:	4921      	ldr	r1, [pc, #132]	; (d18 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x598>)
     c94:	601e      	str	r6, [r3, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     c96:	6824      	ldr	r4, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     c98:	6813      	ldr	r3, [r2, #0]
     c9a:	0c1b      	lsrs	r3, r3, #16
     c9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     ca0:	005b      	lsls	r3, r3, #1
     ca2:	fba1 3103 	umull	r3, r1, r1, r3
     ca6:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     ca8:	682b      	ldr	r3, [r5, #0]
     caa:	1b1b      	subs	r3, r3, r4
     cac:	4299      	cmp	r1, r3
     cae:	d8fb      	bhi.n	ca8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x528>
     cb0:	e5f5      	b.n	89e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x11e>
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     cb2:	4b16      	ldr	r3, [pc, #88]	; (d0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x58c>)
     cb4:	f44f 2680 	mov.w	r6, #262144	; 0x40000
     cb8:	4d15      	ldr	r5, [pc, #84]	; (d10 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x590>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     cba:	f44f 3400 	mov.w	r4, #131072	; 0x20000
     cbe:	4915      	ldr	r1, [pc, #84]	; (d14 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x594>)
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     cc0:	602e      	str	r6, [r5, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     cc2:	461e      	mov	r6, r3
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     cc4:	600c      	str	r4, [r1, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     cc6:	681d      	ldr	r5, [r3, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     cc8:	6813      	ldr	r3, [r2, #0]
     cca:	4913      	ldr	r1, [pc, #76]	; (d18 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x598>)
     ccc:	0c1b      	lsrs	r3, r3, #16
     cce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     cd2:	005b      	lsls	r3, r3, #1
     cd4:	fba1 3103 	umull	r3, r1, r1, r3
     cd8:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     cda:	6833      	ldr	r3, [r6, #0]
     cdc:	4c0b      	ldr	r4, [pc, #44]	; (d0c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x58c>)
     cde:	1b5b      	subs	r3, r3, r5
     ce0:	4299      	cmp	r1, r3
     ce2:	d8fa      	bhi.n	cda <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x55a>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     ce4:	4b0d      	ldr	r3, [pc, #52]	; (d1c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x59c>)
     ce6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
     cea:	4625      	mov	r5, r4

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     cec:	490a      	ldr	r1, [pc, #40]	; (d18 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x598>)
     cee:	601e      	str	r6, [r3, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     cf0:	6824      	ldr	r4, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     cf2:	6813      	ldr	r3, [r2, #0]
     cf4:	0c1b      	lsrs	r3, r3, #16
     cf6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     cfa:	005b      	lsls	r3, r3, #1
     cfc:	fba1 3103 	umull	r3, r1, r1, r3
     d00:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     d02:	682b      	ldr	r3, [r5, #0]
     d04:	1b1b      	subs	r3, r3, r4
     d06:	4299      	cmp	r1, r3
     d08:	d8fb      	bhi.n	d02 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x582>
     d0a:	e599      	b.n	840 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0xc0>
     d0c:	e0001004 	.word	0xe0001004
     d10:	42000088 	.word	0x42000088
     d14:	42004084 	.word	0x42004084
     d18:	08972311 	.word	0x08972311
     d1c:	42004088 	.word	0x42004088
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     d20:	4b16      	ldr	r3, [pc, #88]	; (d7c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x5fc>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     d22:	f44f 2680 	mov.w	r6, #262144	; 0x40000
     d26:	4d16      	ldr	r5, [pc, #88]	; (d80 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x600>)
     d28:	f44f 3400 	mov.w	r4, #131072	; 0x20000
     d2c:	4915      	ldr	r1, [pc, #84]	; (d84 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x604>)
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     d2e:	4a16      	ldr	r2, [pc, #88]	; (d88 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x608>)
     d30:	602e      	str	r6, [r5, #0]
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     d32:	461e      	mov	r6, r3
     d34:	600c      	str	r4, [r1, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     d36:	681d      	ldr	r5, [r3, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     d38:	6813      	ldr	r3, [r2, #0]
     d3a:	4914      	ldr	r1, [pc, #80]	; (d8c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x60c>)
     d3c:	0c1b      	lsrs	r3, r3, #16
     d3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     d42:	005b      	lsls	r3, r3, #1
     d44:	fba1 3103 	umull	r3, r1, r1, r3
     d48:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     d4a:	6833      	ldr	r3, [r6, #0]
     d4c:	4c0b      	ldr	r4, [pc, #44]	; (d7c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x5fc>)
     d4e:	1b5b      	subs	r3, r3, r5
     d50:	4299      	cmp	r1, r3
     d52:	d8fa      	bhi.n	d4a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x5ca>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     d54:	4b0e      	ldr	r3, [pc, #56]	; (d90 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x610>)
     d56:	f44f 3600 	mov.w	r6, #131072	; 0x20000
     d5a:	4625      	mov	r5, r4

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     d5c:	490b      	ldr	r1, [pc, #44]	; (d8c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x60c>)
     d5e:	601e      	str	r6, [r3, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     d60:	6824      	ldr	r4, [r4, #0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     d62:	6813      	ldr	r3, [r2, #0]
     d64:	0c1b      	lsrs	r3, r3, #16
     d66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     d6a:	005b      	lsls	r3, r3, #1
     d6c:	fba1 3103 	umull	r3, r1, r1, r3
     d70:	0a09      	lsrs	r1, r1, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     d72:	682b      	ldr	r3, [r5, #0]
     d74:	1b1b      	subs	r3, r3, r4
     d76:	4299      	cmp	r1, r3
     d78:	d8fb      	bhi.n	d72 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x5f2>
     d7a:	e532      	b.n	7e2 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)+0x62>
     d7c:	e0001004 	.word	0xe0001004
     d80:	42000084 	.word	0x42000084
     d84:	42004084 	.word	0x42004084
     d88:	200003f0 	.word	0x200003f0
     d8c:	08972311 	.word	0x08972311
     d90:	42004088 	.word	0x42004088

00000d94 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
     d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d98:	b089      	sub	sp, #36	; 0x24
     d9a:	4689      	mov	r9, r1
     d9c:	9007      	str	r0, [sp, #28]
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
     d9e:	6980      	ldr	r0, [r0, #24]
     da0:	b150      	cbz	r0, db8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
     da2:	6803      	ldr	r3, [r0, #0]
     da4:	4ad5      	ldr	r2, [pc, #852]	; (10fc <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x368>)
     da6:	681b      	ldr	r3, [r3, #0]
     da8:	4293      	cmp	r3, r2
     daa:	f041 8176 	bne.w	209a <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1306>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     dae:	6842      	ldr	r2, [r0, #4]
     db0:	68c1      	ldr	r1, [r0, #12]
     db2:	6813      	ldr	r3, [r2, #0]
     db4:	430b      	orrs	r3, r1
     db6:	6013      	str	r3, [r2, #0]
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint32_t SPI_SPEED = DATA_RATE_MHZ(12)>
class LPD6803Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); }
     db8:	2000      	movs	r0, #0
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     dba:	f899 5014 	ldrb.w	r5, [r9, #20]
     dbe:	f899 6013 	ldrb.w	r6, [r9, #19]
     dc2:	f899 7012 	ldrb.w	r7, [r9, #18]
     dc6:	f7ff fcdb 	bl	780 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)>
     dca:	2000      	movs	r0, #0
     dcc:	f7ff fcd8 	bl	780 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)>
     dd0:	2000      	movs	r0, #0
     dd2:	f7ff fcd5 	bl	780 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)>
     dd6:	2000      	movs	r0, #0
     dd8:	f7ff fcd2 	bl	780 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)>
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
     ddc:	f8d9 3008 	ldr.w	r3, [r9, #8]
     de0:	2b00      	cmp	r3, #0
     de2:	f341 815d 	ble.w	20a0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x130c>
     de6:	1c7b      	adds	r3, r7, #1
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     de8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     dec:	4cc4      	ldr	r4, [pc, #784]	; (1100 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x36c>)
     dee:	9305      	str	r3, [sp, #20]
     df0:	1c73      	adds	r3, r6, #1
     df2:	4611      	mov	r1, r2
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     df4:	4627      	mov	r7, r4
     df6:	9304      	str	r3, [sp, #16]
     df8:	1c6b      	adds	r3, r5, #1
     dfa:	f8d9 0000 	ldr.w	r0, [r9]
     dfe:	4dc1      	ldr	r5, [pc, #772]	; (1104 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x370>)
     e00:	f8df a30c 	ldr.w	sl, [pc, #780]	; 1110 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x37c>
     e04:	f8df 830c 	ldr.w	r8, [pc, #780]	; 1114 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x380>

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     e08:	4ebf      	ldr	r6, [pc, #764]	; (1108 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x374>)
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     e0a:	f8df b30c 	ldr.w	fp, [pc, #780]	; 1118 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x384>
     e0e:	9306      	str	r3, [sp, #24]
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     e10:	f8d9 3018 	ldr.w	r3, [r9, #24]
     e14:	eb00 0e03 	add.w	lr, r0, r3
     e18:	5cc3      	ldrb	r3, [r0, r3]
     e1a:	f89e 0001 	ldrb.w	r0, [lr, #1]
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
     e1e:	f89e e002 	ldrb.w	lr, [lr, #2]
     e22:	9002      	str	r0, [sp, #8]
     e24:	9805      	ldr	r0, [sp, #20]
     e26:	fb00 f303 	mul.w	r3, r0, r3
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     e2a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
     e2e:	121b      	asrs	r3, r3, #8
     e30:	f8ca 0000 	str.w	r0, [sl]
     e34:	9804      	ldr	r0, [sp, #16]
     e36:	9300      	str	r3, [sp, #0]
     e38:	9b06      	ldr	r3, [sp, #24]
     e3a:	f8c8 1000 	str.w	r1, [r8]
     e3e:	fb03 fe0e 	mul.w	lr, r3, lr
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     e42:	f8d4 c000 	ldr.w	ip, [r4]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     e46:	682b      	ldr	r3, [r5, #0]
     e48:	ea4f 2e2e 	mov.w	lr, lr, asr #8
     e4c:	9301      	str	r3, [sp, #4]
     e4e:	9b02      	ldr	r3, [sp, #8]
     e50:	f06e 0eff 	orn	lr, lr, #255	; 0xff
     e54:	fb00 f003 	mul.w	r0, r0, r3
     e58:	9b01      	ldr	r3, [sp, #4]
     e5a:	0c1b      	lsrs	r3, r3, #16
     e5c:	1200      	asrs	r0, r0, #8
     e5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     e62:	9001      	str	r0, [sp, #4]
     e64:	005b      	lsls	r3, r3, #1
     e66:	fba6 0303 	umull	r0, r3, r6, r3
     e6a:	0a1b      	lsrs	r3, r3, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     e6c:	6820      	ldr	r0, [r4, #0]
     e6e:	ebcc 0000 	rsb	r0, ip, r0
     e72:	4283      	cmp	r3, r0
     e74:	d8fa      	bhi.n	e6c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xd8>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     e76:	f8cb 1000 	str.w	r1, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     e7a:	f8d7 c000 	ldr.w	ip, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     e7e:	682b      	ldr	r3, [r5, #0]
     e80:	0c1b      	lsrs	r3, r3, #16
     e82:	eb03 0083 	add.w	r0, r3, r3, lsl #2
     e86:	0040      	lsls	r0, r0, #1
     e88:	fba6 3000 	umull	r3, r0, r6, r0
     e8c:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     e8e:	6823      	ldr	r3, [r4, #0]
     e90:	ebcc 0303 	rsb	r3, ip, r3
     e94:	4298      	cmp	r0, r3
     e96:	d8fa      	bhi.n	e8e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xfa>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     e98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     e9c:	f8ca 3000 	str.w	r3, [sl]
     ea0:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     ea4:	f8d7 c000 	ldr.w	ip, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     ea8:	682b      	ldr	r3, [r5, #0]
     eaa:	0c1b      	lsrs	r3, r3, #16
     eac:	eb03 0083 	add.w	r0, r3, r3, lsl #2
     eb0:	0040      	lsls	r0, r0, #1
     eb2:	fba6 3000 	umull	r3, r0, r6, r0
     eb6:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     eb8:	6823      	ldr	r3, [r4, #0]
     eba:	ebcc 0303 	rsb	r3, ip, r3
     ebe:	4298      	cmp	r0, r3
     ec0:	d8fa      	bhi.n	eb8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x124>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     ec2:	f8cb 1000 	str.w	r1, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     ec6:	f8d7 c000 	ldr.w	ip, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     eca:	682b      	ldr	r3, [r5, #0]
     ecc:	0c1b      	lsrs	r3, r3, #16
     ece:	eb03 0083 	add.w	r0, r3, r3, lsl #2
     ed2:	0040      	lsls	r0, r0, #1
     ed4:	fba6 3000 	umull	r3, r0, r6, r0
     ed8:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     eda:	6823      	ldr	r3, [r4, #0]
     edc:	ebcc 0303 	rsb	r3, ip, r3
     ee0:	4298      	cmp	r0, r3
     ee2:	d8fa      	bhi.n	eda <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x146>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     ee4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     ee8:	f8ca 3000 	str.w	r3, [sl]
     eec:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     ef0:	f8d7 c000 	ldr.w	ip, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     ef4:	682b      	ldr	r3, [r5, #0]
     ef6:	0c1b      	lsrs	r3, r3, #16
     ef8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
     efc:	0040      	lsls	r0, r0, #1
     efe:	fba6 3000 	umull	r3, r0, r6, r0
     f02:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     f04:	6823      	ldr	r3, [r4, #0]
     f06:	ebcc 0303 	rsb	r3, ip, r3
     f0a:	4298      	cmp	r0, r3
     f0c:	d8fa      	bhi.n	f04 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x170>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     f0e:	f8cb 1000 	str.w	r1, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     f12:	f8d7 c000 	ldr.w	ip, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     f16:	682b      	ldr	r3, [r5, #0]
     f18:	0c1b      	lsrs	r3, r3, #16
     f1a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
     f1e:	0040      	lsls	r0, r0, #1
     f20:	fba6 3000 	umull	r3, r0, r6, r0
     f24:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     f26:	6823      	ldr	r3, [r4, #0]
     f28:	ebcc 0303 	rsb	r3, ip, r3
     f2c:	4298      	cmp	r0, r3
     f2e:	d8fa      	bhi.n	f26 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x192>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     f30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     f34:	f8ca 3000 	str.w	r3, [sl]
     f38:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     f3c:	f8d7 c000 	ldr.w	ip, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     f40:	682b      	ldr	r3, [r5, #0]
     f42:	0c1b      	lsrs	r3, r3, #16
     f44:	eb03 0083 	add.w	r0, r3, r3, lsl #2
     f48:	0040      	lsls	r0, r0, #1
     f4a:	fba6 3000 	umull	r3, r0, r6, r0
     f4e:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     f50:	6823      	ldr	r3, [r4, #0]
     f52:	ebcc 0303 	rsb	r3, ip, r3
     f56:	4298      	cmp	r0, r3
     f58:	d8fa      	bhi.n	f50 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1bc>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     f5a:	f8cb 1000 	str.w	r1, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     f5e:	f8d7 c000 	ldr.w	ip, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     f62:	682b      	ldr	r3, [r5, #0]
     f64:	0c1b      	lsrs	r3, r3, #16
     f66:	eb03 0083 	add.w	r0, r3, r3, lsl #2
     f6a:	0040      	lsls	r0, r0, #1
     f6c:	fba6 3000 	umull	r3, r0, r6, r0
     f70:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     f72:	6823      	ldr	r3, [r4, #0]
     f74:	ebcc 0303 	rsb	r3, ip, r3
     f78:	4298      	cmp	r0, r3
     f7a:	d8fa      	bhi.n	f72 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1de>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     f7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     f80:	f8ca 3000 	str.w	r3, [sl]
     f84:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     f88:	f8d7 c000 	ldr.w	ip, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     f8c:	682b      	ldr	r3, [r5, #0]
     f8e:	0c1b      	lsrs	r3, r3, #16
     f90:	eb03 0083 	add.w	r0, r3, r3, lsl #2
     f94:	0040      	lsls	r0, r0, #1
     f96:	fba6 3000 	umull	r3, r0, r6, r0
     f9a:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     f9c:	6823      	ldr	r3, [r4, #0]
     f9e:	ebcc 0303 	rsb	r3, ip, r3
     fa2:	4298      	cmp	r0, r3
     fa4:	d8fa      	bhi.n	f9c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x208>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     fa6:	f8cb 1000 	str.w	r1, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     faa:	f8d7 c000 	ldr.w	ip, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     fae:	682b      	ldr	r3, [r5, #0]
     fb0:	0c1b      	lsrs	r3, r3, #16
     fb2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
     fb6:	0040      	lsls	r0, r0, #1
     fb8:	fba6 3000 	umull	r3, r0, r6, r0
     fbc:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     fbe:	6823      	ldr	r3, [r4, #0]
     fc0:	ebcc 0303 	rsb	r3, ip, r3
     fc4:	4298      	cmp	r0, r3
     fc6:	d8fa      	bhi.n	fbe <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x22a>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
     fc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     fcc:	f8ca 3000 	str.w	r3, [sl]
     fd0:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     fd4:	f8d7 c000 	ldr.w	ip, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     fd8:	682b      	ldr	r3, [r5, #0]
     fda:	0c1b      	lsrs	r3, r3, #16
     fdc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
     fe0:	0040      	lsls	r0, r0, #1
     fe2:	fba6 3000 	umull	r3, r0, r6, r0
     fe6:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     fe8:	6823      	ldr	r3, [r4, #0]
     fea:	ebcc 0303 	rsb	r3, ip, r3
     fee:	4298      	cmp	r0, r3
     ff0:	d8fa      	bhi.n	fe8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x254>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
     ff2:	f8cb 1000 	str.w	r1, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     ff6:	f8d7 c000 	ldr.w	ip, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
     ffa:	682b      	ldr	r3, [r5, #0]
     ffc:	0c1b      	lsrs	r3, r3, #16
     ffe:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1002:	0040      	lsls	r0, r0, #1
    1004:	fba6 3000 	umull	r3, r0, r6, r0
    1008:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    100a:	6823      	ldr	r3, [r4, #0]
    100c:	ebcc 0303 	rsb	r3, ip, r3
    1010:	4298      	cmp	r0, r3
    1012:	d8fa      	bhi.n	100a <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x276>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1014:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1018:	f8ca 3000 	str.w	r3, [sl]
    101c:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1020:	f8d7 c000 	ldr.w	ip, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1024:	682b      	ldr	r3, [r5, #0]
    1026:	0c1b      	lsrs	r3, r3, #16
    1028:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    102c:	0040      	lsls	r0, r0, #1
    102e:	fba6 3000 	umull	r3, r0, r6, r0
    1032:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1034:	6823      	ldr	r3, [r4, #0]
    1036:	ebcc 0303 	rsb	r3, ip, r3
    103a:	4298      	cmp	r0, r3
    103c:	d8fa      	bhi.n	1034 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2a0>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    103e:	f8cb 1000 	str.w	r1, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1042:	f8d7 c000 	ldr.w	ip, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1046:	682b      	ldr	r3, [r5, #0]
    1048:	0c1b      	lsrs	r3, r3, #16
    104a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    104e:	0040      	lsls	r0, r0, #1
    1050:	fba6 3000 	umull	r3, r0, r6, r0
    1054:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1056:	6823      	ldr	r3, [r4, #0]
    1058:	ebcc 0303 	rsb	r3, ip, r3
    105c:	4298      	cmp	r0, r3
    105e:	d8fa      	bhi.n	1056 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2c2>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1060:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1064:	f8ca 3000 	str.w	r3, [sl]
    1068:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    106c:	f8d7 c000 	ldr.w	ip, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1070:	682b      	ldr	r3, [r5, #0]
    1072:	0c1b      	lsrs	r3, r3, #16
    1074:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1078:	0040      	lsls	r0, r0, #1
    107a:	fba6 3000 	umull	r3, r0, r6, r0
    107e:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1080:	6823      	ldr	r3, [r4, #0]
    1082:	ebcc 0303 	rsb	r3, ip, r3
    1086:	4298      	cmp	r0, r3
    1088:	d8fa      	bhi.n	1080 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2ec>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    108a:	f8cb 1000 	str.w	r1, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    108e:	f8d7 c000 	ldr.w	ip, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1092:	682b      	ldr	r3, [r5, #0]
    1094:	0c1b      	lsrs	r3, r3, #16
    1096:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    109a:	0040      	lsls	r0, r0, #1
    109c:	fba6 3000 	umull	r3, r0, r6, r0
    10a0:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    10a2:	6823      	ldr	r3, [r4, #0]
    10a4:	ebcc 0303 	rsb	r3, ip, r3
    10a8:	4298      	cmp	r0, r3
    10aa:	d8fa      	bhi.n	10a2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x30e>
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    10ac:	f01e 0f80 	tst.w	lr, #128	; 0x80
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    10b0:	fa5f fc8e 	uxtb.w	ip, lr
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    10b4:	f040 87c5 	bne.w	2042 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x12ae>
    10b8:	4b14      	ldr	r3, [pc, #80]	; (110c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x378>)
    10ba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    10be:	6018      	str	r0, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    10c0:	f8c8 2000 	str.w	r2, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    10c4:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    10c8:	682b      	ldr	r3, [r5, #0]
    10ca:	0c1b      	lsrs	r3, r3, #16
    10cc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    10d0:	0040      	lsls	r0, r0, #1
    10d2:	fba6 3000 	umull	r3, r0, r6, r0
    10d6:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    10d8:	6823      	ldr	r3, [r4, #0]
    10da:	ebce 0303 	rsb	r3, lr, r3
    10de:	4298      	cmp	r0, r3
    10e0:	d8fa      	bhi.n	10d8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x344>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    10e2:	f8cb 2000 	str.w	r2, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    10e6:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    10ea:	682b      	ldr	r3, [r5, #0]
    10ec:	0c1b      	lsrs	r3, r3, #16
    10ee:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    10f2:	0040      	lsls	r0, r0, #1
    10f4:	fba6 3000 	umull	r3, r0, r6, r0
    10f8:	0a00      	lsrs	r0, r0, #8
    10fa:	e00f      	b.n	111c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x388>
    10fc:	00000085 	.word	0x00000085
    1100:	e0001004 	.word	0xe0001004
    1104:	200003f0 	.word	0x200003f0
    1108:	08972311 	.word	0x08972311
    110c:	42000088 	.word	0x42000088
    1110:	42000084 	.word	0x42000084
    1114:	42004084 	.word	0x42004084
    1118:	42004088 	.word	0x42004088
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    111c:	6823      	ldr	r3, [r4, #0]
    111e:	ebce 0303 	rsb	r3, lr, r3
    1122:	4298      	cmp	r0, r3
    1124:	d8fa      	bhi.n	111c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x388>
    1126:	f01c 0f40 	tst.w	ip, #64	; 0x40
    112a:	f000 8762 	beq.w	1ff2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x125e>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    112e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1132:	f8ca 3000 	str.w	r3, [sl]
    1136:	f8c8 2000 	str.w	r2, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    113a:	f8d4 e000 	ldr.w	lr, [r4]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    113e:	682b      	ldr	r3, [r5, #0]
    1140:	0c1b      	lsrs	r3, r3, #16
    1142:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1146:	0040      	lsls	r0, r0, #1
    1148:	fba6 3000 	umull	r3, r0, r6, r0
    114c:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    114e:	6823      	ldr	r3, [r4, #0]
    1150:	ebce 0303 	rsb	r3, lr, r3
    1154:	4298      	cmp	r0, r3
    1156:	d8fa      	bhi.n	114e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3ba>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1158:	f8cb 2000 	str.w	r2, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    115c:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1160:	682b      	ldr	r3, [r5, #0]
    1162:	0c1b      	lsrs	r3, r3, #16
    1164:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1168:	0040      	lsls	r0, r0, #1
    116a:	fba6 3000 	umull	r3, r0, r6, r0
    116e:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1170:	6823      	ldr	r3, [r4, #0]
    1172:	ebce 0303 	rsb	r3, lr, r3
    1176:	4298      	cmp	r0, r3
    1178:	d8fa      	bhi.n	1170 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3dc>
    117a:	f01c 0f20 	tst.w	ip, #32
    117e:	f000 8710 	beq.w	1fa2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x120e>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1182:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1186:	f8ca 3000 	str.w	r3, [sl]
    118a:	f8c8 2000 	str.w	r2, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    118e:	f8d4 e000 	ldr.w	lr, [r4]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1192:	682b      	ldr	r3, [r5, #0]
    1194:	0c1b      	lsrs	r3, r3, #16
    1196:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    119a:	0040      	lsls	r0, r0, #1
    119c:	fba6 3000 	umull	r3, r0, r6, r0
    11a0:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    11a2:	6823      	ldr	r3, [r4, #0]
    11a4:	ebce 0303 	rsb	r3, lr, r3
    11a8:	4298      	cmp	r0, r3
    11aa:	d8fa      	bhi.n	11a2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x40e>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    11ac:	f8cb 2000 	str.w	r2, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    11b0:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    11b4:	682b      	ldr	r3, [r5, #0]
    11b6:	0c1b      	lsrs	r3, r3, #16
    11b8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    11bc:	0040      	lsls	r0, r0, #1
    11be:	fba6 3000 	umull	r3, r0, r6, r0
    11c2:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    11c4:	6823      	ldr	r3, [r4, #0]
    11c6:	ebce 0303 	rsb	r3, lr, r3
    11ca:	4298      	cmp	r0, r3
    11cc:	d8fa      	bhi.n	11c4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x430>
    11ce:	f01c 0f10 	tst.w	ip, #16
    11d2:	f000 86be 	beq.w	1f52 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x11be>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    11d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    11da:	f8ca 3000 	str.w	r3, [sl]
    11de:	f8c8 2000 	str.w	r2, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    11e2:	f8d4 e000 	ldr.w	lr, [r4]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    11e6:	682b      	ldr	r3, [r5, #0]
    11e8:	0c1b      	lsrs	r3, r3, #16
    11ea:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    11ee:	0040      	lsls	r0, r0, #1
    11f0:	fba6 3000 	umull	r3, r0, r6, r0
    11f4:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    11f6:	6823      	ldr	r3, [r4, #0]
    11f8:	ebce 0303 	rsb	r3, lr, r3
    11fc:	4298      	cmp	r0, r3
    11fe:	d8fa      	bhi.n	11f6 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x462>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1200:	f8cb 2000 	str.w	r2, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1204:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1208:	682b      	ldr	r3, [r5, #0]
    120a:	0c1b      	lsrs	r3, r3, #16
    120c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1210:	0040      	lsls	r0, r0, #1
    1212:	fba6 3000 	umull	r3, r0, r6, r0
    1216:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1218:	6823      	ldr	r3, [r4, #0]
    121a:	ebce 0303 	rsb	r3, lr, r3
    121e:	4298      	cmp	r0, r3
    1220:	d8fa      	bhi.n	1218 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x484>
    1222:	f01c 0f08 	tst.w	ip, #8
    1226:	f000 866c 	beq.w	1f02 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x116e>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    122a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    122e:	f8ca 3000 	str.w	r3, [sl]
    1232:	f8c8 2000 	str.w	r2, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1236:	f8d4 e000 	ldr.w	lr, [r4]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    123a:	682b      	ldr	r3, [r5, #0]
    123c:	0c1b      	lsrs	r3, r3, #16
    123e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1242:	0040      	lsls	r0, r0, #1
    1244:	fba6 3000 	umull	r3, r0, r6, r0
    1248:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    124a:	6823      	ldr	r3, [r4, #0]
    124c:	ebce 0303 	rsb	r3, lr, r3
    1250:	4298      	cmp	r0, r3
    1252:	d8fa      	bhi.n	124a <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x4b6>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1254:	f8cb 2000 	str.w	r2, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1258:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    125c:	682b      	ldr	r3, [r5, #0]
    125e:	0c1b      	lsrs	r3, r3, #16
    1260:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1264:	0040      	lsls	r0, r0, #1
    1266:	fba6 3000 	umull	r3, r0, r6, r0
    126a:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    126c:	6823      	ldr	r3, [r4, #0]
    126e:	ebce 0303 	rsb	r3, lr, r3
    1272:	4298      	cmp	r0, r3
    1274:	d8fa      	bhi.n	126c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x4d8>
    1276:	f01c 0f04 	tst.w	ip, #4
    127a:	f000 861a 	beq.w	1eb2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x111e>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    127e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1282:	f8ca 3000 	str.w	r3, [sl]
    1286:	f8c8 2000 	str.w	r2, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    128a:	f8d4 e000 	ldr.w	lr, [r4]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    128e:	682b      	ldr	r3, [r5, #0]
    1290:	0c1b      	lsrs	r3, r3, #16
    1292:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1296:	0040      	lsls	r0, r0, #1
    1298:	fba6 3000 	umull	r3, r0, r6, r0
    129c:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    129e:	6823      	ldr	r3, [r4, #0]
    12a0:	ebce 0303 	rsb	r3, lr, r3
    12a4:	4298      	cmp	r0, r3
    12a6:	d8fa      	bhi.n	129e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x50a>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    12a8:	f8cb 2000 	str.w	r2, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    12ac:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    12b0:	682b      	ldr	r3, [r5, #0]
    12b2:	0c1b      	lsrs	r3, r3, #16
    12b4:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    12b8:	0040      	lsls	r0, r0, #1
    12ba:	fba6 3000 	umull	r3, r0, r6, r0
    12be:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    12c0:	6823      	ldr	r3, [r4, #0]
    12c2:	ebce 0303 	rsb	r3, lr, r3
    12c6:	4298      	cmp	r0, r3
    12c8:	d8fa      	bhi.n	12c0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x52c>
    12ca:	f01c 0f02 	tst.w	ip, #2
    12ce:	f000 85c8 	beq.w	1e62 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x10ce>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    12d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    12d6:	f8ca 3000 	str.w	r3, [sl]
    12da:	f8c8 2000 	str.w	r2, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    12de:	f8d4 e000 	ldr.w	lr, [r4]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    12e2:	682b      	ldr	r3, [r5, #0]
    12e4:	0c1b      	lsrs	r3, r3, #16
    12e6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    12ea:	0040      	lsls	r0, r0, #1
    12ec:	fba6 3000 	umull	r3, r0, r6, r0
    12f0:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    12f2:	6823      	ldr	r3, [r4, #0]
    12f4:	ebce 0303 	rsb	r3, lr, r3
    12f8:	4298      	cmp	r0, r3
    12fa:	d8fa      	bhi.n	12f2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x55e>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    12fc:	f8cb 2000 	str.w	r2, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1300:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1304:	682b      	ldr	r3, [r5, #0]
    1306:	0c1b      	lsrs	r3, r3, #16
    1308:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    130c:	0040      	lsls	r0, r0, #1
    130e:	fba6 3000 	umull	r3, r0, r6, r0
    1312:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1314:	6823      	ldr	r3, [r4, #0]
    1316:	ebce 0303 	rsb	r3, lr, r3
    131a:	4298      	cmp	r0, r3
    131c:	d8fa      	bhi.n	1314 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x580>
    131e:	f01c 0f01 	tst.w	ip, #1
    1322:	f000 8576 	beq.w	1e12 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x107e>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1326:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    132a:	f8ca 3000 	str.w	r3, [sl]
    132e:	f8c8 2000 	str.w	r2, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1332:	f8d4 e000 	ldr.w	lr, [r4]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1336:	682b      	ldr	r3, [r5, #0]
    1338:	0c1b      	lsrs	r3, r3, #16
    133a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    133e:	0040      	lsls	r0, r0, #1
    1340:	fba6 3000 	umull	r3, r0, r6, r0
    1344:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1346:	6823      	ldr	r3, [r4, #0]
    1348:	ebce 0303 	rsb	r3, lr, r3
    134c:	4298      	cmp	r0, r3
    134e:	d8fa      	bhi.n	1346 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x5b2>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1350:	f8cb 2000 	str.w	r2, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1354:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1358:	682b      	ldr	r3, [r5, #0]
    135a:	0c1b      	lsrs	r3, r3, #16
    135c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1360:	0040      	lsls	r0, r0, #1
    1362:	fba6 3000 	umull	r3, r0, r6, r0
    1366:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1368:	6823      	ldr	r3, [r4, #0]
    136a:	ebce 0303 	rsb	r3, lr, r3
    136e:	4298      	cmp	r0, r3
    1370:	d8fa      	bhi.n	1368 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x5d4>
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    1372:	9b01      	ldr	r3, [sp, #4]
    1374:	9202      	str	r2, [sp, #8]
    1376:	021b      	lsls	r3, r3, #8
		w |= b2;
    1378:	9a00      	ldr	r2, [sp, #0]
    137a:	9103      	str	r1, [sp, #12]
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    137c:	b29b      	uxth	r3, r3
		w |= b2;
    137e:	4313      	orrs	r3, r2
    1380:	b29b      	uxth	r3, r3
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    1382:	0a18      	lsrs	r0, r3, #8
    1384:	9300      	str	r3, [sp, #0]
    1386:	f7ff f9fb 	bl	780 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)>
    138a:	9b00      	ldr	r3, [sp, #0]
    138c:	b2d8      	uxtb	r0, r3
    138e:	f7ff f9f7 	bl	780 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 12000000ul>::writeByte(unsigned char)>

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    1392:	f899 000f 	ldrb.w	r0, [r9, #15]
    1396:	f899 300c 	ldrb.w	r3, [r9, #12]
                d[1] = e[1] - d[1];
    139a:	f899 c010 	ldrb.w	ip, [r9, #16]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    139e:	1ac3      	subs	r3, r0, r3
                d[1] = e[1] - d[1];
    13a0:	f899 000d 	ldrb.w	r0, [r9, #13]
                d[2] = e[2] - d[2];
    13a4:	f899 e011 	ldrb.w	lr, [r9, #17]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
    13a8:	ebc0 0c0c 	rsb	ip, r0, ip
                d[2] = e[2] - d[2];
    13ac:	f899 000e 	ldrb.w	r0, [r9, #14]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    13b0:	f889 300c 	strb.w	r3, [r9, #12]
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
    13b4:	ebc0 0e0e 	rsb	lr, r0, lr

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    13b8:	f8d9 3000 	ldr.w	r3, [r9]
    13bc:	f999 0015 	ldrsb.w	r0, [r9, #21]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
    13c0:	f889 c00d 	strb.w	ip, [r9, #13]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    13c4:	4418      	add	r0, r3
    13c6:	f8d9 3008 	ldr.w	r3, [r9, #8]
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
    13ca:	f889 e00e 	strb.w	lr, [r9, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    13ce:	3b01      	subs	r3, #1
    13d0:	f8c9 0000 	str.w	r0, [r9]
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    13d4:	9a02      	ldr	r2, [sp, #8]
    13d6:	2b00      	cmp	r3, #0
    13d8:	f8c9 3008 	str.w	r3, [r9, #8]
    13dc:	9903      	ldr	r1, [sp, #12]
    13de:	f73f ad17 	bgt.w	e10 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x7c>
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
    13e2:	f8d9 2004 	ldr.w	r2, [r9, #4]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    13e6:	f44f 2780 	mov.w	r7, #262144	; 0x40000
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    13ea:	4bd3      	ldr	r3, [pc, #844]	; (1738 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x9a4>)
    13ec:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    13f0:	2a00      	cmp	r2, #0
    13f2:	f8df a350 	ldr.w	sl, [pc, #848]	; 1744 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x9b0>
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    13f6:	4618      	mov	r0, r3
    13f8:	4ed0      	ldr	r6, [pc, #832]	; (173c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x9a8>)
    13fa:	bfb8      	it	lt
    13fc:	321f      	addlt	r2, #31
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    13fe:	f8df 8348 	ldr.w	r8, [pc, #840]	; 1748 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x9b4>
    1402:	f8df e348 	ldr.w	lr, [pc, #840]	; 174c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x9b8>
    1406:	ea4f 1b62 	mov.w	fp, r2, asr #5

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    140a:	4acd      	ldr	r2, [pc, #820]	; (1740 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x9ac>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    140c:	f8ca 7000 	str.w	r7, [sl]
    1410:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1412:	f8d3 9000 	ldr.w	r9, [r3]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1416:	682c      	ldr	r4, [r5, #0]
    1418:	0c24      	lsrs	r4, r4, #16
    141a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    141e:	0064      	lsls	r4, r4, #1
    1420:	fba2 c404 	umull	ip, r4, r2, r4
    1424:	0a24      	lsrs	r4, r4, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1426:	f8d3 c000 	ldr.w	ip, [r3]
    142a:	ebc9 0c0c 	rsb	ip, r9, ip
    142e:	4564      	cmp	r4, ip
    1430:	d8f9      	bhi.n	1426 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x692>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1432:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1436:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    143a:	682c      	ldr	r4, [r5, #0]
    143c:	0c24      	lsrs	r4, r4, #16
    143e:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1442:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1446:	fba2 4c0c 	umull	r4, ip, r2, ip
    144a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    144e:	681c      	ldr	r4, [r3, #0]
    1450:	ebc9 0404 	rsb	r4, r9, r4
    1454:	45a4      	cmp	ip, r4
    1456:	d8fa      	bhi.n	144e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x6ba>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1458:	f8ca 7000 	str.w	r7, [sl]
    145c:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    145e:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1462:	682c      	ldr	r4, [r5, #0]
    1464:	0c24      	lsrs	r4, r4, #16
    1466:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    146a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    146e:	fba2 4c0c 	umull	r4, ip, r2, ip
    1472:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1476:	681c      	ldr	r4, [r3, #0]
    1478:	ebc9 0404 	rsb	r4, r9, r4
    147c:	45a4      	cmp	ip, r4
    147e:	d8fa      	bhi.n	1476 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x6e2>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1480:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1484:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1488:	682c      	ldr	r4, [r5, #0]
    148a:	0c24      	lsrs	r4, r4, #16
    148c:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1490:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1494:	fba2 4c0c 	umull	r4, ip, r2, ip
    1498:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    149c:	681c      	ldr	r4, [r3, #0]
    149e:	ebc9 0404 	rsb	r4, r9, r4
    14a2:	45a4      	cmp	ip, r4
    14a4:	d8fa      	bhi.n	149c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x708>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    14a6:	f8ca 7000 	str.w	r7, [sl]
    14aa:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    14ac:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    14b0:	682c      	ldr	r4, [r5, #0]
    14b2:	0c24      	lsrs	r4, r4, #16
    14b4:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    14b8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    14bc:	fba2 4c0c 	umull	r4, ip, r2, ip
    14c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    14c4:	681c      	ldr	r4, [r3, #0]
    14c6:	ebc9 0404 	rsb	r4, r9, r4
    14ca:	45a4      	cmp	ip, r4
    14cc:	d8fa      	bhi.n	14c4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x730>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    14ce:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    14d2:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    14d6:	682c      	ldr	r4, [r5, #0]
    14d8:	0c24      	lsrs	r4, r4, #16
    14da:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    14de:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    14e2:	fba2 4c0c 	umull	r4, ip, r2, ip
    14e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    14ea:	681c      	ldr	r4, [r3, #0]
    14ec:	ebc9 0404 	rsb	r4, r9, r4
    14f0:	45a4      	cmp	ip, r4
    14f2:	d8fa      	bhi.n	14ea <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x756>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    14f4:	f8ca 7000 	str.w	r7, [sl]
    14f8:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    14fa:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    14fe:	682c      	ldr	r4, [r5, #0]
    1500:	0c24      	lsrs	r4, r4, #16
    1502:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1506:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    150a:	fba2 4c0c 	umull	r4, ip, r2, ip
    150e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1512:	681c      	ldr	r4, [r3, #0]
    1514:	ebc9 0404 	rsb	r4, r9, r4
    1518:	45a4      	cmp	ip, r4
    151a:	d8fa      	bhi.n	1512 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x77e>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    151c:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1520:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1524:	682c      	ldr	r4, [r5, #0]
    1526:	0c24      	lsrs	r4, r4, #16
    1528:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    152c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1530:	fba2 4c0c 	umull	r4, ip, r2, ip
    1534:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1538:	681c      	ldr	r4, [r3, #0]
    153a:	ebc9 0404 	rsb	r4, r9, r4
    153e:	45a4      	cmp	ip, r4
    1540:	d8fa      	bhi.n	1538 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x7a4>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1542:	f8ca 7000 	str.w	r7, [sl]
    1546:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1548:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    154c:	682c      	ldr	r4, [r5, #0]
    154e:	0c24      	lsrs	r4, r4, #16
    1550:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1554:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1558:	fba2 4c0c 	umull	r4, ip, r2, ip
    155c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1560:	681c      	ldr	r4, [r3, #0]
    1562:	ebc9 0404 	rsb	r4, r9, r4
    1566:	45a4      	cmp	ip, r4
    1568:	d8fa      	bhi.n	1560 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x7cc>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    156a:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    156e:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1572:	682c      	ldr	r4, [r5, #0]
    1574:	0c24      	lsrs	r4, r4, #16
    1576:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    157a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    157e:	fba2 4c0c 	umull	r4, ip, r2, ip
    1582:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1586:	681c      	ldr	r4, [r3, #0]
    1588:	ebc9 0404 	rsb	r4, r9, r4
    158c:	45a4      	cmp	ip, r4
    158e:	d8fa      	bhi.n	1586 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x7f2>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1590:	f8ca 7000 	str.w	r7, [sl]
    1594:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1596:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    159a:	682c      	ldr	r4, [r5, #0]
    159c:	0c24      	lsrs	r4, r4, #16
    159e:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    15a2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    15a6:	fba2 4c0c 	umull	r4, ip, r2, ip
    15aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    15ae:	681c      	ldr	r4, [r3, #0]
    15b0:	ebc9 0404 	rsb	r4, r9, r4
    15b4:	45a4      	cmp	ip, r4
    15b6:	d8fa      	bhi.n	15ae <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x81a>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    15b8:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    15bc:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    15c0:	682c      	ldr	r4, [r5, #0]
    15c2:	0c24      	lsrs	r4, r4, #16
    15c4:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    15c8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    15cc:	fba2 4c0c 	umull	r4, ip, r2, ip
    15d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    15d4:	681c      	ldr	r4, [r3, #0]
    15d6:	ebc9 0404 	rsb	r4, r9, r4
    15da:	45a4      	cmp	ip, r4
    15dc:	d8fa      	bhi.n	15d4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x840>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    15de:	f8ca 7000 	str.w	r7, [sl]
    15e2:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    15e4:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    15e8:	682c      	ldr	r4, [r5, #0]
    15ea:	0c24      	lsrs	r4, r4, #16
    15ec:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    15f0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    15f4:	fba2 4c0c 	umull	r4, ip, r2, ip
    15f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    15fc:	681c      	ldr	r4, [r3, #0]
    15fe:	ebc9 0404 	rsb	r4, r9, r4
    1602:	45a4      	cmp	ip, r4
    1604:	d8fa      	bhi.n	15fc <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x868>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1606:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    160a:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    160e:	682c      	ldr	r4, [r5, #0]
    1610:	0c24      	lsrs	r4, r4, #16
    1612:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1616:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    161a:	fba2 4c0c 	umull	r4, ip, r2, ip
    161e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1622:	681c      	ldr	r4, [r3, #0]
    1624:	ebc9 0404 	rsb	r4, r9, r4
    1628:	45a4      	cmp	ip, r4
    162a:	d8fa      	bhi.n	1622 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x88e>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    162c:	f8ca 7000 	str.w	r7, [sl]
    1630:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1632:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1636:	682c      	ldr	r4, [r5, #0]
    1638:	0c24      	lsrs	r4, r4, #16
    163a:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    163e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1642:	fba2 4c0c 	umull	r4, ip, r2, ip
    1646:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    164a:	681c      	ldr	r4, [r3, #0]
    164c:	ebc9 0404 	rsb	r4, r9, r4
    1650:	45a4      	cmp	ip, r4
    1652:	d8fa      	bhi.n	164a <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x8b6>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1654:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1658:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    165c:	682c      	ldr	r4, [r5, #0]
    165e:	0c24      	lsrs	r4, r4, #16
    1660:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1664:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1668:	fba2 4c0c 	umull	r4, ip, r2, ip
    166c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1670:	681c      	ldr	r4, [r3, #0]
    1672:	ebc9 0404 	rsb	r4, r9, r4
    1676:	45a4      	cmp	ip, r4
    1678:	d8fa      	bhi.n	1670 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x8dc>
    167a:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    167e:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1680:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1684:	682c      	ldr	r4, [r5, #0]
    1686:	0c24      	lsrs	r4, r4, #16
    1688:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    168c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1690:	fba2 4c0c 	umull	r4, ip, r2, ip
    1694:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1698:	681c      	ldr	r4, [r3, #0]
    169a:	ebc9 0404 	rsb	r4, r9, r4
    169e:	45a4      	cmp	ip, r4
    16a0:	d8fa      	bhi.n	1698 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x904>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    16a2:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    16a6:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    16aa:	682c      	ldr	r4, [r5, #0]
    16ac:	0c24      	lsrs	r4, r4, #16
    16ae:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    16b2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    16b6:	fba2 4c0c 	umull	r4, ip, r2, ip
    16ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    16be:	681c      	ldr	r4, [r3, #0]
    16c0:	ebc9 0404 	rsb	r4, r9, r4
    16c4:	45a4      	cmp	ip, r4
    16c6:	d8fa      	bhi.n	16be <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x92a>
    16c8:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    16cc:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    16ce:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    16d2:	682c      	ldr	r4, [r5, #0]
    16d4:	0c24      	lsrs	r4, r4, #16
    16d6:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    16da:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    16de:	fba2 4c0c 	umull	r4, ip, r2, ip
    16e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    16e6:	681c      	ldr	r4, [r3, #0]
    16e8:	ebc9 0404 	rsb	r4, r9, r4
    16ec:	45a4      	cmp	ip, r4
    16ee:	d8fa      	bhi.n	16e6 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x952>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    16f0:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    16f4:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    16f8:	682c      	ldr	r4, [r5, #0]
    16fa:	0c24      	lsrs	r4, r4, #16
    16fc:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1700:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1704:	fba2 4c0c 	umull	r4, ip, r2, ip
    1708:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    170c:	681c      	ldr	r4, [r3, #0]
    170e:	ebc9 0404 	rsb	r4, r9, r4
    1712:	45a4      	cmp	ip, r4
    1714:	d8fa      	bhi.n	170c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x978>
    1716:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    171a:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    171c:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1720:	682c      	ldr	r4, [r5, #0]
    1722:	0c24      	lsrs	r4, r4, #16
    1724:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1728:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    172c:	fba2 4c0c 	umull	r4, ip, r2, ip
    1730:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    1734:	e00c      	b.n	1750 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x9bc>
    1736:	bf00      	nop
    1738:	e0001004 	.word	0xe0001004
    173c:	42004084 	.word	0x42004084
    1740:	08972311 	.word	0x08972311
    1744:	42000084 	.word	0x42000084
    1748:	42004088 	.word	0x42004088
    174c:	42000088 	.word	0x42000088
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1750:	681c      	ldr	r4, [r3, #0]
    1752:	ebc9 0404 	rsb	r4, r9, r4
    1756:	45a4      	cmp	ip, r4
    1758:	d8fa      	bhi.n	1750 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x9bc>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    175a:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    175e:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1762:	682c      	ldr	r4, [r5, #0]
    1764:	0c24      	lsrs	r4, r4, #16
    1766:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    176a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    176e:	fba2 4c0c 	umull	r4, ip, r2, ip
    1772:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1776:	681c      	ldr	r4, [r3, #0]
    1778:	ebc9 0404 	rsb	r4, r9, r4
    177c:	45a4      	cmp	ip, r4
    177e:	d8fa      	bhi.n	1776 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x9e2>
    1780:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1784:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1786:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    178a:	682c      	ldr	r4, [r5, #0]
    178c:	0c24      	lsrs	r4, r4, #16
    178e:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1792:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1796:	fba2 4c0c 	umull	r4, ip, r2, ip
    179a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    179e:	681c      	ldr	r4, [r3, #0]
    17a0:	ebc9 0404 	rsb	r4, r9, r4
    17a4:	45a4      	cmp	ip, r4
    17a6:	d8fa      	bhi.n	179e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xa0a>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    17a8:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    17ac:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    17b0:	682c      	ldr	r4, [r5, #0]
    17b2:	0c24      	lsrs	r4, r4, #16
    17b4:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    17b8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    17bc:	fba2 4c0c 	umull	r4, ip, r2, ip
    17c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    17c4:	681c      	ldr	r4, [r3, #0]
    17c6:	ebc9 0404 	rsb	r4, r9, r4
    17ca:	45a4      	cmp	ip, r4
    17cc:	d8fa      	bhi.n	17c4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xa30>
    17ce:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    17d2:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    17d4:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    17d8:	682c      	ldr	r4, [r5, #0]
    17da:	0c24      	lsrs	r4, r4, #16
    17dc:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    17e0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    17e4:	fba2 4c0c 	umull	r4, ip, r2, ip
    17e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    17ec:	681c      	ldr	r4, [r3, #0]
    17ee:	ebc9 0404 	rsb	r4, r9, r4
    17f2:	45a4      	cmp	ip, r4
    17f4:	d8fa      	bhi.n	17ec <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xa58>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    17f6:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    17fa:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    17fe:	682c      	ldr	r4, [r5, #0]
    1800:	0c24      	lsrs	r4, r4, #16
    1802:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1806:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    180a:	fba2 4c0c 	umull	r4, ip, r2, ip
    180e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1812:	681c      	ldr	r4, [r3, #0]
    1814:	ebc9 0404 	rsb	r4, r9, r4
    1818:	45a4      	cmp	ip, r4
    181a:	d8fa      	bhi.n	1812 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xa7e>
    181c:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1820:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1822:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1826:	682c      	ldr	r4, [r5, #0]
    1828:	0c24      	lsrs	r4, r4, #16
    182a:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    182e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1832:	fba2 4c0c 	umull	r4, ip, r2, ip
    1836:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    183a:	681c      	ldr	r4, [r3, #0]
    183c:	ebc9 0404 	rsb	r4, r9, r4
    1840:	45a4      	cmp	ip, r4
    1842:	d8fa      	bhi.n	183a <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xaa6>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1844:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1848:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    184c:	682c      	ldr	r4, [r5, #0]
    184e:	0c24      	lsrs	r4, r4, #16
    1850:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1854:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1858:	fba2 4c0c 	umull	r4, ip, r2, ip
    185c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1860:	681c      	ldr	r4, [r3, #0]
    1862:	ebc9 0404 	rsb	r4, r9, r4
    1866:	45a4      	cmp	ip, r4
    1868:	d8fa      	bhi.n	1860 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xacc>
    186a:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    186e:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1870:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1874:	682c      	ldr	r4, [r5, #0]
    1876:	0c24      	lsrs	r4, r4, #16
    1878:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    187c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1880:	fba2 4c0c 	umull	r4, ip, r2, ip
    1884:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1888:	681c      	ldr	r4, [r3, #0]
    188a:	ebc9 0404 	rsb	r4, r9, r4
    188e:	45a4      	cmp	ip, r4
    1890:	d8fa      	bhi.n	1888 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xaf4>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1892:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1896:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    189a:	682c      	ldr	r4, [r5, #0]
    189c:	0c24      	lsrs	r4, r4, #16
    189e:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    18a2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    18a6:	fba2 4c0c 	umull	r4, ip, r2, ip
    18aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    18ae:	681c      	ldr	r4, [r3, #0]
    18b0:	ebc9 0404 	rsb	r4, r9, r4
    18b4:	45a4      	cmp	ip, r4
    18b6:	d8fa      	bhi.n	18ae <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xb1a>
    18b8:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    18bc:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    18be:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    18c2:	682c      	ldr	r4, [r5, #0]
    18c4:	0c24      	lsrs	r4, r4, #16
    18c6:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    18ca:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    18ce:	fba2 4c0c 	umull	r4, ip, r2, ip
    18d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    18d6:	681c      	ldr	r4, [r3, #0]
    18d8:	ebc9 0404 	rsb	r4, r9, r4
    18dc:	45a4      	cmp	ip, r4
    18de:	d8fa      	bhi.n	18d6 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xb42>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    18e0:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    18e4:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    18e8:	682c      	ldr	r4, [r5, #0]
    18ea:	0c24      	lsrs	r4, r4, #16
    18ec:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    18f0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    18f4:	fba2 4c0c 	umull	r4, ip, r2, ip
    18f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    18fc:	681c      	ldr	r4, [r3, #0]
    18fe:	ebc9 0404 	rsb	r4, r9, r4
    1902:	45a4      	cmp	ip, r4
    1904:	d8fa      	bhi.n	18fc <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xb68>
    1906:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    190a:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    190c:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1910:	682c      	ldr	r4, [r5, #0]
    1912:	0c24      	lsrs	r4, r4, #16
    1914:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1918:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    191c:	fba2 4c0c 	umull	r4, ip, r2, ip
    1920:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1924:	681c      	ldr	r4, [r3, #0]
    1926:	ebc9 0404 	rsb	r4, r9, r4
    192a:	45a4      	cmp	ip, r4
    192c:	d8fa      	bhi.n	1924 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xb90>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    192e:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1932:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1936:	682c      	ldr	r4, [r5, #0]
    1938:	0c24      	lsrs	r4, r4, #16
    193a:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    193e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1942:	fba2 4c0c 	umull	r4, ip, r2, ip
    1946:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    194a:	681c      	ldr	r4, [r3, #0]
    194c:	ebc9 0404 	rsb	r4, r9, r4
    1950:	45a4      	cmp	ip, r4
    1952:	d8fa      	bhi.n	194a <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xbb6>
    1954:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1958:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    195a:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    195e:	682c      	ldr	r4, [r5, #0]
    1960:	0c24      	lsrs	r4, r4, #16
    1962:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1966:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    196a:	fba2 4c0c 	umull	r4, ip, r2, ip
    196e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1972:	681c      	ldr	r4, [r3, #0]
    1974:	ebc9 0404 	rsb	r4, r9, r4
    1978:	45a4      	cmp	ip, r4
    197a:	d8fa      	bhi.n	1972 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xbde>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    197c:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1980:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1984:	682c      	ldr	r4, [r5, #0]
    1986:	0c24      	lsrs	r4, r4, #16
    1988:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    198c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1990:	fba2 4c0c 	umull	r4, ip, r2, ip
    1994:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1998:	681c      	ldr	r4, [r3, #0]
    199a:	ebc9 0404 	rsb	r4, r9, r4
    199e:	45a4      	cmp	ip, r4
    19a0:	d8fa      	bhi.n	1998 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xc04>
    19a2:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    19a6:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    19a8:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    19ac:	682c      	ldr	r4, [r5, #0]
    19ae:	0c24      	lsrs	r4, r4, #16
    19b0:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    19b4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    19b8:	fba2 4c0c 	umull	r4, ip, r2, ip
    19bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    19c0:	681c      	ldr	r4, [r3, #0]
    19c2:	ebc9 0404 	rsb	r4, r9, r4
    19c6:	45a4      	cmp	ip, r4
    19c8:	d8fa      	bhi.n	19c0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xc2c>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    19ca:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    19ce:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    19d2:	682c      	ldr	r4, [r5, #0]
    19d4:	0c24      	lsrs	r4, r4, #16
    19d6:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    19da:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    19de:	fba2 4c0c 	umull	r4, ip, r2, ip
    19e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    19e6:	681c      	ldr	r4, [r3, #0]
    19e8:	ebc9 0404 	rsb	r4, r9, r4
    19ec:	45a4      	cmp	ip, r4
    19ee:	d8fa      	bhi.n	19e6 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xc52>
    19f0:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    19f4:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    19f6:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    19fa:	682c      	ldr	r4, [r5, #0]
    19fc:	0c24      	lsrs	r4, r4, #16
    19fe:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1a02:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1a06:	fba2 4c0c 	umull	r4, ip, r2, ip
    1a0a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1a0e:	681c      	ldr	r4, [r3, #0]
    1a10:	ebc9 0404 	rsb	r4, r9, r4
    1a14:	45a4      	cmp	ip, r4
    1a16:	d8fa      	bhi.n	1a0e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xc7a>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1a18:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1a1c:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1a20:	682c      	ldr	r4, [r5, #0]
    1a22:	0c24      	lsrs	r4, r4, #16
    1a24:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1a28:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1a2c:	fba2 4c0c 	umull	r4, ip, r2, ip
    1a30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1a34:	681c      	ldr	r4, [r3, #0]
    1a36:	ebc9 0404 	rsb	r4, r9, r4
    1a3a:	45a4      	cmp	ip, r4
    1a3c:	d8fa      	bhi.n	1a34 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xca0>
    1a3e:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1a42:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1a44:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1a48:	682c      	ldr	r4, [r5, #0]
    1a4a:	0c24      	lsrs	r4, r4, #16
    1a4c:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1a50:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1a54:	fba2 4c0c 	umull	r4, ip, r2, ip
    1a58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1a5c:	681c      	ldr	r4, [r3, #0]
    1a5e:	ebc9 0404 	rsb	r4, r9, r4
    1a62:	45a4      	cmp	ip, r4
    1a64:	d8fa      	bhi.n	1a5c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xcc8>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1a66:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1a6a:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1a6e:	682c      	ldr	r4, [r5, #0]
    1a70:	0c24      	lsrs	r4, r4, #16
    1a72:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1a76:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1a7a:	fba2 4c0c 	umull	r4, ip, r2, ip
    1a7e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1a82:	681c      	ldr	r4, [r3, #0]
    1a84:	ebc9 0404 	rsb	r4, r9, r4
    1a88:	45a4      	cmp	ip, r4
    1a8a:	d8fa      	bhi.n	1a82 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xcee>
    1a8c:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1a90:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1a92:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1a96:	682c      	ldr	r4, [r5, #0]
    1a98:	0c24      	lsrs	r4, r4, #16
    1a9a:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1a9e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1aa2:	fba2 4c0c 	umull	r4, ip, r2, ip
    1aa6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1aaa:	681c      	ldr	r4, [r3, #0]
    1aac:	ebc9 0404 	rsb	r4, r9, r4
    1ab0:	45a4      	cmp	ip, r4
    1ab2:	d8fa      	bhi.n	1aaa <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xd16>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1ab4:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1ab8:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1abc:	682c      	ldr	r4, [r5, #0]
    1abe:	0c24      	lsrs	r4, r4, #16
    1ac0:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1ac4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1ac8:	fba2 4c0c 	umull	r4, ip, r2, ip
    1acc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1ad0:	681c      	ldr	r4, [r3, #0]
    1ad2:	ebc9 0404 	rsb	r4, r9, r4
    1ad6:	45a4      	cmp	ip, r4
    1ad8:	d8fa      	bhi.n	1ad0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xd3c>
    1ada:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1ade:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1ae0:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1ae4:	682c      	ldr	r4, [r5, #0]
    1ae6:	0c24      	lsrs	r4, r4, #16
    1ae8:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1aec:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1af0:	fba2 4c0c 	umull	r4, ip, r2, ip
    1af4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1af8:	681c      	ldr	r4, [r3, #0]
    1afa:	ebc9 0404 	rsb	r4, r9, r4
    1afe:	45a4      	cmp	ip, r4
    1b00:	d8fa      	bhi.n	1af8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xd64>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1b02:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1b06:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1b0a:	682c      	ldr	r4, [r5, #0]
    1b0c:	0c24      	lsrs	r4, r4, #16
    1b0e:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1b12:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1b16:	fba2 4c0c 	umull	r4, ip, r2, ip
    1b1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1b1e:	681c      	ldr	r4, [r3, #0]
    1b20:	ebc9 0404 	rsb	r4, r9, r4
    1b24:	45a4      	cmp	ip, r4
    1b26:	d8fa      	bhi.n	1b1e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xd8a>
    1b28:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1b2c:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1b2e:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1b32:	682c      	ldr	r4, [r5, #0]
    1b34:	0c24      	lsrs	r4, r4, #16
    1b36:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1b3a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1b3e:	fba2 4c0c 	umull	r4, ip, r2, ip
    1b42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1b46:	681c      	ldr	r4, [r3, #0]
    1b48:	ebc9 0404 	rsb	r4, r9, r4
    1b4c:	45a4      	cmp	ip, r4
    1b4e:	d8fa      	bhi.n	1b46 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xdb2>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1b50:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1b54:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1b58:	682c      	ldr	r4, [r5, #0]
    1b5a:	0c24      	lsrs	r4, r4, #16
    1b5c:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1b60:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1b64:	fba2 4c0c 	umull	r4, ip, r2, ip
    1b68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1b6c:	681c      	ldr	r4, [r3, #0]
    1b6e:	ebc9 0404 	rsb	r4, r9, r4
    1b72:	45a4      	cmp	ip, r4
    1b74:	d8fa      	bhi.n	1b6c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xdd8>
    1b76:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1b7a:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1b7c:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1b80:	682c      	ldr	r4, [r5, #0]
    1b82:	0c24      	lsrs	r4, r4, #16
    1b84:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1b88:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1b8c:	fba2 4c0c 	umull	r4, ip, r2, ip
    1b90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1b94:	681c      	ldr	r4, [r3, #0]
    1b96:	ebc9 0404 	rsb	r4, r9, r4
    1b9a:	45a4      	cmp	ip, r4
    1b9c:	d8fa      	bhi.n	1b94 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe00>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1b9e:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1ba2:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1ba6:	682c      	ldr	r4, [r5, #0]
    1ba8:	0c24      	lsrs	r4, r4, #16
    1baa:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1bae:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1bb2:	fba2 4c0c 	umull	r4, ip, r2, ip
    1bb6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1bba:	681c      	ldr	r4, [r3, #0]
    1bbc:	ebc9 0404 	rsb	r4, r9, r4
    1bc0:	45a4      	cmp	ip, r4
    1bc2:	d8fa      	bhi.n	1bba <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe26>
    1bc4:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1bc8:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1bca:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1bce:	682c      	ldr	r4, [r5, #0]
    1bd0:	0c24      	lsrs	r4, r4, #16
    1bd2:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1bd6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1bda:	fba2 4c0c 	umull	r4, ip, r2, ip
    1bde:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1be2:	681c      	ldr	r4, [r3, #0]
    1be4:	ebc9 0404 	rsb	r4, r9, r4
    1be8:	45a4      	cmp	ip, r4
    1bea:	d8fa      	bhi.n	1be2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe4e>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1bec:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1bf0:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1bf4:	682c      	ldr	r4, [r5, #0]
    1bf6:	0c24      	lsrs	r4, r4, #16
    1bf8:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1bfc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1c00:	fba2 4c0c 	umull	r4, ip, r2, ip
    1c04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1c08:	681c      	ldr	r4, [r3, #0]
    1c0a:	ebc9 0404 	rsb	r4, r9, r4
    1c0e:	45a4      	cmp	ip, r4
    1c10:	d8fa      	bhi.n	1c08 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe74>
    1c12:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1c16:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1c18:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1c1c:	682c      	ldr	r4, [r5, #0]
    1c1e:	0c24      	lsrs	r4, r4, #16
    1c20:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1c24:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1c28:	fba2 4c0c 	umull	r4, ip, r2, ip
    1c2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1c30:	681c      	ldr	r4, [r3, #0]
    1c32:	ebc9 0404 	rsb	r4, r9, r4
    1c36:	45a4      	cmp	ip, r4
    1c38:	d8fa      	bhi.n	1c30 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe9c>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1c3a:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1c3e:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1c42:	682c      	ldr	r4, [r5, #0]
    1c44:	0c24      	lsrs	r4, r4, #16
    1c46:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1c4a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1c4e:	fba2 4c0c 	umull	r4, ip, r2, ip
    1c52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1c56:	681c      	ldr	r4, [r3, #0]
    1c58:	ebc9 0404 	rsb	r4, r9, r4
    1c5c:	45a4      	cmp	ip, r4
    1c5e:	d8fa      	bhi.n	1c56 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xec2>
    1c60:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1c64:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1c66:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1c6a:	682c      	ldr	r4, [r5, #0]
    1c6c:	0c24      	lsrs	r4, r4, #16
    1c6e:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1c72:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1c76:	fba2 4c0c 	umull	r4, ip, r2, ip
    1c7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1c7e:	681c      	ldr	r4, [r3, #0]
    1c80:	ebc9 0404 	rsb	r4, r9, r4
    1c84:	45a4      	cmp	ip, r4
    1c86:	d8fa      	bhi.n	1c7e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xeea>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1c88:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1c8c:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1c90:	682c      	ldr	r4, [r5, #0]
    1c92:	0c24      	lsrs	r4, r4, #16
    1c94:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1c98:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1c9c:	fba2 4c0c 	umull	r4, ip, r2, ip
    1ca0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1ca4:	681c      	ldr	r4, [r3, #0]
    1ca6:	ebc9 0404 	rsb	r4, r9, r4
    1caa:	45a4      	cmp	ip, r4
    1cac:	d8fa      	bhi.n	1ca4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xf10>
    1cae:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1cb2:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1cb4:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1cb8:	682c      	ldr	r4, [r5, #0]
    1cba:	0c24      	lsrs	r4, r4, #16
    1cbc:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1cc0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1cc4:	fba2 4c0c 	umull	r4, ip, r2, ip
    1cc8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1ccc:	681c      	ldr	r4, [r3, #0]
    1cce:	ebc9 0404 	rsb	r4, r9, r4
    1cd2:	45a4      	cmp	ip, r4
    1cd4:	d8fa      	bhi.n	1ccc <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xf38>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1cd6:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1cda:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1cde:	682c      	ldr	r4, [r5, #0]
    1ce0:	0c24      	lsrs	r4, r4, #16
    1ce2:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1ce6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1cea:	fba2 4c0c 	umull	r4, ip, r2, ip
    1cee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1cf2:	681c      	ldr	r4, [r3, #0]
    1cf4:	ebc9 0404 	rsb	r4, r9, r4
    1cf8:	45a4      	cmp	ip, r4
    1cfa:	d8fa      	bhi.n	1cf2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xf5e>
    1cfc:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1d00:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1d02:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1d06:	682c      	ldr	r4, [r5, #0]
    1d08:	0c24      	lsrs	r4, r4, #16
    1d0a:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1d0e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1d12:	fba2 4c0c 	umull	r4, ip, r2, ip
    1d16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1d1a:	681c      	ldr	r4, [r3, #0]
    1d1c:	ebc9 0404 	rsb	r4, r9, r4
    1d20:	45a4      	cmp	ip, r4
    1d22:	d8fa      	bhi.n	1d1a <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xf86>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1d24:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1d28:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1d2c:	682c      	ldr	r4, [r5, #0]
    1d2e:	0c24      	lsrs	r4, r4, #16
    1d30:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1d34:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1d38:	fba2 4c0c 	umull	r4, ip, r2, ip
    1d3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1d40:	681c      	ldr	r4, [r3, #0]
    1d42:	ebc9 0404 	rsb	r4, r9, r4
    1d46:	45a4      	cmp	ip, r4
    1d48:	d8fa      	bhi.n	1d40 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xfac>
    1d4a:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1d4e:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1d50:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1d54:	682c      	ldr	r4, [r5, #0]
    1d56:	0c24      	lsrs	r4, r4, #16
    1d58:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1d5c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1d60:	fba2 4c0c 	umull	r4, ip, r2, ip
    1d64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1d68:	681c      	ldr	r4, [r3, #0]
    1d6a:	ebc9 0404 	rsb	r4, r9, r4
    1d6e:	45a4      	cmp	ip, r4
    1d70:	d8fa      	bhi.n	1d68 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xfd4>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1d72:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1d76:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1d7a:	682c      	ldr	r4, [r5, #0]
    1d7c:	0c24      	lsrs	r4, r4, #16
    1d7e:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1d82:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1d86:	fba2 4c0c 	umull	r4, ip, r2, ip
    1d8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1d8e:	681c      	ldr	r4, [r3, #0]
    1d90:	ebc9 0404 	rsb	r4, r9, r4
    1d94:	45a4      	cmp	ip, r4
    1d96:	d8fa      	bhi.n	1d8e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xffa>
    1d98:	f8ce 7000 	str.w	r7, [lr]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1d9c:	6031      	str	r1, [r6, #0]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1d9e:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1da2:	682c      	ldr	r4, [r5, #0]
    1da4:	0c24      	lsrs	r4, r4, #16
    1da6:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1daa:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1dae:	fba2 4c0c 	umull	r4, ip, r2, ip
    1db2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1db6:	681c      	ldr	r4, [r3, #0]
    1db8:	ebc9 0404 	rsb	r4, r9, r4
    1dbc:	45a4      	cmp	ip, r4
    1dbe:	d8fa      	bhi.n	1db6 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1022>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1dc0:	f8c8 1000 	str.w	r1, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1dc4:	f8d0 9000 	ldr.w	r9, [r0]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1dc8:	682c      	ldr	r4, [r5, #0]
    1dca:	0c24      	lsrs	r4, r4, #16
    1dcc:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
    1dd0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    1dd4:	fba2 4c0c 	umull	r4, ip, r2, ip
    1dd8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1ddc:	681c      	ldr	r4, [r3, #0]
    1dde:	ebc9 0404 	rsb	r4, r9, r4
    1de2:	45a4      	cmp	ip, r4
    1de4:	d8fa      	bhi.n	1ddc <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1048>
    1de6:	f11b 3bff 	adds.w	fp, fp, #4294967295
    1dea:	f4bf ab0f 	bcs.w	140c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x678>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
    1dee:	9b07      	ldr	r3, [sp, #28]
    1df0:	6998      	ldr	r0, [r3, #24]
    1df2:	b158      	cbz	r0, 1e0c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1078>
    1df4:	6803      	ldr	r3, [r0, #0]
    1df6:	4aac      	ldr	r2, [pc, #688]	; (20a8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1314>)
    1df8:	685b      	ldr	r3, [r3, #4]
    1dfa:	4293      	cmp	r3, r2
    1dfc:	f040 8149 	bne.w	2092 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x12fe>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    1e00:	6842      	ldr	r2, [r0, #4]
    1e02:	68c1      	ldr	r1, [r0, #12]
    1e04:	6813      	ldr	r3, [r2, #0]
    1e06:	ea23 0301 	bic.w	r3, r3, r1
    1e0a:	6013      	str	r3, [r2, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
    1e0c:	b009      	add	sp, #36	; 0x24
    1e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e12:	4ba6      	ldr	r3, [pc, #664]	; (20ac <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1318>)
    1e14:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1e18:	6018      	str	r0, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1e1a:	f8c8 2000 	str.w	r2, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1e1e:	f8d4 e000 	ldr.w	lr, [r4]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1e22:	682b      	ldr	r3, [r5, #0]
    1e24:	0c1b      	lsrs	r3, r3, #16
    1e26:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1e2a:	0040      	lsls	r0, r0, #1
    1e2c:	fba6 3000 	umull	r3, r0, r6, r0
    1e30:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1e32:	6823      	ldr	r3, [r4, #0]
    1e34:	ebce 0303 	rsb	r3, lr, r3
    1e38:	4298      	cmp	r0, r3
    1e3a:	d8fa      	bhi.n	1e32 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x109e>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1e3c:	f8cb 2000 	str.w	r2, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1e40:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1e44:	682b      	ldr	r3, [r5, #0]
    1e46:	0c1b      	lsrs	r3, r3, #16
    1e48:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1e4c:	0040      	lsls	r0, r0, #1
    1e4e:	fba6 3000 	umull	r3, r0, r6, r0
    1e52:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1e54:	6823      	ldr	r3, [r4, #0]
    1e56:	ebce 0303 	rsb	r3, lr, r3
    1e5a:	4298      	cmp	r0, r3
    1e5c:	d8fa      	bhi.n	1e54 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x10c0>
    1e5e:	f7ff ba88 	b.w	1372 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x5de>
    1e62:	4b92      	ldr	r3, [pc, #584]	; (20ac <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1318>)
    1e64:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1e68:	6018      	str	r0, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1e6a:	f8c8 2000 	str.w	r2, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1e6e:	f8d4 e000 	ldr.w	lr, [r4]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1e72:	682b      	ldr	r3, [r5, #0]
    1e74:	0c1b      	lsrs	r3, r3, #16
    1e76:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1e7a:	0040      	lsls	r0, r0, #1
    1e7c:	fba6 3000 	umull	r3, r0, r6, r0
    1e80:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1e82:	6823      	ldr	r3, [r4, #0]
    1e84:	ebce 0303 	rsb	r3, lr, r3
    1e88:	4298      	cmp	r0, r3
    1e8a:	d8fa      	bhi.n	1e82 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x10ee>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1e8c:	f8cb 2000 	str.w	r2, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1e90:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1e94:	682b      	ldr	r3, [r5, #0]
    1e96:	0c1b      	lsrs	r3, r3, #16
    1e98:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1e9c:	0040      	lsls	r0, r0, #1
    1e9e:	fba6 3000 	umull	r3, r0, r6, r0
    1ea2:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1ea4:	6823      	ldr	r3, [r4, #0]
    1ea6:	ebce 0303 	rsb	r3, lr, r3
    1eaa:	4298      	cmp	r0, r3
    1eac:	d8fa      	bhi.n	1ea4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1110>
    1eae:	f7ff ba36 	b.w	131e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x58a>
    1eb2:	4b7e      	ldr	r3, [pc, #504]	; (20ac <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1318>)
    1eb4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1eb8:	6018      	str	r0, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1eba:	f8c8 2000 	str.w	r2, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1ebe:	f8d4 e000 	ldr.w	lr, [r4]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1ec2:	682b      	ldr	r3, [r5, #0]
    1ec4:	0c1b      	lsrs	r3, r3, #16
    1ec6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1eca:	0040      	lsls	r0, r0, #1
    1ecc:	fba6 3000 	umull	r3, r0, r6, r0
    1ed0:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1ed2:	6823      	ldr	r3, [r4, #0]
    1ed4:	ebce 0303 	rsb	r3, lr, r3
    1ed8:	4298      	cmp	r0, r3
    1eda:	d8fa      	bhi.n	1ed2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x113e>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1edc:	f8cb 2000 	str.w	r2, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1ee0:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1ee4:	682b      	ldr	r3, [r5, #0]
    1ee6:	0c1b      	lsrs	r3, r3, #16
    1ee8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1eec:	0040      	lsls	r0, r0, #1
    1eee:	fba6 3000 	umull	r3, r0, r6, r0
    1ef2:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1ef4:	6823      	ldr	r3, [r4, #0]
    1ef6:	ebce 0303 	rsb	r3, lr, r3
    1efa:	4298      	cmp	r0, r3
    1efc:	d8fa      	bhi.n	1ef4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1160>
    1efe:	f7ff b9e4 	b.w	12ca <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x536>
    1f02:	4b6a      	ldr	r3, [pc, #424]	; (20ac <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1318>)
    1f04:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1f08:	6018      	str	r0, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1f0a:	f8c8 2000 	str.w	r2, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1f0e:	f8d4 e000 	ldr.w	lr, [r4]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1f12:	682b      	ldr	r3, [r5, #0]
    1f14:	0c1b      	lsrs	r3, r3, #16
    1f16:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1f1a:	0040      	lsls	r0, r0, #1
    1f1c:	fba6 3000 	umull	r3, r0, r6, r0
    1f20:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1f22:	6823      	ldr	r3, [r4, #0]
    1f24:	ebce 0303 	rsb	r3, lr, r3
    1f28:	4298      	cmp	r0, r3
    1f2a:	d8fa      	bhi.n	1f22 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x118e>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1f2c:	f8cb 2000 	str.w	r2, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1f30:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1f34:	682b      	ldr	r3, [r5, #0]
    1f36:	0c1b      	lsrs	r3, r3, #16
    1f38:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1f3c:	0040      	lsls	r0, r0, #1
    1f3e:	fba6 3000 	umull	r3, r0, r6, r0
    1f42:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1f44:	6823      	ldr	r3, [r4, #0]
    1f46:	ebce 0303 	rsb	r3, lr, r3
    1f4a:	4298      	cmp	r0, r3
    1f4c:	d8fa      	bhi.n	1f44 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x11b0>
    1f4e:	f7ff b992 	b.w	1276 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x4e2>
    1f52:	4b56      	ldr	r3, [pc, #344]	; (20ac <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1318>)
    1f54:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1f58:	6018      	str	r0, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1f5a:	f8c8 2000 	str.w	r2, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1f5e:	f8d4 e000 	ldr.w	lr, [r4]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1f62:	682b      	ldr	r3, [r5, #0]
    1f64:	0c1b      	lsrs	r3, r3, #16
    1f66:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1f6a:	0040      	lsls	r0, r0, #1
    1f6c:	fba6 3000 	umull	r3, r0, r6, r0
    1f70:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1f72:	6823      	ldr	r3, [r4, #0]
    1f74:	ebce 0303 	rsb	r3, lr, r3
    1f78:	4298      	cmp	r0, r3
    1f7a:	d8fa      	bhi.n	1f72 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x11de>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1f7c:	f8cb 2000 	str.w	r2, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1f80:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1f84:	682b      	ldr	r3, [r5, #0]
    1f86:	0c1b      	lsrs	r3, r3, #16
    1f88:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1f8c:	0040      	lsls	r0, r0, #1
    1f8e:	fba6 3000 	umull	r3, r0, r6, r0
    1f92:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1f94:	6823      	ldr	r3, [r4, #0]
    1f96:	ebce 0303 	rsb	r3, lr, r3
    1f9a:	4298      	cmp	r0, r3
    1f9c:	d8fa      	bhi.n	1f94 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1200>
    1f9e:	f7ff b940 	b.w	1222 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x48e>
    1fa2:	4b42      	ldr	r3, [pc, #264]	; (20ac <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1318>)
    1fa4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1fa8:	6018      	str	r0, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1faa:	f8c8 2000 	str.w	r2, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1fae:	f8d4 e000 	ldr.w	lr, [r4]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1fb2:	682b      	ldr	r3, [r5, #0]
    1fb4:	0c1b      	lsrs	r3, r3, #16
    1fb6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1fba:	0040      	lsls	r0, r0, #1
    1fbc:	fba6 3000 	umull	r3, r0, r6, r0
    1fc0:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1fc2:	6823      	ldr	r3, [r4, #0]
    1fc4:	ebce 0303 	rsb	r3, lr, r3
    1fc8:	4298      	cmp	r0, r3
    1fca:	d8fa      	bhi.n	1fc2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x122e>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    1fcc:	f8cb 2000 	str.w	r2, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1fd0:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    1fd4:	682b      	ldr	r3, [r5, #0]
    1fd6:	0c1b      	lsrs	r3, r3, #16
    1fd8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1fdc:	0040      	lsls	r0, r0, #1
    1fde:	fba6 3000 	umull	r3, r0, r6, r0
    1fe2:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1fe4:	6823      	ldr	r3, [r4, #0]
    1fe6:	ebce 0303 	rsb	r3, lr, r3
    1fea:	4298      	cmp	r0, r3
    1fec:	d8fa      	bhi.n	1fe4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1250>
    1fee:	f7ff b8ee 	b.w	11ce <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x43a>
    1ff2:	4b2e      	ldr	r3, [pc, #184]	; (20ac <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1318>)
    1ff4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    1ff8:	6018      	str	r0, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    1ffa:	f8c8 2000 	str.w	r2, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    1ffe:	f8d4 e000 	ldr.w	lr, [r4]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    2002:	682b      	ldr	r3, [r5, #0]
    2004:	0c1b      	lsrs	r3, r3, #16
    2006:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    200a:	0040      	lsls	r0, r0, #1
    200c:	fba6 3000 	umull	r3, r0, r6, r0
    2010:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2012:	6823      	ldr	r3, [r4, #0]
    2014:	ebce 0303 	rsb	r3, lr, r3
    2018:	4298      	cmp	r0, r3
    201a:	d8fa      	bhi.n	2012 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x127e>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    201c:	f8cb 2000 	str.w	r2, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2020:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    2024:	682b      	ldr	r3, [r5, #0]
    2026:	0c1b      	lsrs	r3, r3, #16
    2028:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    202c:	0040      	lsls	r0, r0, #1
    202e:	fba6 3000 	umull	r3, r0, r6, r0
    2032:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2034:	6823      	ldr	r3, [r4, #0]
    2036:	ebce 0303 	rsb	r3, lr, r3
    203a:	4298      	cmp	r0, r3
    203c:	d8fa      	bhi.n	2034 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x12a0>
    203e:	f7ff b89c 	b.w	117a <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3e6>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _GPIO_DR_SET::r() = _MASK; }
    2042:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    2046:	f8ca 3000 	str.w	r3, [sl]
    204a:	f8c8 2000 	str.w	r2, [r8]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    204e:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    2052:	682b      	ldr	r3, [r5, #0]
    2054:	0c1b      	lsrs	r3, r3, #16
    2056:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    205a:	0040      	lsls	r0, r0, #1
    205c:	fba6 3000 	umull	r3, r0, r6, r0
    2060:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2062:	6823      	ldr	r3, [r4, #0]
    2064:	ebce 0303 	rsb	r3, lr, r3
    2068:	4298      	cmp	r0, r3
    206a:	d8fa      	bhi.n	2062 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x12ce>
	inline static void lo() __attribute__ ((always_inline)) { _GPIO_DR_CLEAR::r() = _MASK; }
    206c:	f8cb 2000 	str.w	r2, [fp]
}

static inline void delayNanoseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayNanoseconds(uint32_t nsec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2070:	f8d7 e000 	ldr.w	lr, [r7]
	uint32_t cycles =   ((F_CPU_ACTUAL>>16) * nsec) / (1000000000UL>>16);
    2074:	682b      	ldr	r3, [r5, #0]
    2076:	0c1b      	lsrs	r3, r3, #16
    2078:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    207c:	0040      	lsls	r0, r0, #1
    207e:	fba6 3000 	umull	r3, r0, r6, r0
    2082:	0a00      	lsrs	r0, r0, #8
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2084:	6823      	ldr	r3, [r4, #0]
    2086:	ebce 0303 	rsb	r3, lr, r3
    208a:	4298      	cmp	r0, r3
    208c:	d8fa      	bhi.n	2084 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x12f0>
    208e:	f7ff b84a 	b.w	1126 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x392>
    2092:	b009      	add	sp, #36	; 0x24
    2094:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2098:	4718      	bx	r3
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    209a:	4798      	blx	r3
    209c:	f7fe be8c 	b.w	db8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    20a0:	4d03      	ldr	r5, [pc, #12]	; (20b0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x131c>)
    20a2:	f7ff b99e 	b.w	13e2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 12000000ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x64e>
    20a6:	bf00      	nop
    20a8:	00000091 	.word	0x00000091
    20ac:	42000088 	.word	0x42000088
    20b0:	200003f0 	.word	0x200003f0

000020b4 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    20b4:	4804      	ldr	r0, [pc, #16]	; (20c8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x14>)
    20b6:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    20b8:	4411      	add	r1, r2
    20ba:	e001      	b.n	20c0 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xc>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    20bc:	4299      	cmp	r1, r3
    20be:	d302      	bcc.n	20c6 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>
    20c0:	6803      	ldr	r3, [r0, #0]
    20c2:	429a      	cmp	r2, r3
    20c4:	d9fa      	bls.n	20bc <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x8>
    20c6:	4770      	bx	lr
    20c8:	200006d4 	.word	0x200006d4

000020cc <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    20cc:	b410      	push	{r4}
    20ce:	4a0c      	ldr	r2, [pc, #48]	; (2100 <VisualMicroDebug::outPacketStart(bool)+0x34>)
    20d0:	4604      	mov	r4, r0
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS) //&& (VM_DEBUGGER_TYPE != VM_DEBUGGER_TYPE_NET_UDP)
	if (!noWait)
    20d2:	b971      	cbnz	r1, 20f2 <VisualMicroDebug::outPacketStart(bool)+0x26>
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    20d4:	6841      	ldr	r1, [r0, #4]
    20d6:	6813      	ldr	r3, [r2, #0]
    20d8:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    20da:	2931      	cmp	r1, #49	; 0x31
    20dc:	d809      	bhi.n	20f2 <VisualMicroDebug::outPacketStart(bool)+0x26>
    20de:	6810      	ldr	r0, [r2, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    20e0:	f100 0332 	add.w	r3, r0, #50	; 0x32
    20e4:	1a59      	subs	r1, r3, r1
    20e6:	e001      	b.n	20ec <VisualMicroDebug::outPacketStart(bool)+0x20>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    20e8:	4299      	cmp	r1, r3
    20ea:	d302      	bcc.n	20f2 <VisualMicroDebug::outPacketStart(bool)+0x26>
    20ec:	6813      	ldr	r3, [r2, #0]
    20ee:	4298      	cmp	r0, r3
    20f0:	d9fa      	bls.n	20e8 <VisualMicroDebug::outPacketStart(bool)+0x1c>
    20f2:	6813      	ldr	r3, [r2, #0]
	transport->beginPacket();
#endif
#endif

	return true;
}
    20f4:	2001      	movs	r0, #1
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    20f6:	6063      	str	r3, [r4, #4]
	transport->beginPacket();
#endif
#endif

	return true;
}
    20f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    20fc:	4770      	bx	lr
    20fe:	bf00      	nop
    2100:	200006d4 	.word	0x200006d4

00002104 <VisualMicroDebug::outPacketEnd()>:
    2104:	4770      	bx	lr
    2106:	bf00      	nop

00002108 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    2108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    210c:	f000 bc86 	b.w	2a1c <delay>

00002110 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    2110:	2300      	movs	r3, #0
    2112:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    2114:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    2116:	b141      	cbz	r1, 212a <VisualMicroDebug::init(unsigned long)+0x1a>
    2118:	4804      	ldr	r0, [pc, #16]	; (212c <VisualMicroDebug::init(unsigned long)+0x1c>)
    211a:	6802      	ldr	r2, [r0, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    211c:	4411      	add	r1, r2
    211e:	e001      	b.n	2124 <VisualMicroDebug::init(unsigned long)+0x14>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    2120:	4299      	cmp	r1, r3
    2122:	d302      	bcc.n	212a <VisualMicroDebug::init(unsigned long)+0x1a>
    2124:	6803      	ldr	r3, [r0, #0]
    2126:	429a      	cmp	r2, r3
    2128:	d9fa      	bls.n	2120 <VisualMicroDebug::init(unsigned long)+0x10>
    212a:	4770      	bx	lr
    212c:	200006d4 	.word	0x200006d4

00002130 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
}
#endif


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    2130:	b538      	push	{r3, r4, r5, lr}
    2132:	4c0f      	ldr	r4, [pc, #60]	; (2170 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x40>)
    2134:	460d      	mov	r5, r1
    2136:	2106      	movs	r1, #6
    2138:	6823      	ldr	r3, [r4, #0]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    213a:	6043      	str	r3, [r0, #4]
    213c:	480d      	ldr	r0, [pc, #52]	; (2174 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x44>)
    213e:	f001 fd85 	bl	3c4c <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2142:	220a      	movs	r2, #10
    2144:	2300      	movs	r3, #0
    2146:	4629      	mov	r1, r5
    2148:	480b      	ldr	r0, [pc, #44]	; (2178 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
    214a:	f001 ff0d 	bl	3f68 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    214e:	2106      	movs	r1, #6
    2150:	480a      	ldr	r0, [pc, #40]	; (217c <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>)
    2152:	f001 fd7b 	bl	3c4c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2156:	4808      	ldr	r0, [pc, #32]	; (2178 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x48>)
    2158:	f001 fef6 	bl	3f48 <Print::println()>
    215c:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    215e:	f102 0132 	add.w	r1, r2, #50	; 0x32
    2162:	e001      	b.n	2168 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x38>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    2164:	4299      	cmp	r1, r3
    2166:	d302      	bcc.n	216e <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
    2168:	6823      	ldr	r3, [r4, #0]
    216a:	429a      	cmp	r2, r3
    216c:	d9fa      	bls.n	2164 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x34>
    216e:	bd38      	pop	{r3, r4, r5, pc}
    2170:	200006d4 	.word	0x200006d4
    2174:	20000050 	.word	0x20000050
    2178:	20000420 	.word	0x20000420
    217c:	20000058 	.word	0x20000058

00002180 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    2180:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    2182:	7e03      	ldrb	r3, [r0, #24]
    2184:	b90b      	cbnz	r3, 218a <VisualMicroDebug::breakWait(unsigned char)+0xa>
		case 'h':
			//Serial.println("Remote debug session started");
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_UDP)
			alwaysBreak = true;
#endif
			return 'c';
    2186:	2063      	movs	r0, #99	; 0x63
	//sendContinuedACK(breakPointId);
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?
	return 'e';
}
    2188:	bd38      	pop	{r3, r4, r5, pc}
    218a:	460d      	mov	r5, r1
    218c:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    218e:	f001 fcf7 	bl	3b80 <usb_serial_available>
#endif

	uint8_t b;

	//break/pause until we get a command
	if (available() == 0)
    2192:	f010 0fff 	tst.w	r0, #255	; 0xff
    2196:	d101      	bne.n	219c <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		if (!UDPConnectionStarted) {
			return 'c';
		}
#endif

		return 'e';
    2198:	2065      	movs	r0, #101	; 0x65
    219a:	bd38      	pop	{r3, r4, r5, pc}
    219c:	f001 fcf0 	bl	3b80 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    21a0:	f010 0fff 	tst.w	r0, #255	; 0xff
    21a4:	d0f8      	beq.n	2198 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    21a6:	f001 fd2b 	bl	3c00 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    21aa:	b2c0      	uxtb	r0, r0
    21ac:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    21b0:	2b1e      	cmp	r3, #30
    21b2:	d8f3      	bhi.n	219c <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    21b4:	a201      	add	r2, pc, #4	; (adr r2, 21bc <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    21b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    21ba:	bf00      	nop
    21bc:	00002245 	.word	0x00002245
    21c0:	0000219d 	.word	0x0000219d
    21c4:	0000219d 	.word	0x0000219d
    21c8:	0000219d 	.word	0x0000219d
    21cc:	0000219d 	.word	0x0000219d
    21d0:	0000219d 	.word	0x0000219d
    21d4:	0000219d 	.word	0x0000219d
    21d8:	0000219d 	.word	0x0000219d
    21dc:	0000219d 	.word	0x0000219d
    21e0:	0000219d 	.word	0x0000219d
    21e4:	0000219d 	.word	0x0000219d
    21e8:	00002239 	.word	0x00002239
    21ec:	0000219d 	.word	0x0000219d
    21f0:	0000219d 	.word	0x0000219d
    21f4:	0000219d 	.word	0x0000219d
    21f8:	0000219d 	.word	0x0000219d
    21fc:	00002187 	.word	0x00002187
    2200:	0000219d 	.word	0x0000219d
    2204:	0000219d 	.word	0x0000219d
    2208:	0000219d 	.word	0x0000219d
    220c:	0000219d 	.word	0x0000219d
    2210:	0000219d 	.word	0x0000219d
    2214:	0000219d 	.word	0x0000219d
    2218:	0000219d 	.word	0x0000219d
    221c:	0000219d 	.word	0x0000219d
    2220:	00002187 	.word	0x00002187
    2224:	0000219d 	.word	0x0000219d
    2228:	0000219d 	.word	0x0000219d
    222c:	0000219d 	.word	0x0000219d
    2230:	0000219d 	.word	0x0000219d
    2234:	00002189 	.word	0x00002189
		{

		case 'c':
			sendContinuedACK(breakPointId);
    2238:	4620      	mov	r0, r4
    223a:	4629      	mov	r1, r5
    223c:	f7ff ff78 	bl	2130 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    2240:	2063      	movs	r0, #99	; 0x63
    2242:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    2244:	2300      	movs	r3, #0
			return 'c';
    2246:	2063      	movs	r0, #99	; 0x63
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    2248:	7623      	strb	r3, [r4, #24]
    224a:	bd38      	pop	{r3, r4, r5, pc}

0000224c <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    224c:	b570      	push	{r4, r5, r6, lr}
    224e:	4605      	mov	r5, r0
    2250:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    2252:	b1a9      	cbz	r1, 2280 <VisualMicroDebug::start(bool, bool)+0x34>
	{
		alwaysBreak = true;
    2254:	2301      	movs	r3, #1
    2256:	4c0b      	ldr	r4, [pc, #44]	; (2284 <VisualMicroDebug::start(bool, bool)+0x38>)
    2258:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    225a:	2100      	movs	r1, #0
    225c:	4628      	mov	r0, r5
    225e:	f7ff ff8f 	bl	2180 <VisualMicroDebug::breakWait(unsigned char)>
    2262:	2863      	cmp	r0, #99	; 0x63
    2264:	d00c      	beq.n	2280 <VisualMicroDebug::start(bool, bool)+0x34>
    2266:	6822      	ldr	r2, [r4, #0]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    2268:	1c51      	adds	r1, r2, #1
    226a:	6823      	ldr	r3, [r4, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    226c:	429a      	cmp	r2, r3
    226e:	d8f4      	bhi.n	225a <VisualMicroDebug::start(bool, bool)+0xe>
    2270:	4299      	cmp	r1, r3
    2272:	d2fa      	bcs.n	226a <VisualMicroDebug::start(bool, bool)+0x1e>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    2274:	2100      	movs	r1, #0
    2276:	4628      	mov	r0, r5
    2278:	f7ff ff82 	bl	2180 <VisualMicroDebug::breakWait(unsigned char)>
    227c:	2863      	cmp	r0, #99	; 0x63
    227e:	d1f2      	bne.n	2266 <VisualMicroDebug::start(bool, bool)+0x1a>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    2280:	762e      	strb	r6, [r5, #24]
    2282:	bd70      	pop	{r4, r5, r6, pc}
    2284:	200006d4 	.word	0x200006d4

00002288 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    2288:	4b03      	ldr	r3, [pc, #12]	; (2298 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    228a:	2200      	movs	r2, #0
    228c:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    228e:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    2290:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    2292:	615a      	str	r2, [r3, #20]
    2294:	4770      	bx	lr
    2296:	bf00      	nop
    2298:	2000065c 	.word	0x2000065c

0000229c <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    229c:	b321      	cbz	r1, 22e8 <fade_raw(CRGB*, unsigned short, unsigned char)+0x4c>
    229e:	43d2      	mvns	r2, r2
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    22a0:	b430      	push	{r4, r5}
    22a2:	1e4d      	subs	r5, r1, #1
    22a4:	b2d2      	uxtb	r2, r2
    22a6:	1c44      	adds	r4, r0, #1
    22a8:	b2ad      	uxth	r5, r5
    22aa:	3201      	adds	r2, #1
    22ac:	3501      	adds	r5, #1
    22ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    22b2:	4405      	add	r5, r0
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    22b4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    22b8:	3003      	adds	r0, #3
    22ba:	3403      	adds	r4, #3
    22bc:	fb02 f303 	mul.w	r3, r2, r3
    22c0:	121b      	asrs	r3, r3, #8
    22c2:	f804 3c04 	strb.w	r3, [r4, #-4]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    22c6:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    22ca:	f810 3c01 	ldrb.w	r3, [r0, #-1]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    22ce:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    22d2:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    22d6:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    22d8:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    22da:	f800 1c02 	strb.w	r1, [r0, #-2]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    22de:	f800 3c01 	strb.w	r3, [r0, #-1]
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    22e2:	4285      	cmp	r5, r0
    22e4:	d1e6      	bne.n	22b4 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    22e6:	bc30      	pop	{r4, r5}
    22e8:	4770      	bx	lr
    22ea:	bf00      	nop

000022ec <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    22ec:	f7ff bfd6 	b.w	229c <fade_raw(CRGB*, unsigned short, unsigned char)>

000022f0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    22f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    22f2:	1e1e      	subs	r6, r3, #0
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    22f4:	4604      	mov	r4, r0
    22f6:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    22f8:	dd0f      	ble.n	231a <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
    22fa:	eb02 0542 	add.w	r5, r2, r2, lsl #1
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    22fe:	6823      	ldr	r3, [r4, #0]
    2300:	4620      	mov	r0, r4
    2302:	689b      	ldr	r3, [r3, #8]
    2304:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    2306:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    2308:	6823      	ldr	r3, [r4, #0]
    230a:	6062      	str	r2, [r4, #4]
    230c:	4a0c      	ldr	r2, [pc, #48]	; (2340 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    230e:	695b      	ldr	r3, [r3, #20]
        m_nLeds = nLeds;
    2310:	6166      	str	r6, [r4, #20]
    2312:	4293      	cmp	r3, r2
    2314:	d104      	bne.n	2320 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x30>
	return *pLed;
}
    2316:	4620      	mov	r0, r4
    2318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    231a:	4616      	mov	r6, r2
    231c:	2500      	movs	r5, #0
    231e:	e7ee      	b.n	22fe <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0xe>

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    2320:	4620      	mov	r0, r4
    2322:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    2324:	2800      	cmp	r0, #0
    2326:	d0f6      	beq.n	2316 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x26>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    2328:	4b06      	ldr	r3, [pc, #24]	; (2344 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    232a:	4a07      	ldr	r2, [pc, #28]	; (2348 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x58>)
    232c:	fb93 f0f0 	sdiv	r0, r3, r0
    2330:	6853      	ldr	r3, [r2, #4]
    2332:	4298      	cmp	r0, r3
    2334:	bf38      	it	cc
    2336:	4618      	movcc	r0, r3
    2338:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    233a:	4620      	mov	r0, r4
    233c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    233e:	bf00      	nop
    2340:	00000081 	.word	0x00000081
    2344:	000f4240 	.word	0x000f4240
    2348:	200006a4 	.word	0x200006a4

0000234c <CFastLED::show(unsigned char)>:

void CFastLED::show(uint8_t scale) {
    234c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2350:	6843      	ldr	r3, [r0, #4]
    2352:	b083      	sub	sp, #12
    2354:	4606      	mov	r6, r0
    2356:	460f      	mov	r7, r1
    2358:	4c34      	ldr	r4, [pc, #208]	; (242c <CFastLED::show(unsigned char)+0xe0>)
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    235a:	2b00      	cmp	r3, #0
    235c:	d15d      	bne.n	241a <CFastLED::show(unsigned char)+0xce>
	lastshow = micros();
    235e:	f000 fbc3 	bl	2ae8 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    2362:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    2364:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    2366:	b11b      	cbz	r3, 2370 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    2368:	4638      	mov	r0, r7
    236a:	68b1      	ldr	r1, [r6, #8]
    236c:	4798      	blx	r3
    236e:	4607      	mov	r7, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    2370:	4b2f      	ldr	r3, [pc, #188]	; (2430 <CFastLED::show(unsigned char)+0xe4>)
    2372:	681c      	ldr	r4, [r3, #0]
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    2374:	2c00      	cmp	r4, #0
    2376:	d037      	beq.n	23e8 <CFastLED::show(unsigned char)+0x9c>

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    2378:	2500      	movs	r5, #0
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    237a:	8873      	ldrh	r3, [r6, #2]
    237c:	f894 8012 	ldrb.w	r8, [r4, #18]
    2380:	2b63      	cmp	r3, #99	; 0x63
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    2382:	6823      	ldr	r3, [r4, #0]
    2384:	6861      	ldr	r1, [r4, #4]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    2386:	bf98      	it	ls
    2388:	74a5      	strbls	r5, [r4, #18]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    238a:	f88d 5004 	strb.w	r5, [sp, #4]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    238e:	f8d3 9004 	ldr.w	r9, [r3, #4]
    2392:	f88d 5005 	strb.w	r5, [sp, #5]
    2396:	f88d 5006 	strb.w	r5, [sp, #6]
    239a:	6962      	ldr	r2, [r4, #20]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    239c:	b1e7      	cbz	r7, 23d8 <CFastLED::show(unsigned char)+0x8c>
    239e:	f104 000b 	add.w	r0, r4, #11
    23a2:	f10d 0e04 	add.w	lr, sp, #4
    23a6:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    23aa:	f810 af01 	ldrb.w	sl, [r0, #1]!
                      uint8_t ct = colorTemperature.raw[i];
    23ae:	f890 b003 	ldrb.w	fp, [r0, #3]
                      if(cc > 0 && ct > 0) {
    23b2:	f1ba 0f00 	cmp.w	sl, #0
    23b6:	d00b      	beq.n	23d0 <CFastLED::show(unsigned char)+0x84>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    23b8:	f10b 0301 	add.w	r3, fp, #1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    23bc:	f1bb 0f00 	cmp.w	fp, #0
    23c0:	d006      	beq.n	23d0 <CFastLED::show(unsigned char)+0x84>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    23c2:	fb0a 3303 	mla	r3, sl, r3, r3
    23c6:	fb07 f303 	mul.w	r3, r7, r3
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    23ca:	0c1b      	lsrs	r3, r3, #16
    23cc:	f88e 3000 	strb.w	r3, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    23d0:	4584      	cmp	ip, r0
    23d2:	f10e 0e01 	add.w	lr, lr, #1
    23d6:	d1e8      	bne.n	23aa <CFastLED::show(unsigned char)+0x5e>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    23d8:	4620      	mov	r0, r4
    23da:	ab01      	add	r3, sp, #4
    23dc:	47c8      	blx	r9

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    23de:	f884 8012 	strb.w	r8, [r4, #18]
    23e2:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    23e4:	2c00      	cmp	r4, #0
    23e6:	d1c8      	bne.n	237a <CFastLED::show(unsigned char)+0x2e>

void CFastLED::countFPS(int nFrames) {
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    23e8:	4912      	ldr	r1, [pc, #72]	; (2434 <CFastLED::show(unsigned char)+0xe8>)
    23ea:	6808      	ldr	r0, [r1, #0]
    23ec:	1c43      	adds	r3, r0, #1
    23ee:	2818      	cmp	r0, #24
    23f0:	600b      	str	r3, [r1, #0]
    23f2:	dd0f      	ble.n	2414 <CFastLED::show(unsigned char)+0xc8>
    23f4:	4d10      	ldr	r5, [pc, #64]	; (2438 <CFastLED::show(unsigned char)+0xec>)
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    23f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
    23fa:	4c10      	ldr	r4, [pc, #64]	; (243c <CFastLED::show(unsigned char)+0xf0>)
		m_nFPS = (br * 1000) / now;
    br = 0;
    23fc:	2700      	movs	r7, #0
    23fe:	6828      	ldr	r0, [r5, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    2400:	fb02 f203 	mul.w	r2, r2, r3
    2404:	6823      	ldr	r3, [r4, #0]
    2406:	682d      	ldr	r5, [r5, #0]
    2408:	1ac3      	subs	r3, r0, r3
    br = 0;
    240a:	600f      	str	r7, [r1, #0]
    lastframe = millis();
    240c:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    240e:	fbb2 f3f3 	udiv	r3, r2, r3
    2412:	8073      	strh	r3, [r6, #2]
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
}
    2414:	b003      	add	sp, #12
    2416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    241a:	f000 fb65 	bl	2ae8 <micros>
    241e:	6822      	ldr	r2, [r4, #0]
    2420:	6873      	ldr	r3, [r6, #4]
    2422:	1a80      	subs	r0, r0, r2
    2424:	4298      	cmp	r0, r3
    2426:	d398      	bcc.n	235a <CFastLED::show(unsigned char)+0xe>
    2428:	e799      	b.n	235e <CFastLED::show(unsigned char)+0x12>
    242a:	bf00      	nop
    242c:	200006bc 	.word	0x200006bc
    2430:	200006b4 	.word	0x200006b4
    2434:	200006b8 	.word	0x200006b8
    2438:	200006d4 	.word	0x200006d4
    243c:	200006c0 	.word	0x200006c0

00002440 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    2440:	4b04      	ldr	r3, [pc, #16]	; (2454 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    2442:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    2444:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    2446:	f04f 31ff 	mov.w	r1, #4294967295

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    244a:	805a      	strh	r2, [r3, #2]
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    244c:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    244e:	6099      	str	r1, [r3, #8]
CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
	m_pPowerFunc = NULL;
    2450:	60da      	str	r2, [r3, #12]
    2452:	4770      	bx	lr
    2454:	200006a4 	.word	0x200006a4

00002458 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    2458:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    245a:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    245c:	7846      	ldrb	r6, [r0, #1]
    245e:	00e3      	lsls	r3, r4, #3
    uint8_t val = hsv.val;
    2460:	7882      	ldrb	r2, [r0, #2]
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    2462:	0625      	lsls	r5, r4, #24
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    2464:	f003 00f8 	and.w	r0, r3, #248	; 0xf8
    2468:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    246c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    2470:	4403      	add	r3, r0
    2472:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2476:	d45f      	bmi.n	2538 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    2478:	f004 0540 	and.w	r5, r4, #64	; 0x40
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    247c:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    2480:	f005 07ff 	and.w	r7, r5, #255	; 0xff
    2484:	2d00      	cmp	r5, #0
    2486:	d146      	bne.n	2516 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    2488:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    248c:	2c00      	cmp	r4, #0
    248e:	d06c      	beq.n	256a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    2490:	3355      	adds	r3, #85	; 0x55
    2492:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    2494:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    2496:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    2498:	2eff      	cmp	r6, #255	; 0xff
    249a:	d01c      	beq.n	24d6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    249c:	2e00      	cmp	r6, #0
    249e:	d079      	beq.n	2594 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    24a0:	b11c      	cbz	r4, 24aa <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    24a2:	fb06 4404 	mla	r4, r6, r4, r4
    24a6:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    24aa:	b11d      	cbz	r5, 24b4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    24ac:	fb06 5505 	mla	r5, r6, r5, r5
    24b0:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    24b4:	b11b      	cbz	r3, 24be <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    24b6:	fb06 3303 	mla	r3, r6, r3, r3
    24ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    24be:	43f0      	mvns	r0, r6
    24c0:	b2c0      	uxtb	r0, r0
    24c2:	fb00 0000 	mla	r0, r0, r0, r0
    24c6:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    24ca:	4404      	add	r4, r0
            g += brightness_floor;
    24cc:	4405      	add	r5, r0
            b += brightness_floor;
    24ce:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    24d0:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    24d2:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    24d4:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    24d6:	2aff      	cmp	r2, #255	; 0xff
    24d8:	d018      	beq.n	250c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    24da:	fb12 f002 	smulbb	r0, r2, r2
    24de:	3200      	adds	r2, #0
    24e0:	bf18      	it	ne
    24e2:	2201      	movne	r2, #1
    24e4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    24e8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    24ec:	d056      	beq.n	259c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    24ee:	b11c      	cbz	r4, 24f8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    24f0:	fb02 4404 	mla	r4, r2, r4, r4
    24f4:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    24f8:	b11d      	cbz	r5, 2502 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    24fa:	fb02 5505 	mla	r5, r2, r5, r5
    24fe:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    2502:	b11b      	cbz	r3, 250c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    2504:	fb02 3303 	mla	r3, r2, r3, r3
    2508:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    250c:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    250e:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    2510:	708b      	strb	r3, [r1, #2]
}
    2512:	bcf0      	pop	{r4, r5, r6, r7}
    2514:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    2516:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    251a:	bb5c      	cbnz	r4, 2574 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    251c:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
                    g = K170 + third;
    2520:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    2522:	eb00 0044 	add.w	r0, r0, r4, lsl #1
                    g = K170 + third;
    2526:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    2528:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    252c:	1204      	asrs	r4, r0, #8
    252e:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
    2532:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    2534:	463b      	mov	r3, r7
    2536:	e7af      	b.n	2498 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    2538:	f004 0740 	and.w	r7, r4, #64	; 0x40
    253c:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    2540:	b9e7      	cbnz	r7, 257c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    2542:	f004 0720 	and.w	r7, r4, #32
    2546:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    254a:	2f00      	cmp	r7, #0
    254c:	d136      	bne.n	25bc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    254e:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    2552:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    2556:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    255a:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    255e:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    2562:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    2564:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    2566:	b2c3      	uxtb	r3, r0
    2568:	e796      	b.n	2498 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    256a:	43dc      	mvns	r4, r3
    256c:	b2e4      	uxtb	r4, r4
                g = third;
    256e:	461d      	mov	r5, r3
                b = 0;
    2570:	4603      	mov	r3, r0
    2572:	e791      	b.n	2498 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    2574:	2400      	movs	r4, #0
                g = K255 - third;
    2576:	43dd      	mvns	r5, r3
    2578:	b2ed      	uxtb	r5, r5
    257a:	e78d      	b.n	2498 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    257c:	f004 0420 	and.w	r4, r4, #32
    2580:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    2584:	b994      	cbnz	r4, 25ac <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    2586:	f103 0455 	add.w	r4, r3, #85	; 0x55
    258a:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    258c:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    2590:	b2db      	uxtb	r3, r3
    2592:	e781      	b.n	2498 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    2594:	23ff      	movs	r3, #255	; 0xff
    2596:	461d      	mov	r5, r3
    2598:	461c      	mov	r4, r3
    259a:	e79c      	b.n	24d6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    259c:	4615      	mov	r5, r2
    259e:	4614      	mov	r4, r2
    25a0:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    25a2:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    25a4:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    25a6:	708b      	strb	r3, [r1, #2]
}
    25a8:	bcf0      	pop	{r4, r5, r6, r7}
    25aa:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    25ac:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
                g = 0;
                FORCE_REFERENCE(g);
    25b0:	2500      	movs	r5, #0
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    25b2:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K85 - third;
    25b4:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    25b8:	b2db      	uxtb	r3, r3
    25ba:	e76d      	b.n	2498 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    25bc:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    25be:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    25c0:	b2c3      	uxtb	r3, r0
    25c2:	e769      	b.n	2498 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

000025c4 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    25c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    25c6:	b349      	cbz	r1, 261c <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x58>
    25c8:	1e4f      	subs	r7, r1, #1
    25ca:	2200      	movs	r2, #0
    25cc:	1cc3      	adds	r3, r0, #3
    25ce:	b2bf      	uxth	r7, r7
    25d0:	4615      	mov	r5, r2
    25d2:	4614      	mov	r4, r2
    25d4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    25d8:	3706      	adds	r7, #6
    25da:	19c6      	adds	r6, r0, r7
        red32   += *p++;
    25dc:	f813 ec03 	ldrb.w	lr, [r3, #-3]
    25e0:	3303      	adds	r3, #3
        green32 += *p++;
    25e2:	f813 7c05 	ldrb.w	r7, [r3, #-5]
        blue32  += *p++;
    25e6:	f813 0c04 	ldrb.w	r0, [r3, #-4]
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    25ea:	42b3      	cmp	r3, r6
        red32   += *p++;
    25ec:	4474      	add	r4, lr
        green32 += *p++;
    25ee:	443d      	add	r5, r7
        blue32  += *p++;
    25f0:	4402      	add	r2, r0
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    25f2:	d1f3      	bne.n	25dc <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x18>
    25f4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    25f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    25fc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    2600:	f3c4 1317 	ubfx	r3, r4, #4, #24
    2604:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    2608:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    260c:	0a12      	lsrs	r2, r2, #8
    260e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    2612:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2616:	1910      	adds	r0, r2, r4
}
    2618:	4408      	add	r0, r1
    261a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    261c:	460c      	mov	r4, r1
    261e:	460a      	mov	r2, r1
    2620:	e7f7      	b.n	2612 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x4e>
    2622:	bf00      	nop

00002624 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    2624:	4b27      	ldr	r3, [pc, #156]	; (26c4 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    2626:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    262a:	681c      	ldr	r4, [r3, #0]
    262c:	b087      	sub	sp, #28
    262e:	4680      	mov	r8, r0
    2630:	460f      	mov	r7, r1
    uint32_t total_mW = gMCU_mW;
    2632:	257d      	movs	r5, #125	; 0x7d

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    2634:	b19c      	cbz	r4, 265e <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    2636:	f8df 9098 	ldr.w	r9, [pc, #152]	; 26d0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xac>
    263a:	e007      	b.n	264c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    263c:	6961      	ldr	r1, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    263e:	4630      	mov	r0, r6
    2640:	b289      	uxth	r1, r1
    2642:	f7ff ffbf 	bl	25c4 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    2646:	68a4      	ldr	r4, [r4, #8]
    2648:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    264a:	b144      	cbz	r4, 265e <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    264c:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    2650:	691b      	ldr	r3, [r3, #16]
    2652:	454b      	cmp	r3, r9
    2654:	d0f2      	beq.n	263c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    2656:	4620      	mov	r0, r4
    2658:	4798      	blx	r3
    265a:	4601      	mov	r1, r0
    265c:	e7ef      	b.n	263e <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    265e:	fb05 f508 	mul.w	r5, r5, r8
    2662:	0a2d      	lsrs	r5, r5, #8
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    2664:	42bd      	cmp	r5, r7
    2666:	d211      	bcs.n	268c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x68>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    2668:	4b17      	ldr	r3, [pc, #92]	; (26c8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
    266a:	781b      	ldrb	r3, [r3, #0]
    266c:	b32b      	cbz	r3, 26ba <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x96>
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    266e:	011b      	lsls	r3, r3, #4
    2670:	4a16      	ldr	r2, [pc, #88]	; (26cc <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>)
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    2672:	4640      	mov	r0, r8
    2674:	18d1      	adds	r1, r2, r3
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    2676:	58d2      	ldr	r2, [r2, r3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    2678:	68cb      	ldr	r3, [r1, #12]
    267a:	9304      	str	r3, [sp, #16]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    267c:	9904      	ldr	r1, [sp, #16]
    267e:	6813      	ldr	r3, [r2, #0]
    2680:	ea23 0301 	bic.w	r3, r3, r1
    2684:	6013      	str	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    2686:	b007      	add	sp, #28
    2688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    268c:	fb07 f708 	mul.w	r7, r7, r8

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    2690:	4b0d      	ldr	r3, [pc, #52]	; (26c8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    2692:	fbb7 f5f5 	udiv	r5, r7, r5

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    2696:	781b      	ldrb	r3, [r3, #0]
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    2698:	fa5f f885 	uxtb.w	r8, r5

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    269c:	b16b      	cbz	r3, 26ba <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x96>
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    269e:	011b      	lsls	r3, r3, #4
    26a0:	4a0a      	ldr	r2, [pc, #40]	; (26cc <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>)
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    26a2:	4640      	mov	r0, r8
    26a4:	18d1      	adds	r1, r2, r3
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    26a6:	58d2      	ldr	r2, [r2, r3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    26a8:	68cb      	ldr	r3, [r1, #12]
    26aa:	9304      	str	r3, [sp, #16]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    26ac:	9904      	ldr	r1, [sp, #16]
    26ae:	6813      	ldr	r3, [r2, #0]
    26b0:	430b      	orrs	r3, r1
    26b2:	6013      	str	r3, [r2, #0]
}
    26b4:	b007      	add	sp, #28
    26b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    26ba:	4640      	mov	r0, r8
}
    26bc:	b007      	add	sp, #28
    26be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    26c2:	bf00      	nop
    26c4:	200006b4 	.word	0x200006b4
    26c8:	200006c8 	.word	0x200006c8
    26cc:	200000c4 	.word	0x200000c4
    26d0:	0000007d 	.word	0x0000007d

000026d4 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    26d4:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    26d6:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    26d8:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    26da:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    26dc:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    26de:	d003      	beq.n	26e8 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    26e0:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    26e4:	f001 bb34 	b.w	3d50 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    26e8:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    26ea:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    26ee:	4718      	bx	r3

000026f0 <analogRead>:
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    26f0:	281c      	cmp	r0, #28
    26f2:	d81b      	bhi.n	272c <analogRead+0x3c>
	if (calibrating) wait_for_cal();
    26f4:	4914      	ldr	r1, [pc, #80]	; (2748 <analogRead+0x58>)
    26f6:	780b      	ldrb	r3, [r1, #0]
    26f8:	b14b      	cbz	r3, 270e <analogRead+0x1e>


static void wait_for_cal(void)
{
	//printf("wait_for_cal\n");
	while (ADC1_GC & ADC_GC_CAL) ;
    26fa:	4a14      	ldr	r2, [pc, #80]	; (274c <analogRead+0x5c>)
    26fc:	6c93      	ldr	r3, [r2, #72]	; 0x48
    26fe:	061b      	lsls	r3, r3, #24
    2700:	d4fc      	bmi.n	26fc <analogRead+0xc>
	while (ADC2_GC & ADC_GC_CAL) ;
    2702:	4a13      	ldr	r2, [pc, #76]	; (2750 <analogRead+0x60>)
    2704:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2706:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    270a:	d1fb      	bne.n	2704 <analogRead+0x14>
	// TODO: check CALF, but what do to about CAL failure?
	calibrating = 0;
    270c:	700b      	strb	r3, [r1, #0]

int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
    270e:	4b11      	ldr	r3, [pc, #68]	; (2754 <analogRead+0x64>)
    2710:	5c1b      	ldrb	r3, [r3, r0]
	if (ch == 255) return 0;
    2712:	2bff      	cmp	r3, #255	; 0xff
    2714:	d00a      	beq.n	272c <analogRead+0x3c>
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
    2716:	061a      	lsls	r2, r3, #24
    2718:	d40a      	bmi.n	2730 <analogRead+0x40>
		ADC1_HC0 = ch;
    271a:	4a0c      	ldr	r2, [pc, #48]	; (274c <analogRead+0x5c>)
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    271c:	4611      	mov	r1, r2
	uint8_t ch = pin_to_channel[pin];
	if (ch == 255) return 0;
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
    271e:	6013      	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
    2720:	6a0b      	ldr	r3, [r1, #32]
    2722:	4a0a      	ldr	r2, [pc, #40]	; (274c <analogRead+0x5c>)
    2724:	07d8      	lsls	r0, r3, #31
    2726:	d5fb      	bpl.n	2720 <analogRead+0x30>
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
    2728:	6a50      	ldr	r0, [r2, #36]	; 0x24
	}
}
    272a:	4770      	bx	lr
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
    272c:	2000      	movs	r0, #0
    272e:	4770      	bx	lr
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    2730:	4a07      	ldr	r2, [pc, #28]	; (2750 <analogRead+0x60>)
    2732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    2736:	4611      	mov	r1, r2
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
    2738:	6013      	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
    273a:	6a0b      	ldr	r3, [r1, #32]
    273c:	4a04      	ldr	r2, [pc, #16]	; (2750 <analogRead+0x60>)
    273e:	07db      	lsls	r3, r3, #31
    2740:	d5fb      	bpl.n	273a <analogRead+0x4a>
		return ADC2_R0;
    2742:	6a50      	ldr	r0, [r2, #36]	; 0x24
	}
}
    2744:	4770      	bx	lr
    2746:	bf00      	nop
    2748:	200006c9 	.word	0x200006c9
    274c:	400c4000 	.word	0x400c4000
    2750:	400c8000 	.word	0x400c8000
    2754:	200000a8 	.word	0x200000a8

00002758 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2758:	4a96      	ldr	r2, [pc, #600]	; (29b4 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    275a:	4b97      	ldr	r3, [pc, #604]	; (29b8 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    275c:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    275e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    2762:	4c96      	ldr	r4, [pc, #600]	; (29bc <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2764:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    2768:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    276a:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    276c:	d91c      	bls.n	27a8 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    276e:	4b94      	ldr	r3, [pc, #592]	; (29c0 <set_arm_clock+0x268>)
    2770:	4298      	cmp	r0, r3
    2772:	f240 8115 	bls.w	29a0 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    2776:	4b93      	ldr	r3, [pc, #588]	; (29c4 <set_arm_clock+0x26c>)
    2778:	f240 6527 	movw	r5, #1575	; 0x627
    277c:	4f92      	ldr	r7, [pc, #584]	; (29c8 <set_arm_clock+0x270>)
    277e:	4403      	add	r3, r0
    2780:	4c92      	ldr	r4, [pc, #584]	; (29cc <set_arm_clock+0x274>)
    2782:	0a1a      	lsrs	r2, r3, #8
    2784:	fba7 3202 	umull	r3, r2, r7, r2
    2788:	09d3      	lsrs	r3, r2, #7
    278a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    278e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2792:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    2796:	42ab      	cmp	r3, r5
    2798:	bf28      	it	cs
    279a:	462b      	movcs	r3, r5
    279c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    27a0:	fba4 3503 	umull	r3, r5, r4, r3
    27a4:	08ed      	lsrs	r5, r5, #3
    27a6:	e004      	b.n	27b2 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    27a8:	4d89      	ldr	r5, [pc, #548]	; (29d0 <set_arm_clock+0x278>)
    27aa:	42a8      	cmp	r0, r5
    27ac:	bf94      	ite	ls
    27ae:	2506      	movls	r5, #6
    27b0:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    27b2:	4a81      	ldr	r2, [pc, #516]	; (29b8 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    27b4:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    27b8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    27bc:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    27be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    27c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    27c6:	d20a      	bcs.n	27de <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    27c8:	4b7c      	ldr	r3, [pc, #496]	; (29bc <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    27ca:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    27ce:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    27d0:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    27d2:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    27d4:	6813      	ldr	r3, [r2, #0]
    27d6:	2b00      	cmp	r3, #0
    27d8:	dafc      	bge.n	27d4 <set_arm_clock+0x7c>
    27da:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    27de:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    27e2:	d131      	bne.n	2848 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    27e4:	4c7b      	ldr	r4, [pc, #492]	; (29d4 <set_arm_clock+0x27c>)
    27e6:	4a7c      	ldr	r2, [pc, #496]	; (29d8 <set_arm_clock+0x280>)
    27e8:	f8d4 c010 	ldr.w	ip, [r4, #16]
    27ec:	4614      	mov	r4, r2
    27ee:	ea0c 0202 	and.w	r2, ip, r2
    27f2:	42a2      	cmp	r2, r4
    27f4:	bf0a      	itet	eq
    27f6:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    27fa:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    27fe:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    2800:	ea8e 0403 	eor.w	r4, lr, r3
    2804:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    2808:	d008      	beq.n	281c <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    280a:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    280e:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    2812:	4c69      	ldr	r4, [pc, #420]	; (29b8 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    2814:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    2818:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    281c:	ea81 0302 	eor.w	r3, r1, r2
    2820:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    2824:	d008      	beq.n	2838 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    2826:	4b64      	ldr	r3, [pc, #400]	; (29b8 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    2828:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    282c:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    282e:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    2830:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    2832:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2834:	071c      	lsls	r4, r3, #28
    2836:	d4fc      	bmi.n	2832 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    2838:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    283c:	4a5e      	ldr	r2, [pc, #376]	; (29b8 <set_arm_clock+0x260>)
    283e:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2842:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2844:	0699      	lsls	r1, r3, #26
    2846:	d4fc      	bmi.n	2842 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    2848:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    284a:	4c64      	ldr	r4, [pc, #400]	; (29dc <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    284c:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    284e:	fb01 f302 	mul.w	r3, r1, r2
    2852:	fb00 f303 	mul.w	r3, r0, r3
    2856:	42a3      	cmp	r3, r4
    2858:	d809      	bhi.n	286e <set_arm_clock+0x116>
		if (div_arm < 8) {
    285a:	2a07      	cmp	r2, #7
    285c:	f200 8095 	bhi.w	298a <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    2860:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    2862:	fb01 f302 	mul.w	r3, r1, r2
    2866:	fb00 f303 	mul.w	r3, r0, r3
    286a:	42a3      	cmp	r3, r4
    286c:	d9f5      	bls.n	285a <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    286e:	485c      	ldr	r0, [pc, #368]	; (29e0 <set_arm_clock+0x288>)
    2870:	4c5c      	ldr	r4, [pc, #368]	; (29e4 <set_arm_clock+0x28c>)
    2872:	4418      	add	r0, r3
    2874:	fba4 0300 	umull	r0, r3, r4, r0
    2878:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    287a:	2b6c      	cmp	r3, #108	; 0x6c
    287c:	f200 808b 	bhi.w	2996 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    2880:	2b35      	cmp	r3, #53	; 0x35
    2882:	f200 808f 	bhi.w	29a4 <set_arm_clock+0x24c>
    2886:	f8df 8188 	ldr.w	r8, [pc, #392]	; 2a10 <set_arm_clock+0x2b8>
    288a:	2336      	movs	r3, #54	; 0x36
    288c:	4856      	ldr	r0, [pc, #344]	; (29e8 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    288e:	f8df c144 	ldr.w	ip, [pc, #324]	; 29d4 <set_arm_clock+0x27c>
    2892:	4c56      	ldr	r4, [pc, #344]	; (29ec <set_arm_clock+0x294>)
    2894:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    2898:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    289c:	ea09 0404 	and.w	r4, r9, r4
    28a0:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    28a2:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    28a6:	d00b      	beq.n	28c0 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    28a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    28ac:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    28b0:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    28b2:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    28b6:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    28ba:	6823      	ldr	r3, [r4, #0]
    28bc:	2b00      	cmp	r3, #0
    28be:	dafc      	bge.n	28ba <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    28c0:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 29b8 <set_arm_clock+0x260>
    28c4:	3a01      	subs	r2, #1
    28c6:	f8dc 3010 	ldr.w	r3, [ip, #16]
    28ca:	f003 0307 	and.w	r3, r3, #7
    28ce:	4293      	cmp	r3, r2
    28d0:	d007      	beq.n	28e2 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    28d2:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    28d6:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    28d8:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    28dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    28de:	03db      	lsls	r3, r3, #15
    28e0:	d4fc      	bmi.n	28dc <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    28e2:	3901      	subs	r1, #1
    28e4:	0289      	lsls	r1, r1, #10
    28e6:	ea8e 0301 	eor.w	r3, lr, r1
    28ea:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    28ee:	d00c      	beq.n	290a <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    28f0:	4b31      	ldr	r3, [pc, #196]	; (29b8 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    28f2:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    28f6:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    28fa:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    28fc:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    2900:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    2904:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2906:	0799      	lsls	r1, r3, #30
    2908:	d4fc      	bmi.n	2904 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    290a:	4b39      	ldr	r3, [pc, #228]	; (29f0 <set_arm_clock+0x298>)
    290c:	4939      	ldr	r1, [pc, #228]	; (29f4 <set_arm_clock+0x29c>)
    290e:	4403      	add	r3, r0
    2910:	09db      	lsrs	r3, r3, #7
    2912:	fba1 3103 	umull	r3, r1, r1, r3
    2916:	0b09      	lsrs	r1, r1, #12
    2918:	2904      	cmp	r1, #4
    291a:	bf28      	it	cs
    291c:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    291e:	1e4b      	subs	r3, r1, #1
    2920:	021b      	lsls	r3, r3, #8
    2922:	ea8e 0203 	eor.w	r2, lr, r3
    2926:	f412 7f40 	tst.w	r2, #768	; 0x300
    292a:	d007      	beq.n	293c <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    292c:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2930:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    2934:	4a20      	ldr	r2, [pc, #128]	; (29b8 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2936:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    293a:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    293c:	4b1e      	ldr	r3, [pc, #120]	; (29b8 <set_arm_clock+0x260>)
    293e:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2940:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    2942:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    2946:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2948:	6c93      	ldr	r3, [r2, #72]	; 0x48
    294a:	069b      	lsls	r3, r3, #26
    294c:	d4fc      	bmi.n	2948 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    294e:	4b2a      	ldr	r3, [pc, #168]	; (29f8 <set_arm_clock+0x2a0>)
    2950:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2954:	4c29      	ldr	r4, [pc, #164]	; (29fc <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2956:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2958:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    295c:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    295e:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2962:	4c27      	ldr	r4, [pc, #156]	; (2a00 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2964:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2968:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    296c:	4a25      	ldr	r2, [pc, #148]	; (2a04 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    296e:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2970:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2972:	d208      	bcs.n	2986 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2974:	4b11      	ldr	r3, [pc, #68]	; (29bc <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2976:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    297a:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    297c:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    297e:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2980:	6813      	ldr	r3, [r2, #0]
    2982:	2b00      	cmp	r3, #0
    2984:	dafc      	bge.n	2980 <set_arm_clock+0x228>
	}

	return frequency;
}
    2986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    298a:	2904      	cmp	r1, #4
    298c:	f63f af6f 	bhi.w	286e <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    2990:	3101      	adds	r1, #1
				div_arm = 1;
    2992:	2201      	movs	r2, #1
    2994:	e75b      	b.n	284e <set_arm_clock+0xf6>
    2996:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2a14 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    299a:	236c      	movs	r3, #108	; 0x6c
    299c:	481a      	ldr	r0, [pc, #104]	; (2a08 <set_arm_clock+0x2b0>)
    299e:	e776      	b.n	288e <set_arm_clock+0x136>
    29a0:	2512      	movs	r5, #18
    29a2:	e706      	b.n	27b2 <set_arm_clock+0x5a>
    29a4:	4819      	ldr	r0, [pc, #100]	; (2a0c <set_arm_clock+0x2b4>)
    29a6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2a18 <set_arm_clock+0x2c0>
    29aa:	fb00 f003 	mul.w	r0, r0, r3
    29ae:	ea43 0808 	orr.w	r8, r3, r8
    29b2:	e76c      	b.n	288e <set_arm_clock+0x136>
    29b4:	1f78a400 	.word	0x1f78a400
    29b8:	400fc000 	.word	0x400fc000
    29bc:	40080000 	.word	0x40080000
    29c0:	23c34600 	.word	0x23c34600
    29c4:	dc3cba00 	.word	0xdc3cba00
    29c8:	004cb223 	.word	0x004cb223
    29cc:	51eb851f 	.word	0x51eb851f
    29d0:	016e3600 	.word	0x016e3600
    29d4:	400d8000 	.word	0x400d8000
    29d8:	80003040 	.word	0x80003040
    29dc:	269fb1ff 	.word	0x269fb1ff
    29e0:	005b8d80 	.word	0x005b8d80
    29e4:	165e9f81 	.word	0x165e9f81
    29e8:	269fb200 	.word	0x269fb200
    29ec:	8001307f 	.word	0x8001307f
    29f0:	08f0d17f 	.word	0x08f0d17f
    29f4:	00e5109f 	.word	0x00e5109f
    29f8:	431bde83 	.word	0x431bde83
    29fc:	200003f0 	.word	0x200003f0
    2a00:	200003ec 	.word	0x200003ec
    2a04:	200006d0 	.word	0x200006d0
    2a08:	4d3f6400 	.word	0x4d3f6400
    2a0c:	00b71b00 	.word	0x00b71b00
    2a10:	80002036 	.word	0x80002036
    2a14:	8000206c 	.word	0x8000206c
    2a18:	80002000 	.word	0x80002000

00002a1c <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    2a1c:	2800      	cmp	r0, #0
    2a1e:	d057      	beq.n	2ad0 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2a20:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    2a22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a26:	b085      	sub	sp, #20
    2a28:	4683      	mov	fp, r0
    2a2a:	4c2a      	ldr	r4, [pc, #168]	; (2ad4 <delay+0xb8>)
    2a2c:	4d2a      	ldr	r5, [pc, #168]	; (2ad8 <delay+0xbc>)
    2a2e:	4e2b      	ldr	r6, [pc, #172]	; (2adc <delay+0xc0>)
    2a30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2a34:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    2a38:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    2a3a:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2a3c:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    2a40:	2900      	cmp	r1, #0
    2a42:	d1f7      	bne.n	2a34 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2a44:	4f26      	ldr	r7, [pc, #152]	; (2ae0 <delay+0xc4>)
    2a46:	e9cd 8902 	strd	r8, r9, [sp, #8]
    2a4a:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    2a4c:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2a4e:	4a25      	ldr	r2, [pc, #148]	; (2ae4 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    2a50:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2a54:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2a56:	6812      	ldr	r2, [r2, #0]
    2a58:	2701      	movs	r7, #1
    2a5a:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    2a5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2a62:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    2a64:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2a66:	428b      	cmp	r3, r1
    2a68:	bf08      	it	eq
    2a6a:	4542      	cmpeq	r2, r8
    2a6c:	bf2c      	ite	cs
    2a6e:	46c2      	movcs	sl, r8
    2a70:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    2a72:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2a76:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    2a7a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    2a7c:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2a7e:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    2a82:	2b00      	cmp	r3, #0
    2a84:	d1f7      	bne.n	2a76 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2a86:	9801      	ldr	r0, [sp, #4]
    2a88:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    2a8a:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2a8c:	4815      	ldr	r0, [pc, #84]	; (2ae4 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2a8e:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2a92:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2a94:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2a98:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    2a9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2aa0:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2aa4:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    2aa6:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2aa8:	4299      	cmp	r1, r3
    2aaa:	bf08      	it	eq
    2aac:	4540      	cmpeq	r0, r8
    2aae:	bf2c      	ite	cs
    2ab0:	4643      	movcs	r3, r8
    2ab2:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2ab4:	441a      	add	r2, r3
    2ab6:	4572      	cmp	r2, lr
    2ab8:	d307      	bcc.n	2aca <delay+0xae>
			if (--msec == 0) return;
    2aba:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    2abe:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    2ac2:	d1d8      	bne.n	2a76 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    2ac4:	b005      	add	sp, #20
    2ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    2aca:	f001 fae9 	bl	40a0 <yield>
	}
    2ace:	e7d2      	b.n	2a76 <delay+0x5a>
    2ad0:	4770      	bx	lr
    2ad2:	bf00      	nop
    2ad4:	20000944 	.word	0x20000944
    2ad8:	200006d4 	.word	0x200006d4
    2adc:	200006cc 	.word	0x200006cc
    2ae0:	e0001004 	.word	0xe0001004
    2ae4:	200006d0 	.word	0x200006d0

00002ae8 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    2ae8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    2aec:	4a12      	ldr	r2, [pc, #72]	; (2b38 <micros+0x50>)
    2aee:	2601      	movs	r6, #1
    2af0:	4d12      	ldr	r5, [pc, #72]	; (2b3c <micros+0x54>)
    2af2:	4c13      	ldr	r4, [pc, #76]	; (2b40 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2af4:	e852 3f00 	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    2af8:	6829      	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    2afa:	6820      	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2afc:	e842 6300 	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    2b00:	2b00      	cmp	r3, #0
    2b02:	d1f7      	bne.n	2af4 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2b04:	4a0f      	ldr	r2, [pc, #60]	; (2b44 <micros+0x5c>)
    2b06:	6816      	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2b08:	4f0f      	ldr	r7, [pc, #60]	; (2b48 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    2b0a:	1a32      	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    2b0c:	f04f 0900 	mov.w	r9, #0
    2b10:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2b14:	683e      	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    2b16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2b1a:	4599      	cmp	r9, r3
    2b1c:	fba2 6706 	umull	r6, r7, r2, r6
    2b20:	bf08      	it	eq
    2b22:	45b8      	cmpeq	r8, r7
    2b24:	463c      	mov	r4, r7
    2b26:	bf2c      	ite	cs
    2b28:	463c      	movcs	r4, r7
    2b2a:	4604      	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    2b2c:	fb00 4001 	mla	r0, r0, r1, r4
    2b30:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    2b34:	4770      	bx	lr
    2b36:	bf00      	nop
    2b38:	20000944 	.word	0x20000944
    2b3c:	200006d4 	.word	0x200006d4
    2b40:	200006cc 	.word	0x200006cc
    2b44:	e0001004 	.word	0xe0001004
    2b48:	200006d0 	.word	0x200006d0

00002b4c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    2b4c:	2827      	cmp	r0, #39	; 0x27
    2b4e:	d81c      	bhi.n	2b8a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    2b50:	0100      	lsls	r0, r0, #4
    2b52:	4a1a      	ldr	r2, [pc, #104]	; (2bbc <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2b54:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    2b56:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    2b5a:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    2b5c:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2b5e:	d015      	beq.n	2b8c <pinMode+0x40>
    2b60:	2904      	cmp	r1, #4
    2b62:	d013      	beq.n	2b8c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    2b64:	68dc      	ldr	r4, [r3, #12]
    2b66:	6842      	ldr	r2, [r0, #4]
    2b68:	ea22 0204 	bic.w	r2, r2, r4
    2b6c:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2b6e:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    2b70:	b1e9      	cbz	r1, 2bae <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    2b72:	2902      	cmp	r1, #2
    2b74:	d01e      	beq.n	2bb4 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    2b76:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2b78:	685b      	ldr	r3, [r3, #4]
}
    2b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    2b7e:	bf0c      	ite	eq
    2b80:	490f      	ldreq	r1, [pc, #60]	; (2bc0 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    2b82:	4910      	ldrne	r1, [pc, #64]	; (2bc4 <pinMode+0x78>)
    2b84:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    2b86:	2215      	movs	r2, #21
    2b88:	601a      	str	r2, [r3, #0]
}
    2b8a:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    2b8c:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    2b8e:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    2b90:	6844      	ldr	r4, [r0, #4]
    2b92:	ea42 0204 	orr.w	r2, r2, r4
    2b96:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2b98:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    2b9a:	d008      	beq.n	2bae <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    2b9c:	f640 0138 	movw	r1, #2104	; 0x838
    2ba0:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2ba2:	685b      	ldr	r3, [r3, #4]
    2ba4:	2215      	movs	r2, #21
}
    2ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2baa:	601a      	str	r2, [r3, #0]
}
    2bac:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2bae:	2138      	movs	r1, #56	; 0x38
    2bb0:	6011      	str	r1, [r2, #0]
    2bb2:	e7f6      	b.n	2ba2 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2bb4:	4904      	ldr	r1, [pc, #16]	; (2bc8 <pinMode+0x7c>)
    2bb6:	6011      	str	r1, [r2, #0]
    2bb8:	e7f3      	b.n	2ba2 <pinMode+0x56>
    2bba:	bf00      	nop
    2bbc:	200000c4 	.word	0x200000c4
    2bc0:	00013038 	.word	0x00013038
    2bc4:	00010038 	.word	0x00010038
    2bc8:	0001f038 	.word	0x0001f038

00002bcc <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    2bcc:	2004      	movs	r0, #4
    2bce:	4671      	mov	r1, lr
    2bd0:	4208      	tst	r0, r1
    2bd2:	d003      	beq.n	2bdc <_MSP>
    2bd4:	f3ef 8009 	mrs	r0, PSP
    2bd8:	f000 b808 	b.w	2bec <HardFault_HandlerC>

00002bdc <_MSP>:
    2bdc:	f3ef 8008 	mrs	r0, MSP
    2be0:	f000 b804 	b.w	2bec <HardFault_HandlerC>

00002be4 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    2be4:	4770      	bx	lr
    2be6:	bf00      	nop

00002be8 <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    2be8:	4770      	bx	lr
    2bea:	bf00      	nop

00002bec <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2bec:	4b1b      	ldr	r3, [pc, #108]	; (2c5c <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    2bee:	2105      	movs	r1, #5
    2bf0:	4a1b      	ldr	r2, [pc, #108]	; (2c60 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    2bf2:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    2bf4:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    2bf6:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    2bfa:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    2bfc:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    2c00:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2c02:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    2c04:	4c17      	ldr	r4, [pc, #92]	; (2c64 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2c06:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    2c08:	4817      	ldr	r0, [pc, #92]	; (2c68 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    2c0a:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    2c0c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    2c10:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    2c14:	6823      	ldr	r3, [r4, #0]
    2c16:	4283      	cmp	r3, r0
    2c18:	d902      	bls.n	2c20 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    2c1a:	4814      	ldr	r0, [pc, #80]	; (2c6c <HardFault_HandlerC+0x80>)
    2c1c:	f7ff fd9c 	bl	2758 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    2c20:	4d0e      	ldr	r5, [pc, #56]	; (2c5c <HardFault_HandlerC+0x70>)
    2c22:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    2c24:	2000      	movs	r0, #0
    2c26:	4a12      	ldr	r2, [pc, #72]	; (2c70 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    2c28:	4912      	ldr	r1, [pc, #72]	; (2c74 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    2c2a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    2c2e:	9001      	str	r0, [sp, #4]
    2c30:	9b01      	ldr	r3, [sp, #4]
    2c32:	4293      	cmp	r3, r2
    2c34:	d805      	bhi.n	2c42 <HardFault_HandlerC+0x56>
    2c36:	9b01      	ldr	r3, [sp, #4]
    2c38:	3301      	adds	r3, #1
    2c3a:	9301      	str	r3, [sp, #4]
    2c3c:	9b01      	ldr	r3, [sp, #4]
    2c3e:	4293      	cmp	r3, r2
    2c40:	d9f9      	bls.n	2c36 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    2c42:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    2c46:	9001      	str	r0, [sp, #4]
    2c48:	9b01      	ldr	r3, [sp, #4]
    2c4a:	428b      	cmp	r3, r1
    2c4c:	d8ed      	bhi.n	2c2a <HardFault_HandlerC+0x3e>
    2c4e:	9b01      	ldr	r3, [sp, #4]
    2c50:	3301      	adds	r3, #1
    2c52:	9301      	str	r3, [sp, #4]
    2c54:	9b01      	ldr	r3, [sp, #4]
    2c56:	428b      	cmp	r3, r1
    2c58:	d9f9      	bls.n	2c4e <HardFault_HandlerC+0x62>
    2c5a:	e7e6      	b.n	2c2a <HardFault_HandlerC+0x3e>
    2c5c:	401bc000 	.word	0x401bc000
    2c60:	401f8000 	.word	0x401f8000
    2c64:	200003f0 	.word	0x200003f0
    2c68:	23c345ff 	.word	0x23c345ff
    2c6c:	11e1a300 	.word	0x11e1a300
    2c70:	000f423f 	.word	0x000f423f
    2c74:	0089543f 	.word	0x0089543f

00002c78 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    2c78:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    2c7a:	4a06      	ldr	r2, [pc, #24]	; (2c94 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    2c7c:	2107      	movs	r1, #7
    2c7e:	4b06      	ldr	r3, [pc, #24]	; (2c98 <Panic_Temp_isr+0x20>)
    2c80:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    2c82:	6b93      	ldr	r3, [r2, #56]	; 0x38
    2c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2c88:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    2c8a:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    2c8e:	bf30      	wfi
    2c90:	e7fd      	b.n	2c8e <Panic_Temp_isr+0x16>
    2c92:	bf00      	nop
    2c94:	400d4000 	.word	0x400d4000
    2c98:	400ac000 	.word	0x400ac000

00002c9c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    2c9c:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    2c9e:	b430      	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    2ca0:	b11b      	cbz	r3, 2caa <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    2ca2:	6853      	ldr	r3, [r2, #4]
    2ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2ca8:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    2caa:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    2cac:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    2cae:	b19c      	cbz	r4, 2cd8 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    2cb0:	4b10      	ldr	r3, [pc, #64]	; (2cf4 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    2cb2:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    2cb4:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    2cb8:	420c      	tst	r4, r1
    2cba:	d117      	bne.n	2cec <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    2cbc:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    2cc0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    2cc4:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    2cc8:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    2ccc:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    2cd0:	0464      	lsls	r4, r4, #17
    2cd2:	d5f3      	bpl.n	2cbc <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    2cd4:	4229      	tst	r1, r5
    2cd6:	d109      	bne.n	2cec <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    2cd8:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    2cda:	4c06      	ldr	r4, [pc, #24]	; (2cf4 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    2cdc:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    2cde:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    2ce0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2ce4:	4319      	orrs	r1, r3
    2ce6:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    2cea:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    2cec:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    2cee:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    2cf0:	bc30      	pop	{r4, r5}
    2cf2:	4770      	bx	lr
    2cf4:	402e0000 	.word	0x402e0000

00002cf8 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    2cf8:	b570      	push	{r4, r5, r6, lr}
    2cfa:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    2cfc:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    2cfe:	b190      	cbz	r0, 2d26 <run_callbacks+0x2e>
    2d00:	4602      	mov	r2, r0
    2d02:	2400      	movs	r4, #0
    2d04:	e003      	b.n	2d0e <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    2d06:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    2d08:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    2d0a:	2a01      	cmp	r2, #1
    2d0c:	d00c      	beq.n	2d28 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    2d0e:	6853      	ldr	r3, [r2, #4]
    2d10:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    2d14:	d0f7      	beq.n	2d06 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    2d16:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2d18:	b12c      	cbz	r4, 2d26 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    2d1a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    2d1c:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    2d1e:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2d20:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    2d22:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2d24:	d1f9      	bne.n	2d1a <run_callbacks+0x22>
    2d26:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    2d28:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    2d2a:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    2d2c:	e7f4      	b.n	2d18 <run_callbacks+0x20>
    2d2e:	bf00      	nop

00002d30 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    2d30:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    2d32:	b9f1      	cbnz	r1, 2d72 <endpoint0_transmit.constprop.1+0x42>
    2d34:	4c22      	ldr	r4, [pc, #136]	; (2dc0 <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2d36:	4923      	ldr	r1, [pc, #140]	; (2dc4 <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2d38:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2d3a:	4b23      	ldr	r3, [pc, #140]	; (2dc8 <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2d3c:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2d3e:	2580      	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    2d40:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2d42:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    2d44:	461a      	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2d46:	604d      	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    2d48:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2d4a:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2d4e:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2d50:	f044 1401 	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    2d54:	4d1d      	ldr	r5, [pc, #116]	; (2dcc <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2d56:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    2d5a:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
    2d5e:	f041 0101 	orr.w	r1, r1, #1
    2d62:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    2d66:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    2d68:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d1fb      	bne.n	2d68 <endpoint0_transmit.constprop.1+0x38>
}
    2d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2d72:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2d74:	4b16      	ldr	r3, [pc, #88]	; (2dd0 <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2d76:	4d14      	ldr	r5, [pc, #80]	; (2dc8 <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2d78:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    2d7a:	4c11      	ldr	r4, [pc, #68]	; (2dc0 <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2d7c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    2d80:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2d82:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2d84:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2d86:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    2d8a:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2d8c:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    2d90:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2d92:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2d96:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2d9a:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    2d9e:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2da0:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2da2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2da6:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2daa:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2dae:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2db0:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2db2:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    2db6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    2dba:	2b00      	cmp	r3, #0
    2dbc:	d1fb      	bne.n	2db6 <endpoint0_transmit.constprop.1+0x86>
    2dbe:	e7ba      	b.n	2d36 <endpoint0_transmit.constprop.1+0x6>
    2dc0:	20002000 	.word	0x20002000
    2dc4:	20001020 	.word	0x20001020
    2dc8:	402e0000 	.word	0x402e0000
    2dcc:	200006fc 	.word	0x200006fc
    2dd0:	20001000 	.word	0x20001000

00002dd4 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    2dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    2dd8:	4cbc      	ldr	r4, [pc, #752]	; (30cc <isr+0x2f8>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    2dda:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    2ddc:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    2de0:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    2de4:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    2de8:	d05e      	beq.n	2ea8 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    2dea:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2dee:	2b00      	cmp	r3, #0
    2df0:	d055      	beq.n	2e9e <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2df2:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    2df6:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 30f4 <isr+0x320>
    2dfa:	4eb5      	ldr	r6, [pc, #724]	; (30d0 <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2dfc:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2dfe:	46da      	mov	sl, fp
    2e00:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    2e02:	6af2      	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    2e04:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2e08:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2e0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2e10:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    2e14:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2e18:	049f      	lsls	r7, r3, #18
    2e1a:	d5f5      	bpl.n	2e08 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    2e1c:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    2e20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2e24:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2e28:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    2e2c:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2e30:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    2e34:	d1fa      	bne.n	2e2c <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2e36:	b281      	uxth	r1, r0
    2e38:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    2e3c:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2e40:	42b9      	cmp	r1, r7
    2e42:	f200 80a5 	bhi.w	2f90 <isr+0x1bc>
    2e46:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    2e4a:	f080 81eb 	bcs.w	3224 <isr+0x450>
    2e4e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    2e52:	f000 816a 	beq.w	312a <isr+0x356>
    2e56:	f200 80e4 	bhi.w	3022 <isr+0x24e>
    2e5a:	2980      	cmp	r1, #128	; 0x80
    2e5c:	f000 8158 	beq.w	3110 <isr+0x33c>
    2e60:	2982      	cmp	r1, #130	; 0x82
    2e62:	f040 80d6 	bne.w	3012 <isr+0x23e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2e66:	b292      	uxth	r2, r2
    2e68:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2e6c:	2907      	cmp	r1, #7
    2e6e:	f200 80d0 	bhi.w	3012 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2e72:	0089      	lsls	r1, r1, #2
    2e74:	4897      	ldr	r0, [pc, #604]	; (30d4 <isr+0x300>)
		reply_buffer[0] = 0;
    2e76:	4f98      	ldr	r7, [pc, #608]	; (30d8 <isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2e78:	4408      	add	r0, r1
    2e7a:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2e7c:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    2e7e:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    2e80:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2e82:	f140 820e 	bpl.w	32a2 <isr+0x4ce>
    2e86:	03ca      	lsls	r2, r1, #15
    2e88:	d501      	bpl.n	2e8e <isr+0xba>
			reply_buffer[0] = 1;
    2e8a:	2301      	movs	r3, #1
    2e8c:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    2e8e:	2102      	movs	r1, #2
    2e90:	4891      	ldr	r0, [pc, #580]	; (30d8 <isr+0x304>)
    2e92:	f7ff ff4d 	bl	2d30 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2e96:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	d1b0      	bne.n	2e00 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    2e9e:	4a8b      	ldr	r2, [pc, #556]	; (30cc <isr+0x2f8>)
    2ea0:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    2ea4:	2b00      	cmp	r3, #0
    2ea6:	d150      	bne.n	2f4a <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    2ea8:	f018 0f40 	tst.w	r8, #64	; 0x40
    2eac:	d018      	beq.n	2ee0 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    2eae:	4b87      	ldr	r3, [pc, #540]	; (30cc <isr+0x2f8>)
    2eb0:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2eb4:	461a      	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    2eb6:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    2eba:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    2ebe:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2ec2:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    2ec6:	4b81      	ldr	r3, [pc, #516]	; (30cc <isr+0x2f8>)
    2ec8:	2c00      	cmp	r4, #0
    2eca:	d1fa      	bne.n	2ec2 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    2ecc:	f04f 32ff 	mov.w	r2, #4294967295
    2ed0:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    2ed4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    2ed8:	f000 fd34 	bl	3944 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    2edc:	4b7f      	ldr	r3, [pc, #508]	; (30dc <isr+0x308>)
    2ede:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    2ee0:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    2ee4:	d003      	beq.n	2eee <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    2ee6:	4b7e      	ldr	r3, [pc, #504]	; (30e0 <isr+0x30c>)
    2ee8:	681b      	ldr	r3, [r3, #0]
    2eea:	b103      	cbz	r3, 2eee <isr+0x11a>
    2eec:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    2eee:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    2ef2:	d003      	beq.n	2efc <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    2ef4:	4b7b      	ldr	r3, [pc, #492]	; (30e4 <isr+0x310>)
    2ef6:	681b      	ldr	r3, [r3, #0]
    2ef8:	b103      	cbz	r3, 2efc <isr+0x128>
    2efa:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    2efc:	f018 0f04 	tst.w	r8, #4
    2f00:	d008      	beq.n	2f14 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    2f02:	4b72      	ldr	r3, [pc, #456]	; (30cc <isr+0x2f8>)
    2f04:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    2f08:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    2f0c:	d03d      	beq.n	2f8a <isr+0x1b6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    2f0e:	4b76      	ldr	r3, [pc, #472]	; (30e8 <isr+0x314>)
    2f10:	2201      	movs	r2, #1
    2f12:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    2f14:	4b6d      	ldr	r3, [pc, #436]	; (30cc <isr+0x2f8>)
    2f16:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    2f1a:	0612      	lsls	r2, r2, #24
    2f1c:	d512      	bpl.n	2f44 <isr+0x170>
    2f1e:	f018 0f80 	tst.w	r8, #128	; 0x80
    2f22:	d00f      	beq.n	2f44 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    2f24:	4971      	ldr	r1, [pc, #452]	; (30ec <isr+0x318>)
    2f26:	780a      	ldrb	r2, [r1, #0]
    2f28:	b162      	cbz	r2, 2f44 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    2f2a:	3a01      	subs	r2, #1
    2f2c:	b2d2      	uxtb	r2, r2
    2f2e:	700a      	strb	r2, [r1, #0]
    2f30:	b942      	cbnz	r2, 2f44 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    2f32:	496f      	ldr	r1, [pc, #444]	; (30f0 <isr+0x31c>)
    2f34:	780a      	ldrb	r2, [r1, #0]
    2f36:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2f3a:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    2f3c:	2a00      	cmp	r2, #0
    2f3e:	f000 8232 	beq.w	33a6 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    2f42:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    2f44:	b003      	add	sp, #12
    2f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2f4a:	496a      	ldr	r1, [pc, #424]	; (30f4 <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    2f4c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2f50:	6808      	ldr	r0, [r1, #0]
    2f52:	4203      	tst	r3, r0
    2f54:	f040 81eb 	bne.w	332e <isr+0x55a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    2f58:	4a60      	ldr	r2, [pc, #384]	; (30dc <isr+0x308>)
    2f5a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    2f5c:	401c      	ands	r4, r3
    2f5e:	d0a3      	beq.n	2ea8 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    2f60:	0763      	lsls	r3, r4, #29
    2f62:	f100 822f 	bmi.w	33c4 <isr+0x5f0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    2f66:	0367      	lsls	r7, r4, #13
    2f68:	f100 8228 	bmi.w	33bc <isr+0x5e8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    2f6c:	0726      	lsls	r6, r4, #28
    2f6e:	f100 8231 	bmi.w	33d4 <isr+0x600>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    2f72:	0325      	lsls	r5, r4, #12
    2f74:	f100 822a 	bmi.w	33cc <isr+0x5f8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    2f78:	06e0      	lsls	r0, r4, #27
    2f7a:	f100 821b 	bmi.w	33b4 <isr+0x5e0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    2f7e:	02e1      	lsls	r1, r4, #11
    2f80:	d592      	bpl.n	2ea8 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    2f82:	485d      	ldr	r0, [pc, #372]	; (30f8 <isr+0x324>)
    2f84:	f7ff feb8 	bl	2cf8 <run_callbacks>
    2f88:	e78e      	b.n	2ea8 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    2f8a:	4a57      	ldr	r2, [pc, #348]	; (30e8 <isr+0x314>)
    2f8c:	7013      	strb	r3, [r2, #0]
    2f8e:	e7c1      	b.n	2f14 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2f90:	f242 0721 	movw	r7, #8225	; 0x2021
    2f94:	42b9      	cmp	r1, r7
    2f96:	d038      	beq.n	300a <isr+0x236>
    2f98:	d86f      	bhi.n	307a <isr+0x2a6>
    2f9a:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    2f9e:	f000 8133 	beq.w	3208 <isr+0x434>
    2fa2:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    2fa6:	d134      	bne.n	3012 <isr+0x23e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    2fa8:	f3c0 4007 	ubfx	r0, r0, #16, #8
    2fac:	4a53      	ldr	r2, [pc, #332]	; (30fc <isr+0x328>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    2fae:	4954      	ldr	r1, [pc, #336]	; (3100 <isr+0x32c>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    2fb0:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2fb2:	4f54      	ldr	r7, [pc, #336]	; (3104 <isr+0x330>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2fb4:	4a54      	ldr	r2, [pc, #336]	; (3108 <isr+0x334>)
    2fb6:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2fb8:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    2fbc:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2fc0:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    2fc4:	f000 fcc0 	bl	3948 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2fc8:	4a50      	ldr	r2, [pc, #320]	; (310c <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2fca:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2fcc:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2fce:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2fd0:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2fd2:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2fd4:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2fd6:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2fda:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2fdc:	f041 1101 	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2fe0:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    2fe2:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2fe6:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
    2fea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    2fee:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2ff2:	4a40      	ldr	r2, [pc, #256]	; (30f4 <isr+0x320>)
    2ff4:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    2ff6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2ffa:	2b00      	cmp	r3, #0
    2ffc:	d1fb      	bne.n	2ff6 <isr+0x222>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2ffe:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3002:	2b00      	cmp	r3, #0
    3004:	f47f aefc 	bne.w	2e00 <isr+0x2c>
    3008:	e749      	b.n	2e9e <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    300a:	0c11      	lsrs	r1, r2, #16
    300c:	2907      	cmp	r1, #7
    300e:	f000 814c 	beq.w	32aa <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    3012:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3016:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    301a:	2b00      	cmp	r3, #0
    301c:	f47f aef0 	bne.w	2e00 <isr+0x2c>
    3020:	e73d      	b.n	2e9e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3022:	f240 3702 	movw	r7, #770	; 0x302
    3026:	42b9      	cmp	r1, r7
    3028:	f000 80bb 	beq.w	31a2 <isr+0x3ce>
    302c:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    3030:	d1ef      	bne.n	3012 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3032:	4a36      	ldr	r2, [pc, #216]	; (310c <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3034:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3036:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3038:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    303a:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    303c:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    303e:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3042:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3044:	f041 1301 	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3048:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    304a:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    304e:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    3052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3056:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    305a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    305e:	2b00      	cmp	r3, #0
    3060:	d1fb      	bne.n	305a <isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    3062:	0c03      	lsrs	r3, r0, #16
    3064:	065b      	lsls	r3, r3, #25
    3066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    306a:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    306e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3072:	2b00      	cmp	r3, #0
    3074:	f47f aec4 	bne.w	2e00 <isr+0x2c>
    3078:	e711      	b.n	2e9e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    307a:	f242 2321 	movw	r3, #8737	; 0x2221
    307e:	4299      	cmp	r1, r3
    3080:	f000 8086 	beq.w	3190 <isr+0x3bc>
    3084:	f242 3321 	movw	r3, #8993	; 0x2321
    3088:	4299      	cmp	r1, r3
    308a:	d1c2      	bne.n	3012 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    308c:	4b1f      	ldr	r3, [pc, #124]	; (310c <isr+0x338>)
    308e:	2101      	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3090:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3092:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3094:	2100      	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3096:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3098:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    309c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    309e:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    30a2:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    30a4:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    30a6:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    30aa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    30ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    30b2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    30b6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    30ba:	2b00      	cmp	r3, #0
    30bc:	d1fb      	bne.n	30b6 <isr+0x2e2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    30be:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    30c2:	2b00      	cmp	r3, #0
    30c4:	f47f ae9c 	bne.w	2e00 <isr+0x2c>
    30c8:	e6e9      	b.n	2e9e <isr+0xca>
    30ca:	bf00      	nop
    30cc:	402e0000 	.word	0x402e0000
    30d0:	20002000 	.word	0x20002000
    30d4:	402e01c0 	.word	0x402e01c0
    30d8:	20000710 	.word	0x20000710
    30dc:	200006ec 	.word	0x200006ec
    30e0:	200006e8 	.word	0x200006e8
    30e4:	200006f4 	.word	0x200006f4
    30e8:	200006f8 	.word	0x200006f8
    30ec:	20000700 	.word	0x20000700
    30f0:	200006f0 	.word	0x200006f0
    30f4:	200006fc 	.word	0x200006fc
    30f8:	20002240 	.word	0x20002240
    30fc:	20000720 	.word	0x20000720
    3100:	000200c8 	.word	0x000200c8
    3104:	00cc0002 	.word	0x00cc0002
    3108:	00c80002 	.word	0x00c80002
    310c:	20001020 	.word	0x20001020
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3110:	4aba      	ldr	r2, [pc, #744]	; (33fc <isr+0x628>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    3112:	2102      	movs	r1, #2
    3114:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3116:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    3118:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    311a:	f7ff fe09 	bl	2d30 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    311e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3122:	2b00      	cmp	r3, #0
    3124:	f47f ae6c 	bne.w	2e00 <isr+0x2c>
    3128:	e6b9      	b.n	2e9e <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    312a:	b292      	uxth	r2, r2
    312c:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    3130:	2b07      	cmp	r3, #7
    3132:	f63f af6e 	bhi.w	3012 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    3136:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    313a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    313e:	4ab0      	ldr	r2, [pc, #704]	; (3400 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3140:	f04f 0101 	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    3144:	441a      	add	r2, r3
    3146:	6813      	ldr	r3, [r2, #0]
    3148:	bf14      	ite	ne
    314a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    314e:	f023 0301 	biceq.w	r3, r3, #1
    3152:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3154:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3156:	4bab      	ldr	r3, [pc, #684]	; (3404 <isr+0x630>)
    3158:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    315a:	2100      	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    315c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    315e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3162:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3164:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3168:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    316a:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    316c:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3170:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3178:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    317c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3180:	2b00      	cmp	r3, #0
    3182:	d1fb      	bne.n	317c <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3184:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3188:	2b00      	cmp	r3, #0
    318a:	f47f ae39 	bne.w	2e00 <isr+0x2c>
    318e:	e686      	b.n	2e9e <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3190:	4b9d      	ldr	r3, [pc, #628]	; (3408 <isr+0x634>)
		usb_cdc_line_rtsdtr = setup.wValue;
    3192:	f3c0 4007 	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3196:	4a9d      	ldr	r2, [pc, #628]	; (340c <isr+0x638>)
    3198:	6819      	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    319a:	4b9d      	ldr	r3, [pc, #628]	; (3410 <isr+0x63c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    319c:	6011      	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    319e:	7018      	strb	r0, [r3, #0]
    31a0:	e774      	b.n	308c <isr+0x2b8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    31a2:	b292      	uxth	r2, r2
    31a4:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    31a8:	2b07      	cmp	r3, #7
    31aa:	f63f af32 	bhi.w	3012 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    31ae:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    31b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    31b6:	4a92      	ldr	r2, [pc, #584]	; (3400 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    31b8:	f04f 0101 	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    31bc:	441a      	add	r2, r3
    31be:	6813      	ldr	r3, [r2, #0]
    31c0:	bf14      	ite	ne
    31c2:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    31c6:	f043 0301 	orreq.w	r3, r3, #1
    31ca:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    31cc:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    31ce:	4b8d      	ldr	r3, [pc, #564]	; (3404 <isr+0x630>)
    31d0:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    31d2:	2100      	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    31d4:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    31d6:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    31da:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    31dc:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    31e0:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    31e2:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    31e4:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    31e8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    31ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    31f0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    31f4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    31f8:	2b00      	cmp	r3, #0
    31fa:	d1fb      	bne.n	31f4 <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    31fc:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3200:	2b00      	cmp	r3, #0
    3202:	f47f adfd 	bne.w	2e00 <isr+0x2c>
    3206:	e64a      	b.n	2e9e <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3208:	4a82      	ldr	r2, [pc, #520]	; (3414 <isr+0x640>)
		endpoint0_transmit(reply_buffer, 1, 0);
    320a:	2101      	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    320c:	4b7b      	ldr	r3, [pc, #492]	; (33fc <isr+0x628>)
    320e:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    3210:	4618      	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3212:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    3214:	f7ff fd8c 	bl	2d30 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3218:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    321c:	2b00      	cmp	r3, #0
    321e:	f47f adef 	bne.w	2e00 <isr+0x2c>
    3222:	e63c      	b.n	2e9e <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    3224:	4b7c      	ldr	r3, [pc, #496]	; (3418 <isr+0x644>)
    3226:	6859      	ldr	r1, [r3, #4]
    3228:	2900      	cmp	r1, #0
    322a:	f43f aef2 	beq.w	3012 <isr+0x23e>
    322e:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3230:	fa1f fe82 	uxth.w	lr, r2
    3234:	e004      	b.n	3240 <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    3236:	330c      	adds	r3, #12
    3238:	6859      	ldr	r1, [r3, #4]
    323a:	2900      	cmp	r1, #0
    323c:	f43f aee9 	beq.w	3012 <isr+0x23e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3240:	881f      	ldrh	r7, [r3, #0]
    3242:	4287      	cmp	r7, r0
    3244:	d1f7      	bne.n	3236 <isr+0x462>
    3246:	885f      	ldrh	r7, [r3, #2]
    3248:	4577      	cmp	r7, lr
    324a:	d1f4      	bne.n	3236 <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    324c:	0a07      	lsrs	r7, r0, #8
    324e:	2f03      	cmp	r7, #3
    3250:	f000 8106 	beq.w	3460 <isr+0x68c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    3254:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    3256:	0c12      	lsrs	r2, r2, #16
    3258:	4293      	cmp	r3, r2
    325a:	bf28      	it	cs
    325c:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    325e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    3262:	f000 80bb 	beq.w	33dc <isr+0x608>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    3266:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    326a:	f000 8089 	beq.w	3380 <isr+0x5ac>
    326e:	4f6b      	ldr	r7, [pc, #428]	; (341c <isr+0x648>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    3270:	461a      	mov	r2, r3
    3272:	9301      	str	r3, [sp, #4]
    3274:	4638      	mov	r0, r7
    3276:	f000 ff63 	bl	4140 <memcpy>
    327a:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    327c:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    3280:	441f      	add	r7, r3
	asm("dsb");
    3282:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    3286:	4966      	ldr	r1, [pc, #408]	; (3420 <isr+0x64c>)
    3288:	600a      	str	r2, [r1, #0]
		location += 32;
    328a:	3220      	adds	r2, #32
	} while (location < end_addr);
    328c:	4297      	cmp	r7, r2
    328e:	d8fa      	bhi.n	3286 <isr+0x4b2>
	asm("dsb");
    3290:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3294:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    3298:	4860      	ldr	r0, [pc, #384]	; (341c <isr+0x648>)
    329a:	4619      	mov	r1, r3
    329c:	f7ff fd48 	bl	2d30 <endpoint0_transmit.constprop.1>
    32a0:	e5f9      	b.n	2e96 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    32a2:	07cb      	lsls	r3, r1, #31
    32a4:	f57f adf3 	bpl.w	2e8e <isr+0xba>
    32a8:	e5ef      	b.n	2e8a <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    32aa:	4f5e      	ldr	r7, [pc, #376]	; (3424 <isr+0x650>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    32ac:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    32b0:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    32b2:	495d      	ldr	r1, [pc, #372]	; (3428 <isr+0x654>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    32b4:	4b5d      	ldr	r3, [pc, #372]	; (342c <isr+0x658>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    32b6:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    32b8:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    32bc:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    32be:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    32c2:	495b      	ldr	r1, [pc, #364]	; (3430 <isr+0x65c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    32c4:	607a      	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    32c6:	ea40 020e 	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    32ca:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
    32ce:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    32d2:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    32d4:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    32d8:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    32dc:	f501 4280 	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    32e0:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    32e2:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    32e4:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    32e8:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    32ea:	619a      	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    32ec:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    32f0:	2b00      	cmp	r3, #0
    32f2:	d1fb      	bne.n	32ec <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    32f4:	4a43      	ldr	r2, [pc, #268]	; (3404 <isr+0x630>)
    32f6:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    32f8:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    32fc:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    32fe:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3300:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3304:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3306:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    330a:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    330c:	f041 1301 	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3310:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    3312:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3316:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    331a:	4303      	orrs	r3, r0
    331c:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3320:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    3324:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3328:	2b00      	cmp	r3, #0
    332a:	d1fb      	bne.n	3324 <isr+0x550>
    332c:	e5b3      	b.n	2e96 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    332e:	4c3d      	ldr	r4, [pc, #244]	; (3424 <isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    3330:	f242 0021 	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    3334:	2500      	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    3336:	8824      	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    3338:	600d      	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    333a:	4284      	cmp	r4, r0
    333c:	f47f ae0c 	bne.w	2f58 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    3340:	493b      	ldr	r1, [pc, #236]	; (3430 <isr+0x65c>)
    3342:	4c3c      	ldr	r4, [pc, #240]	; (3434 <isr+0x660>)
    3344:	c903      	ldmia	r1, {r0, r1}
    3346:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    3348:	2886      	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    334a:	6020      	str	r0, [r4, #0]
    334c:	80a1      	strh	r1, [r4, #4]
    334e:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    3350:	f47f ae02 	bne.w	2f58 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    3354:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    3356:	4838      	ldr	r0, [pc, #224]	; (3438 <isr+0x664>)
    3358:	7801      	ldrb	r1, [r0, #0]
    335a:	f041 0104 	orr.w	r1, r1, #4
    335e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    3360:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    3364:	0608      	lsls	r0, r1, #24
    3366:	d406      	bmi.n	3376 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    3368:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    336c:	2080      	movs	r0, #128	; 0x80
    336e:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    3372:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    3376:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    3378:	4a30      	ldr	r2, [pc, #192]	; (343c <isr+0x668>)
    337a:	2150      	movs	r1, #80	; 0x50
    337c:	7011      	strb	r1, [r2, #0]
    337e:	e5eb      	b.n	2f58 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    3380:	482f      	ldr	r0, [pc, #188]	; (3440 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    3382:	461a      	mov	r2, r3
    3384:	4f25      	ldr	r7, [pc, #148]	; (341c <isr+0x648>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    3386:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    338a:	492e      	ldr	r1, [pc, #184]	; (3444 <isr+0x670>)
    338c:	482e      	ldr	r0, [pc, #184]	; (3448 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    338e:	9301      	str	r3, [sp, #4]
    3390:	f1be 0f00 	cmp.w	lr, #0
    3394:	bf08      	it	eq
    3396:	4601      	moveq	r1, r0
    3398:	4638      	mov	r0, r7
    339a:	f000 fed1 	bl	4140 <memcpy>
					usb_descriptor_buffer[1] = 7;
    339e:	2207      	movs	r2, #7
    33a0:	9b01      	ldr	r3, [sp, #4]
    33a2:	707a      	strb	r2, [r7, #1]
    33a4:	e76a      	b.n	327c <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    33a6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    33aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    33ae:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    33b2:	e5c6      	b.n	2f42 <isr+0x16e>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    33b4:	4825      	ldr	r0, [pc, #148]	; (344c <isr+0x678>)
    33b6:	f7ff fc9f 	bl	2cf8 <run_callbacks>
    33ba:	e5e0      	b.n	2f7e <isr+0x1aa>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    33bc:	4824      	ldr	r0, [pc, #144]	; (3450 <isr+0x67c>)
    33be:	f7ff fc9b 	bl	2cf8 <run_callbacks>
    33c2:	e5d3      	b.n	2f6c <isr+0x198>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    33c4:	4823      	ldr	r0, [pc, #140]	; (3454 <isr+0x680>)
    33c6:	f7ff fc97 	bl	2cf8 <run_callbacks>
    33ca:	e5cc      	b.n	2f66 <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    33cc:	4822      	ldr	r0, [pc, #136]	; (3458 <isr+0x684>)
    33ce:	f7ff fc93 	bl	2cf8 <run_callbacks>
    33d2:	e5d1      	b.n	2f78 <isr+0x1a4>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    33d4:	4821      	ldr	r0, [pc, #132]	; (345c <isr+0x688>)
    33d6:	f7ff fc8f 	bl	2cf8 <run_callbacks>
    33da:	e5ca      	b.n	2f72 <isr+0x19e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    33dc:	4818      	ldr	r0, [pc, #96]	; (3440 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    33de:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    33e0:	4919      	ldr	r1, [pc, #100]	; (3448 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    33e2:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    33e4:	4817      	ldr	r0, [pc, #92]	; (3444 <isr+0x670>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    33e6:	9301      	str	r3, [sp, #4]
    33e8:	2f00      	cmp	r7, #0
    33ea:	bf08      	it	eq
    33ec:	4601      	moveq	r1, r0
    33ee:	480b      	ldr	r0, [pc, #44]	; (341c <isr+0x648>)
    33f0:	f000 fea6 	bl	4140 <memcpy>
    33f4:	4f09      	ldr	r7, [pc, #36]	; (341c <isr+0x648>)
    33f6:	9b01      	ldr	r3, [sp, #4]
    33f8:	e740      	b.n	327c <isr+0x4a8>
    33fa:	bf00      	nop
    33fc:	20000710 	.word	0x20000710
    3400:	402e01c0 	.word	0x402e01c0
    3404:	20001020 	.word	0x20001020
    3408:	200006d4 	.word	0x200006d4
    340c:	20002288 	.word	0x20002288
    3410:	20000868 	.word	0x20000868
    3414:	20000720 	.word	0x20000720
    3418:	20000344 	.word	0x20000344
    341c:	20200000 	.word	0x20200000
    3420:	e000ef70 	.word	0xe000ef70
    3424:	20000708 	.word	0x20000708
    3428:	00070080 	.word	0x00070080
    342c:	20001000 	.word	0x20001000
    3430:	20000718 	.word	0x20000718
    3434:	20002280 	.word	0x20002280
    3438:	200006f0 	.word	0x200006f0
    343c:	20000700 	.word	0x20000700
    3440:	200006f8 	.word	0x200006f8
    3444:	60001654 	.word	0x60001654
    3448:	60001698 	.word	0x60001698
    344c:	20002200 	.word	0x20002200
    3450:	20002140 	.word	0x20002140
    3454:	20002100 	.word	0x20002100
    3458:	200021c0 	.word	0x200021c0
    345c:	20002180 	.word	0x20002180
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    3460:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    3462:	780b      	ldrb	r3, [r1, #0]
    3464:	4293      	cmp	r3, r2
    3466:	bf28      	it	cs
    3468:	4613      	movcs	r3, r2
    346a:	e6fc      	b.n	3266 <isr+0x492>

0000346c <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    346c:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    346e:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    3472:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3476:	bf14      	ite	ne
    3478:	2700      	movne	r7, #0
    347a:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    347e:	2a02      	cmp	r2, #2
    3480:	d901      	bls.n	3486 <usb_config_rx+0x1a>
    3482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    3486:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    348a:	f8df 9040 	ldr.w	r9, [pc, #64]	; 34cc <usb_config_rx+0x60>
    348e:	460d      	mov	r5, r1
    3490:	4604      	mov	r4, r0
    3492:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    3496:	2100      	movs	r1, #0
    3498:	2240      	movs	r2, #64	; 0x40
    349a:	4698      	mov	r8, r3
    349c:	4630      	mov	r0, r6
    349e:	f001 f8a9 	bl	45f4 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    34a2:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    34a4:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    34a8:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    34ac:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    34b0:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    34b2:	f1b8 0f00 	cmp.w	r8, #0
    34b6:	d0e4      	beq.n	3482 <usb_config_rx+0x16>
    34b8:	4b03      	ldr	r3, [pc, #12]	; (34c8 <usb_config_rx+0x5c>)
    34ba:	40a0      	lsls	r0, r4
    34bc:	681c      	ldr	r4, [r3, #0]
    34be:	4320      	orrs	r0, r4
    34c0:	6018      	str	r0, [r3, #0]
    34c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    34c6:	bf00      	nop
    34c8:	200006ec 	.word	0x200006ec
    34cc:	20002000 	.word	0x20002000

000034d0 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    34d0:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    34d2:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    34d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    34da:	bf14      	ite	ne
    34dc:	2700      	movne	r7, #0
    34de:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    34e2:	2a02      	cmp	r2, #2
    34e4:	d901      	bls.n	34ea <usb_config_tx+0x1a>
    34e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    34ea:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    34ec:	01c5      	lsls	r5, r0, #7
    34ee:	f8df 9044 	ldr.w	r9, [pc, #68]	; 3534 <usb_config_tx+0x64>
    34f2:	4688      	mov	r8, r1
    34f4:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    34f6:	2100      	movs	r1, #0
    34f8:	4604      	mov	r4, r0
    34fa:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    34fc:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    3500:	4650      	mov	r0, sl
    3502:	f001 f877 	bl	45f4 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    3506:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    3508:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    350c:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    3510:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    3514:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    3518:	2e00      	cmp	r6, #0
    351a:	d0e4      	beq.n	34e6 <usb_config_tx+0x16>
    351c:	f104 0010 	add.w	r0, r4, #16
    3520:	4b03      	ldr	r3, [pc, #12]	; (3530 <usb_config_tx+0x60>)
    3522:	4082      	lsls	r2, r0
    3524:	6818      	ldr	r0, [r3, #0]
    3526:	4302      	orrs	r2, r0
    3528:	601a      	str	r2, [r3, #0]
    352a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    352e:	bf00      	nop
    3530:	200006ec 	.word	0x200006ec
    3534:	20002000 	.word	0x20002000

00003538 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    3538:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    353a:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    353c:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    353e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    3542:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    3544:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    3546:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    3548:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    354c:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    3550:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    3554:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    3558:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    355a:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    355c:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    355e:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    3560:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    3562:	bcf0      	pop	{r4, r5, r6, r7}
    3564:	4770      	bx	lr
    3566:	bf00      	nop

00003568 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3568:	1e83      	subs	r3, r0, #2
    356a:	2b02      	cmp	r3, #2
    356c:	d900      	bls.n	3570 <usb_transmit+0x8>
    356e:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    3570:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    3572:	4b06      	ldr	r3, [pc, #24]	; (358c <usb_transmit+0x24>)
    3574:	f100 0410 	add.w	r4, r0, #16
    3578:	2501      	movs	r5, #1
    357a:	460a      	mov	r2, r1
    357c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    3580:	fa05 f104 	lsl.w	r1, r5, r4
}
    3584:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    3586:	f7ff bb89 	b.w	2c9c <schedule_transfer>
    358a:	bf00      	nop
    358c:	20002040 	.word	0x20002040

00003590 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3590:	1e83      	subs	r3, r0, #2
    3592:	2b02      	cmp	r3, #2
    3594:	d900      	bls.n	3598 <usb_receive+0x8>
    3596:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    3598:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    359a:	4b05      	ldr	r3, [pc, #20]	; (35b0 <usb_receive+0x20>)
    359c:	2401      	movs	r4, #1
    359e:	460a      	mov	r2, r1
    35a0:	fa04 f100 	lsl.w	r1, r4, r0
    35a4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    35a8:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    35ac:	f7ff bb76 	b.w	2c9c <schedule_transfer>
    35b0:	20002000 	.word	0x20002000

000035b4 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    35b4:	6840      	ldr	r0, [r0, #4]
#endif
}
    35b6:	4770      	bx	lr

000035b8 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    35b8:	4a12      	ldr	r2, [pc, #72]	; (3604 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    35ba:	4b13      	ldr	r3, [pc, #76]	; (3608 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    35bc:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    35c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    35c4:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    35c6:	b510      	push	{r4, lr}
    35c8:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    35ca:	d802      	bhi.n	35d2 <usb_init_serialnumber+0x1a>
    35cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    35d0:	0040      	lsls	r0, r0, #1
    35d2:	4c0e      	ldr	r4, [pc, #56]	; (360c <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    35d4:	a901      	add	r1, sp, #4
    35d6:	220a      	movs	r2, #10
    35d8:	f000 fe4c 	bl	4274 <ultoa>
    35dc:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    35de:	2300      	movs	r3, #0
    35e0:	4620      	mov	r0, r4
		char c = buf[i];
    35e2:	f811 2b01 	ldrb.w	r2, [r1], #1
    35e6:	3301      	adds	r3, #1
		if (!c) break;
    35e8:	b13a      	cbz	r2, 35fa <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    35ea:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    35ec:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    35f0:	d1f7      	bne.n	35e2 <usb_init_serialnumber+0x2a>
    35f2:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    35f4:	7023      	strb	r3, [r4, #0]
}
    35f6:	b004      	add	sp, #16
    35f8:	bd10      	pop	{r4, pc}
    35fa:	005b      	lsls	r3, r3, #1
    35fc:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    35fe:	7023      	strb	r3, [r4, #0]
}
    3600:	b004      	add	sp, #16
    3602:	bd10      	pop	{r4, pc}
    3604:	401f4400 	.word	0x401f4400
    3608:	0098967f 	.word	0x0098967f
    360c:	20000408 	.word	0x20000408

00003610 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    3610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    3612:	4914      	ldr	r1, [pc, #80]	; (3664 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3614:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3618:	4d13      	ldr	r5, [pc, #76]	; (3668 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    361a:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    361c:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3620:	4e12      	ldr	r6, [pc, #72]	; (366c <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3622:	4a13      	ldr	r2, [pc, #76]	; (3670 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3624:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    3628:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    362a:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    362c:	4628      	mov	r0, r5
    362e:	8832      	ldrh	r2, [r6, #0]
    3630:	f7ff ff82 	bl	3538 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    3634:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3636:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    363a:	4421      	add	r1, r4
	asm("dsb");
    363c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    3640:	4a0c      	ldr	r2, [pc, #48]	; (3674 <rx_queue_transfer+0x64>)
    3642:	6013      	str	r3, [r2, #0]
		location += 32;
    3644:	3320      	adds	r3, #32
	} while (location < end_addr);
    3646:	4299      	cmp	r1, r3
    3648:	d8fb      	bhi.n	3642 <rx_queue_transfer+0x32>
	asm("dsb");
    364a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    364e:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    3652:	2003      	movs	r0, #3
    3654:	4629      	mov	r1, r5
    3656:	f7ff ff9b 	bl	3590 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    365a:	4b07      	ldr	r3, [pc, #28]	; (3678 <rx_queue_transfer+0x68>)
    365c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3660:	601a      	str	r2, [r3, #0]
    3662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3664:	20200060 	.word	0x20200060
    3668:	20000740 	.word	0x20000740
    366c:	2000084e 	.word	0x2000084e
    3670:	e000e18c 	.word	0xe000e18c
    3674:	e000ef5c 	.word	0xe000ef5c
    3678:	e000e10c 	.word	0xe000e10c

0000367c <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    367c:	4a24      	ldr	r2, [pc, #144]	; (3710 <rx_event+0x94>)
    367e:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    3680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    3684:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3688:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    368a:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    368c:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    368e:	2c00      	cmp	r4, #0
    3690:	dd38      	ble.n	3704 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    3692:	4920      	ldr	r1, [pc, #128]	; (3714 <rx_event+0x98>)
		if (head != rx_tail) {
    3694:	4a20      	ldr	r2, [pc, #128]	; (3718 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    3696:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    3698:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    369a:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    369c:	481f      	ldr	r0, [pc, #124]	; (371c <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    369e:	4e20      	ldr	r6, [pc, #128]	; (3720 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    36a0:	4293      	cmp	r3, r2
    36a2:	d007      	beq.n	36b4 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    36a4:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    36a8:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    36ac:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    36b0:	4294      	cmp	r4, r2
    36b2:	d912      	bls.n	36da <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    36b4:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    36b6:	2200      	movs	r2, #0
    36b8:	4f1a      	ldr	r7, [pc, #104]	; (3724 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    36ba:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    36bc:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    36c0:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    36c4:	4e18      	ldr	r6, [pc, #96]	; (3728 <rx_event+0xac>)
    36c6:	bf94      	ite	ls
    36c8:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    36ca:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    36cc:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    36ce:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    36d0:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    36d2:	4414      	add	r4, r2
    36d4:	6034      	str	r4, [r6, #0]
    36d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    36da:	4b14      	ldr	r3, [pc, #80]	; (372c <rx_event+0xb0>)
    36dc:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    36e0:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    36e2:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    36e4:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    36e8:	4418      	add	r0, r3
    36ea:	f000 fd29 	bl	4140 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    36ee:	4a0e      	ldr	r2, [pc, #56]	; (3728 <rx_event+0xac>)
				rx_queue_transfer(i);
    36f0:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    36f2:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    36f6:	6813      	ldr	r3, [r2, #0]
    36f8:	441c      	add	r4, r3
    36fa:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    36fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    3700:	f7ff bf86 	b.w	3610 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    3704:	4628      	mov	r0, r5
	}
}
    3706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    370a:	f7ff bf81 	b.w	3610 <rx_queue_transfer>
    370e:	bf00      	nop
    3710:	2000084e 	.word	0x2000084e
    3714:	20000864 	.word	0x20000864
    3718:	20000840 	.word	0x20000840
    371c:	20000844 	.word	0x20000844
    3720:	20000850 	.word	0x20000850
    3724:	20000724 	.word	0x20000724
    3728:	20000860 	.word	0x20000860
    372c:	20200060 	.word	0x20200060

00003730 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    3730:	4b1e      	ldr	r3, [pc, #120]	; (37ac <usb_serial_flush_callback+0x7c>)
    3732:	781a      	ldrb	r2, [r3, #0]
    3734:	b95a      	cbnz	r2, 374e <usb_serial_flush_callback+0x1e>
    3736:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    373a:	4a1d      	ldr	r2, [pc, #116]	; (37b0 <usb_serial_flush_callback+0x80>)
    373c:	7812      	ldrb	r2, [r2, #0]
    373e:	b132      	cbz	r2, 374e <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    3740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    3744:	4d1b      	ldr	r5, [pc, #108]	; (37b4 <usb_serial_flush_callback+0x84>)
    3746:	882a      	ldrh	r2, [r5, #0]
    3748:	b912      	cbnz	r2, 3750 <usb_serial_flush_callback+0x20>
    374a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    374e:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    3750:	4e19      	ldr	r6, [pc, #100]	; (37b8 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    3752:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    3756:	4f19      	ldr	r7, [pc, #100]	; (37bc <usb_serial_flush_callback+0x8c>)
    3758:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    375a:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    375c:	4c18      	ldr	r4, [pc, #96]	; (37c0 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    375e:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3762:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3766:	4638      	mov	r0, r7
    3768:	4621      	mov	r1, r4
    376a:	f7ff fee5 	bl	3538 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    376e:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3772:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    3776:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    377a:	4b12      	ldr	r3, [pc, #72]	; (37c4 <usb_serial_flush_callback+0x94>)
    377c:	6019      	str	r1, [r3, #0]
		location += 32;
    377e:	3120      	adds	r1, #32
	} while (location < end_addr);
    3780:	428a      	cmp	r2, r1
    3782:	d8fb      	bhi.n	377c <usb_serial_flush_callback+0x4c>
	asm("dsb");
    3784:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3788:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    378c:	2004      	movs	r0, #4
    378e:	4639      	mov	r1, r7
    3790:	f7ff feea 	bl	3568 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    3794:	7833      	ldrb	r3, [r6, #0]
    3796:	4a08      	ldr	r2, [pc, #32]	; (37b8 <usb_serial_flush_callback+0x88>)
    3798:	3301      	adds	r3, #1
    379a:	b2db      	uxtb	r3, r3
    379c:	2b03      	cmp	r3, #3
    379e:	bf88      	it	hi
    37a0:	2300      	movhi	r3, #0
    37a2:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    37a4:	2300      	movs	r3, #0
    37a6:	802b      	strh	r3, [r5, #0]
    37a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37ac:	20000736 	.word	0x20000736
    37b0:	20000720 	.word	0x20000720
    37b4:	20000866 	.word	0x20000866
    37b8:	20000737 	.word	0x20000737
    37bc:	20000880 	.word	0x20000880
    37c0:	20201060 	.word	0x20201060
    37c4:	e000ef70 	.word	0xe000ef70

000037c8 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    37c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37cc:	b085      	sub	sp, #20
    37ce:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    37d0:	9101      	str	r1, [sp, #4]
    37d2:	2900      	cmp	r1, #0
    37d4:	f000 80a2 	beq.w	391c <usb_serial_write.part.1+0x154>
    37d8:	2300      	movs	r3, #0
    37da:	f8df 815c 	ldr.w	r8, [pc, #348]	; 3938 <usb_serial_write.part.1+0x170>
    37de:	f8df 914c 	ldr.w	r9, [pc, #332]	; 392c <usb_serial_write.part.1+0x164>
    37e2:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    37e4:	4e4e      	ldr	r6, [pc, #312]	; (3920 <usb_serial_write.part.1+0x158>)
    37e6:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    37ea:	f8df a150 	ldr.w	sl, [pc, #336]	; 393c <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    37ee:	f8df b150 	ldr.w	fp, [pc, #336]	; 3940 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    37f2:	4a4c      	ldr	r2, [pc, #304]	; (3924 <usb_serial_write.part.1+0x15c>)
    37f4:	7814      	ldrb	r4, [r2, #0]
    37f6:	4a4c      	ldr	r2, [pc, #304]	; (3928 <usb_serial_write.part.1+0x160>)
    37f8:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    37fc:	2b00      	cmp	r3, #0
    37fe:	d16e      	bne.n	38de <usb_serial_write.part.1+0x116>
    3800:	461d      	mov	r5, r3
    3802:	461c      	mov	r4, r3
    3804:	e014      	b.n	3830 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    3806:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    380a:	b904      	cbnz	r4, 380e <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    380c:	6835      	ldr	r5, [r6, #0]
    380e:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    3810:	2b00      	cmp	r3, #0
    3812:	d15e      	bne.n	38d2 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    3814:	6833      	ldr	r3, [r6, #0]
    3816:	1b5b      	subs	r3, r3, r5
    3818:	2b78      	cmp	r3, #120	; 0x78
    381a:	d879      	bhi.n	3910 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    381c:	f89a 3000 	ldrb.w	r3, [sl]
    3820:	2b00      	cmp	r3, #0
    3822:	d056      	beq.n	38d2 <usb_serial_write.part.1+0x10a>
			yield();
    3824:	f000 fc3c 	bl	40a0 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    3828:	f8b8 3000 	ldrh.w	r3, [r8]
    382c:	2b00      	cmp	r3, #0
    382e:	d154      	bne.n	38da <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    3830:	4638      	mov	r0, r7
    3832:	f7ff febf 	bl	35b4 <usb_transfer_status>
			if (!(status & 0x80)) {
    3836:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    383a:	4a3c      	ldr	r2, [pc, #240]	; (392c <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    383c:	d1e3      	bne.n	3806 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    383e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    3842:	4a38      	ldr	r2, [pc, #224]	; (3924 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    3844:	f889 0000 	strb.w	r0, [r9]
    3848:	7814      	ldrb	r4, [r2, #0]
    384a:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    384c:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3850:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    3852:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3854:	4936      	ldr	r1, [pc, #216]	; (3930 <usb_serial_write.part.1+0x168>)
    3856:	4420      	add	r0, r4
		if (size >= tx_available) {
    3858:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    385a:	4408      	add	r0, r1
		if (size >= tx_available) {
    385c:	d343      	bcc.n	38e6 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    385e:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    3860:	9902      	ldr	r1, [sp, #8]
    3862:	f000 fc6d 	bl	4140 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    3866:	2300      	movs	r3, #0
    3868:	4621      	mov	r1, r4
    386a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    386e:	4638      	mov	r0, r7
    3870:	f7ff fe62 	bl	3538 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3874:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    3878:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
    387c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    3880:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    3884:	3320      	adds	r3, #32
	} while (location < end_addr);
    3886:	429c      	cmp	r4, r3
    3888:	d8fa      	bhi.n	3880 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    388a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    388e:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    3892:	2004      	movs	r0, #4
    3894:	4639      	mov	r1, r7
    3896:	f7ff fe67 	bl	3568 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    389a:	4b22      	ldr	r3, [pc, #136]	; (3924 <usb_serial_write.part.1+0x15c>)
    389c:	4a21      	ldr	r2, [pc, #132]	; (3924 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    389e:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    38a0:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    38a2:	4824      	ldr	r0, [pc, #144]	; (3934 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    38a4:	3301      	adds	r3, #1
    38a6:	b2db      	uxtb	r3, r3
    38a8:	2b03      	cmp	r3, #3
    38aa:	bf88      	it	hi
    38ac:	2300      	movhi	r3, #0
    38ae:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    38b0:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    38b4:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    38b6:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    38ba:	4413      	add	r3, r2
    38bc:	9300      	str	r3, [sp, #0]
			data += tx_available;
    38be:	9b02      	ldr	r3, [sp, #8]
    38c0:	4413      	add	r3, r2
    38c2:	9302      	str	r3, [sp, #8]
    38c4:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    38c6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    38ca:	9901      	ldr	r1, [sp, #4]
    38cc:	1a8a      	subs	r2, r1, r2
    38ce:	9201      	str	r2, [sp, #4]
    38d0:	d18f      	bne.n	37f2 <usb_serial_write.part.1+0x2a>
    38d2:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    38d4:	b005      	add	sp, #20
    38d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38da:	4a12      	ldr	r2, [pc, #72]	; (3924 <usb_serial_write.part.1+0x15c>)
    38dc:	7814      	ldrb	r4, [r2, #0]
    38de:	461a      	mov	r2, r3
    38e0:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    38e4:	e7b4      	b.n	3850 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    38e6:	9c01      	ldr	r4, [sp, #4]
    38e8:	9902      	ldr	r1, [sp, #8]
    38ea:	4622      	mov	r2, r4
    38ec:	9303      	str	r3, [sp, #12]
    38ee:	f000 fc27 	bl	4140 <memcpy>
			tx_available -= size;
    38f2:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    38f4:	4a0f      	ldr	r2, [pc, #60]	; (3934 <usb_serial_write.part.1+0x16c>)
    38f6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    38fa:	1b1b      	subs	r3, r3, r4
    38fc:	f8a8 3000 	strh.w	r3, [r8]
    3900:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    3902:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    3906:	4618      	mov	r0, r3
    3908:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    390a:	b005      	add	sp, #20
    390c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    3910:	2301      	movs	r3, #1
				return sent;
    3912:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    3914:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    3916:	b005      	add	sp, #20
    3918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    391c:	9801      	ldr	r0, [sp, #4]
    391e:	e7d9      	b.n	38d4 <usb_serial_write.part.1+0x10c>
    3920:	200006d4 	.word	0x200006d4
    3924:	20000737 	.word	0x20000737
    3928:	20000880 	.word	0x20000880
    392c:	20000865 	.word	0x20000865
    3930:	20201060 	.word	0x20201060
    3934:	402e0000 	.word	0x402e0000
    3938:	20000866 	.word	0x20000866
    393c:	20000720 	.word	0x20000720
    3940:	e000ef70 	.word	0xe000ef70

00003944 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    3944:	4770      	bx	lr
    3946:	bf00      	nop

00003948 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    3948:	4b31      	ldr	r3, [pc, #196]	; (3a10 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    394a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    394e:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    3950:	4f30      	ldr	r7, [pc, #192]	; (3a14 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    3952:	2b00      	cmp	r3, #0
    3954:	d054      	beq.n	3a00 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    3956:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    395a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3a48 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    395e:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    3960:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3964:	2100      	movs	r1, #0
    3966:	2280      	movs	r2, #128	; 0x80
    3968:	482b      	ldr	r0, [pc, #172]	; (3a18 <usb_serial_configure+0xd0>)
	tx_head = 0;
    396a:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    396c:	4e2b      	ldr	r6, [pc, #172]	; (3a1c <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    396e:	f000 fe41 	bl	45f4 <memset>
	tx_head = 0;
    3972:	4c2b      	ldr	r4, [pc, #172]	; (3a20 <usb_serial_configure+0xd8>)
	tx_available = 0;
    3974:	4b2b      	ldr	r3, [pc, #172]	; (3a24 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3976:	4629      	mov	r1, r5
    3978:	f44f 7280 	mov.w	r2, #256	; 0x100
    397c:	482a      	ldr	r0, [pc, #168]	; (3a28 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    397e:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3980:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    3982:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3984:	f000 fe36 	bl	45f4 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    3988:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    398a:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    398c:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    398e:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    3990:	60b5      	str	r5, [r6, #8]
    3992:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    3994:	4925      	ldr	r1, [pc, #148]	; (3a2c <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    3996:	4e26      	ldr	r6, [pc, #152]	; (3a30 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    3998:	4826      	ldr	r0, [pc, #152]	; (3a34 <usb_serial_configure+0xec>)
	rx_available = 0;
    399a:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 3a4c <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    399e:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    39a0:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    39a2:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    39a4:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    39a6:	6035      	str	r5, [r6, #0]
    39a8:	6075      	str	r5, [r6, #4]
    39aa:	60b5      	str	r5, [r6, #8]
    39ac:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    39ae:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    39b2:	f7ff fd8d 	bl	34d0 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    39b6:	f8b8 1000 	ldrh.w	r1, [r8]
    39ba:	462a      	mov	r2, r5
    39bc:	4b1e      	ldr	r3, [pc, #120]	; (3a38 <usb_serial_configure+0xf0>)
    39be:	2003      	movs	r0, #3
    39c0:	f7ff fd54 	bl	346c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    39c4:	462b      	mov	r3, r5
    39c6:	8839      	ldrh	r1, [r7, #0]
    39c8:	2201      	movs	r2, #1
    39ca:	2004      	movs	r0, #4
    39cc:	f7ff fd80 	bl	34d0 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    39d0:	4620      	mov	r0, r4
    39d2:	3401      	adds	r4, #1
    39d4:	f7ff fe1c 	bl	3610 <rx_queue_transfer>
    39d8:	2c08      	cmp	r4, #8
    39da:	d1f9      	bne.n	39d0 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    39dc:	4b17      	ldr	r3, [pc, #92]	; (3a3c <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    39de:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    39e0:	4817      	ldr	r0, [pc, #92]	; (3a40 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    39e2:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    39e4:	4c17      	ldr	r4, [pc, #92]	; (3a44 <usb_serial_configure+0xfc>)
    39e6:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    39e8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    39ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    39f0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    39f4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    39f8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    39fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    3a00:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    3a02:	f8df 8044 	ldr.w	r8, [pc, #68]	; 3a48 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    3a06:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    3a08:	f8a8 3000 	strh.w	r3, [r8]
    3a0c:	e7aa      	b.n	3964 <usb_serial_configure+0x1c>
    3a0e:	bf00      	nop
    3a10:	200006f8 	.word	0x200006f8
    3a14:	20000734 	.word	0x20000734
    3a18:	20000880 	.word	0x20000880
    3a1c:	20000850 	.word	0x20000850
    3a20:	20000737 	.word	0x20000737
    3a24:	20000866 	.word	0x20000866
    3a28:	20000740 	.word	0x20000740
    3a2c:	20000864 	.word	0x20000864
    3a30:	20000724 	.word	0x20000724
    3a34:	20000840 	.word	0x20000840
    3a38:	0000367d 	.word	0x0000367d
    3a3c:	402e0000 	.word	0x402e0000
    3a40:	200006e8 	.word	0x200006e8
    3a44:	00003731 	.word	0x00003731
    3a48:	2000084e 	.word	0x2000084e
    3a4c:	20000860 	.word	0x20000860

00003a50 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    3a50:	4b31      	ldr	r3, [pc, #196]	; (3b18 <usb_serial_read+0xc8>)
    3a52:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    3a56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    3a5a:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    3a5c:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    3a5e:	4b2f      	ldr	r3, [pc, #188]	; (3b1c <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    3a60:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    3a62:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    3a64:	2900      	cmp	r1, #0
    3a66:	d053      	beq.n	3b10 <usb_serial_read+0xc0>
    3a68:	4b2d      	ldr	r3, [pc, #180]	; (3b20 <usb_serial_read+0xd0>)
    3a6a:	b2e4      	uxtb	r4, r4
    3a6c:	781b      	ldrb	r3, [r3, #0]
    3a6e:	429c      	cmp	r4, r3
    3a70:	d050      	beq.n	3b14 <usb_serial_read+0xc4>
    3a72:	4682      	mov	sl, r0
    3a74:	2700      	movs	r7, #0
    3a76:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 3b38 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    3a7a:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3a7c:	4b29      	ldr	r3, [pc, #164]	; (3b24 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    3a7e:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3a82:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    3a84:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3a86:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    3a88:	4b27      	ldr	r3, [pc, #156]	; (3b28 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    3a8a:	bf28      	it	cs
    3a8c:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    3a8e:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3a90:	4b24      	ldr	r3, [pc, #144]	; (3b24 <usb_serial_read+0xd4>)
    3a92:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    3a96:	4b25      	ldr	r3, [pc, #148]	; (3b2c <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3a98:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3a9c:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3aa0:	4b23      	ldr	r3, [pc, #140]	; (3b30 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    3aa2:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3aa6:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    3aa8:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3aaa:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    3aac:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    3aae:	d219      	bcs.n	3ae4 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    3ab0:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    3ab4:	4642      	mov	r2, r8
    3ab6:	4419      	add	r1, r3
    3ab8:	f000 fb42 	bl	4140 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    3abc:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    3abe:	f8db 1000 	ldr.w	r1, [fp]
    3ac2:	4648      	mov	r0, r9
			rx_index[i] += len;
    3ac4:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    3ac8:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    3acc:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    3ace:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    3ad2:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    3ad6:	4b17      	ldr	r3, [pc, #92]	; (3b34 <usb_serial_read+0xe4>)
    3ad8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3adc:	601a      	str	r2, [r3, #0]
	return count;
}
    3ade:	b003      	add	sp, #12
    3ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3ae4:	f000 fb2c 	bl	4140 <memcpy>
			p += avail;
			rx_available -= avail;
    3ae8:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    3aec:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    3aee:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    3af0:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    3af2:	44b2      	add	sl, r6
			rx_available -= avail;
    3af4:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    3af8:	4a08      	ldr	r2, [pc, #32]	; (3b1c <usb_serial_read+0xcc>)
    3afa:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    3afc:	f7ff fd88 	bl	3610 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    3b00:	45b9      	cmp	r9, r7
    3b02:	d903      	bls.n	3b0c <usb_serial_read+0xbc>
    3b04:	4b06      	ldr	r3, [pc, #24]	; (3b20 <usb_serial_read+0xd0>)
    3b06:	781b      	ldrb	r3, [r3, #0]
    3b08:	429c      	cmp	r4, r3
    3b0a:	d1b6      	bne.n	3a7a <usb_serial_read+0x2a>
    3b0c:	4638      	mov	r0, r7
    3b0e:	e7e2      	b.n	3ad6 <usb_serial_read+0x86>
    3b10:	4608      	mov	r0, r1
    3b12:	e7e0      	b.n	3ad6 <usb_serial_read+0x86>
    3b14:	2000      	movs	r0, #0
    3b16:	e7de      	b.n	3ad6 <usb_serial_read+0x86>
    3b18:	e000e18c 	.word	0xe000e18c
    3b1c:	20000840 	.word	0x20000840
    3b20:	20000864 	.word	0x20000864
    3b24:	20000724 	.word	0x20000724
    3b28:	20000844 	.word	0x20000844
    3b2c:	20000850 	.word	0x20000850
    3b30:	20200060 	.word	0x20200060
    3b34:	e000e10c 	.word	0xe000e10c
    3b38:	20000860 	.word	0x20000860

00003b3c <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    3b3c:	4b0b      	ldr	r3, [pc, #44]	; (3b6c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    3b3e:	4a0c      	ldr	r2, [pc, #48]	; (3b70 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    3b40:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    3b42:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    3b44:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    3b46:	4293      	cmp	r3, r2
    3b48:	d00d      	beq.n	3b66 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    3b4a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    3b4c:	4809      	ldr	r0, [pc, #36]	; (3b74 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3b4e:	4a0a      	ldr	r2, [pc, #40]	; (3b78 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    3b50:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3b52:	490a      	ldr	r1, [pc, #40]	; (3b7c <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    3b54:	bf28      	it	cs
    3b56:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    3b58:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3b5a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    3b5e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    3b62:	5c58      	ldrb	r0, [r3, r1]
    3b64:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    3b66:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    3b6a:	4770      	bx	lr
    3b6c:	20000840 	.word	0x20000840
    3b70:	20000864 	.word	0x20000864
    3b74:	20000844 	.word	0x20000844
    3b78:	20200060 	.word	0x20200060
    3b7c:	20000724 	.word	0x20000724

00003b80 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    3b80:	4b01      	ldr	r3, [pc, #4]	; (3b88 <usb_serial_available+0x8>)
    3b82:	6818      	ldr	r0, [r3, #0]
}
    3b84:	4770      	bx	lr
    3b86:	bf00      	nop
    3b88:	20000860 	.word	0x20000860

00003b8c <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    3b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    3b90:	4e15      	ldr	r6, [pc, #84]	; (3be8 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    3b92:	4d16      	ldr	r5, [pc, #88]	; (3bec <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    3b94:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    3b96:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    3b98:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    3b9a:	429c      	cmp	r4, r3
    3b9c:	d021      	beq.n	3be2 <usb_serial_flush_input+0x56>
    3b9e:	f8df 9054 	ldr.w	r9, [pc, #84]	; 3bf4 <usb_serial_flush_input+0x68>
    3ba2:	f8df b054 	ldr.w	fp, [pc, #84]	; 3bf8 <usb_serial_flush_input+0x6c>
    3ba6:	f8df 8054 	ldr.w	r8, [pc, #84]	; 3bfc <usb_serial_flush_input+0x70>
    3baa:	4f11      	ldr	r7, [pc, #68]	; (3bf0 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    3bac:	3401      	adds	r4, #1
    3bae:	2c08      	cmp	r4, #8
    3bb0:	fa5f fa84 	uxtb.w	sl, r4
    3bb4:	d901      	bls.n	3bba <usb_serial_flush_input+0x2e>
    3bb6:	2400      	movs	r4, #0
    3bb8:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    3bba:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    3bbe:	f8db 2000 	ldr.w	r2, [fp]
    3bc2:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    3bc6:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    3bc8:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    3bcc:	1a5b      	subs	r3, r3, r1
    3bce:	1ad3      	subs	r3, r2, r3
    3bd0:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    3bd4:	f7ff fd1c 	bl	3610 <rx_queue_transfer>
		rx_tail = tail;
    3bd8:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    3bdc:	782b      	ldrb	r3, [r5, #0]
    3bde:	429c      	cmp	r4, r3
    3be0:	d1e4      	bne.n	3bac <usb_serial_flush_input+0x20>
    3be2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3be6:	bf00      	nop
    3be8:	20000840 	.word	0x20000840
    3bec:	20000864 	.word	0x20000864
    3bf0:	20000724 	.word	0x20000724
    3bf4:	20000844 	.word	0x20000844
    3bf8:	20000860 	.word	0x20000860
    3bfc:	20000850 	.word	0x20000850

00003c00 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    3c00:	b500      	push	{lr}
    3c02:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    3c04:	2101      	movs	r1, #1
    3c06:	f10d 0007 	add.w	r0, sp, #7
    3c0a:	f7ff ff21 	bl	3a50 <usb_serial_read>
    3c0e:	b120      	cbz	r0, 3c1a <usb_serial_getchar+0x1a>
    3c10:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    3c14:	b003      	add	sp, #12
    3c16:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    3c1a:	f04f 30ff 	mov.w	r0, #4294967295
    3c1e:	e7f9      	b.n	3c14 <usb_serial_getchar+0x14>

00003c20 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    3c20:	4b09      	ldr	r3, [pc, #36]	; (3c48 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    3c22:	b500      	push	{lr}
    3c24:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    3c26:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    3c28:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    3c2c:	b923      	cbnz	r3, 3c38 <usb_serial_putchar+0x18>
    3c2e:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    3c32:	b003      	add	sp, #12
    3c34:	f85d fb04 	ldr.w	pc, [sp], #4
    3c38:	2101      	movs	r1, #1
    3c3a:	f10d 0007 	add.w	r0, sp, #7
    3c3e:	f7ff fdc3 	bl	37c8 <usb_serial_write.part.1>
    3c42:	b003      	add	sp, #12
    3c44:	f85d fb04 	ldr.w	pc, [sp], #4
    3c48:	20000720 	.word	0x20000720

00003c4c <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    3c4c:	4b04      	ldr	r3, [pc, #16]	; (3c60 <usb_serial_write+0x14>)
    3c4e:	781b      	ldrb	r3, [r3, #0]
    3c50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    3c54:	b10b      	cbz	r3, 3c5a <usb_serial_write+0xe>
    3c56:	f7ff bdb7 	b.w	37c8 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    3c5a:	4610      	mov	r0, r2
    3c5c:	4770      	bx	lr
    3c5e:	bf00      	nop
    3c60:	20000720 	.word	0x20000720

00003c64 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    3c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    3c68:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    3c6a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 3cac <usb_serial_write_buffer_free+0x48>
    3c6e:	2301      	movs	r3, #1
    3c70:	4d0c      	ldr	r5, [pc, #48]	; (3ca4 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    3c72:	4627      	mov	r7, r4
    3c74:	4e0c      	ldr	r6, [pc, #48]	; (3ca8 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    3c76:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    3c7a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    3c7c:	4628      	mov	r0, r5
    3c7e:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    3c80:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    3c82:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    3c86:	d005      	beq.n	3c94 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    3c88:	f7ff fc94 	bl	35b4 <usb_transfer_status>
    3c8c:	0603      	lsls	r3, r0, #24
    3c8e:	bf58      	it	pl
    3c90:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    3c94:	2c04      	cmp	r4, #4
    3c96:	d1f0      	bne.n	3c7a <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    3c98:	2300      	movs	r3, #0
	return sum;
}
    3c9a:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    3c9c:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    3ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ca4:	20000880 	.word	0x20000880
    3ca8:	20000737 	.word	0x20000737
    3cac:	20000736 	.word	0x20000736

00003cb0 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    3cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    3cb4:	4b1f      	ldr	r3, [pc, #124]	; (3d34 <usb_serial_flush_output+0x84>)
    3cb6:	781b      	ldrb	r3, [r3, #0]
    3cb8:	b113      	cbz	r3, 3cc0 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    3cba:	4d1f      	ldr	r5, [pc, #124]	; (3d38 <usb_serial_flush_output+0x88>)
    3cbc:	882a      	ldrh	r2, [r5, #0]
    3cbe:	b90a      	cbnz	r2, 3cc4 <usb_serial_flush_output+0x14>
    3cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    3cc4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 3d4c <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    3cc8:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    3ccc:	4e1b      	ldr	r6, [pc, #108]	; (3d3c <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    3cce:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    3cd2:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3cd6:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3cd8:	4c19      	ldr	r4, [pc, #100]	; (3d40 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3cda:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    3cdc:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    3ce0:	4f18      	ldr	r7, [pc, #96]	; (3d44 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3ce2:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3ce6:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    3ce8:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3cec:	4621      	mov	r1, r4
    3cee:	f7ff fc23 	bl	3538 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    3cf2:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3cf6:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    3cfa:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    3cfe:	4b12      	ldr	r3, [pc, #72]	; (3d48 <usb_serial_flush_output+0x98>)
    3d00:	6019      	str	r1, [r3, #0]
		location += 32;
    3d02:	3120      	adds	r1, #32
	} while (location < end_addr);
    3d04:	428a      	cmp	r2, r1
    3d06:	d8fb      	bhi.n	3d00 <usb_serial_flush_output+0x50>
	asm("dsb");
    3d08:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3d0c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    3d10:	2004      	movs	r0, #4
    3d12:	4631      	mov	r1, r6
    3d14:	f7ff fc28 	bl	3568 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    3d18:	f898 3000 	ldrb.w	r3, [r8]
    3d1c:	4a0b      	ldr	r2, [pc, #44]	; (3d4c <usb_serial_flush_output+0x9c>)
    3d1e:	3301      	adds	r3, #1
    3d20:	b2db      	uxtb	r3, r3
    3d22:	2b03      	cmp	r3, #3
    3d24:	bf88      	it	hi
    3d26:	2300      	movhi	r3, #0
    3d28:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    3d2a:	2300      	movs	r3, #0
    3d2c:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    3d2e:	703b      	strb	r3, [r7, #0]
    3d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3d34:	20000720 	.word	0x20000720
    3d38:	20000866 	.word	0x20000866
    3d3c:	20000880 	.word	0x20000880
    3d40:	20201060 	.word	0x20201060
    3d44:	20000736 	.word	0x20000736
    3d48:	e000ef70 	.word	0xe000ef70
    3d4c:	20000737 	.word	0x20000737

00003d50 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    3d50:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3d52:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3d56:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    3d58:	7f43      	ldrb	r3, [r0, #29]
    3d5a:	b933      	cbnz	r3, 3d6a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    3d5c:	7f01      	ldrb	r1, [r0, #28]
    3d5e:	2901      	cmp	r1, #1
    3d60:	d008      	beq.n	3d74 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    3d62:	2903      	cmp	r1, #3
    3d64:	d010      	beq.n	3d88 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    3d66:	2301      	movs	r3, #1
    3d68:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3d6a:	b902      	cbnz	r2, 3d6e <EventResponder::triggerEventNotImmediate()+0x1e>
    3d6c:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    3d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
    3d72:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    3d74:	4c11      	ldr	r4, [pc, #68]	; (3dbc <EventResponder::triggerEventNotImmediate()+0x6c>)
    3d76:	6821      	ldr	r1, [r4, #0]
    3d78:	b1a1      	cbz	r1, 3da4 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3d7a:	4911      	ldr	r1, [pc, #68]	; (3dc0 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    3d7c:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    3d7e:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    3d80:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    3d82:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    3d84:	6158      	str	r0, [r3, #20]
    3d86:	e7ee      	b.n	3d66 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    3d88:	4c0e      	ldr	r4, [pc, #56]	; (3dc4 <EventResponder::triggerEventNotImmediate()+0x74>)
    3d8a:	6821      	ldr	r1, [r4, #0]
    3d8c:	b181      	cbz	r1, 3db0 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3d8e:	490e      	ldr	r1, [pc, #56]	; (3dc8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    3d90:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    3d92:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    3d94:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    3d96:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    3d98:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    3d9a:	4b0c      	ldr	r3, [pc, #48]	; (3dcc <EventResponder::triggerEventNotImmediate()+0x7c>)
    3d9c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3da0:	6019      	str	r1, [r3, #0]
    3da2:	e7e0      	b.n	3d66 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    3da4:	4b06      	ldr	r3, [pc, #24]	; (3dc0 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    3da6:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    3da8:	6181      	str	r1, [r0, #24]
				firstYield = this;
    3daa:	6020      	str	r0, [r4, #0]
				lastYield = this;
    3dac:	6018      	str	r0, [r3, #0]
    3dae:	e7da      	b.n	3d66 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    3db0:	4b05      	ldr	r3, [pc, #20]	; (3dc8 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    3db2:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    3db4:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    3db6:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    3db8:	6018      	str	r0, [r3, #0]
    3dba:	e7ee      	b.n	3d9a <EventResponder::triggerEventNotImmediate()+0x4a>
    3dbc:	20000910 	.word	0x20000910
    3dc0:	2000090c 	.word	0x2000090c
    3dc4:	20000900 	.word	0x20000900
    3dc8:	20000904 	.word	0x20000904
    3dcc:	e000ed04 	.word	0xe000ed04

00003dd0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3dd0:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3dd2:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    3dd6:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3dd8:	4c0c      	ldr	r4, [pc, #48]	; (3e0c <EventResponder::runFromInterrupt()+0x3c>)
    3dda:	6823      	ldr	r3, [r4, #0]
		if (first) {
    3ddc:	b18b      	cbz	r3, 3e02 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3dde:	4e0c      	ldr	r6, [pc, #48]	; (3e10 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3de0:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3de2:	695a      	ldr	r2, [r3, #20]
    3de4:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    3de6:	b17a      	cbz	r2, 3e08 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    3de8:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3dea:	b901      	cbnz	r1, 3dee <EventResponder::runFromInterrupt()+0x1e>
    3dec:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3dee:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    3df0:	4618      	mov	r0, r3
    3df2:	689b      	ldr	r3, [r3, #8]
    3df4:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3df6:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    3dfa:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3dfc:	6823      	ldr	r3, [r4, #0]
		if (first) {
    3dfe:	2b00      	cmp	r3, #0
    3e00:	d1ef      	bne.n	3de2 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3e02:	b901      	cbnz	r1, 3e06 <EventResponder::runFromInterrupt()+0x36>
    3e04:	b662      	cpsie	i
    3e06:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3e08:	6032      	str	r2, [r6, #0]
    3e0a:	e7ee      	b.n	3dea <EventResponder::runFromInterrupt()+0x1a>
    3e0c:	20000900 	.word	0x20000900
    3e10:	20000904 	.word	0x20000904

00003e14 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3e14:	f7ff bfdc 	b.w	3dd0 <EventResponder::runFromInterrupt()>

00003e18 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    3e18:	4a18      	ldr	r2, [pc, #96]	; (3e7c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    3e1a:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    3e1c:	6814      	ldr	r4, [r2, #0]
    3e1e:	2c00      	cmp	r4, #0
    3e20:	d028      	beq.n	3e74 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    3e22:	6803      	ldr	r3, [r0, #0]
    3e24:	6821      	ldr	r1, [r4, #0]
    3e26:	428b      	cmp	r3, r1
    3e28:	d20f      	bcs.n	3e4a <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3e2a:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    3e2c:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    3e2e:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    3e30:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3e32:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    3e34:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    3e36:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3e38:	2302      	movs	r3, #2
}
    3e3a:	bc30      	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3e3c:	7503      	strb	r3, [r0, #20]
}
    3e3e:	4770      	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    3e40:	6003      	str	r3, [r0, #0]
    3e42:	4614      	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    3e44:	6811      	ldr	r1, [r2, #0]
    3e46:	428b      	cmp	r3, r1
    3e48:	d308      	bcc.n	3e5c <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3e4a:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    3e4c:	1a5b      	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3e4e:	2a00      	cmp	r2, #0
    3e50:	d1f6      	bne.n	3e40 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    3e52:	6082      	str	r2, [r0, #8]
		_prev = timer;
    3e54:	60c4      	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    3e56:	6003      	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    3e58:	60a0      	str	r0, [r4, #8]
    3e5a:	e7ed      	b.n	3e38 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    3e5c:	68d5      	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    3e5e:	1acb      	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    3e60:	6082      	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    3e62:	2202      	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    3e64:	60c5      	str	r5, [r0, #12]
				timer->_prev = this;
    3e66:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    3e68:	68c1      	ldr	r1, [r0, #12]
    3e6a:	6088      	str	r0, [r1, #8]
				timer->_ms -= _ms;
    3e6c:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    3e6e:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    3e70:	bc30      	pop	{r4, r5}
    3e72:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    3e74:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    3e76:	60c4      	str	r4, [r0, #12]
		listActive = this;
    3e78:	6010      	str	r0, [r2, #0]
    3e7a:	e7dd      	b.n	3e38 <MillisTimer::addToActiveList()+0x20>
    3e7c:	20000908 	.word	0x20000908

00003e80 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    3e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    3e82:	4e22      	ldr	r6, [pc, #136]	; (3f0c <MillisTimer::runFromTimer()+0x8c>)
    3e84:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    3e86:	b32c      	cbz	r4, 3ed4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3e88:	6823      	ldr	r3, [r4, #0]
    3e8a:	2b00      	cmp	r3, #0
    3e8c:	d13a      	bne.n	3f04 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    3e8e:	461d      	mov	r5, r3
    3e90:	4f1f      	ldr	r7, [pc, #124]	; (3f10 <MillisTimer::runFromTimer()+0x90>)
    3e92:	e004      	b.n	3e9e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    3e94:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3e96:	b1ec      	cbz	r4, 3ed4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    3e98:	6823      	ldr	r3, [r4, #0]
    3e9a:	2b00      	cmp	r3, #0
    3e9c:	d132      	bne.n	3f04 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    3e9e:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    3ea0:	b103      	cbz	r3, 3ea4 <MillisTimer::runFromTimer()+0x24>
    3ea2:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    3ea4:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    3ea6:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3ea8:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    3eaa:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3eac:	681b      	ldr	r3, [r3, #0]
    3eae:	42bb      	cmp	r3, r7
    3eb0:	d121      	bne.n	3ef6 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3eb2:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3eb4:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3eb6:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3eb8:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    3eba:	d020      	beq.n	3efe <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3ebc:	f7ff ff48 	bl	3d50 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    3ec0:	6863      	ldr	r3, [r4, #4]
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	d0e6      	beq.n	3e94 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    3ec6:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    3ec8:	4620      	mov	r0, r4
    3eca:	f7ff ffa5 	bl	3e18 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    3ece:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3ed0:	2c00      	cmp	r4, #0
    3ed2:	d1e1      	bne.n	3e98 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3ed4:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    3ed8:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3eda:	4a0e      	ldr	r2, [pc, #56]	; (3f14 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3edc:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3ede:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3ee0:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    3ee2:	b903      	cbnz	r3, 3ee6 <MillisTimer::runFromTimer()+0x66>
    3ee4:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    3ee6:	b128      	cbz	r0, 3ef4 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    3ee8:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    3eea:	f7ff ff95 	bl	3e18 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    3eee:	4620      	mov	r0, r4
    3ef0:	2800      	cmp	r0, #0
    3ef2:	d1f9      	bne.n	3ee8 <MillisTimer::runFromTimer()+0x68>
    3ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3ef6:	4622      	mov	r2, r4
    3ef8:	2100      	movs	r1, #0
    3efa:	4798      	blx	r3
    3efc:	e7e0      	b.n	3ec0 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3efe:	6883      	ldr	r3, [r0, #8]
    3f00:	4798      	blx	r3
    3f02:	e7dd      	b.n	3ec0 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    3f04:	3b01      	subs	r3, #1
    3f06:	6023      	str	r3, [r4, #0]
			break;
    3f08:	e7e4      	b.n	3ed4 <MillisTimer::runFromTimer()+0x54>
    3f0a:	bf00      	nop
    3f0c:	20000908 	.word	0x20000908
    3f10:	000026d5 	.word	0x000026d5
    3f14:	20000918 	.word	0x20000918

00003f18 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3f18:	4a04      	ldr	r2, [pc, #16]	; (3f2c <systick_isr+0x14>)
    3f1a:	4b05      	ldr	r3, [pc, #20]	; (3f30 <systick_isr+0x18>)
    3f1c:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    3f1e:	4a05      	ldr	r2, [pc, #20]	; (3f34 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3f20:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    3f22:	6813      	ldr	r3, [r2, #0]
    3f24:	3301      	adds	r3, #1
    3f26:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    3f28:	f7ff bfaa 	b.w	3e80 <MillisTimer::runFromTimer()>
    3f2c:	e0001004 	.word	0xe0001004
    3f30:	200006cc 	.word	0x200006cc
    3f34:	200006d4 	.word	0x200006d4

00003f38 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3f38:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3f3a:	f7fc fa13 	bl	364 <setup>
	while (1) {
		loop();
    3f3e:	f7fc fbed 	bl	71c <loop>
		yield();
    3f42:	f000 f8ad 	bl	40a0 <yield>
    3f46:	e7fa      	b.n	3f3e <main+0x6>

00003f48 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3f48:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    3f4a:	4c06      	ldr	r4, [pc, #24]	; (3f64 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3f4c:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3f4e:	6803      	ldr	r3, [r0, #0]
    3f50:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3f52:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    3f54:	a901      	add	r1, sp, #4
    3f56:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3f58:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    3f5c:	4798      	blx	r3
}
    3f5e:	b002      	add	sp, #8
    3f60:	bd10      	pop	{r4, pc}
    3f62:	bf00      	nop
    3f64:	200003b0 	.word	0x200003b0

00003f68 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    3f68:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f6a:	4606      	mov	r6, r0
    3f6c:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    3f6e:	2a00      	cmp	r2, #0
    3f70:	d033      	beq.n	3fda <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    3f72:	2a01      	cmp	r2, #1
    3f74:	bf08      	it	eq
    3f76:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    3f78:	b351      	cbz	r1, 3fd0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    3f7a:	2521      	movs	r5, #33	; 0x21
    3f7c:	e000      	b.n	3f80 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    3f7e:	b2fd      	uxtb	r5, r7
    3f80:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    3f82:	fbb1 f4f2 	udiv	r4, r1, r2
    3f86:	fb02 1114 	mls	r1, r2, r4, r1
    3f8a:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3f8c:	2909      	cmp	r1, #9
    3f8e:	f100 0137 	add.w	r1, r0, #55	; 0x37
    3f92:	f100 0030 	add.w	r0, r0, #48	; 0x30
    3f96:	bf88      	it	hi
    3f98:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    3f9a:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3f9c:	ac0a      	add	r4, sp, #40	; 0x28
    3f9e:	bf98      	it	ls
    3fa0:	b2c0      	uxtbls	r0, r0
    3fa2:	442c      	add	r4, r5
    3fa4:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    3fa8:	2900      	cmp	r1, #0
    3faa:	d1e8      	bne.n	3f7e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    3fac:	b133      	cbz	r3, 3fbc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    3fae:	3d01      	subs	r5, #1
		buf[i] = '-';
    3fb0:	ab0a      	add	r3, sp, #40	; 0x28
    3fb2:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    3fb4:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    3fb6:	442b      	add	r3, r5
    3fb8:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    3fbc:	6833      	ldr	r3, [r6, #0]
    3fbe:	a901      	add	r1, sp, #4
    3fc0:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    3fc4:	4630      	mov	r0, r6
    3fc6:	4429      	add	r1, r5
    3fc8:	685b      	ldr	r3, [r3, #4]
    3fca:	4798      	blx	r3
}
    3fcc:	b00b      	add	sp, #44	; 0x2c
    3fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    3fd0:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    3fd2:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    3fd4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    3fd8:	e7e8      	b.n	3fac <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    3fda:	6803      	ldr	r3, [r0, #0]
    3fdc:	b2c9      	uxtb	r1, r1
    3fde:	681b      	ldr	r3, [r3, #0]
    3fe0:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    3fe2:	b00b      	add	sp, #44	; 0x2c
    3fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fe6:	bf00      	nop

00003fe8 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3fe8:	f7ff bdd0 	b.w	3b8c <usb_serial_flush_input>

00003fec <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    3fec:	f7ff bda6 	b.w	3b3c <usb_serial_peekchar>

00003ff0 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3ff0:	f7ff be06 	b.w	3c00 <usb_serial_getchar>

00003ff4 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3ff4:	f7ff bdc4 	b.w	3b80 <usb_serial_available>

00003ff8 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3ff8:	f7ff be5a 	b.w	3cb0 <usb_serial_flush_output>

00003ffc <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3ffc:	f7ff be32 	b.w	3c64 <usb_serial_write_buffer_free>

00004000 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4000:	4608      	mov	r0, r1
    4002:	4611      	mov	r1, r2
    4004:	f7ff be22 	b.w	3c4c <usb_serial_write>

00004008 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4008:	4608      	mov	r0, r1
    400a:	f7ff be09 	b.w	3c20 <usb_serial_putchar>
    400e:	bf00      	nop

00004010 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    4010:	4b01      	ldr	r3, [pc, #4]	; (4018 <serialEvent()+0x8>)
    4012:	2200      	movs	r2, #0
    4014:	701a      	strb	r2, [r3, #0]
    4016:	4770      	bx	lr
    4018:	2000041e 	.word	0x2000041e

0000401c <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    401c:	b5f0      	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    401e:	4c19      	ldr	r4, [pc, #100]	; (4084 <random(unsigned long) [clone .part.0]+0x68>)
    4020:	6823      	ldr	r3, [r4, #0]
	if (x == 0) x = 123459876;
    4022:	b30b      	cbz	r3, 4068 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    4024:	4918      	ldr	r1, [pc, #96]	; (4088 <random(unsigned long) [clone .part.0]+0x6c>)
    4026:	17dd      	asrs	r5, r3, #31
    4028:	f8df e068 	ldr.w	lr, [pc, #104]	; 4094 <random(unsigned long) [clone .part.0]+0x78>
    402c:	fb83 6701 	smull	r6, r7, r3, r1
    4030:	4e16      	ldr	r6, [pc, #88]	; (408c <random(unsigned long) [clone .part.0]+0x70>)
    4032:	fb81 2103 	smull	r2, r1, r1, r3
    4036:	19da      	adds	r2, r3, r7
    4038:	4419      	add	r1, r3
    403a:	ebc5 4222 	rsb	r2, r5, r2, asr #16
    403e:	ebc5 4121 	rsb	r1, r5, r1, asr #16
    4042:	f244 15a7 	movw	r5, #16807	; 0x41a7
    4046:	fb0e 3212 	mls	r2, lr, r2, r3
    404a:	fb06 f101 	mul.w	r1, r6, r1
    404e:	fb05 1302 	mla	r3, r5, r2, r1
	if (x < 0) x += 0x7FFFFFFF;
    4052:	2b00      	cmp	r3, #0
    4054:	da0f      	bge.n	4076 <random(unsigned long) [clone .part.0]+0x5a>
    4056:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    405a:	441a      	add	r2, r3
    405c:	fbb2 f3f0 	udiv	r3, r2, r0
	seed = x;
    4060:	6022      	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    4062:	fb00 2013 	mls	r0, r0, r3, r2
    4066:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    4068:	4a09      	ldr	r2, [pc, #36]	; (4090 <random(unsigned long) [clone .part.0]+0x74>)
    406a:	fbb2 f3f0 	udiv	r3, r2, r0
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    406e:	6022      	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    4070:	fb00 2013 	mls	r0, r0, r3, r2
    4074:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4076:	461a      	mov	r2, r3
    4078:	fbb2 f3f0 	udiv	r3, r2, r0
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    407c:	6022      	str	r2, [r4, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    407e:	fb00 2013 	mls	r0, r0, r3, r2
    4082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4084:	2000091c 	.word	0x2000091c
    4088:	834e0b5f 	.word	0x834e0b5f
    408c:	fffff4ec 	.word	0xfffff4ec
    4090:	1f0cce42 	.word	0x1f0cce42
    4094:	0001f31d 	.word	0x0001f31d

00004098 <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    4098:	b108      	cbz	r0, 409e <random(unsigned long)+0x6>
    409a:	f7ff bfbf 	b.w	401c <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    409e:	4770      	bx	lr

000040a0 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    40a0:	b570      	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    40a2:	4c21      	ldr	r4, [pc, #132]	; (4128 <yield+0x88>)
    40a4:	7823      	ldrb	r3, [r4, #0]
    40a6:	b983      	cbnz	r3, 40ca <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    40a8:	4b20      	ldr	r3, [pc, #128]	; (412c <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    40aa:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    40ac:	781b      	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    40ae:	7022      	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    40b0:	bb1b      	cbnz	r3, 40fa <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    40b2:	4b1f      	ldr	r3, [pc, #124]	; (4130 <yield+0x90>)
    40b4:	781b      	ldrb	r3, [r3, #0]
    40b6:	2b00      	cmp	r3, #0
    40b8:	d129      	bne.n	410e <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    40ba:	4b1e      	ldr	r3, [pc, #120]	; (4134 <yield+0x94>)

	running = 0;
    40bc:	2100      	movs	r1, #0
    40be:	681a      	ldr	r2, [r3, #0]
    40c0:	7021      	strb	r1, [r4, #0]
    40c2:	b112      	cbz	r2, 40ca <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    40c4:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    40c8:	b102      	cbz	r2, 40cc <yield+0x2c>
    40ca:	bd70      	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    40cc:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    40d0:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    40d2:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    40d4:	b1f2      	cbz	r2, 4114 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    40d6:	4c18      	ldr	r4, [pc, #96]	; (4138 <yield+0x98>)
    40d8:	7821      	ldrb	r1, [r4, #0]
    40da:	b9d9      	cbnz	r1, 4114 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    40dc:	2601      	movs	r6, #1
		firstYield = first->_next;
    40de:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    40e0:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    40e2:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    40e4:	b1d5      	cbz	r5, 411c <yield+0x7c>
			firstYield->_prev = nullptr;
    40e6:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    40e8:	b900      	cbnz	r0, 40ec <yield+0x4c>
    40ea:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    40ec:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    40ee:	6893      	ldr	r3, [r2, #8]
    40f0:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    40f2:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    40f4:	4798      	blx	r3
		runningFromYield = false;
    40f6:	7025      	strb	r5, [r4, #0]
    40f8:	bd70      	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    40fa:	f7ff fd41 	bl	3b80 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    40fe:	2800      	cmp	r0, #0
    4100:	d0d7      	beq.n	40b2 <yield+0x12>
    4102:	f7ff ff85 	bl	4010 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    4106:	4b0a      	ldr	r3, [pc, #40]	; (4130 <yield+0x90>)
    4108:	781b      	ldrb	r3, [r3, #0]
    410a:	2b00      	cmp	r3, #0
    410c:	d0d5      	beq.n	40ba <yield+0x1a>
    410e:	f000 fa35 	bl	457c <HardwareSerial::processSerialEvents()>
    4112:	e7d2      	b.n	40ba <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4114:	2800      	cmp	r0, #0
    4116:	d1d8      	bne.n	40ca <yield+0x2a>
    4118:	b662      	cpsie	i
    411a:	bd70      	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    411c:	4b07      	ldr	r3, [pc, #28]	; (413c <yield+0x9c>)
    411e:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4120:	2800      	cmp	r0, #0
    4122:	d1e3      	bne.n	40ec <yield+0x4c>
    4124:	e7e1      	b.n	40ea <yield+0x4a>
    4126:	bf00      	nop
    4128:	20000920 	.word	0x20000920
    412c:	2000041e 	.word	0x2000041e
    4130:	20000940 	.word	0x20000940
    4134:	20000910 	.word	0x20000910
    4138:	20000914 	.word	0x20000914
    413c:	2000090c 	.word	0x2000090c

00004140 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    4140:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    4142:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    4146:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    414a:	d16d      	bne.n	4228 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    414c:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    414e:	d341      	bcc.n	41d4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    4150:	f851 3b04 	ldr.w	r3, [r1], #4
    4154:	f840 3b04 	str.w	r3, [r0], #4
    4158:	f851 3b04 	ldr.w	r3, [r1], #4
    415c:	f840 3b04 	str.w	r3, [r0], #4
    4160:	f851 3b04 	ldr.w	r3, [r1], #4
    4164:	f840 3b04 	str.w	r3, [r0], #4
    4168:	f851 3b04 	ldr.w	r3, [r1], #4
    416c:	f840 3b04 	str.w	r3, [r0], #4
    4170:	f851 3b04 	ldr.w	r3, [r1], #4
    4174:	f840 3b04 	str.w	r3, [r0], #4
    4178:	f851 3b04 	ldr.w	r3, [r1], #4
    417c:	f840 3b04 	str.w	r3, [r0], #4
    4180:	f851 3b04 	ldr.w	r3, [r1], #4
    4184:	f840 3b04 	str.w	r3, [r0], #4
    4188:	f851 3b04 	ldr.w	r3, [r1], #4
    418c:	f840 3b04 	str.w	r3, [r0], #4
    4190:	f851 3b04 	ldr.w	r3, [r1], #4
    4194:	f840 3b04 	str.w	r3, [r0], #4
    4198:	f851 3b04 	ldr.w	r3, [r1], #4
    419c:	f840 3b04 	str.w	r3, [r0], #4
    41a0:	f851 3b04 	ldr.w	r3, [r1], #4
    41a4:	f840 3b04 	str.w	r3, [r0], #4
    41a8:	f851 3b04 	ldr.w	r3, [r1], #4
    41ac:	f840 3b04 	str.w	r3, [r0], #4
    41b0:	f851 3b04 	ldr.w	r3, [r1], #4
    41b4:	f840 3b04 	str.w	r3, [r0], #4
    41b8:	f851 3b04 	ldr.w	r3, [r1], #4
    41bc:	f840 3b04 	str.w	r3, [r0], #4
    41c0:	f851 3b04 	ldr.w	r3, [r1], #4
    41c4:	f840 3b04 	str.w	r3, [r0], #4
    41c8:	f851 3b04 	ldr.w	r3, [r1], #4
    41cc:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    41d0:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    41d2:	d2bd      	bcs.n	4150 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    41d4:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    41d6:	d311      	bcc.n	41fc <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    41d8:	f851 3b04 	ldr.w	r3, [r1], #4
    41dc:	f840 3b04 	str.w	r3, [r0], #4
    41e0:	f851 3b04 	ldr.w	r3, [r1], #4
    41e4:	f840 3b04 	str.w	r3, [r0], #4
    41e8:	f851 3b04 	ldr.w	r3, [r1], #4
    41ec:	f840 3b04 	str.w	r3, [r0], #4
    41f0:	f851 3b04 	ldr.w	r3, [r1], #4
    41f4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    41f8:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    41fa:	d2ed      	bcs.n	41d8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    41fc:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    41fe:	d305      	bcc.n	420c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    4200:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    4204:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    4208:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    420a:	d2f9      	bcs.n	4200 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    420c:	3204      	adds	r2, #4
	beq	.Ldone
    420e:	d008      	beq.n	4222 <memcpy+0xe2>

	lsls	r2, r2, #31
    4210:	07d2      	lsls	r2, r2, #31
	itt ne
    4212:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    4214:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    4218:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    421c:	d301      	bcc.n	4222 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    421e:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    4220:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    4222:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    4224:	4770      	bx	lr
    4226:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    4228:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    422a:	d313      	bcc.n	4254 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    422c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    422e:	d08d      	beq.n	414c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    4230:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    4234:	d08a      	beq.n	414c <memcpy+0xc>

	rsb	r3, #4
    4236:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    423a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    423c:	07db      	lsls	r3, r3, #31
	itt ne
    423e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    4240:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    4244:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    4248:	d380      	bcc.n	414c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    424a:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    424e:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    4252:	e77b      	b.n	414c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    4254:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    4256:	d3d9      	bcc.n	420c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    4258:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    425a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    425e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    4262:	d2f9      	bcs.n	4258 <memcpy+0x118>

	ldrb	r3, [r1]
    4264:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    4266:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    4268:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    426a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    426c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    426e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    4270:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    4272:	4770      	bx	lr

00004274 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    4274:	b4f0      	push	{r4, r5, r6, r7}
    4276:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    4278:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    427a:	4637      	mov	r7, r6
    427c:	e000      	b.n	4280 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    427e:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    4280:	fbb0 f3f2 	udiv	r3, r0, r2
    4284:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4288:	f100 0437 	add.w	r4, r0, #55	; 0x37
    428c:	2809      	cmp	r0, #9
    428e:	f100 0030 	add.w	r0, r0, #48	; 0x30
    4292:	b2e4      	uxtb	r4, r4
    4294:	bf98      	it	ls
    4296:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    4298:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    429a:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    429e:	2b00      	cmp	r3, #0
    42a0:	d1ed      	bne.n	427e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    42a2:	194a      	adds	r2, r1, r5
    42a4:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    42a6:	b14d      	cbz	r5, 42bc <ultoa+0x48>
    42a8:	3301      	adds	r3, #1
		t = buf[j];
    42aa:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    42ae:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    42b0:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    42b2:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    42b4:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    42b6:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    42ba:	dbf5      	blt.n	42a8 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    42bc:	4608      	mov	r0, r1
    42be:	bcf0      	pop	{r4, r5, r6, r7}
    42c0:	4770      	bx	lr
    42c2:	bf00      	nop

000042c4 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    42c4:	48a4      	ldr	r0, [pc, #656]	; (4558 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    42c6:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    42ca:	4ba4      	ldr	r3, [pc, #656]	; (455c <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    42cc:	6f82      	ldr	r2, [r0, #120]	; 0x78
    42ce:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    42d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    42d4:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    42d6:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    42d8:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    42dc:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    42e0:	4c9f      	ldr	r4, [pc, #636]	; (4560 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    42e2:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    42e6:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    42e8:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    42ec:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    42ee:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    42f0:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    42f4:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    42f8:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    42fc:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    4300:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    4304:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    4308:	b280      	uxth	r0, r0
    430a:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    430e:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    4312:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    4316:	4b91      	ldr	r3, [pc, #580]	; (455c <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    4318:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    431a:	2500      	movs	r5, #0
    431c:	0140      	lsls	r0, r0, #5
    431e:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    4320:	2904      	cmp	r1, #4
    4322:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4324:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4328:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    432a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    432c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    432e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    4330:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    4332:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    4334:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    4336:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    4338:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    433a:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    433c:	d1e9      	bne.n	4312 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    433e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    4342:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4346:	4b87      	ldr	r3, [pc, #540]	; (4564 <pwm_init+0x2a0>)
    4348:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    434c:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    434e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4350:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    4354:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4356:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    435a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    435e:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    4362:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    4366:	b280      	uxth	r0, r0
    4368:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    436c:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4370:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    4374:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    4378:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    437c:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    4380:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    4384:	b280      	uxth	r0, r0
    4386:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    438a:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    438e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    4392:	4b74      	ldr	r3, [pc, #464]	; (4564 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    4394:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    4396:	2500      	movs	r5, #0
    4398:	0140      	lsls	r0, r0, #5
    439a:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    439c:	2904      	cmp	r1, #4
    439e:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    43a0:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    43a2:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    43a6:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    43a8:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    43aa:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    43ac:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    43ae:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    43b0:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    43b2:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    43b4:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    43b6:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    43b8:	d1e9      	bne.n	438e <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    43ba:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    43be:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    43c2:	4b69      	ldr	r3, [pc, #420]	; (4568 <pwm_init+0x2a4>)
    43c4:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    43c8:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    43ca:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    43cc:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    43d0:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    43d2:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    43d6:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    43da:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    43de:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    43e2:	b280      	uxth	r0, r0
    43e4:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    43e8:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    43ec:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    43f0:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    43f4:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    43f8:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    43fc:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    4400:	b280      	uxth	r0, r0
    4402:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    4406:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    440a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    440e:	4b56      	ldr	r3, [pc, #344]	; (4568 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    4410:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    4412:	2500      	movs	r5, #0
    4414:	0140      	lsls	r0, r0, #5
    4416:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    4418:	2904      	cmp	r1, #4
    441a:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    441c:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    441e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    4422:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    4424:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    4426:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    4428:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    442a:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    442c:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    442e:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    4430:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    4432:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    4434:	d1e9      	bne.n	440a <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4436:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    443a:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    443e:	4b4b      	ldr	r3, [pc, #300]	; (456c <pwm_init+0x2a8>)
    4440:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4444:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    4446:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4448:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    444c:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    444e:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4452:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4456:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    445a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    445e:	b280      	uxth	r0, r0
    4460:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    4464:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4468:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    446c:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    4470:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    4474:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    4478:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    447c:	b280      	uxth	r0, r0
    447e:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    4482:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    4486:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    448a:	4b38      	ldr	r3, [pc, #224]	; (456c <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    448c:	3101      	adds	r1, #1
    448e:	0140      	lsls	r0, r0, #5
    4490:	461c      	mov	r4, r3
    4492:	2904      	cmp	r1, #4
    4494:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4496:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4498:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    449c:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    449e:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    44a0:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    44a2:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    44a4:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    44a6:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    44a8:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    44aa:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    44ac:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    44ae:	d1ea      	bne.n	4486 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    44b0:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    44b4:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    44b6:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    44b8:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    44bc:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    44be:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    44c2:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    44c4:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    44c8:	433b      	orrs	r3, r7
    44ca:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    44ce:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    44d2:	b29b      	uxth	r3, r3
    44d4:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    44d8:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    44dc:	0150      	lsls	r0, r2, #5
    44de:	4b24      	ldr	r3, [pc, #144]	; (4570 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    44e0:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    44e2:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    44e4:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    44e6:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    44e8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    44ea:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    44ec:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    44ee:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    44f2:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    44f4:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    44f6:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    44f8:	d1f0      	bne.n	44dc <pwm_init+0x218>
    44fa:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    44fc:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    44fe:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4502:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    4506:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4508:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    450c:	0150      	lsls	r0, r2, #5
    450e:	4b19      	ldr	r3, [pc, #100]	; (4574 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    4510:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    4512:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    4514:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    4516:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    4518:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    451a:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    451c:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    451e:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4520:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    4522:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4524:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    4526:	d1f1      	bne.n	450c <pwm_init+0x248>
    4528:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    452a:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    452c:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4530:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    4534:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4536:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    453a:	0150      	lsls	r0, r2, #5
    453c:	4b0e      	ldr	r3, [pc, #56]	; (4578 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    453e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    4540:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    4542:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    4544:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    4546:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4548:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    454a:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    454c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    454e:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    4550:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4552:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    4554:	d1f1      	bne.n	453a <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    4556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4558:	400fc000 	.word	0x400fc000
    455c:	403dc000 	.word	0x403dc000
    4560:	fc030000 	.word	0xfc030000
    4564:	403e0000 	.word	0x403e0000
    4568:	403e4000 	.word	0x403e4000
    456c:	403e8000 	.word	0x403e8000
    4570:	401dc000 	.word	0x401dc000
    4574:	401e0000 	.word	0x401e0000
    4578:	401e4000 	.word	0x401e4000

0000457c <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    457c:	b538      	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    457e:	4b07      	ldr	r3, [pc, #28]	; (459c <HardwareSerial::processSerialEvents()+0x20>)
    4580:	781c      	ldrb	r4, [r3, #0]
    4582:	b14c      	cbz	r4, 4598 <HardwareSerial::processSerialEvents()+0x1c>
    4584:	4d06      	ldr	r5, [pc, #24]	; (45a0 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    4586:	f855 3f04 	ldr.w	r3, [r5, #4]!
    458a:	2b00      	cmp	r3, #0
    458c:	d0fb      	beq.n	4586 <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    458e:	4798      	blx	r3
			if (--handlers_still_to_process == 0) return;
    4590:	1e63      	subs	r3, r4, #1
    4592:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    4596:	d1f6      	bne.n	4586 <HardwareSerial::processSerialEvents()+0xa>
    4598:	bd38      	pop	{r3, r4, r5, pc}
    459a:	bf00      	nop
    459c:	20000940 	.word	0x20000940
    45a0:	20000920 	.word	0x20000920

000045a4 <__libc_init_array>:
    45a4:	b570      	push	{r4, r5, r6, lr}
    45a6:	4e0f      	ldr	r6, [pc, #60]	; (45e4 <__libc_init_array+0x40>)
    45a8:	4d0f      	ldr	r5, [pc, #60]	; (45e8 <__libc_init_array+0x44>)
    45aa:	1b76      	subs	r6, r6, r5
    45ac:	10b6      	asrs	r6, r6, #2
    45ae:	bf18      	it	ne
    45b0:	2400      	movne	r4, #0
    45b2:	d005      	beq.n	45c0 <__libc_init_array+0x1c>
    45b4:	3401      	adds	r4, #1
    45b6:	f855 3b04 	ldr.w	r3, [r5], #4
    45ba:	4798      	blx	r3
    45bc:	42a6      	cmp	r6, r4
    45be:	d1f9      	bne.n	45b4 <__libc_init_array+0x10>
    45c0:	4e0a      	ldr	r6, [pc, #40]	; (45ec <__libc_init_array+0x48>)
    45c2:	4d0b      	ldr	r5, [pc, #44]	; (45f0 <__libc_init_array+0x4c>)
    45c4:	1b76      	subs	r6, r6, r5
    45c6:	f000 f863 	bl	4690 <___init_veneer>
    45ca:	10b6      	asrs	r6, r6, #2
    45cc:	bf18      	it	ne
    45ce:	2400      	movne	r4, #0
    45d0:	d006      	beq.n	45e0 <__libc_init_array+0x3c>
    45d2:	3401      	adds	r4, #1
    45d4:	f855 3b04 	ldr.w	r3, [r5], #4
    45d8:	4798      	blx	r3
    45da:	42a6      	cmp	r6, r4
    45dc:	d1f9      	bne.n	45d2 <__libc_init_array+0x2e>
    45de:	bd70      	pop	{r4, r5, r6, pc}
    45e0:	bd70      	pop	{r4, r5, r6, pc}
    45e2:	bf00      	nop
    45e4:	60001740 	.word	0x60001740
    45e8:	60001740 	.word	0x60001740
    45ec:	6000174c 	.word	0x6000174c
    45f0:	60001740 	.word	0x60001740

000045f4 <memset>:
    45f4:	b470      	push	{r4, r5, r6}
    45f6:	0784      	lsls	r4, r0, #30
    45f8:	d046      	beq.n	4688 <memset+0x94>
    45fa:	1e54      	subs	r4, r2, #1
    45fc:	2a00      	cmp	r2, #0
    45fe:	d041      	beq.n	4684 <memset+0x90>
    4600:	b2cd      	uxtb	r5, r1
    4602:	4603      	mov	r3, r0
    4604:	e002      	b.n	460c <memset+0x18>
    4606:	1e62      	subs	r2, r4, #1
    4608:	b3e4      	cbz	r4, 4684 <memset+0x90>
    460a:	4614      	mov	r4, r2
    460c:	f803 5b01 	strb.w	r5, [r3], #1
    4610:	079a      	lsls	r2, r3, #30
    4612:	d1f8      	bne.n	4606 <memset+0x12>
    4614:	2c03      	cmp	r4, #3
    4616:	d92e      	bls.n	4676 <memset+0x82>
    4618:	b2cd      	uxtb	r5, r1
    461a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    461e:	2c0f      	cmp	r4, #15
    4620:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4624:	d919      	bls.n	465a <memset+0x66>
    4626:	f103 0210 	add.w	r2, r3, #16
    462a:	4626      	mov	r6, r4
    462c:	3e10      	subs	r6, #16
    462e:	2e0f      	cmp	r6, #15
    4630:	f842 5c10 	str.w	r5, [r2, #-16]
    4634:	f842 5c0c 	str.w	r5, [r2, #-12]
    4638:	f842 5c08 	str.w	r5, [r2, #-8]
    463c:	f842 5c04 	str.w	r5, [r2, #-4]
    4640:	f102 0210 	add.w	r2, r2, #16
    4644:	d8f2      	bhi.n	462c <memset+0x38>
    4646:	f1a4 0210 	sub.w	r2, r4, #16
    464a:	f022 020f 	bic.w	r2, r2, #15
    464e:	f004 040f 	and.w	r4, r4, #15
    4652:	3210      	adds	r2, #16
    4654:	2c03      	cmp	r4, #3
    4656:	4413      	add	r3, r2
    4658:	d90d      	bls.n	4676 <memset+0x82>
    465a:	461e      	mov	r6, r3
    465c:	4622      	mov	r2, r4
    465e:	3a04      	subs	r2, #4
    4660:	2a03      	cmp	r2, #3
    4662:	f846 5b04 	str.w	r5, [r6], #4
    4666:	d8fa      	bhi.n	465e <memset+0x6a>
    4668:	1f22      	subs	r2, r4, #4
    466a:	f022 0203 	bic.w	r2, r2, #3
    466e:	3204      	adds	r2, #4
    4670:	4413      	add	r3, r2
    4672:	f004 0403 	and.w	r4, r4, #3
    4676:	b12c      	cbz	r4, 4684 <memset+0x90>
    4678:	b2c9      	uxtb	r1, r1
    467a:	441c      	add	r4, r3
    467c:	f803 1b01 	strb.w	r1, [r3], #1
    4680:	42a3      	cmp	r3, r4
    4682:	d1fb      	bne.n	467c <memset+0x88>
    4684:	bc70      	pop	{r4, r5, r6}
    4686:	4770      	bx	lr
    4688:	4614      	mov	r4, r2
    468a:	4603      	mov	r3, r0
    468c:	e7c2      	b.n	4614 <memset+0x20>
    468e:	bf00      	nop

00004690 <___init_veneer>:
    4690:	f85f f000 	ldr.w	pc, [pc]	; 4694 <___init_veneer+0x4>
    4694:	600016e9 	.word	0x600016e9
	...

Disassembly of section .fini:

000046a0 <_fini>:
    46a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46a2:	bf00      	nop
