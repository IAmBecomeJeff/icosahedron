
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_testing\teensy31\Debug/pool_testing.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 45 23 00 00 fd 22 00 00     ... ....E#..."..
      10:	fd 22 00 00 fd 22 00 00 fd 22 00 00 fd 22 00 00     ."..."..."..."..
      20:	fd 22 00 00 fd 22 00 00 fd 22 00 00 45 23 00 00     ."..."..."..E#..
      30:	45 23 00 00 fd 22 00 00 71 37 00 00 75 38 00 00     E#..."..q7..u8..
      40:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
      50:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
      60:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
      70:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
      80:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
      90:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
      a0:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
      b0:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
      c0:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
      d0:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
      e0:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
      f0:	45 23 00 00 7d 3a 00 00 45 23 00 00 a9 3b 00 00     E#..}:..E#...;..
     100:	45 23 00 00 d5 3c 00 00 45 23 00 00 45 23 00 00     E#...<..E#..E#..
     110:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
     120:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
     130:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
     140:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
     150:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
     160:	45 23 00 00 8d 27 00 00 45 23 00 00 45 23 00 00     E#...'..E#..E#..
     170:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
     180:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
     190:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
     1a0:	45 23 00 00 45 23 00 00 45 23 00 00 45 23 00 00     E#..E#..E#..E#..
     1b0:	45 23 00 00 45 23 00 00 45 23 00 00                 E#..E#..E#..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f002 f8bc 	bl	234c <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f002 f910 	bl	24f8 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f002 f881 	bl	23e8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f002 f872 	bl	23e8 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f003 fd98 	bl	3e3c <__libc_init_array>

	startup_late_hook();
     30c:	f002 f824 	bl	2358 <startup_late_hook>
	main();
     310:	f003 fab8 	bl	3884 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c0c 	.word	0x1fff8c0c
     33c:	00004440 	.word	0x00004440
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c0c 	.word	0x1fff8c0c
     348:	1fff95d4 	.word	0x1fff95d4
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e271247 	.word	0x5e271247
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c0c 	.word	0x1fff8c0c
     42c:	00000000 	.word	0x00000000
     430:	00004444 	.word	0x00004444

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c10 	.word	0x1fff8c10
     460:	00004444 	.word	0x00004444
     464:	1fff8c0c 	.word	0x1fff8c0c
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     490:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     492:	2101      	movs	r1, #1
     494:	4604      	mov	r4, r0
     496:	200e      	movs	r0, #14
     498:	f001 ffb8 	bl	240c <pinMode>
     49c:	2007      	movs	r0, #7
     49e:	2101      	movs	r1, #1
     4a0:	f001 ffb4 	bl	240c <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     4a4:	69a0      	ldr	r0, [r4, #24]
     4a6:	b158      	cbz	r0, 4c0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::init()+0x30>
     4a8:	6803      	ldr	r3, [r0, #0]
     4aa:	4a07      	ldr	r2, [pc, #28]	; (4c8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::init()+0x38>)
     4ac:	685b      	ldr	r3, [r3, #4]
     4ae:	4293      	cmp	r3, r2
     4b0:	d107      	bne.n	4c2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::init()+0x32>
     4b2:	6842      	ldr	r2, [r0, #4]
     4b4:	7b01      	ldrb	r1, [r0, #12]
     4b6:	7813      	ldrb	r3, [r2, #0]
     4b8:	ea23 0301 	bic.w	r3, r3, r1
     4bc:	7013      	strb	r3, [r2, #0]
     4be:	bd10      	pop	{r4, pc}
     4c0:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     4c6:	4718      	bx	r3
     4c8:	00000481 	.word	0x00000481

000004cc <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ce:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     4d0:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     4d2:	6805      	ldr	r5, [r0, #0]
     4d4:	f88d 3004 	strb.w	r3, [sp, #4]
     4d8:	f88d 3005 	strb.w	r3, [sp, #5]
     4dc:	f88d 3006 	strb.w	r3, [sp, #6]
     4e0:	682e      	ldr	r6, [r5, #0]
     4e2:	4a37      	ldr	r2, [pc, #220]	; (5c0 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     4e4:	f88d 3008 	strb.w	r3, [sp, #8]
     4e8:	4296      	cmp	r6, r2
     4ea:	f88d 3009 	strb.w	r3, [sp, #9]
     4ee:	f88d 300a 	strb.w	r3, [sp, #10]
     4f2:	d15f      	bne.n	5b4 <CLEDController::clearLeds(int)+0xe8>
     4f4:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     4f6:	9104      	str	r1, [sp, #16]
     4f8:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     4fa:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     4fc:	a801      	add	r0, sp, #4
     4fe:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     500:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     504:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     508:	f88d 3020 	strb.w	r3, [sp, #32]
     50c:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     50e:	d015      	beq.n	53c <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     510:	f88d 301d 	strb.w	r3, [sp, #29]
     514:	f88d 301c 	strb.w	r3, [sp, #28]
     518:	f88d 301b 	strb.w	r3, [sp, #27]
     51c:	f88d 301a 	strb.w	r3, [sp, #26]
     520:	f88d 3019 	strb.w	r3, [sp, #25]
     524:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     528:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     52a:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     52c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     530:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     532:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     534:	a903      	add	r1, sp, #12
     536:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     538:	b00b      	add	sp, #44	; 0x2c
     53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     53c:	4a21      	ldr	r2, [pc, #132]	; (5c4 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     53e:	7813      	ldrb	r3, [r2, #0]
     540:	3301      	adds	r3, #1
     542:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     546:	f013 0f01 	tst.w	r3, #1
     54a:	bf14      	ite	ne
     54c:	2180      	movne	r1, #128	; 0x80
     54e:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     550:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     552:	079a      	lsls	r2, r3, #30
     554:	bf44      	itt	mi
     556:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     55a:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     55c:	075b      	lsls	r3, r3, #29
     55e:	bf48      	it	mi
     560:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     564:	3110      	adds	r1, #16
     566:	2200      	movs	r2, #0
     568:	b2c9      	uxtb	r1, r1
     56a:	f10d 031b 	add.w	r3, sp, #27
     56e:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     572:	f44f 7e80 	mov.w	lr, #256	; 0x100
     576:	b1aa      	cbz	r2, 5a4 <CLEDController::clearLeds(int)+0xd8>
     578:	fb9e f2f2 	sdiv	r2, lr, r2
     57c:	b2d2      	uxtb	r2, r2
     57e:	1c50      	adds	r0, r2, #1
     580:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     582:	fb00 1501 	mla	r5, r0, r1, r1
     586:	122d      	asrs	r5, r5, #8
     588:	7018      	strb	r0, [r3, #0]
     58a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     58c:	b105      	cbz	r5, 590 <CLEDController::clearLeds(int)+0xc4>
     58e:	3e01      	subs	r6, #1
     590:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     594:	b100      	cbz	r0, 598 <CLEDController::clearLeds(int)+0xcc>
     596:	701a      	strb	r2, [r3, #0]
     598:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     59a:	429f      	cmp	r7, r3
     59c:	d008      	beq.n	5b0 <CLEDController::clearLeds(int)+0xe4>
     59e:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5a0:	2a00      	cmp	r2, #0
     5a2:	d1e9      	bne.n	578 <CLEDController::clearLeds(int)+0xac>
     5a4:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     5a6:	f803 2c03 	strb.w	r2, [r3, #-3]
     5aa:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     5ac:	429f      	cmp	r7, r3
     5ae:	d1f6      	bne.n	59e <CLEDController::clearLeds(int)+0xd2>
     5b0:	6825      	ldr	r5, [r4, #0]
     5b2:	e7b9      	b.n	528 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     5b4:	460a      	mov	r2, r1
     5b6:	ab02      	add	r3, sp, #8
     5b8:	a901      	add	r1, sp, #4
     5ba:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     5bc:	b00b      	add	sp, #44	; 0x2c
     5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5c0:	000005c9 	.word	0x000005c9
     5c4:	1fff8c28 	.word	0x1fff8c28

000005c8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ca:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5cc:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     5ce:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     5d0:	789b      	ldrb	r3, [r3, #2]
     5d2:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     5d4:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     5d6:	9101      	str	r1, [sp, #4]
     5d8:	9202      	str	r2, [sp, #8]
     5da:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5dc:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     5e0:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     5e4:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     5e8:	d016      	beq.n	618 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     5ea:	2300      	movs	r3, #0
     5ec:	f88d 3015 	strb.w	r3, [sp, #21]
     5f0:	f88d 3014 	strb.w	r3, [sp, #20]
     5f4:	f88d 3013 	strb.w	r3, [sp, #19]
     5f8:	f88d 3012 	strb.w	r3, [sp, #18]
     5fc:	f88d 3011 	strb.w	r3, [sp, #17]
     600:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     604:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     606:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     608:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     60a:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     60e:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     610:	a901      	add	r1, sp, #4
     612:	4790      	blx	r2
  }
     614:	b009      	add	sp, #36	; 0x24
     616:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     618:	4a1b      	ldr	r2, [pc, #108]	; (688 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     61a:	7813      	ldrb	r3, [r2, #0]
     61c:	3301      	adds	r3, #1
     61e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     622:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     626:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     628:	bf14      	ite	ne
     62a:	2280      	movne	r2, #128	; 0x80
     62c:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     62e:	0799      	lsls	r1, r3, #30
     630:	bf44      	itt	mi
     632:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     636:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     638:	075b      	lsls	r3, r3, #29
     63a:	bf48      	it	mi
     63c:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     640:	3210      	adds	r2, #16
     642:	b2d2      	uxtb	r2, r2
     644:	f10d 0313 	add.w	r3, sp, #19
     648:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     64c:	f44f 7e80 	mov.w	lr, #256	; 0x100
     650:	b1ac      	cbz	r4, 67e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     652:	fb9e f4f4 	sdiv	r4, lr, r4
     656:	b2e4      	uxtb	r4, r4
     658:	1c61      	adds	r1, r4, #1
     65a:	b2c9      	uxtb	r1, r1
     65c:	fb01 2502 	mla	r5, r1, r2, r2
     660:	122d      	asrs	r5, r5, #8
     662:	7019      	strb	r1, [r3, #0]
     664:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     666:	b105      	cbz	r5, 66a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     668:	3e01      	subs	r6, #1
     66a:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     66e:	b101      	cbz	r1, 672 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     670:	701c      	strb	r4, [r3, #0]
     672:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     674:	42bb      	cmp	r3, r7
     676:	d0c5      	beq.n	604 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     678:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     67a:	2c00      	cmp	r4, #0
     67c:	d1e9      	bne.n	652 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     67e:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     680:	f803 4c03 	strb.w	r4, [r3, #-3]
     684:	e7f5      	b.n	672 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     686:	bf00      	nop
     688:	1fff8c28 	.word	0x1fff8c28

0000068c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     68c:	b5f0      	push	{r4, r5, r6, r7, lr}
     68e:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     690:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     692:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     694:	789b      	ldrb	r3, [r3, #2]
     696:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     698:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     69a:	9101      	str	r1, [sp, #4]
     69c:	9202      	str	r2, [sp, #8]
     69e:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6a0:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     6a4:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     6a8:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     6ac:	d017      	beq.n	6de <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     6ae:	2300      	movs	r3, #0
     6b0:	f88d 3015 	strb.w	r3, [sp, #21]
     6b4:	f88d 3014 	strb.w	r3, [sp, #20]
     6b8:	f88d 3013 	strb.w	r3, [sp, #19]
     6bc:	f88d 3012 	strb.w	r3, [sp, #18]
     6c0:	f88d 3011 	strb.w	r3, [sp, #17]
     6c4:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6c8:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     6ca:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     6cc:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6ce:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     6d0:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     6d4:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6d6:	a901      	add	r1, sp, #4
     6d8:	4798      	blx	r3
  }
     6da:	b009      	add	sp, #36	; 0x24
     6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     6de:	4a1b      	ldr	r2, [pc, #108]	; (74c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6e0:	7813      	ldrb	r3, [r2, #0]
     6e2:	3301      	adds	r3, #1
     6e4:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6e8:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6ec:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6ee:	bf14      	ite	ne
     6f0:	2280      	movne	r2, #128	; 0x80
     6f2:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     6f4:	0799      	lsls	r1, r3, #30
     6f6:	bf44      	itt	mi
     6f8:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     6fc:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     6fe:	075b      	lsls	r3, r3, #29
     700:	bf48      	it	mi
     702:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     706:	3210      	adds	r2, #16
     708:	b2d2      	uxtb	r2, r2
     70a:	f10d 0313 	add.w	r3, sp, #19
     70e:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     712:	f44f 7e80 	mov.w	lr, #256	; 0x100
     716:	b1ac      	cbz	r4, 744 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     718:	fb9e f4f4 	sdiv	r4, lr, r4
     71c:	b2e4      	uxtb	r4, r4
     71e:	1c61      	adds	r1, r4, #1
     720:	b2c9      	uxtb	r1, r1
     722:	fb01 2502 	mla	r5, r1, r2, r2
     726:	122d      	asrs	r5, r5, #8
     728:	7019      	strb	r1, [r3, #0]
     72a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     72c:	b105      	cbz	r5, 730 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     72e:	3e01      	subs	r6, #1
     730:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     734:	b101      	cbz	r1, 738 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     736:	701c      	strb	r4, [r3, #0]
     738:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     73a:	42bb      	cmp	r3, r7
     73c:	d0c4      	beq.n	6c8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     73e:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     740:	2c00      	cmp	r4, #0
     742:	d1e9      	bne.n	718 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     744:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     746:	f803 4c03 	strb.w	r4, [r3, #-3]
     74a:	e7f5      	b.n	738 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     74c:	1fff8c28 	.word	0x1fff8c28

00000750 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
     750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     754:	b085      	sub	sp, #20
     756:	9003      	str	r0, [sp, #12]
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
     758:	6980      	ldr	r0, [r0, #24]
     75a:	b150      	cbz	r0, 772 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x22>
     75c:	6803      	ldr	r3, [r0, #0]
     75e:	4a52      	ldr	r2, [pc, #328]	; (8a8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x158>)
     760:	681b      	ldr	r3, [r3, #0]
     762:	4293      	cmp	r3, r2
     764:	f040 827f 	bne.w	c66 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x516>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     768:	6842      	ldr	r2, [r0, #4]
     76a:	7b00      	ldrb	r0, [r0, #12]
     76c:	7813      	ldrb	r3, [r2, #0]
     76e:	4303      	orrs	r3, r0
     770:	7013      	strb	r3, [r2, #0]
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     772:	484e      	ldr	r0, [pc, #312]	; (8ac <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x15c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     774:	4a4e      	ldr	r2, [pc, #312]	; (8b0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x160>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     776:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     778:	2304      	movs	r3, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     77a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     77c:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
     77e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     780:	6003      	str	r3, [r0, #0]
     782:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     784:	6013      	str	r3, [r2, #0]
     786:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     788:	6003      	str	r3, [r0, #0]
     78a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     78c:	6013      	str	r3, [r2, #0]
     78e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     790:	6003      	str	r3, [r0, #0]
     792:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     794:	6013      	str	r3, [r2, #0]
     796:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     798:	6003      	str	r3, [r0, #0]
     79a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     79c:	6013      	str	r3, [r2, #0]
     79e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7a0:	6003      	str	r3, [r0, #0]
     7a2:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7a4:	6013      	str	r3, [r2, #0]
     7a6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7a8:	6003      	str	r3, [r0, #0]
     7aa:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7ac:	6013      	str	r3, [r2, #0]
     7ae:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7b0:	6003      	str	r3, [r0, #0]
     7b2:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7b4:	6013      	str	r3, [r2, #0]
     7b6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7b8:	6003      	str	r3, [r0, #0]
     7ba:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7bc:	6013      	str	r3, [r2, #0]
     7be:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7c0:	6003      	str	r3, [r0, #0]
     7c2:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7c4:	6013      	str	r3, [r2, #0]
     7c6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7c8:	6003      	str	r3, [r0, #0]
     7ca:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7cc:	6013      	str	r3, [r2, #0]
     7ce:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7d0:	6003      	str	r3, [r0, #0]
     7d2:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7d4:	6013      	str	r3, [r2, #0]
     7d6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7d8:	6003      	str	r3, [r0, #0]
     7da:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7dc:	6013      	str	r3, [r2, #0]
     7de:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7e0:	6003      	str	r3, [r0, #0]
     7e2:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7e4:	6013      	str	r3, [r2, #0]
     7e6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7e8:	6003      	str	r3, [r0, #0]
     7ea:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7ec:	6013      	str	r3, [r2, #0]
     7ee:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7f0:	6003      	str	r3, [r0, #0]
     7f2:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7f4:	6013      	str	r3, [r2, #0]
     7f6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     7f8:	6003      	str	r3, [r0, #0]
     7fa:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     7fc:	6013      	str	r3, [r2, #0]
     7fe:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     800:	6003      	str	r3, [r0, #0]
     802:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     804:	6013      	str	r3, [r2, #0]
     806:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     808:	6003      	str	r3, [r0, #0]
     80a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     80c:	6013      	str	r3, [r2, #0]
     80e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     810:	6003      	str	r3, [r0, #0]
     812:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     814:	6013      	str	r3, [r2, #0]
     816:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     818:	6003      	str	r3, [r0, #0]
     81a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     81c:	6013      	str	r3, [r2, #0]
     81e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     820:	6003      	str	r3, [r0, #0]
     822:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     824:	6013      	str	r3, [r2, #0]
     826:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     828:	6003      	str	r3, [r0, #0]
     82a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     82c:	6013      	str	r3, [r2, #0]
     82e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     830:	6003      	str	r3, [r0, #0]
     832:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     834:	6013      	str	r3, [r2, #0]
     836:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     838:	6003      	str	r3, [r0, #0]
     83a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     83c:	6013      	str	r3, [r2, #0]
     83e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     840:	6003      	str	r3, [r0, #0]
     842:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     844:	6013      	str	r3, [r2, #0]
     846:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     848:	6003      	str	r3, [r0, #0]
     84a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     84c:	6013      	str	r3, [r2, #0]
     84e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     850:	6003      	str	r3, [r0, #0]
     852:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     854:	6013      	str	r3, [r2, #0]
     856:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     858:	6003      	str	r3, [r0, #0]
     85a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     85c:	6013      	str	r3, [r2, #0]
     85e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     860:	6003      	str	r3, [r0, #0]
     862:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     864:	6013      	str	r3, [r2, #0]
     866:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     868:	6003      	str	r3, [r0, #0]
     86a:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     86c:	6013      	str	r3, [r2, #0]
     86e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     870:	6003      	str	r3, [r0, #0]
     872:	6004      	str	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     874:	6013      	str	r3, [r2, #0]
     876:	bf00      	nop
		mSPI.select();

		startBoundary();
		while(pixels.has(1)) {
     878:	f8d1 8008 	ldr.w	r8, [r1, #8]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     87c:	6003      	str	r3, [r0, #0]
     87e:	f1b8 0f00 	cmp.w	r8, #0
     882:	f340 814e 	ble.w	b22 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3d2>
     886:	680e      	ldr	r6, [r1, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     888:	f8cd 8004 	str.w	r8, [sp, #4]
     88c:	4625      	mov	r5, r4
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     88e:	f896 e002 	ldrb.w	lr, [r6, #2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     892:	f1be 0f00 	cmp.w	lr, #0
     896:	d00d      	beq.n	8b4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x164>
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
     898:	f891 c00e 	ldrb.w	ip, [r1, #14]
     89c:	fa8e fe5c 	uqadd8	lr, lr, ip
     8a0:	fa5f fe8e 	uxtb.w	lr, lr
     8a4:	e006      	b.n	8b4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x164>
     8a6:	bf00      	nop
     8a8:	00000475 	.word	0x00000475
     8ac:	400ff0c8 	.word	0x400ff0c8
     8b0:	400ff0c4 	.word	0x400ff0c4
			mSPI.writeByte(0xFF);
			mSPI.writeByte(pixels.loadAndScale0());
			mSPI.writeByte(pixels.loadAndScale1());
			mSPI.writeByte(pixels.loadAndScale2());
#else
			uint16_t b = 0xFF00 | (uint16_t)pixels.loadAndScale0();
     8b4:	f891 c014 	ldrb.w	ip, [r1, #20]
     8b8:	6015      	str	r5, [r2, #0]
     8ba:	fb0c ee0e 	mla	lr, ip, lr, lr
     8be:	f3ce 2e07 	ubfx	lr, lr, #8, #8
     8c2:	f44e 4e7f 	orr.w	lr, lr, #65280	; 0xff00
     8c6:	6013      	str	r3, [r2, #0]
     8c8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8ca:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8cc:	6015      	str	r5, [r2, #0]
     8ce:	6013      	str	r3, [r2, #0]
     8d0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8d2:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8d4:	6015      	str	r5, [r2, #0]
     8d6:	6013      	str	r3, [r2, #0]
     8d8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8da:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8dc:	6015      	str	r5, [r2, #0]
     8de:	6013      	str	r3, [r2, #0]
     8e0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8e2:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8e4:	6015      	str	r5, [r2, #0]
     8e6:	6013      	str	r3, [r2, #0]
     8e8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8ea:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8ec:	6015      	str	r5, [r2, #0]
     8ee:	6013      	str	r3, [r2, #0]
     8f0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8f2:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8f4:	6015      	str	r5, [r2, #0]
     8f6:	6013      	str	r3, [r2, #0]
     8f8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     8fa:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     8fc:	6015      	str	r5, [r2, #0]
     8fe:	6013      	str	r3, [r2, #0]
     900:	bf00      	nop
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     902:	f01e 0f80 	tst.w	lr, #128	; 0x80
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     906:	6003      	str	r3, [r0, #0]
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
     908:	fa5f fc8e 	uxtb.w	ip, lr
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     90c:	bf14      	ite	ne
     90e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     910:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     912:	6013      	str	r3, [r2, #0]
     914:	bf00      	nop
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     916:	f01c 0f40 	tst.w	ip, #64	; 0x40
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     91a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     91c:	bf14      	ite	ne
     91e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     920:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     922:	6013      	str	r3, [r2, #0]
     924:	bf00      	nop
     926:	f01c 0f20 	tst.w	ip, #32
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     92a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     92c:	bf14      	ite	ne
     92e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     930:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     932:	6013      	str	r3, [r2, #0]
     934:	bf00      	nop
     936:	f01c 0f10 	tst.w	ip, #16
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     93a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     93c:	bf14      	ite	ne
     93e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     940:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     942:	6013      	str	r3, [r2, #0]
     944:	bf00      	nop
     946:	f01c 0f08 	tst.w	ip, #8
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     94a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     94c:	bf14      	ite	ne
     94e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     950:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     952:	6013      	str	r3, [r2, #0]
     954:	bf00      	nop
     956:	f01c 0f04 	tst.w	ip, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     95a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     95c:	bf14      	ite	ne
     95e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     960:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     962:	6013      	str	r3, [r2, #0]
     964:	bf00      	nop
     966:	f01c 0f02 	tst.w	ip, #2
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     96a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     96c:	bf14      	ite	ne
     96e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     970:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     972:	6013      	str	r3, [r2, #0]
     974:	bf00      	nop
     976:	f01c 0f01 	tst.w	ip, #1
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     97a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     97c:	bf14      	ite	ne
     97e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     980:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     982:	6013      	str	r3, [r2, #0]
     984:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     986:	6003      	str	r3, [r0, #0]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     988:	f896 c001 	ldrb.w	ip, [r6, #1]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     98c:	f1bc 0f00 	cmp.w	ip, #0
     990:	d005      	beq.n	99e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24e>
     992:	f891 e00d 	ldrb.w	lr, [r1, #13]
     996:	fa8c fc5e 	uqadd8	ip, ip, lr
     99a:	fa5f fc8c 	uxtb.w	ip, ip
			mSPI.writeWord(b);
			uint16_t w = pixels.loadAndScale1() << 8;
     99e:	f891 8013 	ldrb.w	r8, [r1, #19]
        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     9a2:	f896 e000 	ldrb.w	lr, [r6]
     9a6:	fb08 cc0c 	mla	ip, r8, ip, ip
     9aa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     9ae:	f1be 0f00 	cmp.w	lr, #0
     9b2:	d005      	beq.n	9c0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x270>
     9b4:	f891 800c 	ldrb.w	r8, [r1, #12]
     9b8:	fa8e fe58 	uqadd8	lr, lr, r8
     9bc:	fa5f fe8e 	uxtb.w	lr, lr
			w |= pixels.loadAndScale2();
     9c0:	f891 8012 	ldrb.w	r8, [r1, #18]
     9c4:	fb08 ee0e 	mla	lr, r8, lr, lr
     9c8:	ea4c 2e1e 	orr.w	lr, ip, lr, lsr #8
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
     9cc:	ea4f 2c2e 	mov.w	ip, lr, asr #8
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     9d0:	f01c 0f80 	tst.w	ip, #128	; 0x80
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9d4:	bf14      	ite	ne
     9d6:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9d8:	6004      	streq	r4, [r0, #0]
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
     9da:	fa5f f88c 	uxtb.w	r8, ip
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9de:	6013      	str	r3, [r2, #0]
     9e0:	bf00      	nop
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     9e2:	f018 0f40 	tst.w	r8, #64	; 0x40
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9e6:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9e8:	bf14      	ite	ne
     9ea:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9ec:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9ee:	6013      	str	r3, [r2, #0]
     9f0:	bf00      	nop
     9f2:	f018 0f20 	tst.w	r8, #32
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9f6:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9f8:	bf14      	ite	ne
     9fa:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     9fc:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     9fe:	6013      	str	r3, [r2, #0]
     a00:	bf00      	nop
     a02:	f018 0f10 	tst.w	r8, #16
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a06:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a08:	bf14      	ite	ne
     a0a:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a0c:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a0e:	6013      	str	r3, [r2, #0]
     a10:	bf00      	nop
     a12:	f018 0f08 	tst.w	r8, #8
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a16:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a18:	bf14      	ite	ne
     a1a:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a1c:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a1e:	6013      	str	r3, [r2, #0]
     a20:	bf00      	nop
     a22:	f018 0f04 	tst.w	r8, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a26:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a28:	bf14      	ite	ne
     a2a:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a2c:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a2e:	6013      	str	r3, [r2, #0]
     a30:	bf00      	nop
     a32:	f018 0f02 	tst.w	r8, #2
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a36:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a38:	bf14      	ite	ne
     a3a:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a3c:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a3e:	6013      	str	r3, [r2, #0]
     a40:	bf00      	nop
     a42:	f018 0f01 	tst.w	r8, #1
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a46:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a48:	bf14      	ite	ne
     a4a:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a4c:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a4e:	6013      	str	r3, [r2, #0]
     a50:	bf00      	nop
     a52:	f01e 0f80 	tst.w	lr, #128	; 0x80
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a56:	6003      	str	r3, [r0, #0]
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
     a58:	fa5f f88e 	uxtb.w	r8, lr
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a5c:	bf14      	ite	ne
     a5e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a60:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a62:	6013      	str	r3, [r2, #0]
     a64:	bf00      	nop
	#define CLOCK_LO_DELAY delaycycles<(((SPI_SPEED-6) / 4))>();

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
     a66:	f018 0f40 	tst.w	r8, #64	; 0x40
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a6a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a6c:	bf14      	ite	ne
     a6e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a70:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a72:	6013      	str	r3, [r2, #0]
     a74:	bf00      	nop
     a76:	f018 0f20 	tst.w	r8, #32
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a7a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a7c:	bf14      	ite	ne
     a7e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a80:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a82:	6013      	str	r3, [r2, #0]
     a84:	bf00      	nop
     a86:	f018 0f10 	tst.w	r8, #16
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a8a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a8c:	bf14      	ite	ne
     a8e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a90:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a92:	6013      	str	r3, [r2, #0]
     a94:	bf00      	nop
     a96:	f018 0f08 	tst.w	r8, #8
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     a9a:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     a9c:	bf14      	ite	ne
     a9e:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     aa0:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     aa2:	6013      	str	r3, [r2, #0]
     aa4:	bf00      	nop
     aa6:	f018 0f04 	tst.w	r8, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     aaa:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     aac:	bf14      	ite	ne
     aae:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ab0:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     ab2:	6013      	str	r3, [r2, #0]
     ab4:	bf00      	nop
     ab6:	f018 0f02 	tst.w	r8, #2
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     aba:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     abc:	bf14      	ite	ne
     abe:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ac0:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     ac2:	6013      	str	r3, [r2, #0]
     ac4:	bf00      	nop
     ac6:	f018 0f01 	tst.w	r8, #1
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     aca:	6003      	str	r3, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     acc:	bf14      	ite	ne
     ace:	6014      	strne	r4, [r2, #0]
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ad0:	6004      	streq	r4, [r0, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     ad2:	6013      	str	r3, [r2, #0]
     ad4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ad6:	6003      	str	r3, [r0, #0]
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     ad8:	7b8f      	ldrb	r7, [r1, #14]
     ada:	9702      	str	r7, [sp, #8]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     adc:	9f01      	ldr	r7, [sp, #4]
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     ade:	f891 e011 	ldrb.w	lr, [r1, #17]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     ae2:	f891 800c 	ldrb.w	r8, [r1, #12]
                d[1] = e[1] - d[1];
     ae6:	f891 a00d 	ldrb.w	sl, [r1, #13]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     aea:	f891 b00f 	ldrb.w	fp, [r1, #15]
                d[1] = e[1] - d[1];
     aee:	f891 c010 	ldrb.w	ip, [r1, #16]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     af2:	f991 9015 	ldrsb.w	r9, [r1, #21]
     af6:	3f01      	subs	r7, #1
     af8:	9701      	str	r7, [sp, #4]
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
     afa:	9f02      	ldr	r7, [sp, #8]
     afc:	ebc7 0e0e 	rsb	lr, r7, lr

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     b00:	9f01      	ldr	r7, [sp, #4]
     b02:	608f      	str	r7, [r1, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     b04:	ebc8 080b 	rsb	r8, r8, fp
                d[1] = e[1] - d[1];
     b08:	ebca 0c0c 	rsb	ip, sl, ip

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     b0c:	444e      	add	r6, r9

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
		mSPI.select();

		startBoundary();
		while(pixels.has(1)) {
     b0e:	2f00      	cmp	r7, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     b10:	f881 800c 	strb.w	r8, [r1, #12]
                d[1] = e[1] - d[1];
     b14:	f881 c00d 	strb.w	ip, [r1, #13]
                d[2] = e[2] - d[2];
     b18:	f881 e00e 	strb.w	lr, [r1, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     b1c:	600e      	str	r6, [r1, #0]
     b1e:	f73f aeb6 	bgt.w	88e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x13e>
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
     b22:	684c      	ldr	r4, [r1, #4]
     b24:	4a52      	ldr	r2, [pc, #328]	; (c70 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x520>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b26:	4953      	ldr	r1, [pc, #332]	; (c74 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x524>)
     b28:	2c00      	cmp	r4, #0
     b2a:	bfb8      	it	lt
     b2c:	341f      	addlt	r4, #31
     b2e:	1164      	asrs	r4, r4, #5
     b30:	2002      	movs	r0, #2
     b32:	2304      	movs	r3, #4
     b34:	6008      	str	r0, [r1, #0]
     b36:	600b      	str	r3, [r1, #0]
     b38:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b3a:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b3c:	6008      	str	r0, [r1, #0]
     b3e:	600b      	str	r3, [r1, #0]
     b40:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b42:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b44:	6008      	str	r0, [r1, #0]
     b46:	600b      	str	r3, [r1, #0]
     b48:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b4a:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b4c:	6008      	str	r0, [r1, #0]
     b4e:	600b      	str	r3, [r1, #0]
     b50:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b52:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b54:	6008      	str	r0, [r1, #0]
     b56:	600b      	str	r3, [r1, #0]
     b58:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b5a:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b5c:	6008      	str	r0, [r1, #0]
     b5e:	600b      	str	r3, [r1, #0]
     b60:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b62:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b64:	6008      	str	r0, [r1, #0]
     b66:	600b      	str	r3, [r1, #0]
     b68:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b6a:	6013      	str	r3, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b6c:	6008      	str	r0, [r1, #0]
     b6e:	600b      	str	r3, [r1, #0]
     b70:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b72:	6013      	str	r3, [r2, #0]
     b74:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b76:	600b      	str	r3, [r1, #0]
     b78:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b7a:	6013      	str	r3, [r2, #0]
     b7c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b7e:	600b      	str	r3, [r1, #0]
     b80:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b82:	6013      	str	r3, [r2, #0]
     b84:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b86:	600b      	str	r3, [r1, #0]
     b88:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b8a:	6013      	str	r3, [r2, #0]
     b8c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b8e:	600b      	str	r3, [r1, #0]
     b90:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b92:	6013      	str	r3, [r2, #0]
     b94:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b96:	600b      	str	r3, [r1, #0]
     b98:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     b9a:	6013      	str	r3, [r2, #0]
     b9c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     b9e:	600b      	str	r3, [r1, #0]
     ba0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     ba2:	6013      	str	r3, [r2, #0]
     ba4:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     ba6:	600b      	str	r3, [r1, #0]
     ba8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     baa:	6013      	str	r3, [r2, #0]
     bac:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bae:	600b      	str	r3, [r1, #0]
     bb0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bb2:	6013      	str	r3, [r2, #0]
     bb4:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bb6:	600b      	str	r3, [r1, #0]
     bb8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bba:	6013      	str	r3, [r2, #0]
     bbc:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bbe:	600b      	str	r3, [r1, #0]
     bc0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bc2:	6013      	str	r3, [r2, #0]
     bc4:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bc6:	600b      	str	r3, [r1, #0]
     bc8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bca:	6013      	str	r3, [r2, #0]
     bcc:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bce:	600b      	str	r3, [r1, #0]
     bd0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bd2:	6013      	str	r3, [r2, #0]
     bd4:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bd6:	600b      	str	r3, [r1, #0]
     bd8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bda:	6013      	str	r3, [r2, #0]
     bdc:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bde:	600b      	str	r3, [r1, #0]
     be0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     be2:	6013      	str	r3, [r2, #0]
     be4:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     be6:	600b      	str	r3, [r1, #0]
     be8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bea:	6013      	str	r3, [r2, #0]
     bec:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bee:	600b      	str	r3, [r1, #0]
     bf0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bf2:	6013      	str	r3, [r2, #0]
     bf4:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bf6:	600b      	str	r3, [r1, #0]
     bf8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     bfa:	6013      	str	r3, [r2, #0]
     bfc:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     bfe:	600b      	str	r3, [r1, #0]
     c00:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c02:	6013      	str	r3, [r2, #0]
     c04:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c06:	600b      	str	r3, [r1, #0]
     c08:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c0a:	6013      	str	r3, [r2, #0]
     c0c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c0e:	600b      	str	r3, [r1, #0]
     c10:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c12:	6013      	str	r3, [r2, #0]
     c14:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c16:	600b      	str	r3, [r1, #0]
     c18:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c1a:	6013      	str	r3, [r2, #0]
     c1c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c1e:	600b      	str	r3, [r1, #0]
     c20:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c22:	6013      	str	r3, [r2, #0]
     c24:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c26:	600b      	str	r3, [r1, #0]
     c28:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c2a:	6013      	str	r3, [r2, #0]
     c2c:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
     c2e:	600b      	str	r3, [r1, #0]
     c30:	bf00      	nop
     c32:	3c01      	subs	r4, #1
     c34:	1c65      	adds	r5, r4, #1
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
     c36:	6013      	str	r3, [r2, #0]
     c38:	f47f af7c 	bne.w	b34 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x3e4>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     c3c:	9b03      	ldr	r3, [sp, #12]
     c3e:	6998      	ldr	r0, [r3, #24]
     c40:	b150      	cbz	r0, c58 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x508>
     c42:	6803      	ldr	r3, [r0, #0]
     c44:	4a0c      	ldr	r2, [pc, #48]	; (c78 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x528>)
     c46:	685b      	ldr	r3, [r3, #4]
     c48:	4293      	cmp	r3, r2
     c4a:	d108      	bne.n	c5e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x50e>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     c4c:	6842      	ldr	r2, [r0, #4]
     c4e:	7b01      	ldrb	r1, [r0, #12]
     c50:	7813      	ldrb	r3, [r2, #0]
     c52:	ea23 0301 	bic.w	r3, r3, r1
     c56:	7013      	strb	r3, [r2, #0]
			pixels.advanceData();
		}
		endBoundary(pixels.size());
		mSPI.waitFully();
		mSPI.release();
	}
     c58:	b005      	add	sp, #20
     c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c5e:	b005      	add	sp, #20
     c60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c64:	4718      	bx	r3
     c66:	9101      	str	r1, [sp, #4]
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
     c68:	4798      	blx	r3
     c6a:	9901      	ldr	r1, [sp, #4]
     c6c:	e581      	b.n	772 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x22>
     c6e:	bf00      	nop
     c70:	400ff0c8 	.word	0x400ff0c8
     c74:	400ff0c4 	.word	0x400ff0c4
     c78:	00000481 	.word	0x00000481

00000c7c <LEDDebug(LEDStruct&)>:
		leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i];
	}
}


void LEDDebug(LEDStruct& leds) {
     c7c:	b538      	push	{r3, r4, r5, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     c7e:	2100      	movs	r1, #0
     c80:	4604      	mov	r4, r0
     c82:	4874      	ldr	r0, [pc, #464]	; (e54 <LEDDebug(LEDStruct&)+0x1d8>)
     c84:	f002 fc02 	bl	348c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     c88:	4873      	ldr	r0, [pc, #460]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     c8a:	f002 fe03 	bl	3894 <Print::println()>
     c8e:	2116      	movs	r1, #22
     c90:	4872      	ldr	r0, [pc, #456]	; (e5c <LEDDebug(LEDStruct&)+0x1e0>)
     c92:	f002 fbfb 	bl	348c <usb_serial_write>
     c96:	4870      	ldr	r0, [pc, #448]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     c98:	f002 fdfc 	bl	3894 <Print::println()>
     c9c:	2116      	movs	r1, #22
     c9e:	4870      	ldr	r0, [pc, #448]	; (e60 <LEDDebug(LEDStruct&)+0x1e4>)
     ca0:	f002 fbf4 	bl	348c <usb_serial_write>
	Serial.println("");
	Serial.println("======================");

	// Print which Array it is
	Serial.print("LED Array:            ");
	if (leds.array_type == CURRENT) { Serial.println("CURRENT"); }
     ca4:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
     ca8:	2b00      	cmp	r3, #0
     caa:	f000 80c3 	beq.w	e34 <LEDDebug(LEDStruct&)+0x1b8>
	else if (leds.array_type == NEXT) { Serial.println("NEXT"); }
     cae:	2b01      	cmp	r3, #1
     cb0:	f000 80c8 	beq.w	e44 <LEDDebug(LEDStruct&)+0x1c8>
     cb4:	2116      	movs	r1, #22
     cb6:	486b      	ldr	r0, [pc, #428]	; (e64 <LEDDebug(LEDStruct&)+0x1e8>)
     cb8:	f002 fbe8 	bl	348c <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     cbc:	2300      	movs	r3, #0
     cbe:	220a      	movs	r2, #10
     cc0:	f894 11c2 	ldrb.w	r1, [r4, #450]	; 0x1c2
     cc4:	4864      	ldr	r0, [pc, #400]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     cc6:	f002 fdf5 	bl	38b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     cca:	4863      	ldr	r0, [pc, #396]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     ccc:	f002 fde2 	bl	3894 <Print::println()>
     cd0:	2116      	movs	r1, #22
     cd2:	4865      	ldr	r0, [pc, #404]	; (e68 <LEDDebug(LEDStruct&)+0x1ec>)
     cd4:	f002 fbda 	bl	348c <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     cd8:	2300      	movs	r3, #0
     cda:	220a      	movs	r2, #10
     cdc:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
     ce0:	485d      	ldr	r0, [pc, #372]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     ce2:	f002 fde7 	bl	38b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     ce6:	485c      	ldr	r0, [pc, #368]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     ce8:	f002 fdd4 	bl	3894 <Print::println()>
     cec:	2116      	movs	r1, #22
     cee:	485f      	ldr	r0, [pc, #380]	; (e6c <LEDDebug(LEDStruct&)+0x1f0>)
     cf0:	f002 fbcc 	bl	348c <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     cf4:	f894 1225 	ldrb.w	r1, [r4, #549]	; 0x225
     cf8:	4857      	ldr	r0, [pc, #348]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     cfa:	f002 fe1b 	bl	3934 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     cfe:	4856      	ldr	r0, [pc, #344]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     d00:	f002 fdc8 	bl	3894 <Print::println()>
     d04:	2116      	movs	r1, #22
     d06:	485a      	ldr	r0, [pc, #360]	; (e70 <LEDDebug(LEDStruct&)+0x1f4>)
     d08:	f002 fbc0 	bl	348c <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d0c:	f894 1226 	ldrb.w	r1, [r4, #550]	; 0x226
     d10:	4851      	ldr	r0, [pc, #324]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     d12:	f002 fe0f 	bl	3934 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d16:	4850      	ldr	r0, [pc, #320]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     d18:	f002 fdbc 	bl	3894 <Print::println()>
     d1c:	2116      	movs	r1, #22
     d1e:	4855      	ldr	r0, [pc, #340]	; (e74 <LEDDebug(LEDStruct&)+0x1f8>)
     d20:	f002 fbb4 	bl	348c <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d24:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
     d28:	484b      	ldr	r0, [pc, #300]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     d2a:	f002 fe03 	bl	3934 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d2e:	484a      	ldr	r0, [pc, #296]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     d30:	f002 fdb0 	bl	3894 <Print::println()>
     d34:	2116      	movs	r1, #22
     d36:	4850      	ldr	r0, [pc, #320]	; (e78 <LEDDebug(LEDStruct&)+0x1fc>)
     d38:	f002 fba8 	bl	348c <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     d3c:	2300      	movs	r3, #0
     d3e:	220a      	movs	r2, #10
     d40:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
     d44:	4844      	ldr	r0, [pc, #272]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     d46:	f002 fdb5 	bl	38b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     d4a:	4843      	ldr	r0, [pc, #268]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     d4c:	f002 fda2 	bl	3894 <Print::println()>
     d50:	2116      	movs	r1, #22
     d52:	484a      	ldr	r0, [pc, #296]	; (e7c <LEDDebug(LEDStruct&)+0x200>)
     d54:	f002 fb9a 	bl	348c <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d58:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
     d5c:	483e      	ldr	r0, [pc, #248]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     d5e:	f002 fde9 	bl	3934 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d62:	483d      	ldr	r0, [pc, #244]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     d64:	f002 fd96 	bl	3894 <Print::println()>
	Serial.println(leds.current_mode_number);
	Serial.print("mode_initialized:     ");
	Serial.println(leds.mode_initialized);

	// Print mode-specific variables
	if (leds.mode_name == JUGGLE) {
     d68:	f894 5229 	ldrb.w	r5, [r4, #553]	; 0x229
     d6c:	2d00      	cmp	r5, #0
     d6e:	d158      	bne.n	e22 <LEDDebug(LEDStruct&)+0x1a6>
     d70:	2116      	movs	r1, #22
     d72:	4843      	ldr	r0, [pc, #268]	; (e80 <LEDDebug(LEDStruct&)+0x204>)
     d74:	f002 fb8a 	bl	348c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     d78:	4837      	ldr	r0, [pc, #220]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     d7a:	f002 fd8b 	bl	3894 <Print::println()>
     d7e:	210f      	movs	r1, #15
     d80:	4840      	ldr	r0, [pc, #256]	; (e84 <LEDDebug(LEDStruct&)+0x208>)
     d82:	f002 fb83 	bl	348c <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     d86:	462b      	mov	r3, r5
     d88:	220a      	movs	r2, #10
     d8a:	f894 122c 	ldrb.w	r1, [r4, #556]	; 0x22c
     d8e:	4832      	ldr	r0, [pc, #200]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     d90:	f002 fd90 	bl	38b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     d94:	4830      	ldr	r0, [pc, #192]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     d96:	f002 fd7d 	bl	3894 <Print::println()>
     d9a:	210f      	movs	r1, #15
     d9c:	483a      	ldr	r0, [pc, #232]	; (e88 <LEDDebug(LEDStruct&)+0x20c>)
     d9e:	f002 fb75 	bl	348c <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     da2:	462b      	mov	r3, r5
     da4:	220a      	movs	r2, #10
     da6:	f894 122d 	ldrb.w	r1, [r4, #557]	; 0x22d
     daa:	482b      	ldr	r0, [pc, #172]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     dac:	f002 fd82 	bl	38b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     db0:	4829      	ldr	r0, [pc, #164]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     db2:	f002 fd6f 	bl	3894 <Print::println()>
     db6:	210f      	movs	r1, #15
     db8:	4834      	ldr	r0, [pc, #208]	; (e8c <LEDDebug(LEDStruct&)+0x210>)
     dba:	f002 fb67 	bl	348c <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     dbe:	462b      	mov	r3, r5
     dc0:	220a      	movs	r2, #10
     dc2:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
     dc6:	4824      	ldr	r0, [pc, #144]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     dc8:	f002 fd74 	bl	38b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     dcc:	4822      	ldr	r0, [pc, #136]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     dce:	f002 fd61 	bl	3894 <Print::println()>
     dd2:	210f      	movs	r1, #15
     dd4:	482e      	ldr	r0, [pc, #184]	; (e90 <LEDDebug(LEDStruct&)+0x214>)
     dd6:	f002 fb59 	bl	348c <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     dda:	462b      	mov	r3, r5
     ddc:	220a      	movs	r2, #10
     dde:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
     de2:	481d      	ldr	r0, [pc, #116]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     de4:	f002 fd66 	bl	38b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     de8:	481b      	ldr	r0, [pc, #108]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     dea:	f002 fd53 	bl	3894 <Print::println()>
     dee:	210f      	movs	r1, #15
     df0:	4828      	ldr	r0, [pc, #160]	; (e94 <LEDDebug(LEDStruct&)+0x218>)
     df2:	f002 fb4b 	bl	348c <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     df6:	462b      	mov	r3, r5
     df8:	220a      	movs	r2, #10
     dfa:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
     dfe:	4816      	ldr	r0, [pc, #88]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     e00:	f002 fd58 	bl	38b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     e04:	4814      	ldr	r0, [pc, #80]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     e06:	f002 fd45 	bl	3894 <Print::println()>
     e0a:	210f      	movs	r1, #15
     e0c:	4822      	ldr	r0, [pc, #136]	; (e98 <LEDDebug(LEDStruct&)+0x21c>)
     e0e:	f002 fb3d 	bl	348c <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e12:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
     e16:	4810      	ldr	r0, [pc, #64]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     e18:	f002 fd8c 	bl	3934 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e1c:	480e      	ldr	r0, [pc, #56]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     e1e:	f002 fd39 	bl	3894 <Print::println()>
     e22:	2116      	movs	r1, #22
     e24:	480d      	ldr	r0, [pc, #52]	; (e5c <LEDDebug(LEDStruct&)+0x1e0>)
     e26:	f002 fb31 	bl	348c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     e2a:	480b      	ldr	r0, [pc, #44]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
		Serial.println(leds.juggle_diff);
		Serial.print("index_reset:   ");
		Serial.println(leds.juggle_index_reset);
	}
	Serial.println("======================");
}
     e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     e30:	f002 bd30 	b.w	3894 <Print::println()>
     e34:	2107      	movs	r1, #7
     e36:	4819      	ldr	r0, [pc, #100]	; (e9c <LEDDebug(LEDStruct&)+0x220>)
     e38:	f002 fb28 	bl	348c <usb_serial_write>
     e3c:	4806      	ldr	r0, [pc, #24]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     e3e:	f002 fd29 	bl	3894 <Print::println()>
     e42:	e737      	b.n	cb4 <LEDDebug(LEDStruct&)+0x38>
     e44:	2104      	movs	r1, #4
     e46:	4816      	ldr	r0, [pc, #88]	; (ea0 <LEDDebug(LEDStruct&)+0x224>)
     e48:	f002 fb20 	bl	348c <usb_serial_write>
     e4c:	4802      	ldr	r0, [pc, #8]	; (e58 <LEDDebug(LEDStruct&)+0x1dc>)
     e4e:	f002 fd21 	bl	3894 <Print::println()>
     e52:	e72f      	b.n	cb4 <LEDDebug(LEDStruct&)+0x38>
     e54:	0000417c 	.word	0x0000417c
     e58:	1fff8728 	.word	0x1fff8728
     e5c:	00003fe0 	.word	0x00003fe0
     e60:	00003ff8 	.word	0x00003ff8
     e64:	00004020 	.word	0x00004020
     e68:	00004038 	.word	0x00004038
     e6c:	00004050 	.word	0x00004050
     e70:	00004068 	.word	0x00004068
     e74:	00004080 	.word	0x00004080
     e78:	00004098 	.word	0x00004098
     e7c:	000040b0 	.word	0x000040b0
     e80:	000040c8 	.word	0x000040c8
     e84:	000040e0 	.word	0x000040e0
     e88:	000040f0 	.word	0x000040f0
     e8c:	00004100 	.word	0x00004100
     e90:	00004110 	.word	0x00004110
     e94:	00004120 	.word	0x00004120
     e98:	00004130 	.word	0x00004130
     e9c:	00004010 	.word	0x00004010
     ea0:	00004018 	.word	0x00004018

00000ea4 <juggle_init(LEDStruct&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)>:
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, uint8_t ji = 0, uint8_t jn = random8(1,7), uint8_t jb = random8(8,20), uint8_t jf = random8(140,240), uint8_t jd = random8(1,9), bool jir = random8(2)) {
     ea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ea8:	4d18      	ldr	r5, [pc, #96]	; (f0c <juggle_init(LEDStruct&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0x68>)
     eaa:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
     eae:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
     eb2:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     eb6:	4604      	mov	r4, r0
     eb8:	4689      	mov	r9, r1
     eba:	4815      	ldr	r0, [pc, #84]	; (f10 <juggle_init(LEDStruct&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0x6c>)
     ebc:	2111      	movs	r1, #17
     ebe:	4692      	mov	sl, r2
     ec0:	469b      	mov	fp, r3
     ec2:	f002 fae3 	bl	348c <usb_serial_write>
     ec6:	4628      	mov	r0, r5
     ec8:	f002 fce4 	bl	3894 <Print::println()>
	if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
     ecc:	2101      	movs	r1, #1
	leds.mode_name			= JUGGLE;
     ece:	2000      	movs	r0, #0
     ed0:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, uint8_t ji = 0, uint8_t jn = random8(1,7), uint8_t jb = random8(8,20), uint8_t jf = random8(140,240), uint8_t jd = random8(1,9), bool jir = random8(2)) {
	if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
     ed4:	f884 122a 	strb.w	r1, [r4, #554]	; 0x22a
	leds.mode_name			= JUGGLE;
	leds.use_palette		= 1;
     ed8:	f884 1225 	strb.w	r1, [r4, #549]	; 0x225

	leds.juggle_index		= ji;
     edc:	f884 922c 	strb.w	r9, [r4, #556]	; 0x22c
	leds.juggle_numdots		= jn;
     ee0:	f884 a22d 	strb.w	sl, [r4, #557]	; 0x22d
	leds.juggle_beat		= jb;
     ee4:	f884 b22e 	strb.w	fp, [r4, #558]	; 0x22e
	leds.juggle_fade		= jf;
     ee8:	f884 822f 	strb.w	r8, [r4, #559]	; 0x22f
	leds.juggle_diff		= jd;
     eec:	f884 7230 	strb.w	r7, [r4, #560]	; 0x230
	leds.juggle_index_reset = jir;
     ef0:	f884 6231 	strb.w	r6, [r4, #561]	; 0x231
     ef4:	2114      	movs	r1, #20
     ef6:	4807      	ldr	r0, [pc, #28]	; (f14 <juggle_init(LEDStruct&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0x70>)
     ef8:	f002 fac8 	bl	348c <usb_serial_write>
     efc:	4628      	mov	r0, r5
     efe:	f002 fcc9 	bl	3894 <Print::println()>
	if (DEBUG) { Serial.println("JUGGLE INIT COMPLETE"); }
	if (DEBUG) { LEDDebug(leds); }
     f02:	4620      	mov	r0, r4
}
     f04:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	leds.juggle_beat		= jb;
	leds.juggle_fade		= jf;
	leds.juggle_diff		= jd;
	leds.juggle_index_reset = jir;
	if (DEBUG) { Serial.println("JUGGLE INIT COMPLETE"); }
	if (DEBUG) { LEDDebug(leds); }
     f08:	f7ff beb8 	b.w	c7c <LEDDebug(LEDStruct&)>
     f0c:	1fff8728 	.word	0x1fff8728
     f10:	00004140 	.word	0x00004140
     f14:	00004154 	.word	0x00004154

00000f18 <juggle(LEDStruct&)>:
}



void juggle(LEDStruct& leds) {
     f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//if (DEBUG) { Serial.println("JUGGLING"); }
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
     f1c:	f890 122a 	ldrb.w	r1, [r0, #554]	; 0x22a
	if (DEBUG) { LEDDebug(leds); }
}



void juggle(LEDStruct& leds) {
     f20:	b08b      	sub	sp, #44	; 0x2c
     f22:	4606      	mov	r6, r0
	//if (DEBUG) { Serial.println("JUGGLING"); }
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
     f24:	2900      	cmp	r1, #0
     f26:	f000 80e2 	beq.w	10ee <juggle(LEDStruct&)+0x1d6>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
     f2a:	f896 3231 	ldrb.w	r3, [r6, #561]	; 0x231
     f2e:	b113      	cbz	r3, f36 <juggle(LEDStruct&)+0x1e>
     f30:	2300      	movs	r3, #0
     f32:	f886 322c 	strb.w	r3, [r6, #556]	; 0x22c

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
     f36:	f896 222f 	ldrb.w	r2, [r6, #559]	; 0x22f
     f3a:	2196      	movs	r1, #150	; 0x96
     f3c:	4630      	mov	r0, r6
     f3e:	f000 fca5 	bl	188c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
     f42:	f896 322d 	ldrb.w	r3, [r6, #557]	; 0x22d
     f46:	2b00      	cmp	r3, #0
     f48:	f000 80ce 	beq.w	10e8 <juggle(LEDStruct&)+0x1d0>
     f4c:	f106 04e1 	add.w	r4, r6, #225	; 0xe1
     f50:	f896 222c 	ldrb.w	r2, [r6, #556]	; 0x22c
     f54:	f8df b254 	ldr.w	fp, [pc, #596]	; 11ac <juggle(LEDStruct&)+0x294>
     f58:	f8df a254 	ldr.w	sl, [pc, #596]	; 11b0 <juggle(LEDStruct&)+0x298>
     f5c:	9405      	str	r4, [sp, #20]
     f5e:	2700      	movs	r7, #0
     f60:	f506 78e2 	add.w	r8, r6, #452	; 0x1c4
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
     f64:	f44f 798c 	mov.w	r9, #280	; 0x118
     f68:	e05a      	b.n	1020 <juggle(LEDStruct&)+0x108>
		if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
     f6a:	f896 122e 	ldrb.w	r1, [r6, #558]	; 0x22e
     f6e:	443b      	add	r3, r7
     f70:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f72:	f8db 1000 	ldr.w	r1, [fp]
     f76:	9108      	str	r1, [sp, #32]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     f78:	2bff      	cmp	r3, #255	; 0xff
	return ret;
     f7a:	9908      	ldr	r1, [sp, #32]
     f7c:	bf9c      	itt	ls
     f7e:	021b      	lslls	r3, r3, #8
     f80:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
     f82:	fb09 f101 	mul.w	r1, r9, r1
     f86:	fb03 f301 	mul.w	r3, r3, r1
     f8a:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     f8c:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     f8e:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     f92:	d503      	bpl.n	f9c <juggle(LEDStruct&)+0x84>
     f94:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
     f98:	3107      	adds	r1, #7
     f9a:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     f9c:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     f9e:	4c81      	ldr	r4, [pc, #516]	; (11a4 <juggle(LEDStruct&)+0x28c>)
     fa0:	f81a 5000 	ldrb.w	r5, [sl, r0]
     fa4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
     fa8:	f3c1 0146 	ubfx	r1, r1, #1, #7
     fac:	fb05 0101 	mla	r1, r5, r1, r0

    if( theta & 0x8000 ) y = -y;
     fb0:	041c      	lsls	r4, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     fb2:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
     fb4:	bf48      	it	mi
     fb6:	4249      	negmi	r1, r1
     fb8:	b20d      	sxth	r5, r1
     fba:	f896 1224 	ldrb.w	r1, [r6, #548]	; 0x224
     fbe:	f896 31c2 	ldrb.w	r3, [r6, #450]	; 0x1c2
     fc2:	9100      	str	r1, [sp, #0]
     fc4:	a807      	add	r0, sp, #28
     fc6:	4641      	mov	r1, r8
     fc8:	f000 fc62 	bl	1890 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
     fcc:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
     fd0:	b29a      	uxth	r2, r3
     fd2:	2397      	movs	r3, #151	; 0x97
     fd4:	fb03 f302 	mul.w	r3, r3, r2
     fd8:	0c1b      	lsrs	r3, r3, #16
     fda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     fde:	18f1      	adds	r1, r6, r3
     fe0:	5cf2      	ldrb	r2, [r6, r3]
     fe2:	f89d 001c 	ldrb.w	r0, [sp, #28]
     fe6:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
     fea:	54f2      	strb	r2, [r6, r3]
     fec:	f89d 301d 	ldrb.w	r3, [sp, #29]
     ff0:	784a      	ldrb	r2, [r1, #1]
     ff2:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
     ff6:	704a      	strb	r2, [r1, #1]
     ff8:	788b      	ldrb	r3, [r1, #2]
     ffa:	f89d 201e 	ldrb.w	r2, [sp, #30]
     ffe:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    1002:	708b      	strb	r3, [r1, #2]
		else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
		leds.juggle_index += leds.juggle_diff;
    1004:	f896 122c 	ldrb.w	r1, [r6, #556]	; 0x22c
    1008:	f896 2230 	ldrb.w	r2, [r6, #560]	; 0x230

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    100c:	f896 322d 	ldrb.w	r3, [r6, #557]	; 0x22d
    1010:	3701      	adds	r7, #1
		if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
		else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
		leds.juggle_index += leds.juggle_diff;
    1012:	440a      	add	r2, r1

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    1014:	b2ff      	uxtb	r7, r7
		if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
		else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
		leds.juggle_index += leds.juggle_diff;
    1016:	b2d2      	uxtb	r2, r2

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    1018:	42bb      	cmp	r3, r7
		if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
		else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
		leds.juggle_index += leds.juggle_diff;
    101a:	f886 222c 	strb.w	r2, [r6, #556]	; 0x22c

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    101e:	d963      	bls.n	10e8 <juggle(LEDStruct&)+0x1d0>
		if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    1020:	f896 1226 	ldrb.w	r1, [r6, #550]	; 0x226
    1024:	2900      	cmp	r1, #0
    1026:	d1a0      	bne.n	f6a <juggle(LEDStruct&)+0x52>
		else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    1028:	f896 122e 	ldrb.w	r1, [r6, #558]	; 0x22e
    102c:	443b      	add	r3, r7
    102e:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1030:	f8db 1000 	ldr.w	r1, [fp]
    1034:	9109      	str	r1, [sp, #36]	; 0x24

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1036:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    1038:	9909      	ldr	r1, [sp, #36]	; 0x24
    103a:	bf9c      	itt	ls
    103c:	021b      	lslls	r3, r3, #8
    103e:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1040:	fb09 f101 	mul.w	r1, r9, r1
    1044:	fb03 f301 	mul.w	r3, r3, r1
    1048:	0c19      	lsrs	r1, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    104a:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    104c:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1050:	d503      	bpl.n	105a <juggle(LEDStruct&)+0x142>
    1052:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1056:	3307      	adds	r3, #7
    1058:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    105a:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    105c:	4c51      	ldr	r4, [pc, #324]	; (11a4 <juggle(LEDStruct&)+0x28c>)
    105e:	f81a 5000 	ldrb.w	r5, [sl, r0]
    1062:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
    1066:	f3c3 0346 	ubfx	r3, r3, #1, #7
    106a:	fb05 0303 	mla	r3, r5, r3, r0

    if( theta & 0x8000 ) y = -y;
    106e:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1070:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1072:	bf48      	it	mi
    1074:	425b      	negmi	r3, r3
    1076:	f896 1224 	ldrb.w	r1, [r6, #548]	; 0x224
    107a:	b21d      	sxth	r5, r3
    107c:	a807      	add	r0, sp, #28
    107e:	f896 31c2 	ldrb.w	r3, [r6, #450]	; 0x1c2
    1082:	9100      	str	r1, [sp, #0]
    1084:	4641      	mov	r1, r8
    1086:	f000 fc03 	bl	1890 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    108a:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    108e:	224c      	movs	r2, #76	; 0x4c
    1090:	b29b      	uxth	r3, r3
    1092:	fb02 f303 	mul.w	r3, r2, r3
    1096:	0c1b      	lsrs	r3, r3, #16
    1098:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    109c:	18f1      	adds	r1, r6, r3
    109e:	5cf2      	ldrb	r2, [r6, r3]
    10a0:	f89d 001c 	ldrb.w	r0, [sp, #28]
    10a4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    10a8:	54f2      	strb	r2, [r6, r3]
    10aa:	f89d 301d 	ldrb.w	r3, [sp, #29]
    10ae:	784a      	ldrb	r2, [r1, #1]
    10b0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    10b4:	704a      	strb	r2, [r1, #1]
    10b6:	788b      	ldrb	r3, [r1, #2]
    10b8:	f89d 201e 	ldrb.w	r2, [sp, #30]
    10bc:	fa83 f352 	uqadd8	r3, r3, r2
    10c0:	9c05      	ldr	r4, [sp, #20]
        b = qadd8( b, rhs.b);
    10c2:	708b      	strb	r3, [r1, #2]
    10c4:	4632      	mov	r2, r6
    10c6:	4633      	mov	r3, r6
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    10c8:	7819      	ldrb	r1, [r3, #0]
    10ca:	f882 10de 	strb.w	r1, [r2, #222]	; 0xde
        g = rhs.g;
    10ce:	7859      	ldrb	r1, [r3, #1]
    10d0:	f882 10df 	strb.w	r1, [r2, #223]	; 0xdf
        b = rhs.b;
    10d4:	7899      	ldrb	r1, [r3, #2]
    10d6:	f882 10e0 	strb.w	r1, [r2, #224]	; 0xe0
    10da:	3303      	adds	r3, #3
LEDStruct curr_leds;
LEDStruct next_leds;

// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    10dc:	429c      	cmp	r4, r3
    10de:	f1a2 0203 	sub.w	r2, r2, #3
    10e2:	d1f1      	bne.n	10c8 <juggle(LEDStruct&)+0x1b0>
    10e4:	9405      	str	r4, [sp, #20]
    10e6:	e78d      	b.n	1004 <juggle(LEDStruct&)+0xec>
		leds.juggle_index += leds.juggle_diff;
	}
}
    10e8:	b00b      	add	sp, #44	; 0x2c
    10ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    10ee:	4d2e      	ldr	r5, [pc, #184]	; (11a8 <juggle(LEDStruct&)+0x290>)
    10f0:	882b      	ldrh	r3, [r5, #0]
    10f2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    10f6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    10fa:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    10fe:	3219      	adds	r2, #25
    1100:	b292      	uxth	r2, r2
    1102:	eb02 2442 	add.w	r4, r2, r2, lsl #9
    1106:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    110a:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    110e:	3419      	adds	r4, #25
    1110:	b2a4      	uxth	r4, r4
    1112:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    1116:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    111a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    111e:	3319      	adds	r3, #25
    1120:	b29b      	uxth	r3, r3
    1122:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    1126:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    112a:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    112e:	3719      	adds	r7, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1130:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1134:	b2bf      	uxth	r7, r7


void juggle(LEDStruct& leds) {
	//if (DEBUG) { Serial.println("JUGGLING"); }
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    1136:	b2db      	uxtb	r3, r3
    1138:	eb07 2e47 	add.w	lr, r7, r7, lsl #9
    113c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1140:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1144:	eb04 2414 	add.w	r4, r4, r4, lsr #8
    1148:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    114c:	eb02 2c12 	add.w	ip, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1150:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    1154:	b2e2      	uxtb	r2, r4
    1156:	119c      	asrs	r4, r3, #6
    1158:	fa5f fc8c 	uxtb.w	ip, ip
    115c:	f10e 0e19 	add.w	lr, lr, #25
    1160:	3c74      	subs	r4, #116	; 0x74
    1162:	fa1f fe8e 	uxth.w	lr, lr
    1166:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    116a:	b2e4      	uxtb	r4, r4
    116c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1170:	eb07 2717 	add.w	r7, r7, r7, lsr #8
    1174:	9400      	str	r4, [sp, #0]
    1176:	ea4f 1cec 	mov.w	ip, ip, asr #7
    117a:	1193      	asrs	r3, r2, #6
    117c:	eb0e 241e 	add.w	r4, lr, lr, lsr #8
    1180:	f3c7 1742 	ubfx	r7, r7, #5, #3
    1184:	f10c 0201 	add.w	r2, ip, #1
    1188:	3701      	adds	r7, #1
    118a:	f3c4 14c0 	ubfx	r4, r4, #7, #1
    118e:	3308      	adds	r3, #8
    1190:	9402      	str	r4, [sp, #8]
    1192:	9701      	str	r7, [sp, #4]
    1194:	b2d2      	uxtb	r2, r2
    1196:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1198:	f8a5 e000 	strh.w	lr, [r5]
    119c:	f7ff fe82 	bl	ea4 <juggle_init(LEDStruct&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)>
    11a0:	e6c3      	b.n	f2a <juggle(LEDStruct&)+0x12>
    11a2:	bf00      	nop
    11a4:	00003fc8 	.word	0x00003fc8
    11a8:	1fff8720 	.word	0x1fff8720
    11ac:	1fff9314 	.word	0x1fff9314
    11b0:	00003fd8 	.word	0x00003fd8

000011b4 <initialize()>:
#ifndef INITIALIZE_H
#define INITIALIZE_H

void initialize() {
    11b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize curr_leds
	curr_leds.array_type = CURRENT;
    11b8:	4b60      	ldr	r3, [pc, #384]	; (133c <initialize()+0x188>)
    11ba:	4961      	ldr	r1, [pc, #388]	; (1340 <initialize()+0x18c>)
    11bc:	2700      	movs	r7, #0
#ifndef INITIALIZE_H
#define INITIALIZE_H

void initialize() {
    11be:	b08b      	sub	sp, #44	; 0x2c
	// Initialize curr_leds
	curr_leds.array_type = CURRENT;
    11c0:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    11c4:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
    11c8:	4a5d      	ldr	r2, [pc, #372]	; (1340 <initialize()+0x18c>)
            count++;;
        } while ( u.index != 255);
    11ca:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    11cc:	3701      	adds	r7, #1
        } while ( u.index != 255);
    11ce:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    11d0:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    11d2:	d1f7      	bne.n	11c4 <initialize()+0x10>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    11d4:	6813      	ldr	r3, [r2, #0]
    11d6:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
    11d8:	ea4f 6813 	mov.w	r8, r3, lsr #24
    11dc:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    11e0:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    11e4:	f04f 33ff 	mov.w	r3, #4294967295
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
    11e8:	4692      	mov	sl, r2
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    11ea:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    11ec:	2400      	movs	r4, #0
    11ee:	46c6      	mov	lr, r8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    11f0:	f85a 5f04 	ldr.w	r5, [sl, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    11f4:	4853      	ldr	r0, [pc, #332]	; (1344 <initialize()+0x190>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    11f6:	f3c5 2707 	ubfx	r7, r5, #8, #8
    11fa:	f3c5 4607 	ubfx	r6, r5, #16, #8
    11fe:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    1200:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1204:	9104      	str	r1, [sp, #16]
    1206:	b2f1      	uxtb	r1, r6
    1208:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    120a:	fa5f f18c 	uxtb.w	r1, ip
    120e:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    1210:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    1212:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1214:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1216:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    121a:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    121c:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1220:	fa5f f885 	uxtb.w	r8, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1224:	d80c      	bhi.n	1240 <initialize()+0x8c>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    1226:	9906      	ldr	r1, [sp, #24]
    1228:	458c      	cmp	ip, r1
    122a:	dc07      	bgt.n	123c <initialize()+0x88>
    122c:	290f      	cmp	r1, #15
    122e:	d005      	beq.n	123c <initialize()+0x88>
                    istart8 = lastSlotUsed + 1;
    1230:	3101      	adds	r1, #1
    1232:	b2c9      	uxtb	r1, r1
    1234:	428b      	cmp	r3, r1
    1236:	9103      	str	r1, [sp, #12]
    1238:	bf38      	it	cc
    123a:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    123c:	b259      	sxtb	r1, r3
    123e:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1240:	a908      	add	r1, sp, #32
    1242:	9100      	str	r1, [sp, #0]
    1244:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1246:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
    124a:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
        b = rhs.b;
    124e:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1252:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
    1256:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
    125a:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    125e:	f000 fa83 	bl	1768 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    1262:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1264:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    1268:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
    126c:	46c6      	mov	lr, r8
    126e:	d1bf      	bne.n	11f0 <initialize()+0x3c>
    1270:	4935      	ldr	r1, [pc, #212]	; (1348 <initialize()+0x194>)
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    1272:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    1274:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
    1278:	4a33      	ldr	r2, [pc, #204]	; (1348 <initialize()+0x194>)
            count++;;
        } while ( u.index != 255);
    127a:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    127c:	3701      	adds	r7, #1
        } while ( u.index != 255);
    127e:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    1280:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    1282:	d1f7      	bne.n	1274 <initialize()+0xc0>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    1284:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    1286:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    1288:	f3c3 4907 	ubfx	r9, r3, #16, #8
    128c:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    1290:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    1294:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    1298:	46ce      	mov	lr, r9
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    129a:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    129c:	2400      	movs	r4, #0
    129e:	4691      	mov	r9, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    12a0:	f859 5f04 	ldr.w	r5, [r9, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    12a4:	4b25      	ldr	r3, [pc, #148]	; (133c <initialize()+0x188>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    12a6:	f3c5 2707 	ubfx	r7, r5, #8, #8
    12aa:	f3c5 4607 	ubfx	r6, r5, #16, #8
    12ae:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    12b0:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    12b4:	9104      	str	r1, [sp, #16]
    12b6:	b2f1      	uxtb	r1, r6
    12b8:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    12ba:	fa5f f18c 	uxtb.w	r1, ip
    12be:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    12c0:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    12c2:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    12c4:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    12c6:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    12ca:	f503 70fa 	add.w	r0, r3, #500	; 0x1f4
    12ce:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    12d0:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    12d4:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    12d8:	d80c      	bhi.n	12f4 <initialize()+0x140>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    12da:	9906      	ldr	r1, [sp, #24]
    12dc:	458c      	cmp	ip, r1
    12de:	dc07      	bgt.n	12f0 <initialize()+0x13c>
    12e0:	290f      	cmp	r1, #15
    12e2:	d005      	beq.n	12f0 <initialize()+0x13c>
                    istart8 = lastSlotUsed + 1;
    12e4:	3101      	adds	r1, #1
    12e6:	b2c9      	uxtb	r1, r1
    12e8:	428b      	cmp	r3, r1
    12ea:	9103      	str	r1, [sp, #12]
    12ec:	bf38      	it	cc
    12ee:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    12f0:	b259      	sxtb	r1, r3
    12f2:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    12f4:	a908      	add	r1, sp, #32
    12f6:	9100      	str	r1, [sp, #0]
    12f8:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    12fa:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
    12fe:	f88d e025 	strb.w	lr, [sp, #37]	; 0x25
        b = rhs.b;
    1302:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1306:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
    130a:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
    130e:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    1312:	f000 fa29 	bl	1768 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    1316:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1318:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    131c:	f8dd e014 	ldr.w	lr, [sp, #20]
        b = rhs.b;
    1320:	46d0      	mov	r8, sl
    1322:	d1bd      	bne.n	12a0 <initialize()+0xec>
	curr_leds.current_palette = Colorfull_gp;
	curr_leds.target_palette = Magenta_Evening_gp;
	curr_leds.mode_name = JUGGLE;

	// Initialize next_leds
	next_leds.array_type = NEXT;
    1324:	4a09      	ldr	r2, [pc, #36]	; (134c <initialize()+0x198>)
    1326:	2101      	movs	r1, #1
    1328:	f882 122b 	strb.w	r1, [r2, #555]	; 0x22b
void initialize() {
	// Initialize curr_leds
	curr_leds.array_type = CURRENT;
	curr_leds.current_palette = Colorfull_gp;
	curr_leds.target_palette = Magenta_Evening_gp;
	curr_leds.mode_name = JUGGLE;
    132c:	4a03      	ldr	r2, [pc, #12]	; (133c <initialize()+0x188>)
    132e:	2300      	movs	r3, #0
    1330:	f882 3229 	strb.w	r3, [r2, #553]	; 0x229

	// Initialize next_leds
	next_leds.array_type = NEXT;

}
    1334:	b00b      	add	sp, #44	; 0x2c
    1336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    133a:	bf00      	nop
    133c:	1fff9068 	.word	0x1fff9068
    1340:	000041a8 	.word	0x000041a8
    1344:	1fff922c 	.word	0x1fff922c
    1348:	000041d4 	.word	0x000041d4
    134c:	1fff8c4c 	.word	0x1fff8c4c

00001350 <setup>:
// Includes
#include "includes.h"



void setup() {
    1350:	b570      	push	{r4, r5, r6, lr}
    1352:	f640 31b8 	movw	r1, #3000	; 0xbb8
    1356:	b082      	sub	sp, #8
    1358:	4869      	ldr	r0, [pc, #420]	; (1500 <setup+0x1b0>)
    135a:	f000 fd65 	bl	1e28 <VisualMicroDebug::init(unsigned long)>
    135e:	f44f 4161 	mov.w	r1, #57600	; 0xe100
    1362:	4867      	ldr	r0, [pc, #412]	; (1500 <setup+0x1b0>)
    1364:	f000 fd5c 	bl	1e20 <VisualMicroDebug::begin(unsigned long)>
    1368:	2101      	movs	r1, #1
    136a:	4865      	ldr	r0, [pc, #404]	; (1500 <setup+0x1b0>)
    136c:	f000 fd32 	bl	1dd4 <VisualMicroDebug::outPacketStart(bool)>
    1370:	b150      	cbz	r0, 1388 <setup+0x38>
    1372:	2110      	movs	r1, #16
    1374:	4863      	ldr	r0, [pc, #396]	; (1504 <setup+0x1b4>)
    1376:	f002 f889 	bl	348c <usb_serial_write>
    137a:	4861      	ldr	r0, [pc, #388]	; (1500 <setup+0x1b0>)
    137c:	210a      	movs	r1, #10
    137e:	f000 fd17 	bl	1db0 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    1382:	485f      	ldr	r0, [pc, #380]	; (1500 <setup+0x1b0>)
    1384:	f000 fd4a 	bl	1e1c <VisualMicroDebug::outPacketEnd()>
    1388:	2201      	movs	r2, #1
    138a:	2100      	movs	r1, #0
    138c:	485c      	ldr	r0, [pc, #368]	; (1500 <setup+0x1b0>)
    138e:	f000 fdf7 	bl	1f80 <VisualMicroDebug::start(bool, bool)>
	if (DEBUG) { Serial.begin(57600); Serial.setTimeout(1500); Serial.println("DEBUG ON"); }
    1392:	f240 51dc 	movw	r1, #1500	; 0x5dc
    1396:	485c      	ldr	r0, [pc, #368]	; (1508 <setup+0x1b8>)
    1398:	f002 fad4 	bl	3944 <Stream::setTimeout(unsigned long)>
    139c:	2108      	movs	r1, #8
    139e:	485b      	ldr	r0, [pc, #364]	; (150c <setup+0x1bc>)
    13a0:	f002 f874 	bl	348c <usb_serial_write>
    13a4:	4858      	ldr	r0, [pc, #352]	; (1508 <setup+0x1b8>)
    13a6:	f002 fa75 	bl	3894 <Print::println()>

	delay(1000);
    13aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    13ae:	f001 f855 	bl	245c <delay>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    13b2:	4857      	ldr	r0, [pc, #348]	; (1510 <setup+0x1c0>)
    13b4:	6803      	ldr	r3, [r0, #0]
    13b6:	f013 0401 	ands.w	r4, r3, #1
    13ba:	d07c      	beq.n	14b6 <setup+0x166>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    13bc:	4c55      	ldr	r4, [pc, #340]	; (1514 <setup+0x1c4>)
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    13be:	4956      	ldr	r1, [pc, #344]	; (1518 <setup+0x1c8>)
    13c0:	4856      	ldr	r0, [pc, #344]	; (151c <setup+0x1cc>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
    13c2:	4d57      	ldr	r5, [pc, #348]	; (1520 <setup+0x1d0>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    13c4:	26ff      	movs	r6, #255	; 0xff
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    13c6:	2300      	movs	r3, #0
    13c8:	2296      	movs	r2, #150	; 0x96
    13ca:	f000 fae9 	bl	19a0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    13ce:	22b0      	movs	r2, #176	; 0xb0
    13d0:	23f0      	movs	r3, #240	; 0xf0

	LEDS.addLeds<LED_TYPE, DATA_PIN, CLOCK_PIN, COLOR_ORDER>(master_leds, NUM_LEDS);
	LEDS.setBrightness(MAX_BRIGHT);
	LEDS.setCorrection(TypicalLEDStrip);
    13d2:	4620      	mov	r0, r4
    13d4:	a901      	add	r1, sp, #4
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    13d6:	7026      	strb	r6, [r4, #0]
    13d8:	f88d 2005 	strb.w	r2, [sp, #5]
    13dc:	f88d 3006 	strb.w	r3, [sp, #6]
    13e0:	f88d 6004 	strb.w	r6, [sp, #4]
    13e4:	f000 fb1c 	bl	1a20 <CFastLED::setCorrection(CRGB const&)>
	set_max_power_in_volts_and_milliamps(5, 3000);
    13e8:	f640 31b8 	movw	r1, #3000	; 0xbb8
    13ec:	2005      	movs	r0, #5
    13ee:	f000 fcd3 	bl	1d98 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
    13f2:	210a      	movs	r1, #10
    13f4:	484b      	ldr	r0, [pc, #300]	; (1524 <setup+0x1d4>)
    13f6:	f002 f849 	bl	348c <usb_serial_write>
    13fa:	4843      	ldr	r0, [pc, #268]	; (1508 <setup+0x1b8>)
    13fc:	f002 fa4a 	bl	3894 <Print::println()>
    1400:	f44f 5397 	mov.w	r3, #4832	; 0x12e0

	if (DEBUG) { Serial.println("LEDs ADDED"); }

	random16_set_seed(4832);
	random16_add_entropy(analogRead(2));
    1404:	2002      	movs	r0, #2
    1406:	802b      	strh	r3, [r5, #0]
    1408:	f000 fefa 	bl	2200 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    140c:	882b      	ldrh	r3, [r5, #0]

	FastLED.clear(); FastLED.show(); FastLED.delay(20);
    140e:	2100      	movs	r1, #0
    1410:	4403      	add	r3, r0
    1412:	4620      	mov	r0, r4
    1414:	802b      	strh	r3, [r5, #0]
    1416:	f000 fc15 	bl	1c44 <CFastLED::clear(bool)>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    141a:	7821      	ldrb	r1, [r4, #0]
    141c:	4620      	mov	r0, r4
    141e:	f000 fb37 	bl	1a90 <CFastLED::show(unsigned char)>
    1422:	4620      	mov	r0, r4
    1424:	2114      	movs	r1, #20
    1426:	f000 fb95 	bl	1b54 <CFastLED::delay(unsigned long)>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    142a:	2500      	movs	r5, #0

	if (DEBUG) {
		fill_solid(master_leds, NUM_LEDS, CRGB::Red);	LEDS.delay(500);
    142c:	aa01      	add	r2, sp, #4
    142e:	2196      	movs	r1, #150	; 0x96
    1430:	4839      	ldr	r0, [pc, #228]	; (1518 <setup+0x1c8>)
    1432:	f88d 6004 	strb.w	r6, [sp, #4]
    1436:	f88d 5005 	strb.w	r5, [sp, #5]
    143a:	f88d 5006 	strb.w	r5, [sp, #6]
    143e:	f000 f983 	bl	1748 <fill_solid(CRGB*, int, CRGB const&)>
    1442:	4620      	mov	r0, r4
    1444:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    1448:	f000 fb84 	bl	1b54 <CFastLED::delay(unsigned long)>
		fill_solid(master_leds, NUM_LEDS, CRGB::Blue);  LEDS.delay(500);
    144c:	aa01      	add	r2, sp, #4
    144e:	2196      	movs	r1, #150	; 0x96
    1450:	4831      	ldr	r0, [pc, #196]	; (1518 <setup+0x1c8>)
    1452:	f88d 6006 	strb.w	r6, [sp, #6]
    1456:	f88d 5004 	strb.w	r5, [sp, #4]
    145a:	f88d 5005 	strb.w	r5, [sp, #5]
    145e:	f000 f973 	bl	1748 <fill_solid(CRGB*, int, CRGB const&)>
    1462:	4620      	mov	r0, r4
    1464:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    1468:	f000 fb74 	bl	1b54 <CFastLED::delay(unsigned long)>
    146c:	2380      	movs	r3, #128	; 0x80
		fill_solid(master_leds, NUM_LEDS, CRGB::Green); LEDS.delay(500);
    146e:	aa01      	add	r2, sp, #4
    1470:	2196      	movs	r1, #150	; 0x96
    1472:	4829      	ldr	r0, [pc, #164]	; (1518 <setup+0x1c8>)
    1474:	f88d 3005 	strb.w	r3, [sp, #5]
    1478:	f88d 5004 	strb.w	r5, [sp, #4]
    147c:	f88d 5006 	strb.w	r5, [sp, #6]
    1480:	f000 f962 	bl	1748 <fill_solid(CRGB*, int, CRGB const&)>
    1484:	4620      	mov	r0, r4
    1486:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    148a:	f000 fb63 	bl	1b54 <CFastLED::delay(unsigned long)>
		LEDS.clear();									LEDS.delay(500);
    148e:	4629      	mov	r1, r5
    1490:	4620      	mov	r0, r4
    1492:	f000 fbd7 	bl	1c44 <CFastLED::clear(bool)>
    1496:	4620      	mov	r0, r4
    1498:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    149c:	f000 fb5a 	bl	1b54 <CFastLED::delay(unsigned long)>
	}

	initialize();
    14a0:	f7ff fe88 	bl	11b4 <initialize()>
    14a4:	210e      	movs	r1, #14
    14a6:	4820      	ldr	r0, [pc, #128]	; (1528 <setup+0x1d8>)
    14a8:	f001 fff0 	bl	348c <usb_serial_write>
    14ac:	4816      	ldr	r0, [pc, #88]	; (1508 <setup+0x1b8>)
    14ae:	f002 f9f1 	bl	3894 <Print::println()>

	if (DEBUG) { Serial.println("SETUP COMPLETE"); }
}
    14b2:	b002      	add	sp, #8
    14b4:	bd70      	pop	{r4, r5, r6, pc}
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    14b6:	f000 ff51 	bl	235c <__cxa_guard_acquire>
    14ba:	2800      	cmp	r0, #0
    14bc:	f43f af7e 	beq.w	13bc <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    14c0:	491a      	ldr	r1, [pc, #104]	; (152c <setup+0x1dc>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    14c2:	4b16      	ldr	r3, [pc, #88]	; (151c <setup+0x1cc>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    14c4:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    14c6:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    14c8:	22ff      	movs	r2, #255	; 0xff
    14ca:	2501      	movs	r5, #1
    14cc:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    14ce:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    14d0:	749d      	strb	r5, [r3, #18]
    14d2:	731a      	strb	r2, [r3, #12]
    14d4:	735a      	strb	r2, [r3, #13]
    14d6:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    14d8:	73da      	strb	r2, [r3, #15]
    14da:	741a      	strb	r2, [r3, #16]
    14dc:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    14de:	b160      	cbz	r0, 14fa <setup+0x1aa>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    14e0:	4a13      	ldr	r2, [pc, #76]	; (1530 <setup+0x1e0>)
    14e2:	6811      	ldr	r1, [r2, #0]
    14e4:	b101      	cbz	r1, 14e8 <setup+0x198>
    14e6:	608b      	str	r3, [r1, #8]
        m_pTail = this;
    14e8:	6013      	str	r3, [r2, #0]
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
    14ea:	2200      	movs	r2, #0
	inline void writeLed(uint8_t b0, uint8_t b1, uint8_t b2) __attribute__((always_inline)) {
		mSPI.writeByte(0xFF); mSPI.writeByte(b0); mSPI.writeByte(b1); mSPI.writeByte(b2);
	}

public:
	APA102Controller() {}
    14ec:	4911      	ldr	r1, [pc, #68]	; (1534 <setup+0x1e4>)
    14ee:	4808      	ldr	r0, [pc, #32]	; (1510 <setup+0x1c0>)
    14f0:	619a      	str	r2, [r3, #24]
    14f2:	6019      	str	r1, [r3, #0]
    14f4:	f000 ff38 	bl	2368 <__cxa_guard_release>
    14f8:	e760      	b.n	13bc <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    14fa:	600b      	str	r3, [r1, #0]
    14fc:	e7f0      	b.n	14e0 <setup+0x190>
    14fe:	bf00      	nop
    1500:	1fff92c4 	.word	0x1fff92c4
    1504:	0000416c 	.word	0x0000416c
    1508:	1fff8728 	.word	0x1fff8728
    150c:	00004180 	.word	0x00004180
    1510:	1fff8c2c 	.word	0x1fff8c2c
    1514:	1fff929c 	.word	0x1fff929c
    1518:	1fff8ea0 	.word	0x1fff8ea0
    151c:	1fff8c30 	.word	0x1fff8c30
    1520:	1fff8720 	.word	0x1fff8720
    1524:	0000418c 	.word	0x0000418c
    1528:	00004198 	.word	0x00004198
    152c:	1fff92ac 	.word	0x1fff92ac
    1530:	1fff92bc 	.word	0x1fff92bc
    1534:	00003fac 	.word	0x00003fac

00001538 <loop>:

void loop() {
    1538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    153c:	b08a      	sub	sp, #40	; 0x28
	random16_add_entropy(random());
    153e:	f002 fcf3 	bl	3f28 <random>
    1542:	4a5e      	ldr	r2, [pc, #376]	; (16bc <loop+0x184>)

	EVERY_N_MILLISECONDS(50) {
    1544:	4d5e      	ldr	r5, [pc, #376]	; (16c0 <loop+0x188>)
    1546:	8813      	ldrh	r3, [r2, #0]
    1548:	6829      	ldr	r1, [r5, #0]
    154a:	4418      	add	r0, r3
    154c:	8010      	strh	r0, [r2, #0]
    154e:	07c8      	lsls	r0, r1, #31
    1550:	d550      	bpl.n	15f4 <loop+0xbc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1552:	4e5c      	ldr	r6, [pc, #368]	; (16c4 <loop+0x18c>)
    1554:	4c5c      	ldr	r4, [pc, #368]	; (16c8 <loop+0x190>)
    1556:	6833      	ldr	r3, [r6, #0]
    1558:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    155a:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    155e:	9b03      	ldr	r3, [sp, #12]
    1560:	1a5b      	subs	r3, r3, r1
    1562:	429a      	cmp	r2, r3
    1564:	d955      	bls.n	1612 <loop+0xda>
	
	// Update delay times
	curr_delay = curr_leds.delay_time;

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    1566:	4f59      	ldr	r7, [pc, #356]	; (16cc <loop+0x194>)
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
	}
	
	// Update delay times
	curr_delay = curr_leds.delay_time;
    1568:	4d59      	ldr	r5, [pc, #356]	; (16d0 <loop+0x198>)

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    156a:	683b      	ldr	r3, [r7, #0]
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
	}
	
	// Update delay times
	curr_delay = curr_leds.delay_time;
    156c:	f8df 8180 	ldr.w	r8, [pc, #384]	; 16f0 <loop+0x1b8>
    1570:	f895 21c3 	ldrb.w	r2, [r5, #451]	; 0x1c3
    1574:	f888 2000 	strb.w	r2, [r8]

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    1578:	07d9      	lsls	r1, r3, #31
    157a:	d555      	bpl.n	1628 <loop+0xf0>
    157c:	4c55      	ldr	r4, [pc, #340]	; (16d4 <loop+0x19c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    157e:	6833      	ldr	r3, [r6, #0]
    1580:	9306      	str	r3, [sp, #24]
    1582:	e894 0003 	ldmia.w	r4, {r0, r1}
	return ret;
    1586:	9b06      	ldr	r3, [sp, #24]
    1588:	1a1b      	subs	r3, r3, r0
    158a:	4299      	cmp	r1, r3
    158c:	d95b      	bls.n	1646 <loop+0x10e>
    158e:	4b50      	ldr	r3, [pc, #320]	; (16d0 <loop+0x198>)
    1590:	4a51      	ldr	r2, [pc, #324]	; (16d8 <loop+0x1a0>)
    1592:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1596:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    1598:	7858      	ldrb	r0, [r3, #1]
        b = rhs.b;
    159a:	7899      	ldrb	r1, [r3, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    159c:	7014      	strb	r4, [r2, #0]
    159e:	3303      	adds	r3, #3
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}
	

	for(uint16_t i = 0; i < NUM_LEDS; i++){ master_leds[i] = curr_leds.led_data[i] ;}
    15a0:	42ab      	cmp	r3, r5
        g = rhs.g;
    15a2:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    15a4:	7091      	strb	r1, [r2, #2]
    15a6:	f102 0203 	add.w	r2, r2, #3
    15aa:	d1f4      	bne.n	1596 <loop+0x5e>
	
	if (DEBUG) { EVERY_N_SECONDS(5) { LEDDebug(curr_leds); }; }
    15ac:	4d4b      	ldr	r5, [pc, #300]	; (16dc <loop+0x1a4>)
    15ae:	682b      	ldr	r3, [r5, #0]
    15b0:	07db      	lsls	r3, r3, #31
    15b2:	d555      	bpl.n	1660 <loop+0x128>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15b4:	6833      	ldr	r3, [r6, #0]
    15b6:	4c4a      	ldr	r4, [pc, #296]	; (16e0 <loop+0x1a8>)
    15b8:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    15ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    15bc:	4849      	ldr	r0, [pc, #292]	; (16e4 <loop+0x1ac>)
    15be:	8823      	ldrh	r3, [r4, #0]
    15c0:	8861      	ldrh	r1, [r4, #2]
    15c2:	fba0 0202 	umull	r0, r2, r0, r2
    15c6:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    15ca:	b29b      	uxth	r3, r3
    15cc:	4299      	cmp	r1, r3
    15ce:	d80a      	bhi.n	15e6 <loop+0xae>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15d0:	6833      	ldr	r3, [r6, #0]
    15d2:	9308      	str	r3, [sp, #32]
	return ret;
    15d4:	9b08      	ldr	r3, [sp, #32]
    15d6:	4a43      	ldr	r2, [pc, #268]	; (16e4 <loop+0x1ac>)
    15d8:	483d      	ldr	r0, [pc, #244]	; (16d0 <loop+0x198>)
    15da:	fba2 2303 	umull	r2, r3, r2, r3
    15de:	099b      	lsrs	r3, r3, #6
    15e0:	8023      	strh	r3, [r4, #0]
    15e2:	f7ff fb4b 	bl	c7c <LEDDebug(LEDStruct&)>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    15e6:	4840      	ldr	r0, [pc, #256]	; (16e8 <loop+0x1b0>)
    15e8:	7801      	ldrb	r1, [r0, #0]
    15ea:	f000 fa51 	bl	1a90 <CFastLED::show(unsigned char)>


	FastLED.show();
    15ee:	b00a      	add	sp, #40	; 0x28
    15f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}

void loop() {
	random16_add_entropy(random());

	EVERY_N_MILLISECONDS(50) {
    15f4:	4628      	mov	r0, r5
    15f6:	f000 feb1 	bl	235c <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15fa:	4e32      	ldr	r6, [pc, #200]	; (16c4 <loop+0x18c>)
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    15fc:	4c32      	ldr	r4, [pc, #200]	; (16c8 <loop+0x190>)
    15fe:	2800      	cmp	r0, #0
    1600:	d136      	bne.n	1670 <loop+0x138>
    1602:	6833      	ldr	r3, [r6, #0]
    1604:	9303      	str	r3, [sp, #12]
    1606:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    160a:	9b03      	ldr	r3, [sp, #12]
    160c:	1a5b      	subs	r3, r3, r1
    160e:	4293      	cmp	r3, r2
    1610:	d3a9      	bcc.n	1566 <loop+0x2e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1612:	6833      	ldr	r3, [r6, #0]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
    1614:	4935      	ldr	r1, [pc, #212]	; (16ec <loop+0x1b4>)
    1616:	9302      	str	r3, [sp, #8]
	return ret;
    1618:	9b02      	ldr	r3, [sp, #8]
    161a:	6023      	str	r3, [r4, #0]
    161c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    1620:	2218      	movs	r2, #24
    1622:	f000 f995 	bl	1950 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
    1626:	e79e      	b.n	1566 <loop+0x2e>
	
	// Update delay times
	curr_delay = curr_leds.delay_time;

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    1628:	4638      	mov	r0, r7
    162a:	f000 fe97 	bl	235c <__cxa_guard_acquire>
    162e:	bb48      	cbnz	r0, 1684 <loop+0x14c>
    1630:	4c28      	ldr	r4, [pc, #160]	; (16d4 <loop+0x19c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1632:	6833      	ldr	r3, [r6, #0]
    1634:	9306      	str	r3, [sp, #24]
    1636:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    163a:	9b06      	ldr	r3, [sp, #24]
    163c:	1a5b      	subs	r3, r3, r1
    163e:	4293      	cmp	r3, r2
    1640:	d3a5      	bcc.n	158e <loop+0x56>
    1642:	f898 2000 	ldrb.w	r2, [r8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1646:	6831      	ldr	r1, [r6, #0]
    1648:	9105      	str	r1, [sp, #20]
	return ret;
    164a:	9905      	ldr	r1, [sp, #20]
#ifndef SWITCH_MODE_H
#define SWITCH_MODE_H

void switch_mode(LEDStruct& leds) {
	switch (leds.mode_name) {
    164c:	f895 3229 	ldrb.w	r3, [r5, #553]	; 0x229
    1650:	e884 0006 	stmia.w	r4, {r1, r2}
    1654:	2b00      	cmp	r3, #0
    1656:	d19a      	bne.n	158e <loop+0x56>
		case JUGGLE:
			juggle(leds);
    1658:	481d      	ldr	r0, [pc, #116]	; (16d0 <loop+0x198>)
    165a:	f7ff fc5d 	bl	f18 <juggle(LEDStruct&)>
    165e:	e796      	b.n	158e <loop+0x56>
	}
	

	for(uint16_t i = 0; i < NUM_LEDS; i++){ master_leds[i] = curr_leds.led_data[i] ;}
	
	if (DEBUG) { EVERY_N_SECONDS(5) { LEDDebug(curr_leds); }; }
    1660:	4628      	mov	r0, r5
    1662:	f000 fe7b 	bl	235c <__cxa_guard_acquire>
    1666:	b9c8      	cbnz	r0, 169c <loop+0x164>
    1668:	4c1d      	ldr	r4, [pc, #116]	; (16e0 <loop+0x1a8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    166a:	6833      	ldr	r3, [r6, #0]
    166c:	9309      	str	r3, [sp, #36]	; 0x24
    166e:	e7a4      	b.n	15ba <loop+0x82>
    1670:	6833      	ldr	r3, [r6, #0]
    1672:	9301      	str	r3, [sp, #4]
	return ret;
    1674:	9b01      	ldr	r3, [sp, #4]
    1676:	6023      	str	r3, [r4, #0]
    1678:	2332      	movs	r3, #50	; 0x32
}

void loop() {
	random16_add_entropy(random());

	EVERY_N_MILLISECONDS(50) {
    167a:	4628      	mov	r0, r5
    167c:	6063      	str	r3, [r4, #4]
    167e:	f000 fe73 	bl	2368 <__cxa_guard_release>
    1682:	e7be      	b.n	1602 <loop+0xca>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1684:	6833      	ldr	r3, [r6, #0]
    1686:	9304      	str	r3, [sp, #16]
    1688:	4c12      	ldr	r4, [pc, #72]	; (16d4 <loop+0x19c>)
	return ret;
    168a:	9a04      	ldr	r2, [sp, #16]
	
	// Update delay times
	curr_delay = curr_leds.delay_time;

	// Apply effect to current LEDS
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    168c:	f898 3000 	ldrb.w	r3, [r8]
    1690:	6022      	str	r2, [r4, #0]
    1692:	4638      	mov	r0, r7
    1694:	6063      	str	r3, [r4, #4]
    1696:	f000 fe67 	bl	2368 <__cxa_guard_release>
    169a:	e7ca      	b.n	1632 <loop+0xfa>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    169c:	6833      	ldr	r3, [r6, #0]
    169e:	9307      	str	r3, [sp, #28]
	return ret;
    16a0:	9b07      	ldr	r3, [sp, #28]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    16a2:	4a10      	ldr	r2, [pc, #64]	; (16e4 <loop+0x1ac>)
    16a4:	4c0e      	ldr	r4, [pc, #56]	; (16e0 <loop+0x1a8>)
    16a6:	fba2 2303 	umull	r2, r3, r2, r3
    16aa:	099b      	lsrs	r3, r3, #6
    16ac:	2205      	movs	r2, #5
	}
	

	for(uint16_t i = 0; i < NUM_LEDS; i++){ master_leds[i] = curr_leds.led_data[i] ;}
	
	if (DEBUG) { EVERY_N_SECONDS(5) { LEDDebug(curr_leds); }; }
    16ae:	4628      	mov	r0, r5
    16b0:	8023      	strh	r3, [r4, #0]
    16b2:	8062      	strh	r2, [r4, #2]
    16b4:	f000 fe58 	bl	2368 <__cxa_guard_release>
    16b8:	e7d7      	b.n	166a <loop+0x132>
    16ba:	bf00      	nop
    16bc:	1fff8720 	.word	0x1fff8720
    16c0:	1fff8e94 	.word	0x1fff8e94
    16c4:	1fff9314 	.word	0x1fff9314
    16c8:	1fff8e88 	.word	0x1fff8e88
    16cc:	1fff9064 	.word	0x1fff9064
    16d0:	1fff9068 	.word	0x1fff9068
    16d4:	1fff8e80 	.word	0x1fff8e80
    16d8:	1fff8ea0 	.word	0x1fff8ea0
    16dc:	1fff8e98 	.word	0x1fff8e98
    16e0:	1fff8e90 	.word	0x1fff8e90
    16e4:	10624dd3 	.word	0x10624dd3
    16e8:	1fff929c 	.word	0x1fff929c
    16ec:	1fff925c 	.word	0x1fff925c
    16f0:	1fff8e9c 	.word	0x1fff8e9c

000016f4 <_GLOBAL__sub_I_master_leds>:


	FastLED.show();
    16f4:	b430      	push	{r4, r5}
#ifndef LED_STRUCT_H
#define LED_STRUCT_H

//======== LED structure =========

struct LEDStruct {
    16f6:	4a12      	ldr	r2, [pc, #72]	; (1740 <_GLOBAL__sub_I_master_leds+0x4c>)
    16f8:	4b12      	ldr	r3, [pc, #72]	; (1744 <_GLOBAL__sub_I_master_leds+0x50>)
    16fa:	25ff      	movs	r5, #255	; 0xff
    16fc:	240a      	movs	r4, #10
    16fe:	2101      	movs	r1, #1
    1700:	2000      	movs	r0, #0
    1702:	f882 51c2 	strb.w	r5, [r2, #450]	; 0x1c2
    1706:	f883 51c2 	strb.w	r5, [r3, #450]	; 0x1c2
    170a:	f882 41c3 	strb.w	r4, [r2, #451]	; 0x1c3
    170e:	f883 41c3 	strb.w	r4, [r3, #451]	; 0x1c3
    1712:	f882 1224 	strb.w	r1, [r2, #548]	; 0x224
    1716:	f882 1225 	strb.w	r1, [r2, #549]	; 0x225
    171a:	f882 1227 	strb.w	r1, [r2, #551]	; 0x227
    171e:	f883 1224 	strb.w	r1, [r3, #548]	; 0x224
    1722:	f883 1225 	strb.w	r1, [r3, #549]	; 0x225
    1726:	f883 1227 	strb.w	r1, [r3, #551]	; 0x227
    172a:	f882 0226 	strb.w	r0, [r2, #550]	; 0x226
    172e:	f882 022a 	strb.w	r0, [r2, #554]	; 0x22a
    1732:	f883 0226 	strb.w	r0, [r3, #550]	; 0x226
    1736:	f883 022a 	strb.w	r0, [r3, #554]	; 0x22a
    173a:	bc30      	pop	{r4, r5}
    173c:	4770      	bx	lr
    173e:	bf00      	nop
    1740:	1fff9068 	.word	0x1fff9068
    1744:	1fff8c4c 	.word	0x1fff8c4c

00001748 <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    1748:	2900      	cmp	r1, #0
    174a:	dd0b      	ble.n	1764 <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    174c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1750:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1752:	7813      	ldrb	r3, [r2, #0]
    1754:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    1756:	7853      	ldrb	r3, [r2, #1]
    1758:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    175a:	7893      	ldrb	r3, [r2, #2]
    175c:	7083      	strb	r3, [r0, #2]
    175e:	3003      	adds	r0, #3
    1760:	4288      	cmp	r0, r1
    1762:	d1f6      	bne.n	1752 <fill_solid(CRGB*, int, CRGB const&)+0xa>
    1764:	4770      	bx	lr
    1766:	bf00      	nop

00001768 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    1768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    176c:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    176e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    1770:	d352      	bcc.n	1818 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    1772:	f896 e000 	ldrb.w	lr, [r6]
    1776:	7815      	ldrb	r5, [r2, #0]
    1778:	7877      	ldrb	r7, [r6, #1]
    177a:	f896 8002 	ldrb.w	r8, [r6, #2]
    177e:	7854      	ldrb	r4, [r2, #1]
    1780:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    1784:	ebc1 0b03 	rsb	fp, r1, r3

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    1788:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    178c:	ebc4 0a07 	rsb	sl, r4, r7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    1790:	ebcc 0608 	rsb	r6, ip, r8

    uint16_t pixeldistance = endpos - startpos;
    1794:	fa1f f28b 	uxth.w	r2, fp

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    1798:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    179c:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    17a0:	01f6      	lsls	r6, r6, #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    17a2:	b3b2      	cbz	r2, 1812 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    17a4:	fa0f fb82 	sxth.w	fp, r2

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    17a8:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    17ac:	fb9a fafb 	sdiv	sl, sl, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    17b0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    17b4:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    17b8:	fb96 fbfb 	sdiv	fp, r6, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    17bc:	4299      	cmp	r1, r3
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;
    17be:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    17c2:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    17c6:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    17ca:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    17ce:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    17d2:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    17d6:	ea4f 220c 	mov.w	r2, ip, lsl #8
    for( uint16_t i = startpos; i <= endpos; i++) {
    17da:	d818      	bhi.n	180e <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    17dc:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    17e0:	3101      	adds	r1, #1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    17e2:	19c6      	adds	r6, r0, r7
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    17e4:	b289      	uxth	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17e6:	ea4f 2925 	mov.w	r9, r5, asr #8
        g = rhs.g;
    17ea:	ea4f 2824 	mov.w	r8, r4, asr #8
        b = rhs.b;
    17ee:	ea4f 2c22 	mov.w	ip, r2, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    17f2:	4475      	add	r5, lr
        g88 += gdelta87;
    17f4:	4454      	add	r4, sl
        b88 += bdelta87;
    17f6:	445a      	add	r2, fp
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    17f8:	428b      	cmp	r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17fa:	f800 9007 	strb.w	r9, [r0, r7]
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    17fe:	b2ad      	uxth	r5, r5
        g = rhs.g;
    1800:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    1804:	b2a4      	uxth	r4, r4
        b = rhs.b;
    1806:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    180a:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    180c:	d2e6      	bcs.n	17dc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    180e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1812:	f04f 0b01 	mov.w	fp, #1
    1816:	e7c7      	b.n	17a8 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    1818:	4689      	mov	r9, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    181a:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    181c:	f892 e000 	ldrb.w	lr, [r2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1820:	7874      	ldrb	r4, [r6, #1]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1822:	7857      	ldrb	r7, [r2, #1]
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1824:	f896 c002 	ldrb.w	ip, [r6, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1828:	f892 8002 	ldrb.w	r8, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    182c:	7015      	strb	r5, [r2, #0]
    182e:	4619      	mov	r1, r3
    1830:	f886 e000 	strb.w	lr, [r6]
    1834:	464b      	mov	r3, r9
        g = rhs.g;
    1836:	7054      	strb	r4, [r2, #1]
    1838:	7077      	strb	r7, [r6, #1]
        b = rhs.b;
    183a:	f882 c002 	strb.w	ip, [r2, #2]
    183e:	f886 8002 	strb.w	r8, [r6, #2]
    1842:	e79f      	b.n	1784 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1c>

00001844 <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    1844:	b309      	cbz	r1, 188a <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    1846:	b430      	push	{r4, r5}
    1848:	1e4d      	subs	r5, r1, #1
    184a:	b2ad      	uxth	r5, r5
    184c:	43d2      	mvns	r2, r2
    184e:	3501      	adds	r5, #1
    1850:	b2d2      	uxtb	r2, r2
    1852:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1856:	4405      	add	r5, r0
    1858:	3201      	adds	r2, #1
    185a:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    185c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    1860:	fb02 f303 	mul.w	r3, r2, r3
    1864:	121b      	asrs	r3, r3, #8
    1866:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    186a:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    186c:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    186e:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    1872:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    1876:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    1878:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    187a:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    187c:	7083      	strb	r3, [r0, #2]
    187e:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    1880:	4285      	cmp	r5, r0
    1882:	f104 0403 	add.w	r4, r4, #3
    1886:	d1e9      	bne.n	185c <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    1888:	bc30      	pop	{r4, r5}
    188a:	4770      	bx	lr

0000188c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    188c:	f7ff bfda 	b.w	1844 <fade_raw(CRGB*, unsigned short, unsigned char)>

00001890 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    1890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    1894:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    1896:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    189a:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    189e:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    18a0:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    18a4:	d000      	beq.n	18a8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    18a6:	b9e6      	cbnz	r6, 18e2 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    18a8:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    18aa:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    18ac:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    18ae:	2bff      	cmp	r3, #255	; 0xff
    18b0:	d012      	beq.n	18d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    18b2:	2b00      	cmp	r3, #0
    18b4:	d043      	beq.n	193e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    18b6:	3301      	adds	r3, #1
    18b8:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    18ba:	b11c      	cbz	r4, 18c4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    18bc:	fb03 4404 	mla	r4, r3, r4, r4
    18c0:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    18c4:	b119      	cbz	r1, 18ce <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    18c6:	fb03 1101 	mla	r1, r3, r1, r1
    18ca:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    18ce:	b11a      	cbz	r2, 18d8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    18d0:	fb03 2202 	mla	r2, r3, r2, r2
    18d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    18d8:	7004      	strb	r4, [r0, #0]
    18da:	7041      	strb	r1, [r0, #1]
    18dc:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    18de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    18e2:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    18e4:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    18e6:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    18ea:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    18ec:	d000      	beq.n	18f0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    18ee:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    18f0:	0112      	lsls	r2, r2, #4
    18f2:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    18f6:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    18f8:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    18fc:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    1900:	f891 8002 	ldrb.w	r8, [r1, #2]
    1904:	fb04 f606 	mul.w	r6, r4, r6
    1908:	1c51      	adds	r1, r2, #1
    190a:	fb04 f509 	mul.w	r5, r4, r9
    190e:	fb04 f407 	mul.w	r4, r4, r7
    1912:	f3c4 2407 	ubfx	r4, r4, #8, #8
    1916:	f3c6 2707 	ubfx	r7, r6, #8, #8
    191a:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    191e:	fb01 f60c 	mul.w	r6, r1, ip
    1922:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1926:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    192a:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    192e:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1932:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    1936:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    1938:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    193a:	b2d2      	uxtb	r2, r2
    193c:	e7b7      	b.n	18ae <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    193e:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    1940:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    1942:	461c      	mov	r4, r3
    1944:	7004      	strb	r4, [r0, #0]
    1946:	7041      	strb	r1, [r0, #1]
    1948:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    194a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    194e:	bf00      	nop

00001950 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>:
}
#endif


void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)
{
    1950:	b5f0      	push	{r4, r5, r6, r7, lr}
    1952:	3901      	subs	r1, #1
    1954:	1e44      	subs	r4, r0, #1
    uint8_t* p1;
    uint8_t* p2;
    uint8_t  changes = 0;
    1956:	2500      	movs	r5, #0
    1958:	302f      	adds	r0, #47	; 0x2f
    195a:	e001      	b.n	1960 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x10>

    p1 = (uint8_t*)current.entries;
    p2 = (uint8_t*)target.entries;

    const uint8_t totalChannels = sizeof(CRGBPalette16);
    for( uint8_t i = 0; i < totalChannels; i++) {
    195c:	4284      	cmp	r4, r0
    195e:	d01e      	beq.n	199e <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4e>
        // if the values are equal, no changes are needed
        if( p1[i] == p2[i] ) { continue; }
    1960:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    1964:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    1968:	42b3      	cmp	r3, r6
    196a:	d0f7      	beq.n	195c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>

        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }
    196c:	f103 0701 	add.w	r7, r3, #1
    1970:	d204      	bcs.n	197c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x2c>
    1972:	b2fb      	uxtb	r3, r7
    1974:	7023      	strb	r3, [r4, #0]
    1976:	3501      	adds	r5, #1
    1978:	780e      	ldrb	r6, [r1, #0]
    197a:	b2ed      	uxtb	r5, r5

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    197c:	1e5f      	subs	r7, r3, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    197e:	429e      	cmp	r6, r3
            p1[i]--; changes++;
    1980:	b2ff      	uxtb	r7, r7
    1982:	f105 0e01 	add.w	lr, r5, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    1986:	d208      	bcs.n	199a <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4a>
            p1[i]--; changes++;
    1988:	7027      	strb	r7, [r4, #0]
            if( p1[i] > p2[i] ) { p1[i]--; }
    198a:	780e      	ldrb	r6, [r1, #0]
    198c:	42be      	cmp	r6, r7
    198e:	bf38      	it	cc
    1990:	3b02      	subcc	r3, #2
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    1992:	fa5f f58e 	uxtb.w	r5, lr
            if( p1[i] > p2[i] ) { p1[i]--; }
    1996:	bf38      	it	cc
    1998:	7023      	strbcc	r3, [r4, #0]
        }

        // if we've hit the maximum number of changes, exit
        if( changes >= maxChanges) { break; }
    199a:	4295      	cmp	r5, r2
    199c:	d3de      	bcc.n	195c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>
    199e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000019a0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    19a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    19a2:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    19a4:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    19a6:	4604      	mov	r4, r0
    19a8:	bfcc      	ite	gt
    19aa:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    19ae:	2500      	movle	r5, #0
    19b0:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    19b2:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    19b4:	bfd8      	it	le
    19b6:	4616      	movle	r6, r2

	pLed->init();
    19b8:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    19ba:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    19bc:	6823      	ldr	r3, [r4, #0]
    19be:	6062      	str	r2, [r4, #4]
    19c0:	695b      	ldr	r3, [r3, #20]
    19c2:	4a0a      	ldr	r2, [pc, #40]	; (19ec <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    19c4:	6166      	str	r6, [r4, #20]
    19c6:	4293      	cmp	r3, r2
    19c8:	d101      	bne.n	19ce <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    19ca:	4620      	mov	r0, r4
    19cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    19ce:	4620      	mov	r0, r4
    19d0:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    19d2:	2800      	cmp	r0, #0
    19d4:	d0f9      	beq.n	19ca <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    19d6:	4a06      	ldr	r2, [pc, #24]	; (19f0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    19d8:	4b06      	ldr	r3, [pc, #24]	; (19f4 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    19da:	6851      	ldr	r1, [r2, #4]
    19dc:	fb93 f0f0 	sdiv	r0, r3, r0
    19e0:	4288      	cmp	r0, r1
    19e2:	bf38      	it	cc
    19e4:	4608      	movcc	r0, r1
    19e6:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    19e8:	4620      	mov	r0, r4
    19ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19ec:	00000471 	.word	0x00000471
    19f0:	1fff929c 	.word	0x1fff929c
    19f4:	000f4240 	.word	0x000f4240

000019f8 <CFastLED::clearData()>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    19f8:	4b08      	ldr	r3, [pc, #32]	; (1a1c <CFastLED::clearData()+0x24>)
		showColor(CRGB(0,0,0), 0);
	}
    clearData();
}

void CFastLED::clearData() {
    19fa:	b510      	push	{r4, lr}
    19fc:	681c      	ldr	r4, [r3, #0]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    19fe:	b15c      	cbz	r4, 1a18 <CFastLED::clearData()+0x20>
    1a00:	6863      	ldr	r3, [r4, #4]
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    1a02:	2100      	movs	r1, #0
    1a04:	4618      	mov	r0, r3
        return *this;
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
    1a06:	b123      	cbz	r3, 1a12 <CFastLED::clearData()+0x1a>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    1a08:	6962      	ldr	r2, [r4, #20]
    1a0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1a0e:	f002 fa3d 	bl	3e8c <memset>
    1a12:	68a4      	ldr	r4, [r4, #8]
    1a14:	2c00      	cmp	r4, #0
    1a16:	d1f3      	bne.n	1a00 <CFastLED::clearData()+0x8>
    1a18:	bd10      	pop	{r4, pc}
    1a1a:	bf00      	nop
    1a1c:	1fff92ac 	.word	0x1fff92ac

00001a20 <CFastLED::setCorrection(CRGB const&)>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    1a20:	4b07      	ldr	r3, [pc, #28]	; (1a40 <CFastLED::setCorrection(CRGB const&)+0x20>)
    1a22:	681b      	ldr	r3, [r3, #0]
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1a24:	b153      	cbz	r3, 1a3c <CFastLED::setCorrection(CRGB const&)+0x1c>
		pCur->setTemperature(temp);
		pCur = pCur->next();
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
    1a26:	b410      	push	{r4}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a28:	7808      	ldrb	r0, [r1, #0]
        g = rhs.g;
    1a2a:	784a      	ldrb	r2, [r1, #1]
        b = rhs.b;
    1a2c:	788c      	ldrb	r4, [r1, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1a2e:	739c      	strb	r4, [r3, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a30:	7318      	strb	r0, [r3, #12]
        g = rhs.g;
    1a32:	735a      	strb	r2, [r3, #13]
    1a34:	689b      	ldr	r3, [r3, #8]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1a36:	2b00      	cmp	r3, #0
    1a38:	d1f6      	bne.n	1a28 <CFastLED::setCorrection(CRGB const&)+0x8>
		pCur->setCorrection(correction);
		pCur = pCur->next();
	}
}
    1a3a:	bc10      	pop	{r4}
    1a3c:	4770      	bx	lr
    1a3e:	bf00      	nop
    1a40:	1fff92ac 	.word	0x1fff92ac

00001a44 <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    1a44:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    1a46:	4c0f      	ldr	r4, [pc, #60]	; (1a84 <CFastLED::countFPS(int)+0x40>)
    1a48:	6822      	ldr	r2, [r4, #0]
    1a4a:	1c53      	adds	r3, r2, #1
    1a4c:	428a      	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    1a4e:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    1a50:	6023      	str	r3, [r4, #0]
    1a52:	db13      	blt.n	1a7c <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a54:	4d0c      	ldr	r5, [pc, #48]	; (1a88 <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    1a56:	4a0d      	ldr	r2, [pc, #52]	; (1a8c <CFastLED::countFPS(int)+0x48>)
    1a58:	6829      	ldr	r1, [r5, #0]
    1a5a:	9101      	str	r1, [sp, #4]
	return ret;
    1a5c:	9901      	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a5e:	682d      	ldr	r5, [r5, #0]
    1a60:	9500      	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    1a62:	6816      	ldr	r6, [r2, #0]
	return ret;
    1a64:	9d00      	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    1a66:	6015      	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    1a68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    br = 0;
    1a6c:	2500      	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    1a6e:	1b89      	subs	r1, r1, r6
    1a70:	fb02 f303 	mul.w	r3, r2, r3
    br = 0;
    1a74:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    1a76:	fbb3 f3f1 	udiv	r3, r3, r1
    1a7a:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    1a7c:	b003      	add	sp, #12
    1a7e:	bc70      	pop	{r4, r5, r6}
    1a80:	4770      	bx	lr
    1a82:	bf00      	nop
    1a84:	1fff92b0 	.word	0x1fff92b0
    1a88:	1fff9314 	.word	0x1fff9314
    1a8c:	1fff92b8 	.word	0x1fff92b8

00001a90 <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    1a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a94:	6843      	ldr	r3, [r0, #4]
    1a96:	4c2d      	ldr	r4, [pc, #180]	; (1b4c <CFastLED::show(unsigned char)+0xbc>)
    1a98:	b083      	sub	sp, #12
    1a9a:	4606      	mov	r6, r0
    1a9c:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	d14b      	bne.n	1b3a <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    1aa2:	f000 fcb9 	bl	2418 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    1aa6:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    1aa8:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    1aaa:	b11b      	cbz	r3, 1ab4 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    1aac:	4648      	mov	r0, r9
    1aae:	68b1      	ldr	r1, [r6, #8]
    1ab0:	4798      	blx	r3
    1ab2:	4681      	mov	r9, r0
    1ab4:	4b26      	ldr	r3, [pc, #152]	; (1b50 <CFastLED::show(unsigned char)+0xc0>)
    1ab6:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1ab8:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1aba:	2c00      	cmp	r4, #0
    1abc:	d036      	beq.n	1b2c <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    1abe:	8873      	ldrh	r3, [r6, #2]
    1ac0:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1ac2:	6861      	ldr	r1, [r4, #4]
    1ac4:	6962      	ldr	r2, [r4, #20]
    1ac6:	2b63      	cmp	r3, #99	; 0x63
    1ac8:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1aca:	bf98      	it	ls
    1acc:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1ace:	f8d3 8004 	ldr.w	r8, [r3, #4]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    1ad2:	f88d 5004 	strb.w	r5, [sp, #4]
    1ad6:	f88d 5005 	strb.w	r5, [sp, #5]
    1ada:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    1ade:	f1b9 0f00 	cmp.w	r9, #0
    1ae2:	d01c      	beq.n	1b1e <CFastLED::show(unsigned char)+0x8e>
    1ae4:	f104 030b 	add.w	r3, r4, #11
    1ae8:	f10d 0e04 	add.w	lr, sp, #4
    1aec:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    1af0:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    1af4:	f1bb 0f00 	cmp.w	fp, #0
    1af8:	d00d      	beq.n	1b16 <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    1afa:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    1afe:	f10a 0001 	add.w	r0, sl, #1
    1b02:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    1b06:	f1ba 0f00 	cmp.w	sl, #0
    1b0a:	d004      	beq.n	1b16 <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    1b0c:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    1b10:	0c00      	lsrs	r0, r0, #16
    1b12:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    1b16:	4563      	cmp	r3, ip
    1b18:	f10e 0e01 	add.w	lr, lr, #1
    1b1c:	d1e8      	bne.n	1af0 <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    1b1e:	4620      	mov	r0, r4
    1b20:	ab01      	add	r3, sp, #4
    1b22:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1b24:	74a7      	strb	r7, [r4, #18]
    1b26:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1b28:	2c00      	cmp	r4, #0
    1b2a:	d1c8      	bne.n	1abe <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    1b2c:	4630      	mov	r0, r6
    1b2e:	2119      	movs	r1, #25
    1b30:	f7ff ff88 	bl	1a44 <CFastLED::countFPS(int)>
}
    1b34:	b003      	add	sp, #12
    1b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    1b3a:	f000 fc6d 	bl	2418 <micros>
    1b3e:	6822      	ldr	r2, [r4, #0]
    1b40:	6873      	ldr	r3, [r6, #4]
    1b42:	1a80      	subs	r0, r0, r2
    1b44:	4298      	cmp	r0, r3
    1b46:	d3aa      	bcc.n	1a9e <CFastLED::show(unsigned char)+0xe>
    1b48:	e7ab      	b.n	1aa2 <CFastLED::show(unsigned char)+0x12>
    1b4a:	bf00      	nop
    1b4c:	1fff92b4 	.word	0x1fff92b4
    1b50:	1fff92ac 	.word	0x1fff92ac

00001b54 <CFastLED::delay(unsigned long)>:
		pCur->clearLedData();
		pCur = pCur->next();
	}
}

void CFastLED::delay(unsigned long ms) {
    1b54:	b5f0      	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b56:	4d0a      	ldr	r5, [pc, #40]	; (1b80 <CFastLED::delay(unsigned long)+0x2c>)
    1b58:	b083      	sub	sp, #12
    1b5a:	682b      	ldr	r3, [r5, #0]
    1b5c:	9300      	str	r3, [sp, #0]
	return ret;
    1b5e:	9f00      	ldr	r7, [sp, #0]
    1b60:	4604      	mov	r4, r0
    1b62:	460e      	mov	r6, r1
    1b64:	7821      	ldrb	r1, [r4, #0]
    1b66:	4620      	mov	r0, r4
    1b68:	f7ff ff92 	bl	1a90 <CFastLED::show(unsigned char)>
		// make sure to allow at least one ms to pass to ensure the clock moves
		// forward
		::delay(1);
#endif
		show();
		yield();
    1b6c:	f001 ff02 	bl	3974 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b70:	682b      	ldr	r3, [r5, #0]
    1b72:	9301      	str	r3, [sp, #4]
	return ret;
    1b74:	9b01      	ldr	r3, [sp, #4]
	}
}

void CFastLED::delay(unsigned long ms) {
	unsigned long start = millis();
        do {
    1b76:	1bdb      	subs	r3, r3, r7
    1b78:	42b3      	cmp	r3, r6
    1b7a:	d3f3      	bcc.n	1b64 <CFastLED::delay(unsigned long)+0x10>
#endif
		show();
		yield();
	}
	while((millis()-start) < ms);
}
    1b7c:	b003      	add	sp, #12
    1b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b80:	1fff9314 	.word	0x1fff9314

00001b84 <CFastLED::showColor(CRGB const&, unsigned char)>:
	} else {
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
    1b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b88:	6843      	ldr	r3, [r0, #4]
    1b8a:	4c2c      	ldr	r4, [pc, #176]	; (1c3c <CFastLED::showColor(CRGB const&, unsigned char)+0xb8>)
    1b8c:	b083      	sub	sp, #12
    1b8e:	4606      	mov	r6, r0
    1b90:	468a      	mov	sl, r1
    1b92:	4691      	mov	r9, r2
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    1b94:	2b00      	cmp	r3, #0
    1b96:	d149      	bne.n	1c2c <CFastLED::showColor(CRGB const&, unsigned char)+0xa8>
	lastshow = micros();
    1b98:	f000 fc3e 	bl	2418 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    1b9c:	68f3      	ldr	r3, [r6, #12]
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    1b9e:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    1ba0:	b11b      	cbz	r3, 1baa <CFastLED::showColor(CRGB const&, unsigned char)+0x26>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    1ba2:	4648      	mov	r0, r9
    1ba4:	68b1      	ldr	r1, [r6, #8]
    1ba6:	4798      	blx	r3
    1ba8:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    1baa:	4b25      	ldr	r3, [pc, #148]	; (1c40 <CFastLED::showColor(CRGB const&, unsigned char)+0xbc>)
    1bac:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1bae:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1bb0:	2c00      	cmp	r4, #0
    1bb2:	d034      	beq.n	1c1e <CFastLED::showColor(CRGB const&, unsigned char)+0x9a>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    1bb4:	8873      	ldrh	r3, [r6, #2]
    1bb6:	7ca7      	ldrb	r7, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    1bb8:	6962      	ldr	r2, [r4, #20]
    1bba:	2b63      	cmp	r3, #99	; 0x63
    1bbc:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1bbe:	bf98      	it	ls
    1bc0:	74a5      	strbls	r5, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    1bc2:	f8d3 8000 	ldr.w	r8, [r3]
    1bc6:	f88d 5004 	strb.w	r5, [sp, #4]
    1bca:	f88d 5005 	strb.w	r5, [sp, #5]
    1bce:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    1bd2:	f1b9 0f00 	cmp.w	r9, #0
    1bd6:	d01a      	beq.n	1c0e <CFastLED::showColor(CRGB const&, unsigned char)+0x8a>
    1bd8:	f104 030b 	add.w	r3, r4, #11
    1bdc:	a801      	add	r0, sp, #4
    1bde:	f104 0e0e 	add.w	lr, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    1be2:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    1be6:	f1bb 0f00 	cmp.w	fp, #0
    1bea:	d00c      	beq.n	1c06 <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    1bec:	f893 c003 	ldrb.w	ip, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    1bf0:	f10c 0101 	add.w	r1, ip, #1
    1bf4:	fb0b 1101 	mla	r1, fp, r1, r1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    1bf8:	f1bc 0f00 	cmp.w	ip, #0
    1bfc:	d003      	beq.n	1c06 <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    1bfe:	fb09 f101 	mul.w	r1, r9, r1
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    1c02:	0c09      	lsrs	r1, r1, #16
    1c04:	7001      	strb	r1, [r0, #0]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    1c06:	4573      	cmp	r3, lr
    1c08:	f100 0001 	add.w	r0, r0, #1
    1c0c:	d1e9      	bne.n	1be2 <CFastLED::showColor(CRGB const&, unsigned char)+0x5e>
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    1c0e:	4620      	mov	r0, r4
    1c10:	ab01      	add	r3, sp, #4
    1c12:	4651      	mov	r1, sl
    1c14:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    1c16:	74a7      	strb	r7, [r4, #18]
    1c18:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1c1a:	2c00      	cmp	r4, #0
    1c1c:	d1ca      	bne.n	1bb4 <CFastLED::showColor(CRGB const&, unsigned char)+0x30>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    1c1e:	4630      	mov	r0, r6
    1c20:	2119      	movs	r1, #25
    1c22:	f7ff ff0f 	bl	1a44 <CFastLED::countFPS(int)>
}
    1c26:	b003      	add	sp, #12
    1c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    1c2c:	f000 fbf4 	bl	2418 <micros>
    1c30:	6822      	ldr	r2, [r4, #0]
    1c32:	6873      	ldr	r3, [r6, #4]
    1c34:	1a80      	subs	r0, r0, r2
    1c36:	4298      	cmp	r0, r3
    1c38:	d3ac      	bcc.n	1b94 <CFastLED::showColor(CRGB const&, unsigned char)+0x10>
    1c3a:	e7ad      	b.n	1b98 <CFastLED::showColor(CRGB const&, unsigned char)+0x14>
    1c3c:	1fff92b4 	.word	0x1fff92b4
    1c40:	1fff92ac 	.word	0x1fff92ac

00001c44 <CFastLED::clear(bool)>:
		pCur = pCur->next();
	}
	countFPS();
}

void CFastLED::clear(bool writeData) {
    1c44:	b510      	push	{r4, lr}
    1c46:	4604      	mov	r4, r0
    1c48:	b082      	sub	sp, #8
	if(writeData) {
    1c4a:	b151      	cbz	r1, 1c62 <CFastLED::clear(bool)+0x1e>
    1c4c:	2300      	movs	r3, #0
		showColor(CRGB(0,0,0), 0);
    1c4e:	461a      	mov	r2, r3
    1c50:	a901      	add	r1, sp, #4
    1c52:	f88d 3004 	strb.w	r3, [sp, #4]
    1c56:	f88d 3005 	strb.w	r3, [sp, #5]
    1c5a:	f88d 3006 	strb.w	r3, [sp, #6]
    1c5e:	f7ff ff91 	bl	1b84 <CFastLED::showColor(CRGB const&, unsigned char)>
	}
    clearData();
    1c62:	4620      	mov	r0, r4
    1c64:	f7ff fec8 	bl	19f8 <CFastLED::clearData()>
}
    1c68:	b002      	add	sp, #8
    1c6a:	bd10      	pop	{r4, pc}

00001c6c <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    1c6c:	2000      	movs	r0, #0
    1c6e:	4770      	bx	lr

00001c70 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1c70:	4b04      	ldr	r3, [pc, #16]	; (1c84 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    1c72:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1c74:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    1c76:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    1c7a:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    1c7c:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    1c7e:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    1c80:	60da      	str	r2, [r3, #12]
    1c82:	4770      	bx	lr
    1c84:	1fff929c 	.word	0x1fff929c

00001c88 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    1c88:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    1c8a:	b361      	cbz	r1, 1ce6 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x5e>
    1c8c:	f101 3eff 	add.w	lr, r1, #4294967295
    1c90:	fa1f fe8e 	uxth.w	lr, lr
    1c94:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    1c98:	2200      	movs	r2, #0
    1c9a:	f10e 0e06 	add.w	lr, lr, #6
    1c9e:	4486      	add	lr, r0
    1ca0:	1cc3      	adds	r3, r0, #3
    1ca2:	4615      	mov	r5, r2
    1ca4:	4614      	mov	r4, r2
        red32   += *p++;
    1ca6:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        green32 += *p++;
    1caa:	f813 0c02 	ldrb.w	r0, [r3, #-2]
        blue32  += *p++;
    1cae:	f813 6c01 	ldrb.w	r6, [r3, #-1]
    1cb2:	3303      	adds	r3, #3
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    1cb4:	4573      	cmp	r3, lr
        red32   += *p++;
    1cb6:	443c      	add	r4, r7
        green32 += *p++;
    1cb8:	4405      	add	r5, r0
        blue32  += *p++;
    1cba:	4432      	add	r2, r6
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    1cbc:	d1f3      	bne.n	1ca6 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x1e>
    1cbe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    1cc2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1cc6:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    1cca:	f3c4 1317 	ubfx	r3, r4, #4, #24
    1cce:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    1cd2:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    1cd6:	0a12      	lsrs	r2, r2, #8
    1cd8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    1cdc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    1ce0:	1910      	adds	r0, r2, r4
}
    1ce2:	4408      	add	r0, r1
    1ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    1ce6:	460c      	mov	r4, r1
    1ce8:	460a      	mov	r2, r1
    1cea:	e7f7      	b.n	1cdc <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x54>

00001cec <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    1cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    1cf0:	4b25      	ldr	r3, [pc, #148]	; (1d88 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x9c>)
    1cf2:	681c      	ldr	r4, [r3, #0]
    1cf4:	b085      	sub	sp, #20
    1cf6:	4607      	mov	r7, r0
    1cf8:	4688      	mov	r8, r1
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1cfa:	b19c      	cbz	r4, 1d24 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x38>
    1cfc:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1d94 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>
    1d00:	257d      	movs	r5, #125	; 0x7d
    1d02:	e007      	b.n	1d14 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    1d04:	6960      	ldr	r0, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    1d06:	b281      	uxth	r1, r0
    1d08:	4630      	mov	r0, r6
    1d0a:	f7ff ffbd 	bl	1c88 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    1d0e:	68a4      	ldr	r4, [r4, #8]
    1d10:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    1d12:	b144      	cbz	r4, 1d26 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    1d14:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    1d18:	691b      	ldr	r3, [r3, #16]
    1d1a:	454b      	cmp	r3, r9
    1d1c:	d0f2      	beq.n	1d04 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    1d1e:	4620      	mov	r0, r4
    1d20:	4798      	blx	r3
    1d22:	e7f0      	b.n	1d06 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;
    1d24:	257d      	movs	r5, #125	; 0x7d
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    1d26:	fb05 f507 	mul.w	r5, r5, r7
    1d2a:	0a2d      	lsrs	r5, r5, #8
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    1d2c:	4b17      	ldr	r3, [pc, #92]	; (1d8c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    1d2e:	4545      	cmp	r5, r8
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    1d30:	781b      	ldrb	r3, [r3, #0]
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    1d32:	d210      	bcs.n	1d56 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x6a>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    1d34:	b323      	cbz	r3, 1d80 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    1d36:	4a16      	ldr	r2, [pc, #88]	; (1d90 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    1d38:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    1d3a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    1d3e:	f88d 100c 	strb.w	r1, [sp, #12]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    1d42:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1d46:	7813      	ldrb	r3, [r2, #0]
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    1d48:	4638      	mov	r0, r7
    1d4a:	ea23 0301 	bic.w	r3, r3, r1
    1d4e:	7013      	strb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    1d50:	b005      	add	sp, #20
    1d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    1d56:	fb08 f707 	mul.w	r7, r8, r7
    1d5a:	fbb7 f0f5 	udiv	r0, r7, r5
    1d5e:	b2c7      	uxtb	r7, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    1d60:	b173      	cbz	r3, 1d80 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    1d62:	4a0b      	ldr	r2, [pc, #44]	; (1d90 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    1d64:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    1d66:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    1d6a:	f88d 100c 	strb.w	r1, [sp, #12]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    1d6e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1d72:	7813      	ldrb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    1d74:	4638      	mov	r0, r7
    1d76:	430b      	orrs	r3, r1
    1d78:	7013      	strb	r3, [r2, #0]
}
    1d7a:	b005      	add	sp, #20
    1d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    1d80:	4638      	mov	r0, r7
}
    1d82:	b005      	add	sp, #20
    1d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1d88:	1fff92ac 	.word	0x1fff92ac
    1d8c:	1fff92c0 	.word	0x1fff92c0
    1d90:	0000428c 	.word	0x0000428c
    1d94:	0000046d 	.word	0x0000046d

00001d98 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>:
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
    1d98:	4b03      	ldr	r3, [pc, #12]	; (1da8 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x10>)
    1d9a:	4a04      	ldr	r2, [pc, #16]	; (1dac <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x14>)
    1d9c:	60da      	str	r2, [r3, #12]
    1d9e:	fb01 f100 	mul.w	r1, r1, r0
    1da2:	6099      	str	r1, [r3, #8]
    1da4:	4770      	bx	lr
    1da6:	bf00      	nop
    1da8:	1fff929c 	.word	0x1fff929c
    1dac:	00001ced 	.word	0x00001ced

00001db0 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1db0:	4807      	ldr	r0, [pc, #28]	; (1dd0 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    1db2:	b082      	sub	sp, #8
    1db4:	6803      	ldr	r3, [r0, #0]
    1db6:	9301      	str	r3, [sp, #4]
	return ret;
    1db8:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1dba:	4411      	add	r1, r2
    1dbc:	e001      	b.n	1dc2 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1dbe:	4299      	cmp	r1, r3
    1dc0:	d304      	bcc.n	1dcc <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1dc2:	6803      	ldr	r3, [r0, #0]
    1dc4:	9300      	str	r3, [sp, #0]
	return ret;
    1dc6:	9b00      	ldr	r3, [sp, #0]
    1dc8:	429a      	cmp	r2, r3
    1dca:	d9f8      	bls.n	1dbe <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    1dcc:	b002      	add	sp, #8
    1dce:	4770      	bx	lr
    1dd0:	1fff9314 	.word	0x1fff9314

00001dd4 <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    1dd4:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1dd6:	4a10      	ldr	r2, [pc, #64]	; (1e18 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    1dd8:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    1dda:	b9a1      	cbnz	r1, 1e06 <VisualMicroDebug::outPacketStart(bool)+0x32>
    1ddc:	6813      	ldr	r3, [r2, #0]
    1dde:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    1de0:	6841      	ldr	r1, [r0, #4]
	return ret;
    1de2:	9b00      	ldr	r3, [sp, #0]
    1de4:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    1de6:	2931      	cmp	r1, #49	; 0x31
    1de8:	d80d      	bhi.n	1e06 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1dea:	6813      	ldr	r3, [r2, #0]
    1dec:	9302      	str	r3, [sp, #8]
	return ret;
    1dee:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1df0:	f104 0332 	add.w	r3, r4, #50	; 0x32
    1df4:	1a59      	subs	r1, r3, r1
    1df6:	e001      	b.n	1dfc <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1df8:	4299      	cmp	r1, r3
    1dfa:	d304      	bcc.n	1e06 <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1dfc:	6813      	ldr	r3, [r2, #0]
    1dfe:	9301      	str	r3, [sp, #4]
	return ret;
    1e00:	9b01      	ldr	r3, [sp, #4]
    1e02:	429c      	cmp	r4, r3
    1e04:	d9f8      	bls.n	1df8 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e06:	6813      	ldr	r3, [r2, #0]
    1e08:	9303      	str	r3, [sp, #12]
	return ret;
    1e0a:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    1e0c:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    1e0e:	2001      	movs	r0, #1
    1e10:	b005      	add	sp, #20
    1e12:	bc10      	pop	{r4}
    1e14:	4770      	bx	lr
    1e16:	bf00      	nop
    1e18:	1fff9314 	.word	0x1fff9314

00001e1c <VisualMicroDebug::outPacketEnd()>:
    1e1c:	4770      	bx	lr
    1e1e:	bf00      	nop

00001e20 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    1e20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1e24:	f000 bb1a 	b.w	245c <delay>

00001e28 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    1e28:	2300      	movs	r3, #0
    1e2a:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    1e2c:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    1e2e:	b171      	cbz	r1, 1e4e <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e30:	4807      	ldr	r0, [pc, #28]	; (1e50 <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    1e32:	b082      	sub	sp, #8
    1e34:	6803      	ldr	r3, [r0, #0]
    1e36:	9301      	str	r3, [sp, #4]
	return ret;
    1e38:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1e3a:	4411      	add	r1, r2
    1e3c:	e001      	b.n	1e42 <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1e3e:	4299      	cmp	r1, r3
    1e40:	d304      	bcc.n	1e4c <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e42:	6803      	ldr	r3, [r0, #0]
    1e44:	9300      	str	r3, [sp, #0]
	return ret;
    1e46:	9b00      	ldr	r3, [sp, #0]
    1e48:	429a      	cmp	r2, r3
    1e4a:	d9f8      	bls.n	1e3e <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    1e4c:	b002      	add	sp, #8
    1e4e:	4770      	bx	lr
    1e50:	1fff9314 	.word	0x1fff9314

00001e54 <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    1e54:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e56:	4c13      	ldr	r4, [pc, #76]	; (1ea4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    1e58:	b085      	sub	sp, #20
    1e5a:	6823      	ldr	r3, [r4, #0]
    1e5c:	9303      	str	r3, [sp, #12]
	return ret;
    1e5e:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    1e60:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    1e62:	460d      	mov	r5, r1
    1e64:	4810      	ldr	r0, [pc, #64]	; (1ea8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    1e66:	2106      	movs	r1, #6
    1e68:	f001 fb10 	bl	348c <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1e6c:	2300      	movs	r3, #0
    1e6e:	220a      	movs	r2, #10
    1e70:	4629      	mov	r1, r5
    1e72:	480e      	ldr	r0, [pc, #56]	; (1eac <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    1e74:	f001 fd1e 	bl	38b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1e78:	2106      	movs	r1, #6
    1e7a:	480d      	ldr	r0, [pc, #52]	; (1eb0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    1e7c:	f001 fb06 	bl	348c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1e80:	480a      	ldr	r0, [pc, #40]	; (1eac <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    1e82:	f001 fd07 	bl	3894 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e86:	6823      	ldr	r3, [r4, #0]
    1e88:	9302      	str	r3, [sp, #8]
	return ret;
    1e8a:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1e8c:	f102 0132 	add.w	r1, r2, #50	; 0x32
    1e90:	e001      	b.n	1e96 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1e92:	4299      	cmp	r1, r3
    1e94:	d304      	bcc.n	1ea0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1e96:	6823      	ldr	r3, [r4, #0]
    1e98:	9301      	str	r3, [sp, #4]
	return ret;
    1e9a:	9b01      	ldr	r3, [sp, #4]
    1e9c:	429a      	cmp	r2, r3
    1e9e:	d9f8      	bls.n	1e92 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    1ea0:	b005      	add	sp, #20
    1ea2:	bd30      	pop	{r4, r5, pc}
    1ea4:	1fff9314 	.word	0x1fff9314
    1ea8:	00004208 	.word	0x00004208
    1eac:	1fff8728 	.word	0x1fff8728
    1eb0:	00004210 	.word	0x00004210

00001eb4 <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    1eb4:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    1eb6:	7e03      	ldrb	r3, [r0, #24]
    1eb8:	b90b      	cbnz	r3, 1ebe <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    1eba:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    1ebc:	bd38      	pop	{r3, r4, r5, pc}
    1ebe:	460d      	mov	r5, r1
    1ec0:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1ec2:	f001 fab9 	bl	3438 <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    1ec6:	f010 0fff 	tst.w	r0, #255	; 0xff
    1eca:	d101      	bne.n	1ed0 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    1ecc:	2065      	movs	r0, #101	; 0x65
    1ece:	bd38      	pop	{r3, r4, r5, pc}
    1ed0:	f001 fab2 	bl	3438 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    1ed4:	f010 0fff 	tst.w	r0, #255	; 0xff
    1ed8:	d0f8      	beq.n	1ecc <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    1eda:	f001 fa71 	bl	33c0 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    1ede:	b2c0      	uxtb	r0, r0
    1ee0:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    1ee4:	2b1e      	cmp	r3, #30
    1ee6:	d8f3      	bhi.n	1ed0 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    1ee8:	a201      	add	r2, pc, #4	; (adr r2, 1ef0 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    1eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1eee:	bf00      	nop
    1ef0:	00001f79 	.word	0x00001f79
    1ef4:	00001ed1 	.word	0x00001ed1
    1ef8:	00001ed1 	.word	0x00001ed1
    1efc:	00001ed1 	.word	0x00001ed1
    1f00:	00001ed1 	.word	0x00001ed1
    1f04:	00001ed1 	.word	0x00001ed1
    1f08:	00001ed1 	.word	0x00001ed1
    1f0c:	00001ed1 	.word	0x00001ed1
    1f10:	00001ed1 	.word	0x00001ed1
    1f14:	00001ed1 	.word	0x00001ed1
    1f18:	00001ed1 	.word	0x00001ed1
    1f1c:	00001f6d 	.word	0x00001f6d
    1f20:	00001ed1 	.word	0x00001ed1
    1f24:	00001ed1 	.word	0x00001ed1
    1f28:	00001ed1 	.word	0x00001ed1
    1f2c:	00001ed1 	.word	0x00001ed1
    1f30:	00001ebb 	.word	0x00001ebb
    1f34:	00001ed1 	.word	0x00001ed1
    1f38:	00001ed1 	.word	0x00001ed1
    1f3c:	00001ed1 	.word	0x00001ed1
    1f40:	00001ed1 	.word	0x00001ed1
    1f44:	00001ed1 	.word	0x00001ed1
    1f48:	00001ed1 	.word	0x00001ed1
    1f4c:	00001ed1 	.word	0x00001ed1
    1f50:	00001ed1 	.word	0x00001ed1
    1f54:	00001ebb 	.word	0x00001ebb
    1f58:	00001ed1 	.word	0x00001ed1
    1f5c:	00001ed1 	.word	0x00001ed1
    1f60:	00001ed1 	.word	0x00001ed1
    1f64:	00001ed1 	.word	0x00001ed1
    1f68:	00001ebd 	.word	0x00001ebd
		{

		case 'c':
			sendContinuedACK(breakPointId);
    1f6c:	4620      	mov	r0, r4
    1f6e:	4629      	mov	r1, r5
    1f70:	f7ff ff70 	bl	1e54 <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    1f74:	2063      	movs	r0, #99	; 0x63
    1f76:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    1f78:	2300      	movs	r3, #0
    1f7a:	7623      	strb	r3, [r4, #24]
			return 'c';
    1f7c:	2063      	movs	r0, #99	; 0x63
    1f7e:	bd38      	pop	{r3, r4, r5, pc}

00001f80 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    1f80:	b570      	push	{r4, r5, r6, lr}
    1f82:	4605      	mov	r5, r0
    1f84:	b082      	sub	sp, #8
    1f86:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    1f88:	b1c9      	cbz	r1, 1fbe <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    1f8a:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1f8c:	4c0d      	ldr	r4, [pc, #52]	; (1fc4 <VisualMicroDebug::start(bool, bool)+0x44>)
    1f8e:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    1f90:	2100      	movs	r1, #0
    1f92:	4628      	mov	r0, r5
    1f94:	f7ff ff8e 	bl	1eb4 <VisualMicroDebug::breakWait(unsigned char)>
    1f98:	2863      	cmp	r0, #99	; 0x63
    1f9a:	d010      	beq.n	1fbe <VisualMicroDebug::start(bool, bool)+0x3e>
    1f9c:	6823      	ldr	r3, [r4, #0]
    1f9e:	9301      	str	r3, [sp, #4]
	return ret;
    1fa0:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    1fa2:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1fa4:	6823      	ldr	r3, [r4, #0]
    1fa6:	9300      	str	r3, [sp, #0]
	return ret;
    1fa8:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    1faa:	429a      	cmp	r2, r3
    1fac:	d8f0      	bhi.n	1f90 <VisualMicroDebug::start(bool, bool)+0x10>
    1fae:	4299      	cmp	r1, r3
    1fb0:	d2f8      	bcs.n	1fa4 <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    1fb2:	2100      	movs	r1, #0
    1fb4:	4628      	mov	r0, r5
    1fb6:	f7ff ff7d 	bl	1eb4 <VisualMicroDebug::breakWait(unsigned char)>
    1fba:	2863      	cmp	r0, #99	; 0x63
    1fbc:	d1ee      	bne.n	1f9c <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    1fbe:	762e      	strb	r6, [r5, #24]
#endif

}
    1fc0:	b002      	add	sp, #8
    1fc2:	bd70      	pop	{r4, r5, r6, pc}
    1fc4:	1fff9314 	.word	0x1fff9314

00001fc8 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    1fc8:	4b03      	ldr	r3, [pc, #12]	; (1fd8 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    1fca:	2200      	movs	r2, #0
    1fcc:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    1fce:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    1fd0:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    1fd2:	615a      	str	r2, [r3, #20]
    1fd4:	4770      	bx	lr
    1fd6:	bf00      	nop
    1fd8:	1fff92c4 	.word	0x1fff92c4

00001fdc <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    1fdc:	4a37      	ldr	r2, [pc, #220]	; (20bc <wait_for_cal+0xe0>)
    1fde:	4938      	ldr	r1, [pc, #224]	; (20c0 <wait_for_cal+0xe4>)
    1fe0:	6813      	ldr	r3, [r2, #0]
    1fe2:	061b      	lsls	r3, r3, #24
    1fe4:	d4fc      	bmi.n	1fe0 <wait_for_cal+0x4>
    1fe6:	680b      	ldr	r3, [r1, #0]
    1fe8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    1fec:	d1f8      	bne.n	1fe0 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    1fee:	b672      	cpsid	i
	if (calibrating) {
    1ff0:	4934      	ldr	r1, [pc, #208]	; (20c4 <wait_for_cal+0xe8>)
    1ff2:	780a      	ldrb	r2, [r1, #0]
    1ff4:	2a00      	cmp	r2, #0
    1ff6:	d05f      	beq.n	20b8 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1ff8:	4a33      	ldr	r2, [pc, #204]	; (20c8 <wait_for_cal+0xec>)
    1ffa:	4834      	ldr	r0, [pc, #208]	; (20cc <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    1ffc:	b4f0      	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    1ffe:	4c34      	ldr	r4, [pc, #208]	; (20d0 <wait_for_cal+0xf4>)
    2000:	6817      	ldr	r7, [r2, #0]
    2002:	6806      	ldr	r6, [r0, #0]
    2004:	6825      	ldr	r5, [r4, #0]
    2006:	68d4      	ldr	r4, [r2, #12]
    2008:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    200a:	443e      	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    200c:	3214      	adds	r2, #20
    200e:	6800      	ldr	r0, [r0, #0]
    2010:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    2012:	4f30      	ldr	r7, [pc, #192]	; (20d4 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    2014:	4435      	add	r5, r6
    2016:	442c      	add	r4, r5
    2018:	4420      	add	r0, r4
    201a:	4402      	add	r2, r0
    201c:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    2020:	4e2d      	ldr	r6, [pc, #180]	; (20d8 <wait_for_cal+0xfc>)
    2022:	482e      	ldr	r0, [pc, #184]	; (20dc <wait_for_cal+0x100>)
    2024:	4d2e      	ldr	r5, [pc, #184]	; (20e0 <wait_for_cal+0x104>)
    2026:	4c2f      	ldr	r4, [pc, #188]	; (20e4 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    2028:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    202c:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    202e:	6837      	ldr	r7, [r6, #0]
    2030:	6806      	ldr	r6, [r0, #0]
    2032:	682d      	ldr	r5, [r5, #0]
    2034:	4a2c      	ldr	r2, [pc, #176]	; (20e8 <wait_for_cal+0x10c>)
    2036:	6824      	ldr	r4, [r4, #0]
    2038:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    203a:	443e      	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    203c:	6800      	ldr	r0, [r0, #0]
    203e:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    2040:	4f2a      	ldr	r7, [pc, #168]	; (20ec <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    2042:	4435      	add	r5, r6
    2044:	442c      	add	r4, r5
    2046:	4420      	add	r0, r4
    2048:	4402      	add	r2, r0
    204a:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    204e:	4e28      	ldr	r6, [pc, #160]	; (20f0 <wait_for_cal+0x114>)
    2050:	4828      	ldr	r0, [pc, #160]	; (20f4 <wait_for_cal+0x118>)
    2052:	4d29      	ldr	r5, [pc, #164]	; (20f8 <wait_for_cal+0x11c>)
    2054:	4c29      	ldr	r4, [pc, #164]	; (20fc <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    2056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    205a:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    205c:	6837      	ldr	r7, [r6, #0]
    205e:	6806      	ldr	r6, [r0, #0]
    2060:	682d      	ldr	r5, [r5, #0]
    2062:	4a27      	ldr	r2, [pc, #156]	; (2100 <wait_for_cal+0x124>)
    2064:	6824      	ldr	r4, [r4, #0]
    2066:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2068:	443e      	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    206a:	6800      	ldr	r0, [r0, #0]
    206c:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    206e:	4f25      	ldr	r7, [pc, #148]	; (2104 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    2070:	4435      	add	r5, r6
    2072:	442c      	add	r4, r5
    2074:	4420      	add	r0, r4
    2076:	4402      	add	r2, r0
    2078:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    207c:	4e22      	ldr	r6, [pc, #136]	; (2108 <wait_for_cal+0x12c>)
    207e:	4823      	ldr	r0, [pc, #140]	; (210c <wait_for_cal+0x130>)
    2080:	4d23      	ldr	r5, [pc, #140]	; (2110 <wait_for_cal+0x134>)
    2082:	4c24      	ldr	r4, [pc, #144]	; (2114 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    2084:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    2088:	603a      	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    208a:	6837      	ldr	r7, [r6, #0]
    208c:	6806      	ldr	r6, [r0, #0]
    208e:	682d      	ldr	r5, [r5, #0]
    2090:	4a21      	ldr	r2, [pc, #132]	; (2118 <wait_for_cal+0x13c>)
    2092:	6824      	ldr	r4, [r4, #0]
    2094:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    2096:	443e      	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    2098:	6800      	ldr	r0, [r0, #0]
    209a:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    209c:	4435      	add	r5, r6
    209e:	442c      	add	r4, r5
    20a0:	4420      	add	r0, r4
    20a2:	4402      	add	r2, r0
    20a4:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    20a8:	481c      	ldr	r0, [pc, #112]	; (211c <wait_for_cal+0x140>)
    20aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    20ae:	6002      	str	r2, [r0, #0]
#endif
		calibrating = 0;
    20b0:	700b      	strb	r3, [r1, #0]
	}
	__enable_irq();
    20b2:	b662      	cpsie	i
}
    20b4:	bcf0      	pop	{r4, r5, r6, r7}
    20b6:	4770      	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    20b8:	b662      	cpsie	i
    20ba:	4770      	bx	lr
    20bc:	4003b024 	.word	0x4003b024
    20c0:	400bb024 	.word	0x400bb024
    20c4:	1fff930d 	.word	0x1fff930d
    20c8:	4003b038 	.word	0x4003b038
    20cc:	4003b03c 	.word	0x4003b03c
    20d0:	4003b040 	.word	0x4003b040
    20d4:	4003b02c 	.word	0x4003b02c
    20d8:	4003b058 	.word	0x4003b058
    20dc:	4003b05c 	.word	0x4003b05c
    20e0:	4003b060 	.word	0x4003b060
    20e4:	4003b064 	.word	0x4003b064
    20e8:	4003b06c 	.word	0x4003b06c
    20ec:	4003b030 	.word	0x4003b030
    20f0:	400bb038 	.word	0x400bb038
    20f4:	400bb03c 	.word	0x400bb03c
    20f8:	400bb040 	.word	0x400bb040
    20fc:	400bb044 	.word	0x400bb044
    2100:	400bb04c 	.word	0x400bb04c
    2104:	400bb02c 	.word	0x400bb02c
    2108:	400bb058 	.word	0x400bb058
    210c:	400bb05c 	.word	0x400bb05c
    2110:	400bb060 	.word	0x400bb060
    2114:	400bb064 	.word	0x400bb064
    2118:	400bb06c 	.word	0x400bb06c
    211c:	400bb030 	.word	0x400bb030

00002120 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    2120:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    2122:	4829      	ldr	r0, [pc, #164]	; (21c8 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2124:	4a29      	ldr	r2, [pc, #164]	; (21cc <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    2126:	4b2a      	ldr	r3, [pc, #168]	; (21d0 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    2128:	4d2a      	ldr	r5, [pc, #168]	; (21d4 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    212a:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    212c:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    212e:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    2130:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    2132:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    2134:	4c28      	ldr	r4, [pc, #160]	; (21d8 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    2136:	2b08      	cmp	r3, #8
    2138:	d030      	beq.n	219c <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    213a:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    213c:	4827      	ldr	r0, [pc, #156]	; (21dc <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    213e:	4928      	ldr	r1, [pc, #160]	; (21e0 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    2140:	d037      	beq.n	21b2 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    2142:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    2144:	bf0c      	ite	eq
    2146:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2148:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    214a:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    214c:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    214e:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    2150:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    2152:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2154:	4b23      	ldr	r3, [pc, #140]	; (21e4 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2156:	4924      	ldr	r1, [pc, #144]	; (21e8 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    2158:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    215a:	4a24      	ldr	r2, [pc, #144]	; (21ec <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    215c:	b1bb      	cbz	r3, 218e <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    215e:	2301      	movs	r3, #1
    2160:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    2162:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2164:	4b22      	ldr	r3, [pc, #136]	; (21f0 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    2166:	4923      	ldr	r1, [pc, #140]	; (21f4 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    2168:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    216a:	4a23      	ldr	r2, [pc, #140]	; (21f8 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    216c:	2b01      	cmp	r3, #1
    216e:	d926      	bls.n	21be <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    2170:	2b04      	cmp	r3, #4
    2172:	d90f      	bls.n	2194 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    2174:	2b08      	cmp	r3, #8
    2176:	d91e      	bls.n	21b6 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    2178:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    217a:	bf94      	ite	ls
    217c:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    217e:	2387      	movhi	r3, #135	; 0x87
    2180:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    2182:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    2184:	4b1d      	ldr	r3, [pc, #116]	; (21fc <analog_init+0xdc>)
    2186:	2201      	movs	r2, #1
    2188:	701a      	strb	r2, [r3, #0]
}
    218a:	bc30      	pop	{r4, r5}
    218c:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    218e:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    2190:	6013      	str	r3, [r2, #0]
    2192:	e7e7      	b.n	2164 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2194:	2384      	movs	r3, #132	; 0x84
    2196:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    2198:	6013      	str	r3, [r2, #0]
    219a:	e7f3      	b.n	2184 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    219c:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    21a0:	490f      	ldr	r1, [pc, #60]	; (21e0 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    21a2:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    21a4:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    21a6:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    21a8:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    21aa:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    21ac:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    21ae:	600b      	str	r3, [r1, #0]
    21b0:	e7d0      	b.n	2154 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    21b2:	2239      	movs	r2, #57	; 0x39
    21b4:	e7f7      	b.n	21a6 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    21b6:	2385      	movs	r3, #133	; 0x85
    21b8:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    21ba:	6013      	str	r3, [r2, #0]
    21bc:	e7e2      	b.n	2184 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    21be:	2380      	movs	r3, #128	; 0x80
    21c0:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    21c2:	6013      	str	r3, [r2, #0]
    21c4:	e7de      	b.n	2184 <analog_init+0x64>
    21c6:	bf00      	nop
    21c8:	40074000 	.word	0x40074000
    21cc:	40074001 	.word	0x40074001
    21d0:	1fff8722 	.word	0x1fff8722
    21d4:	4003b008 	.word	0x4003b008
    21d8:	4003b00c 	.word	0x4003b00c
    21dc:	400bb008 	.word	0x400bb008
    21e0:	400bb00c 	.word	0x400bb00c
    21e4:	1fff9310 	.word	0x1fff9310
    21e8:	4003b020 	.word	0x4003b020
    21ec:	400bb020 	.word	0x400bb020
    21f0:	1fff8723 	.word	0x1fff8723
    21f4:	4003b024 	.word	0x4003b024
    21f8:	400bb024 	.word	0x400bb024
    21fc:	1fff930d 	.word	0x1fff930d

00002200 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2200:	2828      	cmp	r0, #40	; 0x28
    2202:	d82f      	bhi.n	2264 <analogRead+0x64>
	channel = pin2sc1a[pin];
    2204:	4b33      	ldr	r3, [pc, #204]	; (22d4 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    2206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    220a:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    220c:	2eff      	cmp	r6, #255	; 0xff
    220e:	d02b      	beq.n	2268 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    2210:	4b31      	ldr	r3, [pc, #196]	; (22d8 <analogRead+0xd8>)
    2212:	781b      	ldrb	r3, [r3, #0]
    2214:	2b00      	cmp	r3, #0
    2216:	d12a      	bne.n	226e <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2218:	0632      	lsls	r2, r6, #24
    221a:	d42c      	bmi.n	2276 <analogRead+0x76>
#endif

	__disable_irq();
    221c:	b672      	cpsid	i
    221e:	4d2f      	ldr	r5, [pc, #188]	; (22dc <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2220:	4c2f      	ldr	r4, [pc, #188]	; (22e0 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    2222:	462f      	mov	r7, r5
    2224:	2301      	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    2226:	6026      	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    2228:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    222a:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    222c:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    222e:	6823      	ldr	r3, [r4, #0]
    2230:	061b      	lsls	r3, r3, #24
    2232:	d40c      	bmi.n	224e <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    2234:	783b      	ldrb	r3, [r7, #0]
    2236:	b91b      	cbnz	r3, 2240 <analogRead+0x40>
    2238:	e7f4      	b.n	2224 <analogRead+0x24>
    223a:	782b      	ldrb	r3, [r5, #0]
    223c:	2b00      	cmp	r3, #0
    223e:	d0f1      	beq.n	2224 <analogRead+0x24>
		__enable_irq();
    2240:	b662      	cpsie	i
		yield();
    2242:	f001 fb97 	bl	3974 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    2246:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    2248:	6823      	ldr	r3, [r4, #0]
    224a:	0618      	lsls	r0, r3, #24
    224c:	d5f5      	bpl.n	223a <analogRead+0x3a>
			result = ADC0_RA;
    224e:	4b25      	ldr	r3, [pc, #148]	; (22e4 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    2250:	681b      	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    2252:	2200      	movs	r2, #0
    2254:	702a      	strb	r2, [r5, #0]
			__enable_irq();
    2256:	b662      	cpsie	i
			result >>= analog_right_shift;
    2258:	4a23      	ldr	r2, [pc, #140]	; (22e8 <analogRead+0xe8>)
    225a:	7810      	ldrb	r0, [r2, #0]
    225c:	fa43 f000 	asr.w	r0, r3, r0
			return result;
    2260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2264:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    2266:	4770      	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    2268:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    226a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    226e:	f7ff feb5 	bl	1fdc <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    2272:	0632      	lsls	r2, r6, #24
    2274:	d5d2      	bpl.n	221c <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    2276:	b672      	cpsid	i
    2278:	4d1c      	ldr	r5, [pc, #112]	; (22ec <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    227a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 22f8 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    227e:	4c1c      	ldr	r4, [pc, #112]	; (22f0 <analogRead+0xf0>)
    2280:	f006 0740 	and.w	r7, r6, #64	; 0x40
    2284:	b2ff      	uxtb	r7, r7
    2286:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    228a:	f8d8 3000 	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    228e:	b1df      	cbz	r7, 22c8 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    2290:	f023 0310 	bic.w	r3, r3, #16
    2294:	f8c8 3000 	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    2298:	2301      	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    229a:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    229c:	4a13      	ldr	r2, [pc, #76]	; (22ec <analogRead+0xec>)
    229e:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    22a0:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    22a2:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    22a4:	6823      	ldr	r3, [r4, #0]
    22a6:	0619      	lsls	r1, r3, #24
    22a8:	d40c      	bmi.n	22c4 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    22aa:	7813      	ldrb	r3, [r2, #0]
    22ac:	b91b      	cbnz	r3, 22b6 <analogRead+0xb6>
    22ae:	e7ec      	b.n	228a <analogRead+0x8a>
    22b0:	782b      	ldrb	r3, [r5, #0]
    22b2:	2b00      	cmp	r3, #0
    22b4:	d0e9      	beq.n	228a <analogRead+0x8a>
		__enable_irq();
    22b6:	b662      	cpsie	i
		yield();
    22b8:	f001 fb5c 	bl	3974 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    22bc:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    22be:	6823      	ldr	r3, [r4, #0]
    22c0:	061b      	lsls	r3, r3, #24
    22c2:	d5f5      	bpl.n	22b0 <analogRead+0xb0>
			result = ADC1_RA;
    22c4:	4b0b      	ldr	r3, [pc, #44]	; (22f4 <analogRead+0xf4>)
    22c6:	e7c3      	b.n	2250 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    22c8:	f043 0310 	orr.w	r3, r3, #16
    22cc:	f8c8 3000 	str.w	r3, [r8]
    22d0:	e7e2      	b.n	2298 <analogRead+0x98>
    22d2:	bf00      	nop
    22d4:	00004260 	.word	0x00004260
    22d8:	1fff930d 	.word	0x1fff930d
    22dc:	1fff930f 	.word	0x1fff930f
    22e0:	4003b000 	.word	0x4003b000
    22e4:	4003b010 	.word	0x4003b010
    22e8:	1fff930c 	.word	0x1fff930c
    22ec:	1fff930e 	.word	0x1fff930e
    22f0:	400bb000 	.word	0x400bb000
    22f4:	400bb010 	.word	0x400bb010
    22f8:	400bb00c 	.word	0x400bb00c

000022fc <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    22fc:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    22fe:	4c10      	ldr	r4, [pc, #64]	; (2340 <fault_isr+0x44>)
    2300:	e008      	b.n	2314 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    2302:	6823      	ldr	r3, [r4, #0]
    2304:	0559      	lsls	r1, r3, #21
    2306:	d40d      	bmi.n	2324 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2308:	6823      	ldr	r3, [r4, #0]
    230a:	051a      	lsls	r2, r3, #20
    230c:	d40f      	bmi.n	232e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    230e:	6823      	ldr	r3, [r4, #0]
    2310:	04db      	lsls	r3, r3, #19
    2312:	d411      	bmi.n	2338 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    2314:	6823      	ldr	r3, [r4, #0]
    2316:	0358      	lsls	r0, r3, #13
    2318:	d5f3      	bpl.n	2302 <fault_isr+0x6>
    231a:	f000 fa37 	bl	278c <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    231e:	6823      	ldr	r3, [r4, #0]
    2320:	0559      	lsls	r1, r3, #21
    2322:	d5f1      	bpl.n	2308 <fault_isr+0xc>
    2324:	f001 fbaa 	bl	3a7c <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    2328:	6823      	ldr	r3, [r4, #0]
    232a:	051a      	lsls	r2, r3, #20
    232c:	d5ef      	bpl.n	230e <fault_isr+0x12>
    232e:	f001 fc3b 	bl	3ba8 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    2332:	6823      	ldr	r3, [r4, #0]
    2334:	04db      	lsls	r3, r3, #19
    2336:	d5ed      	bpl.n	2314 <fault_isr+0x18>
    2338:	f001 fccc 	bl	3cd4 <uart2_status_isr>
    233c:	e7ea      	b.n	2314 <fault_isr+0x18>
    233e:	bf00      	nop
    2340:	40048034 	.word	0x40048034

00002344 <unused_isr>:
	}
}

void unused_isr(void)
{
    2344:	b508      	push	{r3, lr}
	fault_isr();
    2346:	f7ff ffd9 	bl	22fc <fault_isr>
    234a:	bf00      	nop

0000234c <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    234c:	4b01      	ldr	r3, [pc, #4]	; (2354 <startup_early_hook+0x8>)
    234e:	2210      	movs	r2, #16
    2350:	801a      	strh	r2, [r3, #0]
    2352:	4770      	bx	lr
    2354:	40052000 	.word	0x40052000

00002358 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    2358:	4770      	bx	lr
    235a:	bf00      	nop

0000235c <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    235c:	7800      	ldrb	r0, [r0, #0]
}
    235e:	fab0 f080 	clz	r0, r0
    2362:	0940      	lsrs	r0, r0, #5
    2364:	4770      	bx	lr
    2366:	bf00      	nop

00002368 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    2368:	2301      	movs	r3, #1
    236a:	7003      	strb	r3, [r0, #0]
    236c:	4770      	bx	lr
    236e:	bf00      	nop

00002370 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2370:	4a1c      	ldr	r2, [pc, #112]	; (23e4 <pinMode.part.2+0x74>)
    2372:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2376:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    2378:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    237a:	d011      	beq.n	23a0 <pinMode.part.2+0x30>
    237c:	2904      	cmp	r1, #4
    237e:	d01b      	beq.n	23b8 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    2380:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    2384:	2200      	movs	r2, #0
    2386:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    238a:	b129      	cbz	r1, 2398 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    238c:	2902      	cmp	r1, #2
    238e:	d020      	beq.n	23d2 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    2390:	2903      	cmp	r1, #3
    2392:	d022      	beq.n	23da <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    2394:	601a      	str	r2, [r3, #0]
    2396:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    2398:	f44f 7280 	mov.w	r2, #256	; 0x100
    239c:	601a      	str	r2, [r3, #0]
    239e:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    23a0:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    23a4:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    23a8:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    23ac:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    23ae:	681a      	ldr	r2, [r3, #0]
    23b0:	f022 0220 	bic.w	r2, r2, #32
    23b4:	601a      	str	r2, [r3, #0]
    23b6:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    23b8:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    23bc:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    23c0:	2001      	movs	r0, #1
    23c2:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    23c6:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    23c8:	681a      	ldr	r2, [r3, #0]
    23ca:	f042 0220 	orr.w	r2, r2, #32
    23ce:	601a      	str	r2, [r3, #0]
    23d0:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    23d2:	f240 1203 	movw	r2, #259	; 0x103
    23d6:	601a      	str	r2, [r3, #0]
    23d8:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    23da:	f44f 7281 	mov.w	r2, #258	; 0x102
    23de:	601a      	str	r2, [r3, #0]
    23e0:	4770      	bx	lr
    23e2:	bf00      	nop
    23e4:	0000428c 	.word	0x0000428c

000023e8 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    23e8:	b430      	push	{r4, r5}
	RTC_SR = 0;
    23ea:	4b05      	ldr	r3, [pc, #20]	; (2400 <rtc_set+0x18>)
	RTC_TPR = 0;
    23ec:	4d05      	ldr	r5, [pc, #20]	; (2404 <rtc_set+0x1c>)
	RTC_TSR = t;
    23ee:	4c06      	ldr	r4, [pc, #24]	; (2408 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    23f0:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    23f2:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    23f4:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    23f6:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    23f8:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    23fa:	6019      	str	r1, [r3, #0]
}
    23fc:	bc30      	pop	{r4, r5}
    23fe:	4770      	bx	lr
    2400:	4003d014 	.word	0x4003d014
    2404:	4003d004 	.word	0x4003d004
    2408:	4003d000 	.word	0x4003d000

0000240c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    240c:	2821      	cmp	r0, #33	; 0x21
    240e:	d801      	bhi.n	2414 <pinMode+0x8>
    2410:	f7ff bfae 	b.w	2370 <pinMode.part.2>
    2414:	4770      	bx	lr
    2416:	bf00      	nop

00002418 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2418:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    241a:	490c      	ldr	r1, [pc, #48]	; (244c <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    241c:	4b0c      	ldr	r3, [pc, #48]	; (2450 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    241e:	4a0d      	ldr	r2, [pc, #52]	; (2454 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2420:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    2422:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2424:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    2426:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2428:	0152      	lsls	r2, r2, #5
    242a:	d502      	bpl.n	2432 <micros+0x1a>
    242c:	2b32      	cmp	r3, #50	; 0x32
    242e:	bf88      	it	hi
    2430:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2432:	4909      	ldr	r1, [pc, #36]	; (2458 <micros+0x40>)
    2434:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    2438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    243c:	33ff      	adds	r3, #255	; 0xff
    243e:	fba1 1303 	umull	r1, r3, r1, r3
    2442:	fb02 f000 	mul.w	r0, r2, r0
}
    2446:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    244a:	4770      	bx	lr
    244c:	1fff9314 	.word	0x1fff9314
    2450:	e000e018 	.word	0xe000e018
    2454:	e000ed04 	.word	0xe000ed04
    2458:	aaaaaaab 	.word	0xaaaaaaab

0000245c <delay>:

void delay(uint32_t ms)
{
    245c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2460:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2462:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    2464:	4f20      	ldr	r7, [pc, #128]	; (24e8 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2466:	4b21      	ldr	r3, [pc, #132]	; (24ec <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2468:	4a21      	ldr	r2, [pc, #132]	; (24f0 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    246a:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    246c:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    246e:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    2470:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2472:	0152      	lsls	r2, r2, #5
    2474:	d502      	bpl.n	247c <delay+0x20>
    2476:	2b32      	cmp	r3, #50	; 0x32
    2478:	bf88      	it	hi
    247a:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    247c:	b395      	cbz	r5, 24e4 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    247e:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    2482:	4e1c      	ldr	r6, [pc, #112]	; (24f4 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    2484:	f8df 9064 	ldr.w	r9, [pc, #100]	; 24ec <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2488:	f8df 8064 	ldr.w	r8, [pc, #100]	; 24f0 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    248c:	33ff      	adds	r3, #255	; 0xff
    248e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2492:	fba6 1303 	umull	r1, r3, r6, r3
    2496:	fb02 f404 	mul.w	r4, r2, r4
    249a:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    249e:	b672      	cpsid	i
	current = SYST_CVR;
    24a0:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    24a4:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    24a6:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    24aa:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    24ac:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    24b0:	33ff      	adds	r3, #255	; 0xff
    24b2:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    24b6:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    24ba:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    24be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    24c2:	d002      	beq.n	24ca <delay+0x6e>
    24c4:	2932      	cmp	r1, #50	; 0x32
    24c6:	bf88      	it	hi
    24c8:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    24ca:	fb00 3302 	mla	r3, r0, r2, r3
    24ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    24d2:	d304      	bcc.n	24de <delay+0x82>
				ms--;
				if (ms == 0) return;
    24d4:	3d01      	subs	r5, #1
    24d6:	d005      	beq.n	24e4 <delay+0x88>
				start += 1000;
    24d8:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    24dc:	e7df      	b.n	249e <delay+0x42>
			}
			yield();
    24de:	f001 fa49 	bl	3974 <yield>
		}
    24e2:	e7dc      	b.n	249e <delay+0x42>
    24e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    24e8:	1fff9314 	.word	0x1fff9314
    24ec:	e000e018 	.word	0xe000e018
    24f0:	e000ed04 	.word	0xe000ed04
    24f4:	aaaaaaab 	.word	0xaaaaaaab

000024f8 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    24f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    24fa:	4b2d      	ldr	r3, [pc, #180]	; (25b0 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    24fc:	492d      	ldr	r1, [pc, #180]	; (25b4 <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    24fe:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 25d0 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2502:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 25d4 <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    2506:	4e2c      	ldr	r6, [pc, #176]	; (25b8 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    2508:	4d2c      	ldr	r5, [pc, #176]	; (25bc <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    250a:	4c2d      	ldr	r4, [pc, #180]	; (25c0 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    250c:	4a2d      	ldr	r2, [pc, #180]	; (25c4 <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    250e:	4f2e      	ldr	r7, [pc, #184]	; (25c8 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    2510:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    2514:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    2516:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    251a:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    251c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    2520:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    2522:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    2526:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    2528:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    252c:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    252e:	2000      	movs	r0, #0
    2530:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    2532:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    2534:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    2538:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    253c:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    2540:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    2542:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    2544:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    2546:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    2548:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    254a:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    254c:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    254e:	2209      	movs	r2, #9
    2550:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    2554:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    2558:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    255c:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    2560:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    2564:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    2568:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    256c:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    256e:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2572:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2576:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    257a:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    257e:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2580:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2584:	4811      	ldr	r0, [pc, #68]	; (25cc <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    2586:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    2588:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    258c:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    2590:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    2592:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2594:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    2596:	f7ff fdc3 	bl	2120 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    259a:	2019      	movs	r0, #25
    259c:	f7ff ff5e 	bl	245c <delay>
	usb_init();
    25a0:	f000 fe5c 	bl	325c <usb_init>
	delay(275);
    25a4:	f240 1013 	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    25a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    25ac:	f7ff bf56 	b.w	245c <delay>
    25b0:	e000e108 	.word	0xe000e108
    25b4:	40038004 	.word	0x40038004
    25b8:	40038014 	.word	0x40038014
    25bc:	40038024 	.word	0x40038024
    25c0:	4003802c 	.word	0x4003802c
    25c4:	4003801c 	.word	0x4003801c
    25c8:	40038034 	.word	0x40038034
    25cc:	400b8000 	.word	0x400b8000
    25d0:	4003800c 	.word	0x4003800c
    25d4:	40038008 	.word	0x40038008

000025d8 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    25d8:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    25da:	2b03      	cmp	r3, #3
    25dc:	d814      	bhi.n	2608 <usb_rx+0x30>
	__disable_irq();
    25de:	b672      	cpsid	i
	ret = rx_first[endpoint];
    25e0:	490a      	ldr	r1, [pc, #40]	; (260c <usb_rx+0x34>)
    25e2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    25e6:	b168      	cbz	r0, 2604 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    25e8:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    25ea:	4c09      	ldr	r4, [pc, #36]	; (2610 <usb_rx+0x38>)
    25ec:	8805      	ldrh	r5, [r0, #0]
    25ee:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    25f2:	6846      	ldr	r6, [r0, #4]
    25f4:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    25f8:	1b52      	subs	r2, r2, r5
    25fa:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    25fe:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2600:	bc70      	pop	{r4, r5, r6}
    2602:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    2604:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    2606:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    2608:	2000      	movs	r0, #0
    260a:	4770      	bx	lr
    260c:	1fff9370 	.word	0x1fff9370
    2610:	1fff95c0 	.word	0x1fff95c0

00002614 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    2614:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2616:	2803      	cmp	r0, #3
    2618:	d80b      	bhi.n	2632 <usb_tx_packet_count+0x1e>
	__disable_irq();
    261a:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    261c:	4b07      	ldr	r3, [pc, #28]	; (263c <usb_tx_packet_count+0x28>)
    261e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2622:	b143      	cbz	r3, 2636 <usb_tx_packet_count+0x22>
    2624:	2000      	movs	r0, #0
    2626:	685b      	ldr	r3, [r3, #4]
    2628:	3001      	adds	r0, #1
    262a:	2b00      	cmp	r3, #0
    262c:	d1fb      	bne.n	2626 <usb_tx_packet_count+0x12>
	__enable_irq();
    262e:	b662      	cpsie	i
	return count;
    2630:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2632:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2634:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    2636:	4618      	mov	r0, r3
    2638:	e7f9      	b.n	262e <usb_tx_packet_count+0x1a>
    263a:	bf00      	nop
    263c:	1fff93c4 	.word	0x1fff93c4

00002640 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    2640:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    2642:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2644:	4a2b      	ldr	r2, [pc, #172]	; (26f4 <usb_rx_memory+0xb4>)
    2646:	7813      	ldrb	r3, [r2, #0]
    2648:	071d      	lsls	r5, r3, #28
    264a:	d506      	bpl.n	265a <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    264c:	4b2a      	ldr	r3, [pc, #168]	; (26f8 <usb_rx_memory+0xb8>)
    264e:	6a19      	ldr	r1, [r3, #32]
    2650:	2900      	cmp	r1, #0
    2652:	d036      	beq.n	26c2 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2654:	6a99      	ldr	r1, [r3, #40]	; 0x28
    2656:	2900      	cmp	r1, #0
    2658:	d041      	beq.n	26de <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    265a:	7853      	ldrb	r3, [r2, #1]
    265c:	071c      	lsls	r4, r3, #28
    265e:	d506      	bpl.n	266e <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2660:	4b25      	ldr	r3, [pc, #148]	; (26f8 <usb_rx_memory+0xb8>)
    2662:	6c19      	ldr	r1, [r3, #64]	; 0x40
    2664:	2900      	cmp	r1, #0
    2666:	d03e      	beq.n	26e6 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2668:	6c99      	ldr	r1, [r3, #72]	; 0x48
    266a:	2900      	cmp	r1, #0
    266c:	d039      	beq.n	26e2 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    266e:	7893      	ldrb	r3, [r2, #2]
    2670:	0719      	lsls	r1, r3, #28
    2672:	d505      	bpl.n	2680 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2674:	4b20      	ldr	r3, [pc, #128]	; (26f8 <usb_rx_memory+0xb8>)
    2676:	6e19      	ldr	r1, [r3, #96]	; 0x60
    2678:	2900      	cmp	r1, #0
    267a:	d036      	beq.n	26ea <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    267c:	6e99      	ldr	r1, [r3, #104]	; 0x68
    267e:	b189      	cbz	r1, 26a4 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2680:	78d3      	ldrb	r3, [r2, #3]
    2682:	071b      	lsls	r3, r3, #28
    2684:	d507      	bpl.n	2696 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2686:	4b1c      	ldr	r3, [pc, #112]	; (26f8 <usb_rx_memory+0xb8>)
    2688:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    268c:	b37a      	cbz	r2, 26ee <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    268e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2692:	2111      	movs	r1, #17
    2694:	b13a      	cbz	r2, 26a6 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2696:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    2698:	4b18      	ldr	r3, [pc, #96]	; (26fc <usb_rx_memory+0xbc>)
    269a:	2200      	movs	r2, #0
    269c:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    269e:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    26a0:	f000 be68 	b.w	3374 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    26a4:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    26a6:	4c15      	ldr	r4, [pc, #84]	; (26fc <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    26a8:	4d15      	ldr	r5, [pc, #84]	; (2700 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    26aa:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    26ac:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    26b0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    26b4:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    26b6:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    26b8:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    26ba:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    26bc:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    26be:	bc30      	pop	{r4, r5}
    26c0:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    26c2:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    26c4:	4c0d      	ldr	r4, [pc, #52]	; (26fc <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    26c6:	4d0f      	ldr	r5, [pc, #60]	; (2704 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    26c8:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    26ca:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    26ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    26d2:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    26d4:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    26d6:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    26d8:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    26da:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    26dc:	e7ef      	b.n	26be <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    26de:	2105      	movs	r1, #5
    26e0:	e7e1      	b.n	26a6 <usb_rx_memory+0x66>
    26e2:	2109      	movs	r1, #9
    26e4:	e7df      	b.n	26a6 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    26e6:	2208      	movs	r2, #8
    26e8:	e7ec      	b.n	26c4 <usb_rx_memory+0x84>
    26ea:	220c      	movs	r2, #12
    26ec:	e7ea      	b.n	26c4 <usb_rx_memory+0x84>
    26ee:	2210      	movs	r2, #16
    26f0:	e7e8      	b.n	26c4 <usb_rx_memory+0x84>
    26f2:	bf00      	nop
    26f4:	000043c8 	.word	0x000043c8
    26f8:	1fff8000 	.word	0x1fff8000
    26fc:	1fff93ed 	.word	0x1fff93ed
    2700:	004000c8 	.word	0x004000c8
    2704:	00400088 	.word	0x00400088

00002708 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2708:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    270a:	2b03      	cmp	r3, #3
    270c:	d81d      	bhi.n	274a <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    270e:	4a1b      	ldr	r2, [pc, #108]	; (277c <usb_tx+0x74>)
    2710:	0140      	lsls	r0, r0, #5
    2712:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    2716:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    2718:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    271a:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    271c:	4c18      	ldr	r4, [pc, #96]	; (2780 <usb_tx+0x78>)
    271e:	5ce2      	ldrb	r2, [r4, r3]
    2720:	2a03      	cmp	r2, #3
    2722:	d81b      	bhi.n	275c <usb_tx+0x54>
    2724:	e8df f002 	tbb	[pc, r2]
    2728:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    272c:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    272e:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    2730:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2732:	f010 0f08 	tst.w	r0, #8
    2736:	bf14      	ite	ne
    2738:	23c8      	movne	r3, #200	; 0xc8
    273a:	2388      	moveq	r3, #136	; 0x88
    273c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2740:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2742:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    2744:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    2746:	b662      	cpsie	i
}
    2748:	bc30      	pop	{r4, r5}
    274a:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    274c:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    274e:	2202      	movs	r2, #2
		break;
    2750:	e7ed      	b.n	272e <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    2752:	2205      	movs	r2, #5
    2754:	e7eb      	b.n	272e <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    2756:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    2758:	2204      	movs	r2, #4
		break;
    275a:	e7e8      	b.n	272e <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    275c:	4a09      	ldr	r2, [pc, #36]	; (2784 <usb_tx+0x7c>)
    275e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    2762:	b138      	cbz	r0, 2774 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    2764:	4a08      	ldr	r2, [pc, #32]	; (2788 <usb_tx+0x80>)
    2766:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    276a:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    276c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    2770:	b662      	cpsie	i
		return;
    2772:	e7e9      	b.n	2748 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    2774:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    2778:	4a03      	ldr	r2, [pc, #12]	; (2788 <usb_tx+0x80>)
    277a:	e7f7      	b.n	276c <usb_tx+0x64>
    277c:	1fff8000 	.word	0x1fff8000
    2780:	1fff93fc 	.word	0x1fff93fc
    2784:	1fff93c4 	.word	0x1fff93c4
    2788:	1fff93d4 	.word	0x1fff93d4

0000278c <usb_isr>:
}



void usb_isr(void)
{
    278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2790:	f8df b30c 	ldr.w	fp, [pc, #780]	; 2aa0 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2794:	f8df a30c 	ldr.w	sl, [pc, #780]	; 2aa4 <usb_isr+0x318>
}



void usb_isr(void)
{
    2798:	b087      	sub	sp, #28
    279a:	e044      	b.n	2826 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    279c:	4fab      	ldr	r7, [pc, #684]	; (2a4c <usb_isr+0x2c0>)
    279e:	ea4f 0893 	mov.w	r8, r3, lsr #2
    27a2:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    27a6:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    27a8:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    27ac:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    27b0:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    27b2:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    27b6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    27ba:	2b00      	cmp	r3, #0
    27bc:	f040 8102 	bne.w	29c4 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    27c0:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    27c4:	0c1b      	lsrs	r3, r3, #16
    27c6:	b299      	uxth	r1, r3
    27c8:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    27cc:	2b00      	cmp	r3, #0
    27ce:	f000 80f0 	beq.w	29b2 <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    27d2:	4b9f      	ldr	r3, [pc, #636]	; (2a50 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    27d4:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    27d8:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    27dc:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    27e0:	2a00      	cmp	r2, #0
    27e2:	f000 82c5 	beq.w	2d70 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    27e6:	4d9b      	ldr	r5, [pc, #620]	; (2a54 <usb_isr+0x2c8>)
    27e8:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    27ec:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    27ee:	4c9a      	ldr	r4, [pc, #616]	; (2a58 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    27f0:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    27f4:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    27f8:	4419      	add	r1, r3
    27fa:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    27fe:	f000 fd99 	bl	3334 <usb_malloc>
					if (packet) {
    2802:	2800      	cmp	r0, #0
    2804:	f000 82ad 	beq.w	2d62 <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    2808:	4a94      	ldr	r2, [pc, #592]	; (2a5c <usb_isr+0x2d0>)
    280a:	4b95      	ldr	r3, [pc, #596]	; (2a60 <usb_isr+0x2d4>)
    280c:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2810:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    2814:	bf18      	it	ne
    2816:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    2818:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    281c:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2820:	2308      	movs	r3, #8
    2822:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2826:	f89b 4000 	ldrb.w	r4, [fp]
    282a:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    282c:	0761      	lsls	r1, r4, #29
    282e:	d51a      	bpl.n	2866 <usb_isr+0xda>
		if (usb_configuration) {
    2830:	4b8c      	ldr	r3, [pc, #560]	; (2a64 <usb_isr+0x2d8>)
    2832:	781b      	ldrb	r3, [r3, #0]
    2834:	b1a3      	cbz	r3, 2860 <usb_isr+0xd4>
			t = usb_reboot_timer;
    2836:	498c      	ldr	r1, [pc, #560]	; (2a68 <usb_isr+0x2dc>)
    2838:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    283a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    283e:	b122      	cbz	r2, 284a <usb_isr+0xbe>
				usb_reboot_timer = --t;
    2840:	3b01      	subs	r3, #1
    2842:	b2db      	uxtb	r3, r3
    2844:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    2846:	b903      	cbnz	r3, 284a <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2848:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    284a:	4988      	ldr	r1, [pc, #544]	; (2a6c <usb_isr+0x2e0>)
    284c:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    284e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    2852:	b12a      	cbz	r2, 2860 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    2854:	3b01      	subs	r3, #1
    2856:	b2db      	uxtb	r3, r3
    2858:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    285a:	2b00      	cmp	r3, #0
    285c:	f000 8257 	beq.w	2d0e <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2860:	2304      	movs	r3, #4
    2862:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2866:	f004 0308 	and.w	r3, r4, #8
    286a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    286e:	2b00      	cmp	r3, #0
    2870:	f000 80cc 	beq.w	2a0c <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    2874:	f89a 3000 	ldrb.w	r3, [sl]
    2878:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    287a:	091e      	lsrs	r6, r3, #4
    287c:	d18e      	bne.n	279c <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    287e:	089c      	lsrs	r4, r3, #2
    2880:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 2a4c <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2884:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    2888:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    288c:	f3c2 0283 	ubfx	r2, r2, #2, #4
    2890:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2892:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2894:	2a0c      	cmp	r2, #12
    2896:	f200 8088 	bhi.w	29aa <usb_isr+0x21e>
    289a:	e8df f002 	tbb	[pc, r2]
    289e:	7c7c      	.short	0x7c7c
    28a0:	86868686 	.word	0x86868686
    28a4:	86478686 	.word	0x86478686
    28a8:	8686      	.short	0x8686
    28aa:	07          	.byte	0x07
    28ab:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    28ac:	6808      	ldr	r0, [r1, #0]
    28ae:	4d70      	ldr	r5, [pc, #448]	; (2a70 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    28b0:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    28b2:	4f70      	ldr	r7, [pc, #448]	; (2a74 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    28b4:	4e70      	ldr	r6, [pc, #448]	; (2a78 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    28b6:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    28b8:	b281      	uxth	r1, r0
    28ba:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    28be:	4b67      	ldr	r3, [pc, #412]	; (2a5c <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    28c0:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    28c2:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    28c6:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    28c8:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    28ca:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    28ce:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    28d0:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    28d4:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    28d8:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    28dc:	4c5b      	ldr	r4, [pc, #364]	; (2a4c <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    28de:	f200 80e3 	bhi.w	2aa8 <usb_isr+0x31c>
    28e2:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    28e6:	f080 8346 	bcs.w	2f76 <usb_isr+0x7ea>
    28ea:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    28ee:	f000 82fc 	beq.w	2eea <usb_isr+0x75e>
    28f2:	f200 828d 	bhi.w	2e10 <usb_isr+0x684>
    28f6:	2980      	cmp	r1, #128	; 0x80
    28f8:	f000 8377 	beq.w	2fea <usb_isr+0x85e>
    28fc:	2982      	cmp	r1, #130	; 0x82
    28fe:	f040 82fa 	bne.w	2ef6 <usb_isr+0x76a>
    2902:	88a9      	ldrh	r1, [r5, #4]
    2904:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    2908:	2904      	cmp	r1, #4
    290a:	f200 82f4 	bhi.w	2ef6 <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    290e:	485b      	ldr	r0, [pc, #364]	; (2a7c <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2910:	4c5b      	ldr	r4, [pc, #364]	; (2a80 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2912:	0089      	lsls	r1, r1, #2
    2914:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2916:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2918:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    291a:	7802      	ldrb	r2, [r0, #0]
    291c:	0793      	lsls	r3, r2, #30
    291e:	f140 8458 	bpl.w	31d2 <usb_isr+0xa46>
    2922:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    2926:	f04f 0e02 	mov.w	lr, #2
    292a:	e342      	b.n	2fb2 <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    292c:	4f51      	ldr	r7, [pc, #324]	; (2a74 <usb_isr+0x2e8>)
    292e:	683a      	ldr	r2, [r7, #0]
		if (data) {
    2930:	b332      	cbz	r2, 2980 <usb_isr+0x1f4>
			size = ep0_tx_len;
    2932:	4b54      	ldr	r3, [pc, #336]	; (2a84 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2934:	4e50      	ldr	r6, [pc, #320]	; (2a78 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2936:	4954      	ldr	r1, [pc, #336]	; (2a88 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    2938:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    293a:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    293c:	780d      	ldrb	r5, [r1, #0]
    293e:	2840      	cmp	r0, #64	; 0x40
    2940:	4686      	mov	lr, r0
    2942:	f045 0802 	orr.w	r8, r5, #2
    2946:	bf28      	it	cs
    2948:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    294c:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    294e:	f084 0401 	eor.w	r4, r4, #1
    2952:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2954:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2958:	bf0c      	ite	eq
    295a:	2488      	moveq	r4, #136	; 0x88
    295c:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    295e:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    2962:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2964:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2968:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    296c:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    296e:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2970:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    2974:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2976:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2978:	2800      	cmp	r0, #0
    297a:	f000 8145 	beq.w	2c08 <usb_isr+0x47c>
    297e:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    2980:	4b3b      	ldr	r3, [pc, #236]	; (2a70 <usb_isr+0x2e4>)
    2982:	881a      	ldrh	r2, [r3, #0]
    2984:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    2988:	d10f      	bne.n	29aa <usb_isr+0x21e>
			setup.bRequest = 0;
    298a:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    298c:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    298e:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2990:	4b3e      	ldr	r3, [pc, #248]	; (2a8c <usb_isr+0x300>)
    2992:	701a      	strb	r2, [r3, #0]
    2994:	e009      	b.n	29aa <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    2996:	4a36      	ldr	r2, [pc, #216]	; (2a70 <usb_isr+0x2e4>)
    2998:	8810      	ldrh	r0, [r2, #0]
    299a:	f242 0221 	movw	r2, #8225	; 0x2021
    299e:	4290      	cmp	r0, r2
    29a0:	f000 8137 	beq.w	2c12 <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    29a4:	4a2d      	ldr	r2, [pc, #180]	; (2a5c <usb_isr+0x2d0>)
    29a6:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    29aa:	4a39      	ldr	r2, [pc, #228]	; (2a90 <usb_isr+0x304>)
    29ac:	2301      	movs	r3, #1
    29ae:	7013      	strb	r3, [r2, #0]
    29b0:	e736      	b.n	2820 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    29b2:	4a2a      	ldr	r2, [pc, #168]	; (2a5c <usb_isr+0x2d0>)
    29b4:	4b2a      	ldr	r3, [pc, #168]	; (2a60 <usb_isr+0x2d4>)
    29b6:	f019 0f08 	tst.w	r9, #8
    29ba:	bf18      	it	ne
    29bc:	4613      	movne	r3, r2
    29be:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    29c2:	e72d      	b.n	2820 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    29c4:	f000 fcd6 	bl	3374 <usb_free>
				packet = tx_first[endpoint];
    29c8:	4a32      	ldr	r2, [pc, #200]	; (2a94 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    29ca:	4933      	ldr	r1, [pc, #204]	; (2a98 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    29cc:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    29d0:	2b00      	cmp	r3, #0
    29d2:	f000 81d1 	beq.w	2d78 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    29d6:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    29d8:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    29da:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    29de:	f103 0208 	add.w	r2, r3, #8
    29e2:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    29e6:	2c03      	cmp	r4, #3
    29e8:	d805      	bhi.n	29f6 <usb_isr+0x26a>
    29ea:	e8df f004 	tbb	[pc, r4]
    29ee:	022c      	.short	0x022c
    29f0:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    29f2:	2202      	movs	r2, #2
    29f4:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    29f6:	881a      	ldrh	r2, [r3, #0]
    29f8:	f019 0f08 	tst.w	r9, #8
    29fc:	bf0c      	ite	eq
    29fe:	2388      	moveq	r3, #136	; 0x88
    2a00:	23c8      	movne	r3, #200	; 0xc8
    2a02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    2a06:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    2a0a:	e709      	b.n	2820 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2a0c:	07e0      	lsls	r0, r4, #31
    2a0e:	f100 8181 	bmi.w	2d14 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    2a12:	0621      	lsls	r1, r4, #24
    2a14:	f100 81f2 	bmi.w	2dfc <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2a18:	07a2      	lsls	r2, r4, #30
    2a1a:	d506      	bpl.n	2a2a <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    2a1c:	4a1f      	ldr	r2, [pc, #124]	; (2a9c <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2a1e:	4920      	ldr	r1, [pc, #128]	; (2aa0 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2a20:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2a22:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    2a24:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    2a26:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2a28:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2a2a:	06e3      	lsls	r3, r4, #27
    2a2c:	d502      	bpl.n	2a34 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2a2e:	4b1c      	ldr	r3, [pc, #112]	; (2aa0 <usb_isr+0x314>)
    2a30:	2210      	movs	r2, #16
    2a32:	701a      	strb	r2, [r3, #0]
	}

}
    2a34:	b007      	add	sp, #28
    2a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2a3a:	2204      	movs	r2, #4
    2a3c:	558a      	strb	r2, [r1, r6]
						break;
    2a3e:	e7da      	b.n	29f6 <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2a40:	2205      	movs	r2, #5
    2a42:	558a      	strb	r2, [r1, r6]
						break;
    2a44:	e7d7      	b.n	29f6 <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    2a46:	2203      	movs	r2, #3
    2a48:	558a      	strb	r2, [r1, r6]
						break;
    2a4a:	e7d4      	b.n	29f6 <usb_isr+0x26a>
    2a4c:	1fff8000 	.word	0x1fff8000
    2a50:	1fff9370 	.word	0x1fff9370
    2a54:	1fff931c 	.word	0x1fff931c
    2a58:	1fff95c0 	.word	0x1fff95c0
    2a5c:	004000c8 	.word	0x004000c8
    2a60:	00400088 	.word	0x00400088
    2a64:	1fff93f8 	.word	0x1fff93f8
    2a68:	1fff9381 	.word	0x1fff9381
    2a6c:	1fff9400 	.word	0x1fff9400
    2a70:	1fff93e4 	.word	0x1fff93e4
    2a74:	1fff9318 	.word	0x1fff9318
    2a78:	1fff9380 	.word	0x1fff9380
    2a7c:	400720c0 	.word	0x400720c0
    2a80:	1fff93f0 	.word	0x1fff93f0
    2a84:	1fff932c 	.word	0x1fff932c
    2a88:	1fff93ec 	.word	0x1fff93ec
    2a8c:	40072098 	.word	0x40072098
    2a90:	40072094 	.word	0x40072094
    2a94:	1fff93c4 	.word	0x1fff93c4
    2a98:	1fff93fc 	.word	0x1fff93fc
    2a9c:	40072088 	.word	0x40072088
    2aa0:	40072080 	.word	0x40072080
    2aa4:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2aa8:	f242 0021 	movw	r0, #8225	; 0x2021
    2aac:	4281      	cmp	r1, r0
    2aae:	f000 812a 	beq.w	2d06 <usb_isr+0x57a>
    2ab2:	f200 80d8 	bhi.w	2c66 <usb_isr+0x4da>
    2ab6:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    2aba:	f000 8276 	beq.w	2faa <usb_isr+0x81e>
    2abe:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    2ac2:	f040 8218 	bne.w	2ef6 <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    2ac6:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    2ac8:	49b3      	ldr	r1, [pc, #716]	; (2d98 <usb_isr+0x60c>)
    2aca:	78a8      	ldrb	r0, [r5, #2]
    2acc:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    2ace:	0612      	lsls	r2, r2, #24
    2ad0:	f100 833a 	bmi.w	3148 <usb_isr+0x9bc>
    2ad4:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    2ad8:	49b0      	ldr	r1, [pc, #704]	; (2d9c <usb_isr+0x610>)
    2ada:	0613      	lsls	r3, r2, #24
    2adc:	f100 830c 	bmi.w	30f8 <usb_isr+0x96c>
    2ae0:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    2ae4:	49ad      	ldr	r1, [pc, #692]	; (2d9c <usb_isr+0x610>)
    2ae6:	0615      	lsls	r5, r2, #24
    2ae8:	f100 8301 	bmi.w	30ee <usb_isr+0x962>
    2aec:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    2af0:	49aa      	ldr	r1, [pc, #680]	; (2d9c <usb_isr+0x610>)
    2af2:	0614      	lsls	r4, r2, #24
    2af4:	f100 82f6 	bmi.w	30e4 <usb_isr+0x958>
    2af8:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    2afc:	49a7      	ldr	r1, [pc, #668]	; (2d9c <usb_isr+0x610>)
    2afe:	0610      	lsls	r0, r2, #24
    2b00:	f100 834a 	bmi.w	3198 <usb_isr+0xa0c>
    2b04:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    2b08:	49a4      	ldr	r1, [pc, #656]	; (2d9c <usb_isr+0x610>)
    2b0a:	0612      	lsls	r2, r2, #24
    2b0c:	f100 833f 	bmi.w	318e <usb_isr+0xa02>
    2b10:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    2b14:	49a1      	ldr	r1, [pc, #644]	; (2d9c <usb_isr+0x610>)
    2b16:	0613      	lsls	r3, r2, #24
    2b18:	f100 8334 	bmi.w	3184 <usb_isr+0x9f8>
    2b1c:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    2b20:	499e      	ldr	r1, [pc, #632]	; (2d9c <usb_isr+0x610>)
    2b22:	0615      	lsls	r5, r2, #24
    2b24:	f100 8329 	bmi.w	317a <usb_isr+0x9ee>
    2b28:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    2b2c:	499b      	ldr	r1, [pc, #620]	; (2d9c <usb_isr+0x610>)
    2b2e:	0614      	lsls	r4, r2, #24
    2b30:	f100 831e 	bmi.w	3170 <usb_isr+0x9e4>
    2b34:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    2b38:	4998      	ldr	r1, [pc, #608]	; (2d9c <usb_isr+0x610>)
    2b3a:	0610      	lsls	r0, r2, #24
    2b3c:	f100 8313 	bmi.w	3166 <usb_isr+0x9da>
    2b40:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    2b44:	4995      	ldr	r1, [pc, #596]	; (2d9c <usb_isr+0x610>)
    2b46:	0612      	lsls	r2, r2, #24
    2b48:	f100 8308 	bmi.w	315c <usb_isr+0x9d0>
    2b4c:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    2b50:	4992      	ldr	r1, [pc, #584]	; (2d9c <usb_isr+0x610>)
    2b52:	0613      	lsls	r3, r2, #24
    2b54:	f100 82fd 	bmi.w	3152 <usb_isr+0x9c6>
    2b58:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    2b5c:	498f      	ldr	r1, [pc, #572]	; (2d9c <usb_isr+0x610>)
    2b5e:	0615      	lsls	r5, r2, #24
    2b60:	f100 8331 	bmi.w	31c6 <usb_isr+0xa3a>
    2b64:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    2b68:	498c      	ldr	r1, [pc, #560]	; (2d9c <usb_isr+0x610>)
    2b6a:	0614      	lsls	r4, r2, #24
    2b6c:	f100 8325 	bmi.w	31ba <usb_isr+0xa2e>
    2b70:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    2b74:	4989      	ldr	r1, [pc, #548]	; (2d9c <usb_isr+0x610>)
    2b76:	0610      	lsls	r0, r2, #24
    2b78:	f100 8319 	bmi.w	31ae <usb_isr+0xa22>
    2b7c:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    2b80:	4986      	ldr	r1, [pc, #536]	; (2d9c <usb_isr+0x610>)
    2b82:	0612      	lsls	r2, r2, #24
    2b84:	f100 830d 	bmi.w	31a2 <usb_isr+0xa16>
    2b88:	4885      	ldr	r0, [pc, #532]	; (2da0 <usb_isr+0x614>)
    2b8a:	4a86      	ldr	r2, [pc, #536]	; (2da4 <usb_isr+0x618>)
    2b8c:	4986      	ldr	r1, [pc, #536]	; (2da8 <usb_isr+0x61c>)
    2b8e:	9001      	str	r0, [sp, #4]
    2b90:	4886      	ldr	r0, [pc, #536]	; (2dac <usb_isr+0x620>)
    2b92:	4d87      	ldr	r5, [pc, #540]	; (2db0 <usb_isr+0x624>)
    2b94:	4c87      	ldr	r4, [pc, #540]	; (2db4 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2b96:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    2b98:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2b9a:	9605      	str	r6, [sp, #20]
    2b9c:	9502      	str	r5, [sp, #8]
    2b9e:	4680      	mov	r8, r0
    2ba0:	460f      	mov	r7, r1
    2ba2:	4616      	mov	r6, r2
    2ba4:	461d      	mov	r5, r3
    2ba6:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    2ba8:	6830      	ldr	r0, [r6, #0]
			while (p) {
    2baa:	b128      	cbz	r0, 2bb8 <usb_isr+0x42c>
				n = p->next;
    2bac:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    2bae:	f000 fbe1 	bl	3374 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    2bb2:	4620      	mov	r0, r4
    2bb4:	2c00      	cmp	r4, #0
    2bb6:	d1f9      	bne.n	2bac <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    2bb8:	2300      	movs	r3, #0
    2bba:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    2bbc:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    2bbe:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    2bc0:	461a      	mov	r2, r3
    2bc2:	2300      	movs	r3, #0
    2bc4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    2bc8:	b128      	cbz	r0, 2bd6 <usb_isr+0x44a>
				n = p->next;
    2bca:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    2bcc:	f000 fbd2 	bl	3374 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    2bd0:	4620      	mov	r0, r4
    2bd2:	2c00      	cmp	r4, #0
    2bd4:	d1f9      	bne.n	2bca <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    2bd6:	2200      	movs	r2, #0
    2bd8:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    2bda:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    2bdc:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    2be0:	4611      	mov	r1, r2
    2be2:	2200      	movs	r2, #0
    2be4:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    2be8:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    2bea:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    2bec:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    2bee:	f04f 0100 	mov.w	r1, #0
    2bf2:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    2bf6:	2b03      	cmp	r3, #3
    2bf8:	f200 812b 	bhi.w	2e52 <usb_isr+0x6c6>
    2bfc:	e8df f013 	tbh	[pc, r3, lsl #1]
    2c00:	01250170 	.word	0x01250170
    2c04:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2c08:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    2c0c:	bf18      	it	ne
    2c0e:	2200      	movne	r2, #0
    2c10:	e6b5      	b.n	297e <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2c12:	4a69      	ldr	r2, [pc, #420]	; (2db8 <usb_isr+0x62c>)
    2c14:	780d      	ldrb	r5, [r1, #0]
    2c16:	7848      	ldrb	r0, [r1, #1]
    2c18:	7015      	strb	r5, [r2, #0]
    2c1a:	7050      	strb	r0, [r2, #1]
    2c1c:	788d      	ldrb	r5, [r1, #2]
    2c1e:	78c8      	ldrb	r0, [r1, #3]
    2c20:	7095      	strb	r5, [r2, #2]
    2c22:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2c24:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2c26:	790d      	ldrb	r5, [r1, #4]
    2c28:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2c2a:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2c2c:	794d      	ldrb	r5, [r1, #5]
    2c2e:	7989      	ldrb	r1, [r1, #6]
    2c30:	7155      	strb	r5, [r2, #5]
    2c32:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2c34:	f000 819b 	beq.w	2f6e <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c38:	4960      	ldr	r1, [pc, #384]	; (2dbc <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c3a:	4e61      	ldr	r6, [pc, #388]	; (2dc0 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c3c:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c3e:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2c40:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c44:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c46:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2c4a:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c4c:	bf0c      	ite	eq
    2c4e:	2188      	moveq	r1, #136	; 0x88
    2c50:	21c8      	movne	r1, #200	; 0xc8
    2c52:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c56:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2c5a:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c5e:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2c60:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c62:	6051      	str	r1, [r2, #4]
    2c64:	e69e      	b.n	29a4 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2c66:	f242 2021 	movw	r0, #8737	; 0x2221
    2c6a:	4281      	cmp	r1, r0
    2c6c:	f040 81cb 	bne.w	3006 <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2c70:	4b54      	ldr	r3, [pc, #336]	; (2dc4 <usb_isr+0x638>)
    2c72:	4c55      	ldr	r4, [pc, #340]	; (2dc8 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    2c74:	4955      	ldr	r1, [pc, #340]	; (2dcc <usb_isr+0x640>)
    2c76:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    2c78:	681d      	ldr	r5, [r3, #0]
    2c7a:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    2c7c:	f8cd e004 	str.w	lr, [sp, #4]
    2c80:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2c82:	2000      	movs	r0, #0
    2c84:	9002      	str	r0, [sp, #8]
    2c86:	4680      	mov	r8, r0
    2c88:	4684      	mov	ip, r0
    2c8a:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c8c:	494b      	ldr	r1, [pc, #300]	; (2dbc <usb_isr+0x630>)
    2c8e:	780d      	ldrb	r5, [r1, #0]
    2c90:	f045 0e02 	orr.w	lr, r5, #2
    2c94:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    2c98:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2c9a:	9b01      	ldr	r3, [sp, #4]
    2c9c:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2c9e:	9b03      	ldr	r3, [sp, #12]
    2ca0:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2ca2:	bf0c      	ite	eq
    2ca4:	2488      	moveq	r4, #136	; 0x88
    2ca6:	24c8      	movne	r4, #200	; 0xc8
    2ca8:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2cac:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2cb0:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    2cb4:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2cb6:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2cb8:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 2d9c <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    2cbc:	4b40      	ldr	r3, [pc, #256]	; (2dc0 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    2cbe:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 2dbc <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2cc2:	2800      	cmp	r0, #0
    2cc4:	f040 811e 	bne.w	2f04 <usb_isr+0x778>
    2cc8:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    2ccc:	d11b      	bne.n	2d06 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2cce:	f044 0c02 	orr.w	ip, r4, #2
    2cd2:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    2cd6:	9c02      	ldr	r4, [sp, #8]
    2cd8:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 2d9c <usb_isr+0x610>
    2cdc:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2cde:	2a00      	cmp	r2, #0
    2ce0:	f040 8126 	bne.w	2f30 <usb_isr+0x7a4>
    2ce4:	0402      	lsls	r2, r0, #16
    2ce6:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    2cea:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2cee:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2cf2:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    2cf4:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    2cf6:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2cf8:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2cfa:	2840      	cmp	r0, #64	; 0x40
    2cfc:	d103      	bne.n	2d06 <usb_isr+0x57a>
    2cfe:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    2d00:	4a33      	ldr	r2, [pc, #204]	; (2dd0 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    2d02:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    2d04:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2d06:	4a33      	ldr	r2, [pc, #204]	; (2dd4 <usb_isr+0x648>)
    2d08:	2301      	movs	r3, #1
    2d0a:	7013      	strb	r3, [r2, #0]
    2d0c:	e64d      	b.n	29aa <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    2d0e:	f000 fc9d 	bl	364c <usb_serial_flush_callback>
    2d12:	e5a5      	b.n	2860 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2d14:	4b21      	ldr	r3, [pc, #132]	; (2d9c <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2d16:	482f      	ldr	r0, [pc, #188]	; (2dd4 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    2d18:	4928      	ldr	r1, [pc, #160]	; (2dbc <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    2d1a:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2d1c:	f04f 0e02 	mov.w	lr, #2
    2d20:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2d24:	4f2c      	ldr	r7, [pc, #176]	; (2dd8 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    2d26:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2d28:	492c      	ldr	r1, [pc, #176]	; (2ddc <usb_isr+0x650>)
    2d2a:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    2d2c:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2d2e:	4e2c      	ldr	r6, [pc, #176]	; (2de0 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    2d30:	4d2c      	ldr	r5, [pc, #176]	; (2de4 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2d32:	4c2d      	ldr	r4, [pc, #180]	; (2de8 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    2d34:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2d36:	210d      	movs	r1, #13
    2d38:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2d3a:	21ff      	movs	r1, #255	; 0xff
    2d3c:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2d3e:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 2df8 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    2d42:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2d44:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2d46:	4d29      	ldr	r5, [pc, #164]	; (2dec <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2d48:	4a29      	ldr	r2, [pc, #164]	; (2df0 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2d4a:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2d4e:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2d50:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2d52:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2d56:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2d58:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2d5a:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    2d5c:	b007      	add	sp, #28
    2d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    2d62:	4a24      	ldr	r2, [pc, #144]	; (2df4 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    2d64:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    2d68:	7813      	ldrb	r3, [r2, #0]
    2d6a:	3301      	adds	r3, #1
    2d6c:	7013      	strb	r3, [r2, #0]
    2d6e:	e557      	b.n	2820 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    2d70:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    2d74:	4d0e      	ldr	r5, [pc, #56]	; (2db0 <usb_isr+0x624>)
    2d76:	e53a      	b.n	27ee <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    2d78:	5d8b      	ldrb	r3, [r1, r6]
    2d7a:	2b03      	cmp	r3, #3
    2d7c:	f200 80f0 	bhi.w	2f60 <usb_isr+0x7d4>
    2d80:	a201      	add	r2, pc, #4	; (adr r2, 2d88 <usb_isr+0x5fc>)
    2d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2d86:	bf00      	nop
    2d88:	00002821 	.word	0x00002821
    2d8c:	00002821 	.word	0x00002821
    2d90:	00002e45 	.word	0x00002e45
    2d94:	00002e3f 	.word	0x00002e3f
    2d98:	1fff93f8 	.word	0x1fff93f8
    2d9c:	1fff8000 	.word	0x1fff8000
    2da0:	1fff93d4 	.word	0x1fff93d4
    2da4:	1fff9370 	.word	0x1fff9370
    2da8:	1fff93c4 	.word	0x1fff93c4
    2dac:	1fff93fc 	.word	0x1fff93fc
    2db0:	1fff931c 	.word	0x1fff931c
    2db4:	1fff95c0 	.word	0x1fff95c0
    2db8:	1fff95c8 	.word	0x1fff95c8
    2dbc:	1fff93ec 	.word	0x1fff93ec
    2dc0:	1fff9380 	.word	0x1fff9380
    2dc4:	1fff9314 	.word	0x1fff9314
    2dc8:	1fff95d0 	.word	0x1fff95d0
    2dcc:	1fff9410 	.word	0x1fff9410
    2dd0:	1fff932c 	.word	0x1fff932c
    2dd4:	40072094 	.word	0x40072094
    2dd8:	400720c0 	.word	0x400720c0
    2ddc:	00400088 	.word	0x00400088
    2de0:	40072088 	.word	0x40072088
    2de4:	40072080 	.word	0x40072080
    2de8:	40072098 	.word	0x40072098
    2dec:	1fff9330 	.word	0x1fff9330
    2df0:	1fff9384 	.word	0x1fff9384
    2df4:	1fff93ed 	.word	0x1fff93ed
    2df8:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2dfc:	49c1      	ldr	r1, [pc, #772]	; (3104 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    2dfe:	4bc2      	ldr	r3, [pc, #776]	; (3108 <usb_isr+0x97c>)
    2e00:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2e02:	200d      	movs	r0, #13
    2e04:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    2e06:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2e08:	07a2      	lsls	r2, r4, #30
    2e0a:	f57f ae0e 	bpl.w	2a2a <usb_isr+0x29e>
    2e0e:	e605      	b.n	2a1c <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2e10:	f240 3202 	movw	r2, #770	; 0x302
    2e14:	4291      	cmp	r1, r2
    2e16:	f040 80ee 	bne.w	2ff6 <usb_isr+0x86a>
    2e1a:	88a9      	ldrh	r1, [r5, #4]
    2e1c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2e20:	2904      	cmp	r1, #4
    2e22:	d868      	bhi.n	2ef6 <usb_isr+0x76a>
    2e24:	886a      	ldrh	r2, [r5, #2]
    2e26:	2a00      	cmp	r2, #0
    2e28:	d165      	bne.n	2ef6 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    2e2a:	48b6      	ldr	r0, [pc, #728]	; (3104 <usb_isr+0x978>)
    2e2c:	f8cd e004 	str.w	lr, [sp, #4]
    2e30:	0089      	lsls	r1, r1, #2
    2e32:	4408      	add	r0, r1
    2e34:	7801      	ldrb	r1, [r0, #0]
    2e36:	f041 0102 	orr.w	r1, r1, #2
    2e3a:	7001      	strb	r1, [r0, #0]
    2e3c:	e721      	b.n	2c82 <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2e3e:	2301      	movs	r3, #1
    2e40:	558b      	strb	r3, [r1, r6]
						break;
    2e42:	e4ed      	b.n	2820 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2e44:	2300      	movs	r3, #0
    2e46:	558b      	strb	r3, [r1, r6]
						break;
    2e48:	e4ea      	b.n	2820 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2e4a:	f04f 0301 	mov.w	r3, #1
    2e4e:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    2e52:	3501      	adds	r5, #1
    2e54:	2d04      	cmp	r5, #4
    2e56:	f106 0604 	add.w	r6, r6, #4
    2e5a:	f107 0704 	add.w	r7, r7, #4
    2e5e:	f108 0801 	add.w	r8, r8, #1
    2e62:	f47f aea1 	bne.w	2ba8 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2e66:	4ca9      	ldr	r4, [pc, #676]	; (310c <usb_isr+0x980>)
			*reg = epconf;
    2e68:	4ba9      	ldr	r3, [pc, #676]	; (3110 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2e6a:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    2e6c:	4da9      	ldr	r5, [pc, #676]	; (3114 <usb_isr+0x988>)
    2e6e:	9f04      	ldr	r7, [sp, #16]
    2e70:	9e05      	ldr	r6, [sp, #20]
    2e72:	2100      	movs	r1, #0
    2e74:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2e76:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2e78:	0713      	lsls	r3, r2, #28
    2e7a:	f100 8105 	bmi.w	3088 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2e7e:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    2e80:	49a5      	ldr	r1, [pc, #660]	; (3118 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2e82:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 3124 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2e86:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2e88:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2e8a:	f04f 0100 	mov.w	r1, #0
    2e8e:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    2e92:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2e96:	f100 80e0 	bmi.w	305a <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2e9a:	49a0      	ldr	r1, [pc, #640]	; (311c <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2e9c:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    2e9e:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2ea0:	2100      	movs	r1, #0
    2ea2:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    2ea6:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2eaa:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2eac:	f8df 8274 	ldr.w	r8, [pc, #628]	; 3124 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2eb0:	f100 8101 	bmi.w	30b6 <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2eb4:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    2eb6:	499a      	ldr	r1, [pc, #616]	; (3120 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2eb8:	4c9a      	ldr	r4, [pc, #616]	; (3124 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    2eba:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2ebc:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2ebe:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2ec0:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    2ec4:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    2ec8:	f100 80b0 	bmi.w	302c <usb_isr+0x8a0>
    2ecc:	7833      	ldrb	r3, [r6, #0]
    2ece:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    2ed0:	2100      	movs	r1, #0
    2ed2:	f083 0201 	eor.w	r2, r3, #1
    2ed6:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    2eda:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    2ede:	e6d0      	b.n	2c82 <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2ee0:	f04f 0300 	mov.w	r3, #0
    2ee4:	f888 3000 	strb.w	r3, [r8]
    2ee8:	e7b3      	b.n	2e52 <usb_isr+0x6c6>
    2eea:	88a9      	ldrh	r1, [r5, #4]
    2eec:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2ef0:	2904      	cmp	r1, #4
    2ef2:	f240 808d 	bls.w	3010 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2ef6:	4a83      	ldr	r2, [pc, #524]	; (3104 <usb_isr+0x978>)
    2ef8:	230f      	movs	r3, #15
    2efa:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2efc:	4a8a      	ldr	r2, [pc, #552]	; (3128 <usb_isr+0x99c>)
    2efe:	2301      	movs	r3, #1
    2f00:	7013      	strb	r3, [r2, #0]
    2f02:	e552      	b.n	29aa <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    2f04:	2840      	cmp	r0, #64	; 0x40
    2f06:	f67f aee2 	bls.w	2cce <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2f0a:	f044 0402 	orr.w	r4, r4, #2
    2f0e:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    2f12:	9e02      	ldr	r6, [sp, #8]
    2f14:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f16:	b1ba      	cbz	r2, 2f48 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    2f18:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f1c:	4a83      	ldr	r2, [pc, #524]	; (312c <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    2f1e:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2f20:	4633      	mov	r3, r6
    2f22:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2f24:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2f28:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f2a:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    2f2e:	e6e7      	b.n	2d00 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    2f30:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2f34:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f36:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2f38:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2f3a:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f3c:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2f40:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f42:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    2f46:	e6d8      	b.n	2cfa <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    2f48:	f89d 1004 	ldrb.w	r1, [sp, #4]
    2f4c:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2f4e:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f50:	4a77      	ldr	r2, [pc, #476]	; (3130 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    2f52:	f888 5000 	strb.w	r5, [r8]
    2f56:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    2f58:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2f5a:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    2f5e:	e6cf      	b.n	2d00 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    2f60:	f019 0f08 	tst.w	r9, #8
    2f64:	bf0c      	ite	eq
    2f66:	2302      	moveq	r3, #2
    2f68:	2303      	movne	r3, #3
    2f6a:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    2f6c:	e458      	b.n	2820 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2f6e:	4a71      	ldr	r2, [pc, #452]	; (3134 <usb_isr+0x9a8>)
    2f70:	210f      	movs	r1, #15
    2f72:	7011      	strb	r1, [r2, #0]
    2f74:	e660      	b.n	2c38 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    2f76:	4a70      	ldr	r2, [pc, #448]	; (3138 <usb_isr+0x9ac>)
    2f78:	6854      	ldr	r4, [r2, #4]
    2f7a:	2c00      	cmp	r4, #0
    2f7c:	d0bb      	beq.n	2ef6 <usb_isr+0x76a>
    2f7e:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2f80:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    2f84:	e003      	b.n	2f8e <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    2f86:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    2f88:	6854      	ldr	r4, [r2, #4]
    2f8a:	2c00      	cmp	r4, #0
    2f8c:	d0b3      	beq.n	2ef6 <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    2f8e:	8813      	ldrh	r3, [r2, #0]
    2f90:	4283      	cmp	r3, r0
    2f92:	d1f8      	bne.n	2f86 <usb_isr+0x7fa>
    2f94:	8853      	ldrh	r3, [r2, #2]
    2f96:	4573      	cmp	r3, lr
    2f98:	d1f5      	bne.n	2f86 <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    2f9a:	0a00      	lsrs	r0, r0, #8
    2f9c:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    2f9e:	bf0c      	ite	eq
    2fa0:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    2fa4:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    2fa8:	e003      	b.n	2fb2 <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    2faa:	4a64      	ldr	r2, [pc, #400]	; (313c <usb_isr+0x9b0>)
    2fac:	4c64      	ldr	r4, [pc, #400]	; (3140 <usb_isr+0x9b4>)
    2fae:	7812      	ldrb	r2, [r2, #0]
    2fb0:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    2fb2:	88e8      	ldrh	r0, [r5, #6]
    2fb4:	4570      	cmp	r0, lr
    2fb6:	f080 813f 	bcs.w	3238 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    2fba:	4962      	ldr	r1, [pc, #392]	; (3144 <usb_isr+0x9b8>)
    2fbc:	780d      	ldrb	r5, [r1, #0]
    2fbe:	2840      	cmp	r0, #64	; 0x40
    2fc0:	4684      	mov	ip, r0
    2fc2:	f045 0e02 	orr.w	lr, r5, #2
    2fc6:	bf28      	it	cs
    2fc8:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    2fcc:	eb04 030c 	add.w	r3, r4, ip
    2fd0:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    2fd4:	9302      	str	r3, [sp, #8]
    2fd6:	2301      	movs	r3, #1
    2fd8:	6054      	str	r4, [r2, #4]
    2fda:	ebcc 0000 	rsb	r0, ip, r0
    2fde:	ea4f 480c 	mov.w	r8, ip, lsl #16
    2fe2:	2200      	movs	r2, #0
    2fe4:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    2fe6:	24c8      	movs	r4, #200	; 0xc8
    2fe8:	e65e      	b.n	2ca8 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2fea:	4c55      	ldr	r4, [pc, #340]	; (3140 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    2fec:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2ff0:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    2ff2:	7062      	strb	r2, [r4, #1]
    2ff4:	e7dd      	b.n	2fb2 <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    2ff6:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    2ffa:	f47f af7c 	bne.w	2ef6 <usb_isr+0x76a>
    2ffe:	2301      	movs	r3, #1
    3000:	2200      	movs	r2, #0
    3002:	9301      	str	r3, [sp, #4]
    3004:	e63d      	b.n	2c82 <usb_isr+0x4f6>
    3006:	f242 3221 	movw	r2, #8993	; 0x2321
    300a:	4291      	cmp	r1, r2
    300c:	d0f7      	beq.n	2ffe <usb_isr+0x872>
    300e:	e772      	b.n	2ef6 <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    3010:	886a      	ldrh	r2, [r5, #2]
    3012:	2a00      	cmp	r2, #0
    3014:	f47f af6f 	bne.w	2ef6 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    3018:	483a      	ldr	r0, [pc, #232]	; (3104 <usb_isr+0x978>)
    301a:	f8cd e004 	str.w	lr, [sp, #4]
    301e:	0089      	lsls	r1, r1, #2
    3020:	4408      	add	r0, r1
    3022:	7801      	ldrb	r1, [r0, #0]
    3024:	f021 0102 	bic.w	r1, r1, #2
    3028:	7001      	strb	r1, [r0, #0]
    302a:	e62a      	b.n	2c82 <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    302c:	f000 f982 	bl	3334 <usb_malloc>
				if (p) {
    3030:	2800      	cmp	r0, #0
    3032:	f000 80ef 	beq.w	3214 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    3036:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3038:	4a3d      	ldr	r2, [pc, #244]	; (3130 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    303a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    303e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3042:	f000 f977 	bl	3334 <usb_malloc>
				if (p) {
    3046:	2800      	cmp	r0, #0
    3048:	f000 80de 	beq.w	3208 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    304c:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    304e:	4a37      	ldr	r2, [pc, #220]	; (312c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    3050:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3054:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    3058:	e738      	b.n	2ecc <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    305a:	f000 f96b 	bl	3334 <usb_malloc>
				if (p) {
    305e:	2800      	cmp	r0, #0
    3060:	f000 80c0 	beq.w	31e4 <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    3064:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3066:	4a32      	ldr	r2, [pc, #200]	; (3130 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3068:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    306c:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    3070:	f000 f960 	bl	3334 <usb_malloc>
				if (p) {
    3074:	2800      	cmp	r0, #0
    3076:	f000 80af 	beq.w	31d8 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    307a:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    307c:	4a2b      	ldr	r2, [pc, #172]	; (312c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    307e:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3082:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    3086:	e708      	b.n	2e9a <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    3088:	f000 f954 	bl	3334 <usb_malloc>
				if (p) {
    308c:	2800      	cmp	r0, #0
    308e:	f000 80cd 	beq.w	322c <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    3092:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3094:	4a26      	ldr	r2, [pc, #152]	; (3130 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    3096:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    309a:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    309e:	f000 f949 	bl	3334 <usb_malloc>
				if (p) {
    30a2:	2800      	cmp	r0, #0
    30a4:	f000 80bc 	beq.w	3220 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    30a8:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    30aa:	4a20      	ldr	r2, [pc, #128]	; (312c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    30ac:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    30b0:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    30b4:	e6e3      	b.n	2e7e <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    30b6:	f000 f93d 	bl	3334 <usb_malloc>
				if (p) {
    30ba:	2800      	cmp	r0, #0
    30bc:	f000 809e 	beq.w	31fc <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    30c0:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    30c2:	4a1b      	ldr	r2, [pc, #108]	; (3130 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    30c4:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    30c8:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    30cc:	f000 f932 	bl	3334 <usb_malloc>
				if (p) {
    30d0:	2800      	cmp	r0, #0
    30d2:	f000 808d 	beq.w	31f0 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    30d6:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    30d8:	4a14      	ldr	r2, [pc, #80]	; (312c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    30da:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    30de:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    30e2:	e6e7      	b.n	2eb4 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    30e4:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    30e6:	3808      	subs	r0, #8
    30e8:	f000 f944 	bl	3374 <usb_free>
    30ec:	e504      	b.n	2af8 <usb_isr+0x36c>
    30ee:	6b48      	ldr	r0, [r1, #52]	; 0x34
    30f0:	3808      	subs	r0, #8
    30f2:	f000 f93f 	bl	3374 <usb_free>
    30f6:	e4f9      	b.n	2aec <usb_isr+0x360>
    30f8:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    30fa:	3808      	subs	r0, #8
    30fc:	f000 f93a 	bl	3374 <usb_free>
    3100:	e4ee      	b.n	2ae0 <usb_isr+0x354>
    3102:	bf00      	nop
    3104:	400720c0 	.word	0x400720c0
    3108:	40072080 	.word	0x40072080
    310c:	000043c8 	.word	0x000043c8
    3110:	400720c4 	.word	0x400720c4
    3114:	1fff93ed 	.word	0x1fff93ed
    3118:	400720c8 	.word	0x400720c8
    311c:	400720cc 	.word	0x400720cc
    3120:	400720d0 	.word	0x400720d0
    3124:	1fff8000 	.word	0x1fff8000
    3128:	40072094 	.word	0x40072094
    312c:	004000c8 	.word	0x004000c8
    3130:	00400088 	.word	0x00400088
    3134:	1fff9381 	.word	0x1fff9381
    3138:	000043cc 	.word	0x000043cc
    313c:	1fff93f8 	.word	0x1fff93f8
    3140:	1fff93f0 	.word	0x1fff93f0
    3144:	1fff93ec 	.word	0x1fff93ec
    3148:	6a60      	ldr	r0, [r4, #36]	; 0x24
    314a:	3808      	subs	r0, #8
    314c:	f000 f912 	bl	3374 <usb_free>
    3150:	e4c0      	b.n	2ad4 <usb_isr+0x348>
    3152:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    3154:	3808      	subs	r0, #8
    3156:	f000 f90d 	bl	3374 <usb_free>
    315a:	e4fd      	b.n	2b58 <usb_isr+0x3cc>
    315c:	6f48      	ldr	r0, [r1, #116]	; 0x74
    315e:	3808      	subs	r0, #8
    3160:	f000 f908 	bl	3374 <usb_free>
    3164:	e4f2      	b.n	2b4c <usb_isr+0x3c0>
    3166:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    3168:	3808      	subs	r0, #8
    316a:	f000 f903 	bl	3374 <usb_free>
    316e:	e4e7      	b.n	2b40 <usb_isr+0x3b4>
    3170:	6e48      	ldr	r0, [r1, #100]	; 0x64
    3172:	3808      	subs	r0, #8
    3174:	f000 f8fe 	bl	3374 <usb_free>
    3178:	e4dc      	b.n	2b34 <usb_isr+0x3a8>
    317a:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    317c:	3808      	subs	r0, #8
    317e:	f000 f8f9 	bl	3374 <usb_free>
    3182:	e4d1      	b.n	2b28 <usb_isr+0x39c>
    3184:	6d48      	ldr	r0, [r1, #84]	; 0x54
    3186:	3808      	subs	r0, #8
    3188:	f000 f8f4 	bl	3374 <usb_free>
    318c:	e4c6      	b.n	2b1c <usb_isr+0x390>
    318e:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    3190:	3808      	subs	r0, #8
    3192:	f000 f8ef 	bl	3374 <usb_free>
    3196:	e4bb      	b.n	2b10 <usb_isr+0x384>
    3198:	6c48      	ldr	r0, [r1, #68]	; 0x44
    319a:	3808      	subs	r0, #8
    319c:	f000 f8ea 	bl	3374 <usb_free>
    31a0:	e4b0      	b.n	2b04 <usb_isr+0x378>
    31a2:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    31a6:	3808      	subs	r0, #8
    31a8:	f000 f8e4 	bl	3374 <usb_free>
    31ac:	e4ec      	b.n	2b88 <usb_isr+0x3fc>
    31ae:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    31b2:	3808      	subs	r0, #8
    31b4:	f000 f8de 	bl	3374 <usb_free>
    31b8:	e4e0      	b.n	2b7c <usb_isr+0x3f0>
    31ba:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    31be:	3808      	subs	r0, #8
    31c0:	f000 f8d8 	bl	3374 <usb_free>
    31c4:	e4d4      	b.n	2b70 <usb_isr+0x3e4>
    31c6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    31ca:	3808      	subs	r0, #8
    31cc:	f000 f8d2 	bl	3374 <usb_free>
    31d0:	e4c8      	b.n	2b64 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    31d2:	f04f 0e02 	mov.w	lr, #2
    31d6:	e6ec      	b.n	2fb2 <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    31d8:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    31da:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    31de:	3201      	adds	r2, #1
    31e0:	702a      	strb	r2, [r5, #0]
    31e2:	e65a      	b.n	2e9a <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    31e4:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    31e6:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    31ea:	3201      	adds	r2, #1
    31ec:	702a      	strb	r2, [r5, #0]
    31ee:	e73f      	b.n	3070 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    31f0:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    31f2:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    31f6:	3201      	adds	r2, #1
    31f8:	702a      	strb	r2, [r5, #0]
    31fa:	e65b      	b.n	2eb4 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    31fc:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    31fe:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    3202:	3201      	adds	r2, #1
    3204:	702a      	strb	r2, [r5, #0]
    3206:	e761      	b.n	30cc <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3208:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    320a:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    320e:	3201      	adds	r2, #1
    3210:	702a      	strb	r2, [r5, #0]
    3212:	e65b      	b.n	2ecc <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    3214:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    3216:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    321a:	3201      	adds	r2, #1
    321c:	702a      	strb	r2, [r5, #0]
    321e:	e710      	b.n	3042 <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    3220:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    3222:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    3226:	3201      	adds	r2, #1
    3228:	702a      	strb	r2, [r5, #0]
    322a:	e628      	b.n	2e7e <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    322c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    322e:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    3232:	3201      	adds	r2, #1
    3234:	702a      	strb	r2, [r5, #0]
    3236:	e732      	b.n	309e <usb_isr+0x912>
    3238:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    323c:	46f4      	mov	ip, lr
    323e:	bf28      	it	cs
    3240:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    3244:	eb04 030c 	add.w	r3, r4, ip
    3248:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    324a:	2301      	movs	r3, #1
    324c:	ebcc 000e 	rsb	r0, ip, lr
    3250:	ea4f 480c 	mov.w	r8, ip, lsl #16
    3254:	2200      	movs	r2, #0
    3256:	9301      	str	r3, [sp, #4]
    3258:	e518      	b.n	2c8c <usb_isr+0x500>
    325a:	bf00      	nop

0000325c <usb_init>:
}



void usb_init(void)
{
    325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    325e:	f000 fda5 	bl	3dac <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3262:	4b29      	ldr	r3, [pc, #164]	; (3308 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    3264:	4829      	ldr	r0, [pc, #164]	; (330c <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    3266:	4c2a      	ldr	r4, [pc, #168]	; (3310 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    3268:	4f2a      	ldr	r7, [pc, #168]	; (3314 <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    326a:	4d2b      	ldr	r5, [pc, #172]	; (3318 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    326c:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 332c <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    3270:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 3330 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    3274:	4e29      	ldr	r6, [pc, #164]	; (331c <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3276:	2200      	movs	r2, #0
    3278:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    327a:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    327c:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    327e:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3280:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    3282:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3284:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    3286:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3288:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    328a:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    328c:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    328e:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3290:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    3292:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3294:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    3296:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    3298:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    329a:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    329c:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    329e:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    32a0:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    32a2:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    32a4:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    32a6:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    32a8:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    32aa:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    32ac:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    32ae:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    32b0:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    32b2:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    32b4:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    32b6:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    32b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    32bc:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    32be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    32c2:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    32c6:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    32c8:	f3c3 2107 	ubfx	r1, r3, #8, #8
    32cc:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    32ce:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    32d2:	4913      	ldr	r1, [pc, #76]	; (3320 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    32d4:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    32d6:	0e1b      	lsrs	r3, r3, #24
    32d8:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    32da:	23ff      	movs	r3, #255	; 0xff
    32dc:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    32e0:	4d10      	ldr	r5, [pc, #64]	; (3324 <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    32e2:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    32e6:	4810      	ldr	r0, [pc, #64]	; (3328 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    32e8:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    32ea:	2301      	movs	r3, #1
    32ec:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    32ee:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    32f2:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    32f4:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    32f8:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    32fa:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    32fe:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    3300:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    3302:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    3306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3308:	1fff8000 	.word	0x1fff8000
    330c:	40048034 	.word	0x40048034
    3310:	4007209c 	.word	0x4007209c
    3314:	400720b0 	.word	0x400720b0
    3318:	400720b4 	.word	0x400720b4
    331c:	40072094 	.word	0x40072094
    3320:	40072010 	.word	0x40072010
    3324:	e000e449 	.word	0xe000e449
    3328:	e000e108 	.word	0xe000e108
    332c:	40072080 	.word	0x40072080
    3330:	40072088 	.word	0x40072088

00003334 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    3334:	b672      	cpsid	i
	avail = usb_buffer_available;
    3336:	480d      	ldr	r0, [pc, #52]	; (336c <usb_malloc+0x38>)
    3338:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    333a:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    333e:	2b0b      	cmp	r3, #11
    3340:	dc10      	bgt.n	3364 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    3342:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    3346:	40d9      	lsrs	r1, r3
    3348:	ea22 0201 	bic.w	r2, r2, r1
    334c:	6002      	str	r2, [r0, #0]
	__enable_irq();
    334e:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    3350:	4807      	ldr	r0, [pc, #28]	; (3370 <usb_malloc+0x3c>)
    3352:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    3356:	00db      	lsls	r3, r3, #3
    3358:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    335a:	2100      	movs	r1, #0
    335c:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    335e:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    3360:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    3362:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    3364:	b662      	cpsie	i
		return NULL;
    3366:	2000      	movs	r0, #0
    3368:	4770      	bx	lr
    336a:	bf00      	nop
    336c:	1fff8724 	.word	0x1fff8724
    3370:	1fff83bc 	.word	0x1fff83bc

00003374 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    3374:	4b0d      	ldr	r3, [pc, #52]	; (33ac <usb_free+0x38>)
    3376:	4a0e      	ldr	r2, [pc, #56]	; (33b0 <usb_free+0x3c>)
    3378:	1ac3      	subs	r3, r0, r3
    337a:	fba2 2303 	umull	r2, r3, r2, r3
    337e:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    3380:	2b0b      	cmp	r3, #11
    3382:	d80c      	bhi.n	339e <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3384:	4a0b      	ldr	r2, [pc, #44]	; (33b4 <usb_free+0x40>)
    3386:	7812      	ldrb	r2, [r2, #0]
    3388:	b952      	cbnz	r2, 33a0 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    338a:	b672      	cpsid	i
	usb_buffer_available |= mask;
    338c:	480a      	ldr	r0, [pc, #40]	; (33b8 <usb_free+0x44>)
    338e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    3392:	6802      	ldr	r2, [r0, #0]
    3394:	fa21 f303 	lsr.w	r3, r1, r3
    3398:	431a      	orrs	r2, r3
    339a:	6002      	str	r2, [r0, #0]
	__enable_irq();
    339c:	b662      	cpsie	i
    339e:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    33a0:	4a06      	ldr	r2, [pc, #24]	; (33bc <usb_free+0x48>)
    33a2:	7812      	ldrb	r2, [r2, #0]
    33a4:	2a00      	cmp	r2, #0
    33a6:	d0f0      	beq.n	338a <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    33a8:	f7ff b94a 	b.w	2640 <usb_rx_memory>
    33ac:	1fff83bc 	.word	0x1fff83bc
    33b0:	38e38e39 	.word	0x38e38e39
    33b4:	1fff93ed 	.word	0x1fff93ed
    33b8:	1fff8724 	.word	0x1fff8724
    33bc:	1fff93f8 	.word	0x1fff93f8

000033c0 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    33c0:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    33c2:	4d0f      	ldr	r5, [pc, #60]	; (3400 <usb_serial_getchar+0x40>)
    33c4:	6828      	ldr	r0, [r5, #0]
    33c6:	b178      	cbz	r0, 33e8 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    33c8:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    33ca:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    33cc:	18c1      	adds	r1, r0, r3
    33ce:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    33d0:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    33d2:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    33d4:	d202      	bcs.n	33dc <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    33d6:	8043      	strh	r3, [r0, #2]
	}
	return c;
    33d8:	4620      	mov	r0, r4
}
    33da:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    33dc:	f7ff ffca 	bl	3374 <usb_free>
		rx_packet = NULL;
    33e0:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    33e2:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    33e4:	602b      	str	r3, [r5, #0]
    33e6:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    33e8:	4b06      	ldr	r3, [pc, #24]	; (3404 <usb_serial_getchar+0x44>)
    33ea:	781b      	ldrb	r3, [r3, #0]
    33ec:	b12b      	cbz	r3, 33fa <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    33ee:	2003      	movs	r0, #3
    33f0:	f7ff f8f2 	bl	25d8 <usb_rx>
    33f4:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    33f6:	2800      	cmp	r0, #0
    33f8:	d1e6      	bne.n	33c8 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    33fa:	f04f 30ff 	mov.w	r0, #4294967295
    33fe:	bd38      	pop	{r3, r4, r5, pc}
    3400:	1fff940c 	.word	0x1fff940c
    3404:	1fff93f8 	.word	0x1fff93f8

00003408 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    3408:	b510      	push	{r4, lr}
	if (!rx_packet) {
    340a:	4c09      	ldr	r4, [pc, #36]	; (3430 <usb_serial_peekchar+0x28>)
    340c:	6820      	ldr	r0, [r4, #0]
    340e:	b118      	cbz	r0, 3418 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    3410:	8843      	ldrh	r3, [r0, #2]
    3412:	4418      	add	r0, r3
    3414:	7a00      	ldrb	r0, [r0, #8]
}
    3416:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3418:	4b06      	ldr	r3, [pc, #24]	; (3434 <usb_serial_peekchar+0x2c>)
    341a:	781b      	ldrb	r3, [r3, #0]
    341c:	b12b      	cbz	r3, 342a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    341e:	2003      	movs	r0, #3
    3420:	f7ff f8da 	bl	25d8 <usb_rx>
    3424:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    3426:	2800      	cmp	r0, #0
    3428:	d1f2      	bne.n	3410 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    342a:	f04f 30ff 	mov.w	r0, #4294967295
    342e:	bd10      	pop	{r4, pc}
    3430:	1fff940c 	.word	0x1fff940c
    3434:	1fff93f8 	.word	0x1fff93f8

00003438 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    3438:	4b04      	ldr	r3, [pc, #16]	; (344c <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    343a:	4a05      	ldr	r2, [pc, #20]	; (3450 <usb_serial_available+0x18>)
    343c:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    343e:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    3440:	b11b      	cbz	r3, 344a <usb_serial_available+0x12>
    3442:	881a      	ldrh	r2, [r3, #0]
    3444:	885b      	ldrh	r3, [r3, #2]
    3446:	1ad3      	subs	r3, r2, r3
    3448:	4418      	add	r0, r3
	return count;
}
    344a:	4770      	bx	lr
    344c:	1fff940c 	.word	0x1fff940c
    3450:	1fff95c0 	.word	0x1fff95c0

00003454 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    3454:	4b0b      	ldr	r3, [pc, #44]	; (3484 <usb_serial_flush_input+0x30>)
    3456:	781b      	ldrb	r3, [r3, #0]
    3458:	b19b      	cbz	r3, 3482 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    345a:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    345c:	4c0a      	ldr	r4, [pc, #40]	; (3488 <usb_serial_flush_input+0x34>)
    345e:	6820      	ldr	r0, [r4, #0]
    3460:	b148      	cbz	r0, 3476 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    3462:	f7ff ff87 	bl	3374 <usb_free>
		rx_packet = NULL;
    3466:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    3468:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    346a:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    346c:	f7ff f8b4 	bl	25d8 <usb_rx>
		if (!rx) break;
    3470:	b130      	cbz	r0, 3480 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    3472:	f7ff ff7f 	bl	3374 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    3476:	2003      	movs	r0, #3
    3478:	f7ff f8ae 	bl	25d8 <usb_rx>
		if (!rx) break;
    347c:	2800      	cmp	r0, #0
    347e:	d1f8      	bne.n	3472 <usb_serial_flush_input+0x1e>
    3480:	bd10      	pop	{r4, pc}
    3482:	4770      	bx	lr
    3484:	1fff93f8 	.word	0x1fff93f8
    3488:	1fff940c 	.word	0x1fff940c

0000348c <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    348c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    3490:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 358c <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    3494:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    3496:	2201      	movs	r2, #1
    3498:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    349c:	9101      	str	r1, [sp, #4]
    349e:	b369      	cbz	r1, 34fc <usb_serial_write+0x70>
    34a0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3590 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    34a4:	4f36      	ldr	r7, [pc, #216]	; (3580 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    34a6:	9e01      	ldr	r6, [sp, #4]
    34a8:	4683      	mov	fp, r0
		if (!tx_packet) {
    34aa:	f8d8 0000 	ldr.w	r0, [r8]
    34ae:	b3b0      	cbz	r0, 351e <usb_serial_write+0x92>
    34b0:	4d34      	ldr	r5, [pc, #208]	; (3584 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    34b2:	8844      	ldrh	r4, [r0, #2]
    34b4:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    34b8:	42b1      	cmp	r1, r6
    34ba:	bf28      	it	cs
    34bc:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    34be:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    34c2:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    34c4:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    34c8:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    34ca:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    34cc:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    34d0:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    34d4:	b151      	cbz	r1, 34ec <usb_serial_write+0x60>
    34d6:	3c01      	subs	r4, #1
    34d8:	4422      	add	r2, r4
    34da:	4459      	add	r1, fp
    34dc:	f81b 4b01 	ldrb.w	r4, [fp], #1
    34e0:	f802 4f01 	strb.w	r4, [r2, #1]!
    34e4:	458b      	cmp	fp, r1
    34e6:	d1f9      	bne.n	34dc <usb_serial_write+0x50>
    34e8:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    34ec:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    34f0:	d80b      	bhi.n	350a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    34f2:	4a25      	ldr	r2, [pc, #148]	; (3588 <usb_serial_write+0xfc>)
    34f4:	2105      	movs	r1, #5
    34f6:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    34f8:	2e00      	cmp	r6, #0
    34fa:	d1d6      	bne.n	34aa <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    34fc:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    34fe:	2300      	movs	r3, #0
    3500:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    3504:	b003      	add	sp, #12
    3506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    350a:	2240      	movs	r2, #64	; 0x40
    350c:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    350e:	4601      	mov	r1, r0
    3510:	2004      	movs	r0, #4
    3512:	f7ff f8f9 	bl	2708 <usb_tx>
			tx_packet = NULL;
    3516:	2200      	movs	r2, #0
    3518:	f8c8 2000 	str.w	r2, [r8]
    351c:	e7e9      	b.n	34f2 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    351e:	783a      	ldrb	r2, [r7, #0]
    3520:	b32a      	cbz	r2, 356e <usb_serial_write+0xe2>
    3522:	4d18      	ldr	r5, [pc, #96]	; (3584 <usb_serial_write+0xf8>)
    3524:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    3528:	f04f 0a01 	mov.w	sl, #1
    352c:	e007      	b.n	353e <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    352e:	3c01      	subs	r4, #1
    3530:	d016      	beq.n	3560 <usb_serial_write+0xd4>
    3532:	782a      	ldrb	r2, [r5, #0]
    3534:	b9a2      	cbnz	r2, 3560 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    3536:	f000 fa1d 	bl	3974 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    353a:	783a      	ldrb	r2, [r7, #0]
    353c:	b1ba      	cbz	r2, 356e <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    353e:	2004      	movs	r0, #4
    3540:	f7ff f868 	bl	2614 <usb_tx_packet_count>
    3544:	2807      	cmp	r0, #7
    3546:	d8f2      	bhi.n	352e <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    3548:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    354c:	f7ff fef2 	bl	3334 <usb_malloc>
    3550:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    3554:	2800      	cmp	r0, #0
    3556:	d1ac      	bne.n	34b2 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    3558:	4b0c      	ldr	r3, [pc, #48]	; (358c <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    355a:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    355c:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    355e:	d1e8      	bne.n	3532 <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    3560:	2301      	movs	r3, #1
					return -1;
    3562:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    3566:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    3568:	b003      	add	sp, #12
    356a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    356e:	2300      	movs	r3, #0
					return -1;
    3570:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    3574:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    3578:	b003      	add	sp, #12
    357a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    357e:	bf00      	nop
    3580:	1fff93f8 	.word	0x1fff93f8
    3584:	1fff9408 	.word	0x1fff9408
    3588:	1fff9400 	.word	0x1fff9400
    358c:	1fff9401 	.word	0x1fff9401
    3590:	1fff9404 	.word	0x1fff9404

00003594 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    3594:	b500      	push	{lr}
    3596:	b083      	sub	sp, #12
    3598:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    359a:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    359c:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    35a0:	4618      	mov	r0, r3
    35a2:	f7ff ff73 	bl	348c <usb_serial_write>
}
    35a6:	b003      	add	sp, #12
    35a8:	f85d fb04 	ldr.w	pc, [sp], #4

000035ac <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    35ac:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    35ae:	4d0e      	ldr	r5, [pc, #56]	; (35e8 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    35b0:	4c0e      	ldr	r4, [pc, #56]	; (35ec <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    35b2:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    35b4:	2301      	movs	r3, #1
    35b6:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    35b8:	b128      	cbz	r0, 35c6 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    35ba:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    35bc:	2300      	movs	r3, #0
    35be:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    35c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    35c4:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    35c6:	4b0a      	ldr	r3, [pc, #40]	; (35f0 <usb_serial_write_buffer_free+0x44>)
    35c8:	781b      	ldrb	r3, [r3, #0]
    35ca:	b913      	cbnz	r3, 35d2 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    35cc:	2000      	movs	r0, #0
    35ce:	7020      	strb	r0, [r4, #0]
			return 0;
    35d0:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    35d2:	2004      	movs	r0, #4
    35d4:	f7ff f81e 	bl	2614 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    35d8:	2807      	cmp	r0, #7
    35da:	d8f7      	bhi.n	35cc <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    35dc:	f7ff feaa 	bl	3334 <usb_malloc>
    35e0:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    35e2:	2800      	cmp	r0, #0
    35e4:	d1e9      	bne.n	35ba <usb_serial_write_buffer_free+0xe>
    35e6:	e7f1      	b.n	35cc <usb_serial_write_buffer_free+0x20>
    35e8:	1fff9404 	.word	0x1fff9404
    35ec:	1fff9401 	.word	0x1fff9401
    35f0:	1fff93f8 	.word	0x1fff93f8

000035f4 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    35f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    35f6:	4b11      	ldr	r3, [pc, #68]	; (363c <usb_serial_flush_output+0x48>)
    35f8:	781b      	ldrb	r3, [r3, #0]
    35fa:	b18b      	cbz	r3, 3620 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    35fc:	4e10      	ldr	r6, [pc, #64]	; (3640 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    35fe:	4d11      	ldr	r5, [pc, #68]	; (3644 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    3600:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    3602:	2701      	movs	r7, #1
    3604:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    3606:	b164      	cbz	r4, 3622 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    3608:	4a0f      	ldr	r2, [pc, #60]	; (3648 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    360a:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    360c:	2700      	movs	r7, #0
    360e:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3610:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    3612:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3614:	2004      	movs	r0, #4
    3616:	f7ff f877 	bl	2708 <usb_tx>
		tx_packet = NULL;
    361a:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    361c:	2300      	movs	r3, #0
    361e:	702b      	strb	r3, [r5, #0]
    3620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    3622:	f7ff fe87 	bl	3334 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    3626:	4b08      	ldr	r3, [pc, #32]	; (3648 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    3628:	b128      	cbz	r0, 3636 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    362a:	4601      	mov	r1, r0
    362c:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    362e:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    3630:	f7ff f86a 	bl	2708 <usb_tx>
    3634:	e7f2      	b.n	361c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    3636:	701f      	strb	r7, [r3, #0]
    3638:	e7f0      	b.n	361c <usb_serial_flush_output+0x28>
    363a:	bf00      	nop
    363c:	1fff93f8 	.word	0x1fff93f8
    3640:	1fff9404 	.word	0x1fff9404
    3644:	1fff9401 	.word	0x1fff9401
    3648:	1fff9400 	.word	0x1fff9400

0000364c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    364c:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    364e:	4b0e      	ldr	r3, [pc, #56]	; (3688 <usb_serial_flush_callback+0x3c>)
    3650:	781b      	ldrb	r3, [r3, #0]
    3652:	b973      	cbnz	r3, 3672 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    3654:	4c0d      	ldr	r4, [pc, #52]	; (368c <usb_serial_flush_callback+0x40>)
    3656:	6821      	ldr	r1, [r4, #0]
    3658:	b161      	cbz	r1, 3674 <usb_serial_flush_callback+0x28>
    365a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    365e:	884b      	ldrh	r3, [r1, #2]
    3660:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3662:	2004      	movs	r0, #4
    3664:	f7ff f850 	bl	2708 <usb_tx>
		tx_packet = NULL;
    3668:	6025      	str	r5, [r4, #0]
    366a:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    366c:	4b08      	ldr	r3, [pc, #32]	; (3690 <usb_serial_flush_callback+0x44>)
    366e:	2201      	movs	r2, #1
    3670:	701a      	strb	r2, [r3, #0]
    3672:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    3674:	f7ff fe5e 	bl	3334 <usb_malloc>
		if (tx) {
    3678:	2800      	cmp	r0, #0
    367a:	d0f7      	beq.n	366c <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    367c:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    367e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    3682:	2004      	movs	r0, #4
    3684:	f7ff b840 	b.w	2708 <usb_tx>
    3688:	1fff9401 	.word	0x1fff9401
    368c:	1fff9404 	.word	0x1fff9404
    3690:	1fff9400 	.word	0x1fff9400

00003694 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    3694:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3696:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    369a:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    369c:	7f43      	ldrb	r3, [r0, #29]
    369e:	b933      	cbnz	r3, 36ae <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    36a0:	7f01      	ldrb	r1, [r0, #28]
    36a2:	2901      	cmp	r1, #1
    36a4:	d007      	beq.n	36b6 <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    36a6:	2903      	cmp	r1, #3
    36a8:	d00f      	beq.n	36ca <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    36aa:	2301      	movs	r3, #1
    36ac:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    36ae:	b902      	cbnz	r2, 36b2 <EventResponder::triggerEventNotImmediate()+0x1e>
    36b0:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    36b2:	bc10      	pop	{r4}
    36b4:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    36b6:	4c12      	ldr	r4, [pc, #72]	; (3700 <EventResponder::triggerEventNotImmediate()+0x6c>)
    36b8:	6821      	ldr	r1, [r4, #0]
    36ba:	b1a1      	cbz	r1, 36e6 <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    36bc:	4911      	ldr	r1, [pc, #68]	; (3704 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    36be:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    36c0:	680b      	ldr	r3, [r1, #0]
    36c2:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    36c4:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    36c6:	6158      	str	r0, [r3, #20]
    36c8:	e7ef      	b.n	36aa <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    36ca:	4c0f      	ldr	r4, [pc, #60]	; (3708 <EventResponder::triggerEventNotImmediate()+0x74>)
    36cc:	6821      	ldr	r1, [r4, #0]
    36ce:	b181      	cbz	r1, 36f2 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    36d0:	490e      	ldr	r1, [pc, #56]	; (370c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    36d2:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    36d4:	680b      	ldr	r3, [r1, #0]
    36d6:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    36d8:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    36da:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    36dc:	4b0c      	ldr	r3, [pc, #48]	; (3710 <EventResponder::triggerEventNotImmediate()+0x7c>)
    36de:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    36e2:	6019      	str	r1, [r3, #0]
    36e4:	e7e1      	b.n	36aa <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    36e6:	4b07      	ldr	r3, [pc, #28]	; (3704 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    36e8:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    36ea:	6181      	str	r1, [r0, #24]
				firstYield = this;
    36ec:	6020      	str	r0, [r4, #0]
				lastYield = this;
    36ee:	6018      	str	r0, [r3, #0]
    36f0:	e7db      	b.n	36aa <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    36f2:	4b06      	ldr	r3, [pc, #24]	; (370c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    36f4:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    36f6:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    36f8:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    36fa:	6018      	str	r0, [r3, #0]
    36fc:	e7ee      	b.n	36dc <EventResponder::triggerEventNotImmediate()+0x48>
    36fe:	bf00      	nop
    3700:	1fff9424 	.word	0x1fff9424
    3704:	1fff9420 	.word	0x1fff9420
    3708:	1fff9414 	.word	0x1fff9414
    370c:	1fff9418 	.word	0x1fff9418
    3710:	e000ed04 	.word	0xe000ed04

00003714 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    3714:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3716:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3718:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    371a:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    371c:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    371e:	d002      	beq.n	3726 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    3720:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3722:	f7ff bfb7 	b.w	3694 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    3726:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    3728:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    372a:	4718      	bx	r3

0000372c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    372c:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    372e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3732:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3734:	4c0c      	ldr	r4, [pc, #48]	; (3768 <EventResponder::runFromInterrupt()+0x3c>)
    3736:	6820      	ldr	r0, [r4, #0]
		if (first) {
    3738:	b180      	cbz	r0, 375c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    373a:	4e0c      	ldr	r6, [pc, #48]	; (376c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    373c:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    373e:	6943      	ldr	r3, [r0, #20]
    3740:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    3742:	b173      	cbz	r3, 3762 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    3744:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3746:	b902      	cbnz	r2, 374a <EventResponder::runFromInterrupt()+0x1e>
    3748:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    374a:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    374c:	6883      	ldr	r3, [r0, #8]
    374e:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3750:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3754:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3756:	6820      	ldr	r0, [r4, #0]
		if (first) {
    3758:	2800      	cmp	r0, #0
    375a:	d1f0      	bne.n	373e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    375c:	b902      	cbnz	r2, 3760 <EventResponder::runFromInterrupt()+0x34>
    375e:	b662      	cpsie	i
    3760:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3762:	6033      	str	r3, [r6, #0]
    3764:	e7ef      	b.n	3746 <EventResponder::runFromInterrupt()+0x1a>
    3766:	bf00      	nop
    3768:	1fff9414 	.word	0x1fff9414
    376c:	1fff9418 	.word	0x1fff9418

00003770 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3770:	f7ff bfdc 	b.w	372c <EventResponder::runFromInterrupt()>

00003774 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    3774:	4a18      	ldr	r2, [pc, #96]	; (37d8 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    3776:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    3778:	6814      	ldr	r4, [r2, #0]
    377a:	2c00      	cmp	r4, #0
    377c:	d027      	beq.n	37ce <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    377e:	6803      	ldr	r3, [r0, #0]
    3780:	6821      	ldr	r1, [r4, #0]
    3782:	428b      	cmp	r3, r1
    3784:	d20e      	bcs.n	37a4 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3786:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    3788:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    378a:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    378c:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    378e:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    3790:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    3792:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    3794:	2302      	movs	r3, #2
    3796:	7503      	strb	r3, [r0, #20]
}
    3798:	bc30      	pop	{r4, r5}
    379a:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    379c:	6811      	ldr	r1, [r2, #0]
    379e:	428b      	cmp	r3, r1
    37a0:	4614      	mov	r4, r2
    37a2:	d308      	bcc.n	37b6 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    37a4:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    37a6:	1a5b      	subs	r3, r3, r1
    37a8:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    37aa:	2a00      	cmp	r2, #0
    37ac:	d1f6      	bne.n	379c <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    37ae:	6082      	str	r2, [r0, #8]
		_prev = timer;
    37b0:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    37b2:	60a0      	str	r0, [r4, #8]
    37b4:	e7ee      	b.n	3794 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    37b6:	68d2      	ldr	r2, [r2, #12]
    37b8:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    37ba:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    37bc:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    37be:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    37c0:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    37c2:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    37c4:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    37c6:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    37c8:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    37ca:	bc30      	pop	{r4, r5}
    37cc:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    37ce:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    37d0:	60c4      	str	r4, [r0, #12]
		listActive = this;
    37d2:	6010      	str	r0, [r2, #0]
    37d4:	e7de      	b.n	3794 <MillisTimer::addToActiveList()+0x20>
    37d6:	bf00      	nop
    37d8:	1fff941c 	.word	0x1fff941c

000037dc <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    37dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    37de:	4e22      	ldr	r6, [pc, #136]	; (3868 <MillisTimer::runFromTimer()+0x8c>)
    37e0:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    37e2:	b32c      	cbz	r4, 3830 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    37e4:	6823      	ldr	r3, [r4, #0]
    37e6:	2b00      	cmp	r3, #0
    37e8:	d13a      	bne.n	3860 <MillisTimer::runFromTimer()+0x84>
    37ea:	4f20      	ldr	r7, [pc, #128]	; (386c <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    37ec:	461d      	mov	r5, r3
    37ee:	e004      	b.n	37fa <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    37f0:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    37f2:	b1ec      	cbz	r4, 3830 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    37f4:	6823      	ldr	r3, [r4, #0]
    37f6:	2b00      	cmp	r3, #0
    37f8:	d132      	bne.n	3860 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    37fa:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    37fc:	b103      	cbz	r3, 3800 <MillisTimer::runFromTimer()+0x24>
    37fe:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    3800:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    3802:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3804:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    3806:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3808:	681b      	ldr	r3, [r3, #0]
    380a:	42bb      	cmp	r3, r7
    380c:	d121      	bne.n	3852 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    380e:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    3810:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    3812:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    3814:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    3816:	d020      	beq.n	385a <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    3818:	f7ff ff3c 	bl	3694 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    381c:	6863      	ldr	r3, [r4, #4]
    381e:	2b00      	cmp	r3, #0
    3820:	d0e6      	beq.n	37f0 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    3822:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    3824:	4620      	mov	r0, r4
    3826:	f7ff ffa5 	bl	3774 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    382a:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    382c:	2c00      	cmp	r4, #0
    382e:	d1e1      	bne.n	37f4 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3830:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    3834:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3836:	4a0e      	ldr	r2, [pc, #56]	; (3870 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3838:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    383a:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    383c:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    383e:	b903      	cbnz	r3, 3842 <MillisTimer::runFromTimer()+0x66>
    3840:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    3842:	b128      	cbz	r0, 3850 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    3844:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    3846:	f7ff ff95 	bl	3774 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    384a:	4620      	mov	r0, r4
    384c:	2800      	cmp	r0, #0
    384e:	d1f9      	bne.n	3844 <MillisTimer::runFromTimer()+0x68>
    3850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    3852:	4622      	mov	r2, r4
    3854:	2100      	movs	r1, #0
    3856:	4798      	blx	r3
    3858:	e7e0      	b.n	381c <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    385a:	6883      	ldr	r3, [r0, #8]
    385c:	4798      	blx	r3
    385e:	e7dd      	b.n	381c <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    3860:	3b01      	subs	r3, #1
    3862:	6023      	str	r3, [r4, #0]
			break;
    3864:	e7e4      	b.n	3830 <MillisTimer::runFromTimer()+0x54>
    3866:	bf00      	nop
    3868:	1fff941c 	.word	0x1fff941c
    386c:	00003715 	.word	0x00003715
    3870:	1fff942c 	.word	0x1fff942c

00003874 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    3874:	4a02      	ldr	r2, [pc, #8]	; (3880 <systick_isr+0xc>)
    3876:	6813      	ldr	r3, [r2, #0]
    3878:	3301      	adds	r3, #1
    387a:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    387c:	f7ff bfae 	b.w	37dc <MillisTimer::runFromTimer()>
    3880:	1fff9314 	.word	0x1fff9314

00003884 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3884:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3886:	f7fd fd63 	bl	1350 <setup>
	while (1) {
		loop();
    388a:	f7fd fe55 	bl	1538 <loop>
		yield();
    388e:	f000 f871 	bl	3974 <yield>
    3892:	e7fa      	b.n	388a <main+0x6>

00003894 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    3894:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    3896:	4a06      	ldr	r2, [pc, #24]	; (38b0 <Print::println()+0x1c>)
	return write(buf, 2);
    3898:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    389a:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    389c:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    389e:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    38a0:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    38a2:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    38a6:	2202      	movs	r2, #2
    38a8:	4798      	blx	r3
}
    38aa:	b003      	add	sp, #12
    38ac:	f85d fb04 	ldr.w	pc, [sp], #4
    38b0:	0000439c 	.word	0x0000439c

000038b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    38b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    38b6:	4607      	mov	r7, r0
    38b8:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    38ba:	2a00      	cmp	r2, #0
    38bc:	d033      	beq.n	3926 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    38be:	2a01      	cmp	r2, #1
    38c0:	bf08      	it	eq
    38c2:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    38c4:	b351      	cbz	r1, 391c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    38c6:	2421      	movs	r4, #33	; 0x21
    38c8:	e000      	b.n	38cc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    38ca:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    38cc:	fbb1 f5f2 	udiv	r5, r1, r2
    38d0:	fb02 1115 	mls	r1, r2, r5, r1
    38d4:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    38d6:	2909      	cmp	r1, #9
    38d8:	f100 0130 	add.w	r1, r0, #48	; 0x30
    38dc:	bf98      	it	ls
    38de:	b2c8      	uxtbls	r0, r1
    38e0:	a90a      	add	r1, sp, #40	; 0x28
    38e2:	bf88      	it	hi
    38e4:	3037      	addhi	r0, #55	; 0x37
    38e6:	4421      	add	r1, r4
    38e8:	bf88      	it	hi
    38ea:	b2c0      	uxtbhi	r0, r0
    38ec:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    38f0:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    38f2:	4629      	mov	r1, r5
    38f4:	2d00      	cmp	r5, #0
    38f6:	d1e8      	bne.n	38ca <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    38f8:	b133      	cbz	r3, 3908 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    38fa:	3c01      	subs	r4, #1
    38fc:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    38fe:	ab0a      	add	r3, sp, #40	; 0x28
    3900:	4423      	add	r3, r4
    3902:	222d      	movs	r2, #45	; 0x2d
    3904:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    3908:	683b      	ldr	r3, [r7, #0]
    390a:	aa01      	add	r2, sp, #4
    390c:	1911      	adds	r1, r2, r4
    390e:	685b      	ldr	r3, [r3, #4]
    3910:	4638      	mov	r0, r7
    3912:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    3916:	4798      	blx	r3
}
    3918:	b00b      	add	sp, #44	; 0x2c
    391a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    391c:	2230      	movs	r2, #48	; 0x30
    391e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    3922:	2421      	movs	r4, #33	; 0x21
    3924:	e7e8      	b.n	38f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    3926:	6803      	ldr	r3, [r0, #0]
    3928:	b2c9      	uxtb	r1, r1
    392a:	681b      	ldr	r3, [r3, #0]
    392c:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    392e:	b00b      	add	sp, #44	; 0x2c
    3930:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3932:	bf00      	nop

00003934 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    3934:	2900      	cmp	r1, #0
		sign = '-';
		n = -n;
    3936:	bfba      	itte	lt
    3938:	4249      	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    393a:	232d      	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    393c:	2300      	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    393e:	220a      	movs	r2, #10
    3940:	f7ff bfb8 	b.w	38b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00003944 <Stream::setTimeout(unsigned long)>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    3944:	6081      	str	r1, [r0, #8]
    3946:	4770      	bx	lr

00003948 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3948:	f7ff bd84 	b.w	3454 <usb_serial_flush_input>

0000394c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    394c:	f7ff bd5c 	b.w	3408 <usb_serial_peekchar>

00003950 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3950:	f7ff bd36 	b.w	33c0 <usb_serial_getchar>

00003954 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3954:	f7ff bd70 	b.w	3438 <usb_serial_available>

00003958 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3958:	f7ff be4c 	b.w	35f4 <usb_serial_flush_output>

0000395c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    395c:	f7ff be26 	b.w	35ac <usb_serial_write_buffer_free>

00003960 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3960:	4608      	mov	r0, r1
    3962:	4611      	mov	r1, r2
    3964:	f7ff bd92 	b.w	348c <usb_serial_write>

00003968 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3968:	4608      	mov	r0, r1
    396a:	f7ff be13 	b.w	3594 <usb_serial_putchar>
    396e:	bf00      	nop

00003970 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    3970:	4770      	bx	lr
    3972:	bf00      	nop

00003974 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3974:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    3976:	4c22      	ldr	r4, [pc, #136]	; (3a00 <yield+0x8c>)
    3978:	7823      	ldrb	r3, [r4, #0]
    397a:	b103      	cbz	r3, 397e <yield+0xa>
    397c:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    397e:	2301      	movs	r3, #1
    3980:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3982:	f7ff fd59 	bl	3438 <usb_serial_available>
	if (Serial.available()) serialEvent();
    3986:	bb70      	cbnz	r0, 39e6 <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    3988:	f000 f868 	bl	3a5c <serial_available>
	if (Serial1.available()) serialEvent1();
    398c:	bb40      	cbnz	r0, 39e0 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    398e:	f000 f8fb 	bl	3b88 <serial2_available>
	if (Serial2.available()) serialEvent2();
    3992:	bb10      	cbnz	r0, 39da <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    3994:	f000 f98e 	bl	3cb4 <serial3_available>
	if (Serial3.available()) serialEvent3();
    3998:	b9e0      	cbnz	r0, 39d4 <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    399a:	2300      	movs	r3, #0
    399c:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    399e:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    39a2:	2b00      	cmp	r3, #0
    39a4:	d1ea      	bne.n	397c <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    39a6:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    39aa:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    39ac:	4b15      	ldr	r3, [pc, #84]	; (3a04 <yield+0x90>)
    39ae:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    39b0:	b1e0      	cbz	r0, 39ec <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    39b2:	4c15      	ldr	r4, [pc, #84]	; (3a08 <yield+0x94>)
    39b4:	7822      	ldrb	r2, [r4, #0]
    39b6:	b9ca      	cbnz	r2, 39ec <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    39b8:	6945      	ldr	r5, [r0, #20]
    39ba:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    39bc:	2301      	movs	r3, #1
    39be:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    39c0:	b1c5      	cbz	r5, 39f4 <yield+0x80>
			firstYield->_prev = nullptr;
    39c2:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    39c4:	b901      	cbnz	r1, 39c8 <yield+0x54>
    39c6:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    39c8:	2500      	movs	r5, #0
    39ca:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    39cc:	6883      	ldr	r3, [r0, #8]
    39ce:	4798      	blx	r3
		runningFromYield = false;
    39d0:	7025      	strb	r5, [r4, #0]
    39d2:	e7d3      	b.n	397c <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    39d4:	f000 fa30 	bl	3e38 <serialEvent3()>
    39d8:	e7df      	b.n	399a <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    39da:	f000 fa2b 	bl	3e34 <serialEvent2()>
    39de:	e7d9      	b.n	3994 <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    39e0:	f000 fa26 	bl	3e30 <serialEvent1()>
    39e4:	e7d3      	b.n	398e <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    39e6:	f7ff ffc3 	bl	3970 <serialEvent()>
    39ea:	e7cd      	b.n	3988 <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    39ec:	2900      	cmp	r1, #0
    39ee:	d1c5      	bne.n	397c <yield+0x8>
    39f0:	b662      	cpsie	i
    39f2:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    39f4:	4b05      	ldr	r3, [pc, #20]	; (3a0c <yield+0x98>)
    39f6:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    39f8:	2900      	cmp	r1, #0
    39fa:	d1e5      	bne.n	39c8 <yield+0x54>
    39fc:	e7e3      	b.n	39c6 <yield+0x52>
    39fe:	bf00      	nop
    3a00:	1fff9430 	.word	0x1fff9430
    3a04:	1fff9424 	.word	0x1fff9424
    3a08:	1fff9428 	.word	0x1fff9428
    3a0c:	1fff9420 	.word	0x1fff9420

00003a10 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3a10:	b4f0      	push	{r4, r5, r6, r7}
    3a12:	1e4d      	subs	r5, r1, #1
    3a14:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    3a16:	2400      	movs	r4, #0
    3a18:	e000      	b.n	3a1c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3a1a:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3a1c:	fbb0 f3f2 	udiv	r3, r0, r2
    3a20:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3a24:	2809      	cmp	r0, #9
    3a26:	f100 0730 	add.w	r7, r0, #48	; 0x30
    3a2a:	bf8a      	itet	hi
    3a2c:	3037      	addhi	r0, #55	; 0x37
    3a2e:	b2f8      	uxtbls	r0, r7
    3a30:	b2c0      	uxtbhi	r0, r0
    3a32:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    3a36:	4618      	mov	r0, r3
    3a38:	2b00      	cmp	r3, #0
    3a3a:	d1ee      	bne.n	3a1a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3a3c:	190a      	adds	r2, r1, r4
    3a3e:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3a40:	b14c      	cbz	r4, 3a56 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    3a42:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    3a44:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    3a48:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3a4a:	3301      	adds	r3, #1
    3a4c:	1ae0      	subs	r0, r4, r3
    3a4e:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3a50:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3a54:	dbf5      	blt.n	3a42 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3a56:	4608      	mov	r0, r1
    3a58:	bcf0      	pop	{r4, r5, r6, r7}
    3a5a:	4770      	bx	lr

00003a5c <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a5c:	4a05      	ldr	r2, [pc, #20]	; (3a74 <serial_available+0x18>)
	tail = rx_buffer_tail;
    3a5e:	4b06      	ldr	r3, [pc, #24]	; (3a78 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a60:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3a62:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3a64:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    3a66:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3a68:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    3a6a:	bf38      	it	cc
    3a6c:	3040      	addcc	r0, #64	; 0x40
    3a6e:	1ac0      	subs	r0, r0, r3
}
    3a70:	4770      	bx	lr
    3a72:	bf00      	nop
    3a74:	1fff9438 	.word	0x1fff9438
    3a78:	1fff9439 	.word	0x1fff9439

00003a7c <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    3a7c:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3a7e:	4b38      	ldr	r3, [pc, #224]	; (3b60 <uart0_status_isr+0xe4>)
    3a80:	791a      	ldrb	r2, [r3, #4]
    3a82:	f012 0f30 	tst.w	r2, #48	; 0x30
    3a86:	d02c      	beq.n	3ae2 <uart0_status_isr+0x66>
		__disable_irq();
    3a88:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    3a8a:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3a8c:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    3a90:	2900      	cmp	r1, #0
    3a92:	d03d      	beq.n	3b10 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3a94:	b662      	cpsie	i
			head = rx_buffer_head;
    3a96:	4f33      	ldr	r7, [pc, #204]	; (3b64 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3a98:	4933      	ldr	r1, [pc, #204]	; (3b68 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3a9a:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3a9c:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3a9e:	4e33      	ldr	r6, [pc, #204]	; (3b6c <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3aa0:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3aa2:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    3aa4:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    3aa6:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3aa8:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3aaa:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3aac:	bf28      	it	cs
    3aae:	2300      	movcs	r3, #0
				if (newhead != tail) {
    3ab0:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3ab2:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3ab6:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3ab8:	bf1c      	itt	ne
    3aba:	54f1      	strbne	r1, [r6, r3]
    3abc:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    3abe:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    3ac2:	d1f0      	bne.n	3aa6 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3ac4:	4b2a      	ldr	r3, [pc, #168]	; (3b70 <uart0_status_isr+0xf4>)
    3ac6:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3ac8:	b2c2      	uxtb	r2, r0
    3aca:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    3acc:	b14b      	cbz	r3, 3ae2 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3ace:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3ad0:	bf36      	itet	cc
    3ad2:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3ad6:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3ad8:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3ada:	2827      	cmp	r0, #39	; 0x27
    3adc:	bfc4      	itt	gt
    3ade:	2201      	movgt	r2, #1
    3ae0:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    3ae2:	491f      	ldr	r1, [pc, #124]	; (3b60 <uart0_status_isr+0xe4>)
    3ae4:	78ca      	ldrb	r2, [r1, #3]
    3ae6:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3ae8:	0615      	lsls	r5, r2, #24
    3aea:	d416      	bmi.n	3b1a <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    3aec:	0652      	lsls	r2, r2, #25
    3aee:	d50d      	bpl.n	3b0c <uart0_status_isr+0x90>
    3af0:	4b1b      	ldr	r3, [pc, #108]	; (3b60 <uart0_status_isr+0xe4>)
    3af2:	791b      	ldrb	r3, [r3, #4]
    3af4:	065b      	lsls	r3, r3, #25
    3af6:	d509      	bpl.n	3b0c <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3af8:	4b1e      	ldr	r3, [pc, #120]	; (3b74 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3afa:	491f      	ldr	r1, [pc, #124]	; (3b78 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3afc:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    3afe:	2200      	movs	r2, #0
    3b00:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3b02:	b103      	cbz	r3, 3b06 <uart0_status_isr+0x8a>
    3b04:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    3b06:	4b16      	ldr	r3, [pc, #88]	; (3b60 <uart0_status_isr+0xe4>)
    3b08:	223c      	movs	r2, #60	; 0x3c
    3b0a:	70da      	strb	r2, [r3, #3]
	}
}
    3b0c:	bcf0      	pop	{r4, r5, r6, r7}
    3b0e:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3b10:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    3b12:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    3b14:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    3b16:	b662      	cpsie	i
    3b18:	e7e3      	b.n	3ae2 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3b1a:	790b      	ldrb	r3, [r1, #4]
    3b1c:	061c      	lsls	r4, r3, #24
    3b1e:	d5e5      	bpl.n	3aec <uart0_status_isr+0x70>
		head = tx_buffer_head;
    3b20:	4b16      	ldr	r3, [pc, #88]	; (3b7c <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    3b22:	4e17      	ldr	r6, [pc, #92]	; (3b80 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3b24:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3b26:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3b28:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    3b2a:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    3b2c:	429c      	cmp	r4, r3
    3b2e:	d00e      	beq.n	3b4e <uart0_status_isr+0xd2>
    3b30:	4d14      	ldr	r5, [pc, #80]	; (3b84 <uart0_status_isr+0x108>)
    3b32:	e001      	b.n	3b38 <uart0_status_isr+0xbc>
    3b34:	42a3      	cmp	r3, r4
    3b36:	d00a      	beq.n	3b4e <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    3b38:	3301      	adds	r3, #1
    3b3a:	2b40      	cmp	r3, #64	; 0x40
    3b3c:	bf28      	it	cs
    3b3e:	2300      	movcs	r3, #0
			avail = UART0_S1;
    3b40:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3b42:	5ce8      	ldrb	r0, [r5, r3]
    3b44:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    3b46:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    3b48:	7d08      	ldrb	r0, [r1, #20]
    3b4a:	2807      	cmp	r0, #7
    3b4c:	d9f2      	bls.n	3b34 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    3b4e:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3b50:	4903      	ldr	r1, [pc, #12]	; (3b60 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    3b52:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    3b54:	790b      	ldrb	r3, [r1, #4]
    3b56:	0618      	lsls	r0, r3, #24
    3b58:	bf44      	itt	mi
    3b5a:	237c      	movmi	r3, #124	; 0x7c
    3b5c:	70cb      	strbmi	r3, [r1, #3]
    3b5e:	e7c5      	b.n	3aec <uart0_status_isr+0x70>
    3b60:	4006a000 	.word	0x4006a000
    3b64:	1fff9438 	.word	0x1fff9438
    3b68:	1fff9439 	.word	0x1fff9439
    3b6c:	1fff947c 	.word	0x1fff947c
    3b70:	1fff9434 	.word	0x1fff9434
    3b74:	1fff94c0 	.word	0x1fff94c0
    3b78:	1fff94bc 	.word	0x1fff94bc
    3b7c:	1fff94c4 	.word	0x1fff94c4
    3b80:	1fff94bd 	.word	0x1fff94bd
    3b84:	1fff943c 	.word	0x1fff943c

00003b88 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b88:	4a05      	ldr	r2, [pc, #20]	; (3ba0 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    3b8a:	4b06      	ldr	r3, [pc, #24]	; (3ba4 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b8c:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3b8e:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3b90:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    3b92:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3b94:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    3b96:	bf38      	it	cc
    3b98:	3040      	addcc	r0, #64	; 0x40
    3b9a:	1ac0      	subs	r0, r0, r3
}
    3b9c:	4770      	bx	lr
    3b9e:	bf00      	nop
    3ba0:	1fff9538 	.word	0x1fff9538
    3ba4:	1fff94cd 	.word	0x1fff94cd

00003ba8 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    3ba8:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3baa:	4b38      	ldr	r3, [pc, #224]	; (3c8c <uart1_status_isr+0xe4>)
    3bac:	791a      	ldrb	r2, [r3, #4]
    3bae:	f012 0f30 	tst.w	r2, #48	; 0x30
    3bb2:	d02c      	beq.n	3c0e <uart1_status_isr+0x66>
		__disable_irq();
    3bb4:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    3bb6:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    3bb8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    3bbc:	2900      	cmp	r1, #0
    3bbe:	d03d      	beq.n	3c3c <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    3bc0:	b662      	cpsie	i
			head = rx_buffer_head;
    3bc2:	4f33      	ldr	r7, [pc, #204]	; (3c90 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    3bc4:	4933      	ldr	r1, [pc, #204]	; (3c94 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3bc6:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    3bc8:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3bca:	4e33      	ldr	r6, [pc, #204]	; (3c98 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3bcc:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    3bce:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    3bd0:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    3bd2:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3bd4:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3bd6:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    3bd8:	bf28      	it	cs
    3bda:	2300      	movcs	r3, #0
				if (newhead != tail) {
    3bdc:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3bde:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3be2:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3be4:	bf1c      	itt	ne
    3be6:	54f1      	strbne	r1, [r6, r3]
    3be8:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    3bea:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    3bee:	d1f0      	bne.n	3bd2 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    3bf0:	4b2a      	ldr	r3, [pc, #168]	; (3c9c <uart1_status_isr+0xf4>)
    3bf2:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    3bf4:	b2c2      	uxtb	r2, r0
    3bf6:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    3bf8:	b14b      	cbz	r3, 3c0e <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    3bfa:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3bfc:	bf36      	itet	cc
    3bfe:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    3c02:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3c04:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3c06:	2827      	cmp	r0, #39	; 0x27
    3c08:	bfc4      	itt	gt
    3c0a:	2201      	movgt	r2, #1
    3c0c:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    3c0e:	491f      	ldr	r1, [pc, #124]	; (3c8c <uart1_status_isr+0xe4>)
    3c10:	78ca      	ldrb	r2, [r1, #3]
    3c12:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3c14:	0615      	lsls	r5, r2, #24
    3c16:	d416      	bmi.n	3c46 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    3c18:	0652      	lsls	r2, r2, #25
    3c1a:	d50d      	bpl.n	3c38 <uart1_status_isr+0x90>
    3c1c:	4b1b      	ldr	r3, [pc, #108]	; (3c8c <uart1_status_isr+0xe4>)
    3c1e:	791b      	ldrb	r3, [r3, #4]
    3c20:	065b      	lsls	r3, r3, #25
    3c22:	d509      	bpl.n	3c38 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3c24:	4b1e      	ldr	r3, [pc, #120]	; (3ca0 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3c26:	491f      	ldr	r1, [pc, #124]	; (3ca4 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    3c28:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    3c2a:	2200      	movs	r2, #0
    3c2c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3c2e:	b103      	cbz	r3, 3c32 <uart1_status_isr+0x8a>
    3c30:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    3c32:	4b16      	ldr	r3, [pc, #88]	; (3c8c <uart1_status_isr+0xe4>)
    3c34:	223c      	movs	r2, #60	; 0x3c
    3c36:	70da      	strb	r2, [r3, #3]
	}
}
    3c38:	bcf0      	pop	{r4, r5, r6, r7}
    3c3a:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3c3c:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    3c3e:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    3c40:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    3c42:	b662      	cpsie	i
    3c44:	e7e3      	b.n	3c0e <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3c46:	790b      	ldrb	r3, [r1, #4]
    3c48:	061c      	lsls	r4, r3, #24
    3c4a:	d5e5      	bpl.n	3c18 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    3c4c:	4b16      	ldr	r3, [pc, #88]	; (3ca8 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    3c4e:	4e17      	ldr	r6, [pc, #92]	; (3cac <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3c50:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    3c52:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3c54:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    3c56:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    3c58:	429c      	cmp	r4, r3
    3c5a:	d00e      	beq.n	3c7a <uart1_status_isr+0xd2>
    3c5c:	4d14      	ldr	r5, [pc, #80]	; (3cb0 <uart1_status_isr+0x108>)
    3c5e:	e001      	b.n	3c64 <uart1_status_isr+0xbc>
    3c60:	42a3      	cmp	r3, r4
    3c62:	d00a      	beq.n	3c7a <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    3c64:	3301      	adds	r3, #1
    3c66:	2b28      	cmp	r3, #40	; 0x28
    3c68:	bf28      	it	cs
    3c6a:	2300      	movcs	r3, #0
			avail = UART1_S1;
    3c6c:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    3c6e:	5ce8      	ldrb	r0, [r5, r3]
    3c70:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    3c72:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    3c74:	7d08      	ldrb	r0, [r1, #20]
    3c76:	2807      	cmp	r0, #7
    3c78:	d9f2      	bls.n	3c60 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    3c7a:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3c7c:	4903      	ldr	r1, [pc, #12]	; (3c8c <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    3c7e:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    3c80:	790b      	ldrb	r3, [r1, #4]
    3c82:	0618      	lsls	r0, r3, #24
    3c84:	bf44      	itt	mi
    3c86:	237c      	movmi	r3, #124	; 0x7c
    3c88:	70cb      	strbmi	r3, [r1, #3]
    3c8a:	e7c5      	b.n	3c18 <uart1_status_isr+0x70>
    3c8c:	4006b000 	.word	0x4006b000
    3c90:	1fff9538 	.word	0x1fff9538
    3c94:	1fff94cd 	.word	0x1fff94cd
    3c98:	1fff94f8 	.word	0x1fff94f8
    3c9c:	1fff94c8 	.word	0x1fff94c8
    3ca0:	1fff953c 	.word	0x1fff953c
    3ca4:	1fff94cc 	.word	0x1fff94cc
    3ca8:	1fff9540 	.word	0x1fff9540
    3cac:	1fff9539 	.word	0x1fff9539
    3cb0:	1fff94d0 	.word	0x1fff94d0

00003cb4 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3cb4:	4a05      	ldr	r2, [pc, #20]	; (3ccc <serial3_available+0x18>)
	tail = rx_buffer_tail;
    3cb6:	4b06      	ldr	r3, [pc, #24]	; (3cd0 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3cb8:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    3cba:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3cbc:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    3cbe:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3cc0:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3cc2:	bf38      	it	cc
    3cc4:	3040      	addcc	r0, #64	; 0x40
    3cc6:	1ac0      	subs	r0, r0, r3
}
    3cc8:	4770      	bx	lr
    3cca:	bf00      	nop
    3ccc:	1fff9548 	.word	0x1fff9548
    3cd0:	1fff9549 	.word	0x1fff9549

00003cd4 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    3cd4:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    3cd6:	4b2b      	ldr	r3, [pc, #172]	; (3d84 <uart2_status_isr+0xb0>)
    3cd8:	791a      	ldrb	r2, [r3, #4]
    3cda:	0694      	lsls	r4, r2, #26
    3cdc:	d51f      	bpl.n	3d1e <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3cde:	482a      	ldr	r0, [pc, #168]	; (3d88 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3ce0:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    3ce2:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3ce4:	4929      	ldr	r1, [pc, #164]	; (3d8c <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3ce6:	3301      	adds	r3, #1
    3ce8:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cea:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    3cec:	bfc8      	it	gt
    3cee:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cf0:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    3cf2:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    3cf4:	d003      	beq.n	3cfe <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    3cf6:	4c26      	ldr	r4, [pc, #152]	; (3d90 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    3cf8:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    3cfa:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    3cfc:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    3cfe:	4a25      	ldr	r2, [pc, #148]	; (3d94 <uart2_status_isr+0xc0>)
    3d00:	6811      	ldr	r1, [r2, #0]
    3d02:	b161      	cbz	r1, 3d1e <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    3d04:	4a24      	ldr	r2, [pc, #144]	; (3d98 <uart2_status_isr+0xc4>)
    3d06:	7812      	ldrb	r2, [r2, #0]
    3d08:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    3d0a:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3d0c:	bf36      	itet	cc
    3d0e:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    3d12:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    3d14:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3d16:	2b27      	cmp	r3, #39	; 0x27
    3d18:	bfc4      	itt	gt
    3d1a:	2301      	movgt	r3, #1
    3d1c:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    3d1e:	4a19      	ldr	r2, [pc, #100]	; (3d84 <uart2_status_isr+0xb0>)
    3d20:	78d3      	ldrb	r3, [r2, #3]
    3d22:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3d24:	0618      	lsls	r0, r3, #24
    3d26:	d411      	bmi.n	3d4c <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    3d28:	065a      	lsls	r2, r3, #25
    3d2a:	d50d      	bpl.n	3d48 <uart2_status_isr+0x74>
    3d2c:	4b15      	ldr	r3, [pc, #84]	; (3d84 <uart2_status_isr+0xb0>)
    3d2e:	791b      	ldrb	r3, [r3, #4]
    3d30:	065b      	lsls	r3, r3, #25
    3d32:	d509      	bpl.n	3d48 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    3d34:	4b19      	ldr	r3, [pc, #100]	; (3d9c <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3d36:	491a      	ldr	r1, [pc, #104]	; (3da0 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    3d38:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    3d3a:	2200      	movs	r2, #0
    3d3c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    3d3e:	b103      	cbz	r3, 3d42 <uart2_status_isr+0x6e>
    3d40:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3d42:	4b10      	ldr	r3, [pc, #64]	; (3d84 <uart2_status_isr+0xb0>)
    3d44:	222c      	movs	r2, #44	; 0x2c
    3d46:	70da      	strb	r2, [r3, #3]
	}
}
    3d48:	bc30      	pop	{r4, r5}
    3d4a:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    3d4c:	7911      	ldrb	r1, [r2, #4]
    3d4e:	0609      	lsls	r1, r1, #24
    3d50:	d5ea      	bpl.n	3d28 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    3d52:	4914      	ldr	r1, [pc, #80]	; (3da4 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    3d54:	4810      	ldr	r0, [pc, #64]	; (3d98 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    3d56:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    3d58:	7801      	ldrb	r1, [r0, #0]
    3d5a:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    3d5c:	428c      	cmp	r4, r1
    3d5e:	d00d      	beq.n	3d7c <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    3d60:	1c4a      	adds	r2, r1, #1
    3d62:	2a27      	cmp	r2, #39	; 0x27
    3d64:	bf84      	itt	hi
    3d66:	2100      	movhi	r1, #0
    3d68:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    3d6a:	4d0f      	ldr	r5, [pc, #60]	; (3da8 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3d6c:	4c05      	ldr	r4, [pc, #20]	; (3d84 <uart2_status_isr+0xb0>)
    3d6e:	bf98      	it	ls
    3d70:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    3d72:	5caa      	ldrb	r2, [r5, r2]
    3d74:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    3d76:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    3d78:	7001      	strb	r1, [r0, #0]
    3d7a:	e7d5      	b.n	3d28 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    3d7c:	216c      	movs	r1, #108	; 0x6c
    3d7e:	70d1      	strb	r1, [r2, #3]
    3d80:	e7d2      	b.n	3d28 <uart2_status_isr+0x54>
    3d82:	bf00      	nop
    3d84:	4006c000 	.word	0x4006c000
    3d88:	1fff9548 	.word	0x1fff9548
    3d8c:	1fff9549 	.word	0x1fff9549
    3d90:	1fff9574 	.word	0x1fff9574
    3d94:	1fff9544 	.word	0x1fff9544
    3d98:	1fff95b5 	.word	0x1fff95b5
    3d9c:	1fff95b8 	.word	0x1fff95b8
    3da0:	1fff95b4 	.word	0x1fff95b4
    3da4:	1fff95bc 	.word	0x1fff95bc
    3da8:	1fff954c 	.word	0x1fff954c

00003dac <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3dac:	b570      	push	{r4, r5, r6, lr}
    3dae:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3db0:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3db2:	4b19      	ldr	r3, [pc, #100]	; (3e18 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    3db4:	4d19      	ldr	r5, [pc, #100]	; (3e1c <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    3db6:	481a      	ldr	r0, [pc, #104]	; (3e20 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3db8:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    3dba:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    3dbc:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3dbe:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3dc0:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    3dc2:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3dc4:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    3dc6:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3dc8:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3dca:	7813      	ldrb	r3, [r2, #0]
    3dcc:	061b      	lsls	r3, r3, #24
    3dce:	d5fc      	bpl.n	3dca <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    3dd0:	4b14      	ldr	r3, [pc, #80]	; (3e24 <usb_init_serialnumber+0x78>)
    3dd2:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    3dd4:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3dd6:	4b14      	ldr	r3, [pc, #80]	; (3e28 <usb_init_serialnumber+0x7c>)
    3dd8:	4c14      	ldr	r4, [pc, #80]	; (3e2c <usb_init_serialnumber+0x80>)
    3dda:	4298      	cmp	r0, r3
    3ddc:	bf98      	it	ls
    3dde:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    3de2:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3de4:	bf98      	it	ls
    3de6:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    3de8:	220a      	movs	r2, #10
    3dea:	f7ff fe11 	bl	3a10 <ultoa>
    3dee:	a901      	add	r1, sp, #4
    3df0:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    3df2:	2300      	movs	r3, #0
		char c = buf[i];
    3df4:	f811 2b01 	ldrb.w	r2, [r1], #1
    3df8:	3301      	adds	r3, #1
		if (!c) break;
    3dfa:	b13a      	cbz	r2, 3e0c <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3dfc:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3dfe:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3e02:	d1f7      	bne.n	3df4 <usb_init_serialnumber+0x48>
    3e04:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3e06:	7023      	strb	r3, [r4, #0]
}
    3e08:	b004      	add	sp, #16
    3e0a:	bd70      	pop	{r4, r5, r6, pc}
    3e0c:	005b      	lsls	r3, r3, #1
    3e0e:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3e10:	7023      	strb	r3, [r4, #0]
}
    3e12:	b004      	add	sp, #16
    3e14:	bd70      	pop	{r4, r5, r6, pc}
    3e16:	bf00      	nop
    3e18:	40020000 	.word	0x40020000
    3e1c:	40020007 	.word	0x40020007
    3e20:	40020006 	.word	0x40020006
    3e24:	40020008 	.word	0x40020008
    3e28:	0098967f 	.word	0x0098967f
    3e2c:	1fff87c4 	.word	0x1fff87c4

00003e30 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    3e30:	4770      	bx	lr
    3e32:	bf00      	nop

00003e34 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    3e34:	4770      	bx	lr
    3e36:	bf00      	nop

00003e38 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    3e38:	4770      	bx	lr
    3e3a:	bf00      	nop

00003e3c <__libc_init_array>:
    3e3c:	b570      	push	{r4, r5, r6, lr}
    3e3e:	4e0f      	ldr	r6, [pc, #60]	; (3e7c <__libc_init_array+0x40>)
    3e40:	4d0f      	ldr	r5, [pc, #60]	; (3e80 <__libc_init_array+0x44>)
    3e42:	1b76      	subs	r6, r6, r5
    3e44:	10b6      	asrs	r6, r6, #2
    3e46:	bf18      	it	ne
    3e48:	2400      	movne	r4, #0
    3e4a:	d005      	beq.n	3e58 <__libc_init_array+0x1c>
    3e4c:	3401      	adds	r4, #1
    3e4e:	f855 3b04 	ldr.w	r3, [r5], #4
    3e52:	4798      	blx	r3
    3e54:	42a6      	cmp	r6, r4
    3e56:	d1f9      	bne.n	3e4c <__libc_init_array+0x10>
    3e58:	4e0a      	ldr	r6, [pc, #40]	; (3e84 <__libc_init_array+0x48>)
    3e5a:	4d0b      	ldr	r5, [pc, #44]	; (3e88 <__libc_init_array+0x4c>)
    3e5c:	1b76      	subs	r6, r6, r5
    3e5e:	f000 fadf 	bl	4420 <_init>
    3e62:	10b6      	asrs	r6, r6, #2
    3e64:	bf18      	it	ne
    3e66:	2400      	movne	r4, #0
    3e68:	d006      	beq.n	3e78 <__libc_init_array+0x3c>
    3e6a:	3401      	adds	r4, #1
    3e6c:	f855 3b04 	ldr.w	r3, [r5], #4
    3e70:	4798      	blx	r3
    3e72:	42a6      	cmp	r6, r4
    3e74:	d1f9      	bne.n	3e6a <__libc_init_array+0x2e>
    3e76:	bd70      	pop	{r4, r5, r6, pc}
    3e78:	bd70      	pop	{r4, r5, r6, pc}
    3e7a:	bf00      	nop
    3e7c:	0000442c 	.word	0x0000442c
    3e80:	0000442c 	.word	0x0000442c
    3e84:	00004440 	.word	0x00004440
    3e88:	0000442c 	.word	0x0000442c

00003e8c <memset>:
    3e8c:	b470      	push	{r4, r5, r6}
    3e8e:	0784      	lsls	r4, r0, #30
    3e90:	d046      	beq.n	3f20 <memset+0x94>
    3e92:	1e54      	subs	r4, r2, #1
    3e94:	2a00      	cmp	r2, #0
    3e96:	d041      	beq.n	3f1c <memset+0x90>
    3e98:	b2cd      	uxtb	r5, r1
    3e9a:	4603      	mov	r3, r0
    3e9c:	e002      	b.n	3ea4 <memset+0x18>
    3e9e:	1e62      	subs	r2, r4, #1
    3ea0:	b3e4      	cbz	r4, 3f1c <memset+0x90>
    3ea2:	4614      	mov	r4, r2
    3ea4:	f803 5b01 	strb.w	r5, [r3], #1
    3ea8:	079a      	lsls	r2, r3, #30
    3eaa:	d1f8      	bne.n	3e9e <memset+0x12>
    3eac:	2c03      	cmp	r4, #3
    3eae:	d92e      	bls.n	3f0e <memset+0x82>
    3eb0:	b2cd      	uxtb	r5, r1
    3eb2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    3eb6:	2c0f      	cmp	r4, #15
    3eb8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    3ebc:	d919      	bls.n	3ef2 <memset+0x66>
    3ebe:	f103 0210 	add.w	r2, r3, #16
    3ec2:	4626      	mov	r6, r4
    3ec4:	3e10      	subs	r6, #16
    3ec6:	2e0f      	cmp	r6, #15
    3ec8:	f842 5c10 	str.w	r5, [r2, #-16]
    3ecc:	f842 5c0c 	str.w	r5, [r2, #-12]
    3ed0:	f842 5c08 	str.w	r5, [r2, #-8]
    3ed4:	f842 5c04 	str.w	r5, [r2, #-4]
    3ed8:	f102 0210 	add.w	r2, r2, #16
    3edc:	d8f2      	bhi.n	3ec4 <memset+0x38>
    3ede:	f1a4 0210 	sub.w	r2, r4, #16
    3ee2:	f022 020f 	bic.w	r2, r2, #15
    3ee6:	f004 040f 	and.w	r4, r4, #15
    3eea:	3210      	adds	r2, #16
    3eec:	2c03      	cmp	r4, #3
    3eee:	4413      	add	r3, r2
    3ef0:	d90d      	bls.n	3f0e <memset+0x82>
    3ef2:	461e      	mov	r6, r3
    3ef4:	4622      	mov	r2, r4
    3ef6:	3a04      	subs	r2, #4
    3ef8:	2a03      	cmp	r2, #3
    3efa:	f846 5b04 	str.w	r5, [r6], #4
    3efe:	d8fa      	bhi.n	3ef6 <memset+0x6a>
    3f00:	1f22      	subs	r2, r4, #4
    3f02:	f022 0203 	bic.w	r2, r2, #3
    3f06:	3204      	adds	r2, #4
    3f08:	4413      	add	r3, r2
    3f0a:	f004 0403 	and.w	r4, r4, #3
    3f0e:	b12c      	cbz	r4, 3f1c <memset+0x90>
    3f10:	b2c9      	uxtb	r1, r1
    3f12:	441c      	add	r4, r3
    3f14:	f803 1b01 	strb.w	r1, [r3], #1
    3f18:	42a3      	cmp	r3, r4
    3f1a:	d1fb      	bne.n	3f14 <memset+0x88>
    3f1c:	bc70      	pop	{r4, r5, r6}
    3f1e:	4770      	bx	lr
    3f20:	4614      	mov	r4, r2
    3f22:	4603      	mov	r3, r0
    3f24:	e7c2      	b.n	3eac <memset+0x20>
    3f26:	bf00      	nop

00003f28 <random>:
    3f28:	b410      	push	{r4}
    3f2a:	4b0c      	ldr	r3, [pc, #48]	; (3f5c <random+0x34>)
    3f2c:	4c0c      	ldr	r4, [pc, #48]	; (3f60 <random+0x38>)
    3f2e:	6819      	ldr	r1, [r3, #0]
    3f30:	4a0c      	ldr	r2, [pc, #48]	; (3f64 <random+0x3c>)
    3f32:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
    3f36:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
    3f3a:	fb04 f403 	mul.w	r4, r4, r3
    3f3e:	fb02 4000 	mla	r0, r2, r0, r4
    3f42:	fba3 2302 	umull	r2, r3, r3, r2
    3f46:	4403      	add	r3, r0
    3f48:	3201      	adds	r2, #1
    3f4a:	f143 0300 	adc.w	r3, r3, #0
    3f4e:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    3f52:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    3f56:	bc10      	pop	{r4}
    3f58:	4770      	bx	lr
    3f5a:	bf00      	nop
    3f5c:	1fff8c08 	.word	0x1fff8c08
    3f60:	5851f42d 	.word	0x5851f42d
    3f64:	4c957f2d 	.word	0x4c957f2d

00003f68 <register_fini>:
    3f68:	4b02      	ldr	r3, [pc, #8]	; (3f74 <register_fini+0xc>)
    3f6a:	b113      	cbz	r3, 3f72 <register_fini+0xa>
    3f6c:	4802      	ldr	r0, [pc, #8]	; (3f78 <register_fini+0x10>)
    3f6e:	f7fd be7d 	b.w	1c6c <atexit>
    3f72:	4770      	bx	lr
    3f74:	00000000 	.word	0x00000000
    3f78:	00003f7d 	.word	0x00003f7d

00003f7c <__libc_fini_array>:
    3f7c:	b538      	push	{r3, r4, r5, lr}
    3f7e:	4d07      	ldr	r5, [pc, #28]	; (3f9c <__libc_fini_array+0x20>)
    3f80:	4c07      	ldr	r4, [pc, #28]	; (3fa0 <__libc_fini_array+0x24>)
    3f82:	1b2c      	subs	r4, r5, r4
    3f84:	10a4      	asrs	r4, r4, #2
    3f86:	d005      	beq.n	3f94 <__libc_fini_array+0x18>
    3f88:	3c01      	subs	r4, #1
    3f8a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    3f8e:	4798      	blx	r3
    3f90:	2c00      	cmp	r4, #0
    3f92:	d1f9      	bne.n	3f88 <__libc_fini_array+0xc>
    3f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3f98:	f000 ba52 	b.w	4440 <__init_array_end>
	...

00003fa4 <vtable for APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, (unsigned char)4>>:
	...
    3fac:	05c9 0000 068d 0000 0491 0000 04cd 0000     ................
    3fbc:	046d 0000 0471 0000 0751 0000               m...q...Q...

00003fc8 <sin16_C(unsigned short)::base>:
    3fc8:	0000 18f9 30fb 471c 5a82 6a6d 7641 7d89     .....0.G.ZmjAv.}

00003fd8 <sin16_C(unsigned short)::slope>:
    3fd8:	3031 262c 171f 040e 3d3d 3d3d 3d3d 3d3d     10,&....========
    3fe8:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 0000     ==============..
    3ff8:	454c 2044 7241 6172 3a79 2020 2020 2020     LED Array:      
    4008:	2020 2020 2020 0000 5543 5252 4e45 0054           ..CURRENT.
    4018:	454e 5458 0000 0000 7242 6769 7468 656e     NEXT....Brightne
    4028:	7373 203a 2020 2020 2020 2020 2020 0000     ss:           ..
    4038:	6564 616c 5f79 6974 656d 203a 2020 2020     delay_time:     
    4048:	2020 2020 2020 0000 7375 5f65 6170 656c           ..use_pale
    4058:	7474 3a65 2020 2020 2020 2020 2020 0000     tte:          ..
    4068:	7375 5f65 7566 6c6c 725f 6e61 6567 203a     use_full_range: 
    4078:	2020 2020 2020 0000 6874 7369 645f 7269           ..this_dir
    4088:	203a 2020 2020 2020 2020 2020 2020 0000     :             ..
    4098:	7563 7272 6e65 5f74 6f6d 6564 6e5f 6d75     current_mode_num
    40a8:	6562 3a72 2020 0000 6f6d 6564 695f 696e     ber:  ..mode_ini
    40b8:	6974 6c61 7a69 6465 203a 2020 2020 0000     tialized:     ..
    40c8:	3d3d 4a3d 4755 4c47 2045 4156 4952 4241     ===JUGGLE VARIAB
    40d8:	454c 3d53 3d3d 0000 6e69 6564 3a78 2020     LES===..index:  
    40e8:	2020 2020 2020 0020 756e 646d 746f 3a73            .numdots:
    40f8:	2020 2020 2020 0020 6562 7461 203a 2020            .beat:   
    4108:	2020 2020 2020 0020 6166 6564 203a 2020            .fade:   
    4118:	2020 2020 2020 0020 6964 6666 203a 2020            .diff:   
    4128:	2020 2020 2020 0020 6e69 6564 5f78 6572            .index_re
    4138:	6573 3a74 2020 0020 554a 4747 454c 4920     set:   .JUGGLE I
    4148:	494e 2054 4542 4947 004e 0000 554a 4747     NIT BEGIN...JUGG
    4158:	454c 4920 494e 2054 4f43 504d 454c 4554     LE INIT COMPLETE
    4168:	0000 0000 4d56 5044 5f56 7c31 5f31 4d56     ....VMDPV_1|1_VM
    4178:	5044 0a56 0000 0000 4544 5542 2047 4e4f     DPV.....DEBUG ON
    4188:	0000 0000 454c 7344 4120 4444 4445 0000     ....LEDs ADDED..
    4198:	4553 5554 2050 4f43 504d 454c 4554 ff00     SETUP COMPLETE..

000041a8 <Colorfull_gp>:
    41a8:	0a00 0555 1d19 126d 3b3c 2a8a 535d 3463     ..U...m.<;.*]Sc4
    41b8:	6e6a 4042 7b6d 4131 8b71 4223 c074 6275     jnB@m{1Aq.#Bt.ub
    41c8:	ff7c 89ff 64a8 9bb4 16ff ae79               |....d....y.

000041d4 <Magenta_Evening_gp>:
    41d4:	4700 271b 821f 330b d53f 4002 e846 4201     .G.'...3?..@F..B
    41e4:	fc4c 4501 7b6c 3302 2eff 2309 4d56 5044     L..El{.3...#VMDP
    41f4:	5f45 0000 323a 003a 003a 0000 565f 444d     E_..:2:.:..._VMD
    4204:	4550 0000 4d56 5044 5f43 0000 565f 444d     PE..VMDPC_.._VMD
    4214:	4350 0000 7245 6f72 3a72 4120 7474 6d65     PC..Error: Attem
    4224:	7470 7420 206f 6573 2074 2061 6572 6461     pt to set a read
    4234:	6f2d 6c6e 2079 6176 6972 6261 656c 6f20     -only variable o
    4244:	2072 6164 6174 7420 7079 2065 6f6e 2074     r data type not 
    4254:	7573 7070 726f 6574 0d64 000a               supported...

00004260 <pin2sc1a>:
    4260:	0e05 0908 0c0d 0706 040f 1300 9303 0e05     ................
    4270:	0908 0c0d 0706 040f ffff 85c5 8684 c487     ................
    4280:	ffff 1300 9303 921a ff17 ffff               ............

0000428c <digital_pin_to_info_PGM>:
    428c:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
    429c:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
    42ac:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
    42bc:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
    42cc:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
    42dc:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
    42ec:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
    42fc:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
    430c:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
    431c:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
    432c:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
    433c:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
    434c:	0014 43fe 9014 4004 084c 43fe a04c 4004     ...C...@L..CL..@
    435c:	2004 43fe d004 4004 1024 43fe b024 4004     . .C...@$..C$..@
    436c:	1020 43fe b020 4004 1028 43fe b028 4004      ..C ..@(..C(..@
    437c:	102c 43fe b02c 4004 2000 43fe d000 4004     ,..C,..@. .C...@
    438c:	0848 43fe a048 4004 0010 43fe 9010 4004     H..CH..@...C...@
    439c:	0a0d ffff                                   ....

000043a0 <vtable for usb_serial_class>:
	...
    43a8:	3969 0000 3961 0000 395d 0000 3959 0000     i9..a9..]9..Y9..
    43b8:	3955 0000 3951 0000 394d 0000 3949 0000     U9..Q9..M9..I9..

000043c8 <usb_endpoint_config_table>:
    43c8:	1500 1519                                   ....

000043cc <usb_descriptor_list>:
    43cc:	0100 0000 8738 1fff 0012 0000 0200 0000     ....8...........
    43dc:	8764 1fff 0043 0000 0300 0000 87c0 1fff     d...C...........
    43ec:	0000 0000 0301 0409 874c 1fff 0000 0000     ........L.......
    43fc:	0302 0409 87a8 1fff 0000 0000 0303 0409     ................
    440c:	87c4 1fff 0000 0000 0000 0000 0000 0000     ................
    441c:	0000 0000                                   ....

00004420 <_init>:
    4420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4422:	bf00      	nop
    4424:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4426:	bc08      	pop	{r3}
    4428:	469e      	mov	lr, r3
    442a:	4770      	bx	lr

0000442c <__init_array_start>:
    442c:	00003f69 	.word	0x00003f69

00004430 <__frame_dummy_init_array_entry>:
    4430:	00000435 000016f5 00001c71 00001fc9     5.......q.......

Disassembly of section .fini:

00004440 <_fini>:
    4440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4442:	bf00      	nop
