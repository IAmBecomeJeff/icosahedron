
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\kitchen_lights2\teensy31\Debug/kitchen_lights2.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 41 a5 00 00 f9 a4 00 00     ... ....A.......
      10:	f9 a4 00 00 f9 a4 00 00 f9 a4 00 00 f9 a4 00 00     ................
      20:	f9 a4 00 00 f9 a4 00 00 f9 a4 00 00 41 a5 00 00     ............A...
      30:	41 a5 00 00 f9 a4 00 00 6d b9 00 00 71 ba 00 00     A.......m...q...
      40:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
      50:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
      60:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
      70:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
      80:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
      90:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
      a0:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
      b0:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
      c0:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
      d0:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
      e0:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
      f0:	41 a5 00 00 45 bd 00 00 41 a5 00 00 71 be 00 00     A...E...A...q...
     100:	41 a5 00 00 9d bf 00 00 41 a5 00 00 41 a5 00 00     A.......A...A...
     110:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
     120:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
     130:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
     140:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
     150:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
     160:	41 a5 00 00 89 a9 00 00 41 a5 00 00 41 a5 00 00     A.......A...A...
     170:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
     180:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
     190:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
     1a0:	41 a5 00 00 41 a5 00 00 41 a5 00 00 41 a5 00 00     A...A...A...A...
     1b0:	41 a5 00 00 41 a5 00 00 41 a5 00 00                 A...A...A...

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f00a f9ba 	bl	a548 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f00a fa0e 	bl	a6f4 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f00a f97f 	bl	a5e4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f00a f970 	bl	a5e4 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f00c fe30 	bl	cf6c <__libc_init_array>

	startup_late_hook();
     30c:	f00a f922 	bl	a554 <startup_late_hook>
	main();
     310:	f00b fbb6 	bl	ba80 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff883c 	.word	0x1fff883c
     33c:	000101e4 	.word	0x000101e4
     340:	1fff871c 	.word	0x1fff871c
     344:	1fff883c 	.word	0x1fff883c
     348:	1fffafa8 	.word	0x1fffafa8
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5ed6993e 	.word	0x5ed6993e
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff883c 	.word	0x1fff883c
     42c:	00000000 	.word	0x00000000
     430:	000101e8 	.word	0x000101e8

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8840 	.word	0x1fff8840
     460:	000101e8 	.word	0x000101e8
     464:	1fff883c 	.word	0x1fff883c
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <coolLikeIncandescent(CRGB&, unsigned char) [clone .part.17]>:

void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
     490:	3980      	subs	r1, #128	; 0x80
     492:	1109      	asrs	r1, r1, #4
		i -= 86;
		return 255 - (i + (i / 2));
	}
}

void coolLikeIncandescent(CRGB& c, uint8_t phase)
     494:	b410      	push	{r4}
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     496:	004b      	lsls	r3, r1, #1
     498:	7844      	ldrb	r4, [r0, #1]
     49a:	7882      	ldrb	r2, [r0, #2]
     49c:	b2c9      	uxtb	r1, r1
     49e:	b2db      	uxtb	r3, r3
     4a0:	1a61      	subs	r1, r4, r1
     4a2:	1ad3      	subs	r3, r2, r3
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4a4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	c.b = qsub8(c.b, cooling * 2);
     4a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4ac:	7041      	strb	r1, [r0, #1]
	c.b = qsub8(c.b, cooling * 2);
     4ae:	7083      	strb	r3, [r0, #2]
}
     4b0:	bc10      	pop	{r4}
     4b2:	4770      	bx	lr

000004b4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     4b4:	b508      	push	{r3, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     4b6:	2101      	movs	r1, #1
     4b8:	2007      	movs	r0, #7
     4ba:	f00a f8a5 	bl	a608 <pinMode>
     4be:	2101      	movs	r1, #1
     4c0:	200e      	movs	r0, #14
     4c2:	f00a f8a1 	bl	a608 <pinMode>
		// set the pins to output
		FastPin<_DATA_PIN>::setOutput();
		FastPin<_CLOCK_PIN>::setOutput();

		// Enable SPI0 clock
		uint32_t sim6 = SIM_SCGC6;
     4c6:	4a0b      	ldr	r2, [pc, #44]	; (4f4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x40>)
     4c8:	6813      	ldr	r3, [r2, #0]
		if((SPI_t*)pSPIX == &KINETISK_SPI0) {
			if (!(sim6 & SIM_SCGC6_SPI0)) {
     4ca:	04d9      	lsls	r1, r3, #19
     4cc:	d405      	bmi.n	4da <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x26>
				//serial_print("init1\n");
				SIM_SCGC6 = sim6 | SIM_SCGC6_SPI0;
				SPIX.CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(1) | SPI_CTAR_BR(1);
     4ce:	490a      	ldr	r1, [pc, #40]	; (4f8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x44>)
     4d0:	480a      	ldr	r0, [pc, #40]	; (4fc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x48>)
		// Enable SPI0 clock
		uint32_t sim6 = SIM_SCGC6;
		if((SPI_t*)pSPIX == &KINETISK_SPI0) {
			if (!(sim6 & SIM_SCGC6_SPI0)) {
				//serial_print("init1\n");
				SIM_SCGC6 = sim6 | SIM_SCGC6_SPI0;
     4d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     4d6:	6013      	str	r3, [r2, #0]
				SPIX.CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(1) | SPI_CTAR_BR(1);
     4d8:	60c8      	str	r0, [r1, #12]
				SPIX.CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(1) | SPI_CTAR_BR(1);
			}
		}

		// Configure SPI as the master and enable
		SPIX.MCR |= SPI_MCR_MSTR; // | SPI_MCR_CONT_SCKE);
     4da:	4a07      	ldr	r2, [pc, #28]	; (4f8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::init()+0x44>)
     4dc:	6813      	ldr	r3, [r2, #0]
     4de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     4e2:	6013      	str	r3, [r2, #0]
		SPIX.MCR &= ~(SPI_MCR_MDIS | SPI_MCR_HALT);
     4e4:	6813      	ldr	r3, [r2, #0]
     4e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
     4ea:	f023 0301 	bic.w	r3, r3, #1
     4ee:	6013      	str	r3, [r2, #0]
     4f0:	bd08      	pop	{r3, pc}
     4f2:	bf00      	nop
     4f4:	4004803c 	.word	0x4004803c
     4f8:	4002c000 	.word	0x4002c000
     4fc:	38010001 	.word	0x38010001

00000500 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     500:	b5f0      	push	{r4, r5, r6, r7, lr}
     502:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     504:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     506:	6805      	ldr	r5, [r0, #0]
     508:	f88d 3004 	strb.w	r3, [sp, #4]
     50c:	f88d 3005 	strb.w	r3, [sp, #5]
     510:	f88d 3006 	strb.w	r3, [sp, #6]
     514:	682e      	ldr	r6, [r5, #0]
     516:	4a37      	ldr	r2, [pc, #220]	; (5f4 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     518:	f88d 3008 	strb.w	r3, [sp, #8]
     51c:	4296      	cmp	r6, r2
     51e:	f88d 3009 	strb.w	r3, [sp, #9]
     522:	f88d 300a 	strb.w	r3, [sp, #10]
     526:	d15f      	bne.n	5e8 <CLEDController::clearLeds(int)+0xe8>
     528:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     52a:	9104      	str	r1, [sp, #16]
     52c:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     52e:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     530:	a801      	add	r0, sp, #4
     532:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     534:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     538:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     53c:	f88d 3020 	strb.w	r3, [sp, #32]
     540:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     542:	d015      	beq.n	570 <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     544:	f88d 301d 	strb.w	r3, [sp, #29]
     548:	f88d 301c 	strb.w	r3, [sp, #28]
     54c:	f88d 301b 	strb.w	r3, [sp, #27]
     550:	f88d 301a 	strb.w	r3, [sp, #26]
     554:	f88d 3019 	strb.w	r3, [sp, #25]
     558:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     55c:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     55e:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     560:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     564:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     566:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     568:	a903      	add	r1, sp, #12
     56a:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     56c:	b00b      	add	sp, #44	; 0x2c
     56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     570:	4a21      	ldr	r2, [pc, #132]	; (5f8 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     572:	7813      	ldrb	r3, [r2, #0]
     574:	3301      	adds	r3, #1
     576:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     57a:	f013 0f01 	tst.w	r3, #1
     57e:	bf14      	ite	ne
     580:	2180      	movne	r1, #128	; 0x80
     582:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     584:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     586:	079a      	lsls	r2, r3, #30
     588:	bf44      	itt	mi
     58a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     58e:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     590:	075b      	lsls	r3, r3, #29
     592:	bf48      	it	mi
     594:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     598:	3110      	adds	r1, #16
     59a:	2200      	movs	r2, #0
     59c:	b2c9      	uxtb	r1, r1
     59e:	f10d 031b 	add.w	r3, sp, #27
     5a2:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5a6:	f44f 7e80 	mov.w	lr, #256	; 0x100
     5aa:	b1aa      	cbz	r2, 5d8 <CLEDController::clearLeds(int)+0xd8>
     5ac:	fb9e f2f2 	sdiv	r2, lr, r2
     5b0:	b2d2      	uxtb	r2, r2
     5b2:	1c50      	adds	r0, r2, #1
     5b4:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     5b6:	fb00 1501 	mla	r5, r0, r1, r1
     5ba:	122d      	asrs	r5, r5, #8
     5bc:	7018      	strb	r0, [r3, #0]
     5be:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     5c0:	b105      	cbz	r5, 5c4 <CLEDController::clearLeds(int)+0xc4>
     5c2:	3e01      	subs	r6, #1
     5c4:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     5c8:	b100      	cbz	r0, 5cc <CLEDController::clearLeds(int)+0xcc>
     5ca:	701a      	strb	r2, [r3, #0]
     5cc:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     5ce:	429f      	cmp	r7, r3
     5d0:	d008      	beq.n	5e4 <CLEDController::clearLeds(int)+0xe4>
     5d2:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5d4:	2a00      	cmp	r2, #0
     5d6:	d1e9      	bne.n	5ac <CLEDController::clearLeds(int)+0xac>
     5d8:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     5da:	f803 2c03 	strb.w	r2, [r3, #-3]
     5de:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     5e0:	429f      	cmp	r7, r3
     5e2:	d1f6      	bne.n	5d2 <CLEDController::clearLeds(int)+0xd2>
     5e4:	6825      	ldr	r5, [r4, #0]
     5e6:	e7b9      	b.n	55c <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     5e8:	460a      	mov	r2, r1
     5ea:	ab02      	add	r3, sp, #8
     5ec:	a901      	add	r1, sp, #4
     5ee:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     5f0:	b00b      	add	sp, #44	; 0x2c
     5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5f4:	00000905 	.word	0x00000905
     5f8:	1fff8858 	.word	0x1fff8858

000005fc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		update_ctars(ctar0,ctar1);
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
     5fc:	4b7d      	ldr	r3, [pc, #500]	; (7f4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
		gState.pins[2] = CORE_PIN13_CONFIG;
		gState.pins[3] = CORE_PIN14_CONFIG;
     5fe:	4a7e      	ldr	r2, [pc, #504]	; (7f8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1fc>)
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
     600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		update_ctars(ctar0,ctar1);
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
     604:	68df      	ldr	r7, [r3, #12]
     606:	61c7      	str	r7, [r0, #28]
		gState._ctar1 = SPIX.CTAR1;
     608:	691b      	ldr	r3, [r3, #16]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
     60a:	4e7c      	ldr	r6, [pc, #496]	; (7fc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)
	}

	void inline save_spi_state() __attribute__ ((always_inline)) {
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;
     60c:	6203      	str	r3, [r0, #32]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
     60e:	6833      	ldr	r3, [r6, #0]
		gState.pins[1] = CORE_PIN11_CONFIG;
     610:	4d7b      	ldr	r5, [pc, #492]	; (800 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x204>)
		// save ctar data
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
     612:	6243      	str	r3, [r0, #36]	; 0x24
		gState.pins[1] = CORE_PIN11_CONFIG;
     614:	682b      	ldr	r3, [r5, #0]
		gState.pins[2] = CORE_PIN13_CONFIG;
     616:	4c7b      	ldr	r4, [pc, #492]	; (804 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x208>)
		gState._ctar0 = SPIX.CTAR0;
		gState._ctar1 = SPIX.CTAR1;

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
     618:	6283      	str	r3, [r0, #40]	; 0x28
		gState.pins[2] = CORE_PIN13_CONFIG;
     61a:	6823      	ldr	r3, [r4, #0]
     61c:	62c3      	str	r3, [r0, #44]	; 0x2c
     61e:	4680      	mov	r8, r0
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
     620:	6980      	ldr	r0, [r0, #24]

		// save data for the not-us pins
		gState.pins[0] = CORE_PIN7_CONFIG;
		gState.pins[1] = CORE_PIN11_CONFIG;
		gState.pins[2] = CORE_PIN13_CONFIG;
		gState.pins[3] = CORE_PIN14_CONFIG;
     622:	6813      	ldr	r3, [r2, #0]
     624:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
     628:	b083      	sub	sp, #12
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
     62a:	b150      	cbz	r0, 642 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x46>
     62c:	6803      	ldr	r3, [r0, #0]
     62e:	4a76      	ldr	r2, [pc, #472]	; (808 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x20c>)
     630:	681b      	ldr	r3, [r3, #0]
     632:	4293      	cmp	r3, r2
     634:	f040 8153 	bne.w	8de <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2e2>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     638:	6842      	ldr	r2, [r0, #4]
     63a:	7b00      	ldrb	r0, [r0, #12]
     63c:	7813      	ldrb	r3, [r2, #0]
     63e:	4303      	orrs	r3, r0
     640:	7013      	strb	r3, [r2, #0]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     642:	4b6c      	ldr	r3, [pc, #432]	; (7f4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     644:	68da      	ldr	r2, [r3, #12]
     646:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
     64a:	f000 812b 	beq.w	8a4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2a8>
		uint32_t mcr = SPIX.MCR;
     64e:	4b69      	ldr	r3, [pc, #420]	; (7f4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     650:	681a      	ldr	r2, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
     652:	0455      	lsls	r5, r2, #17
     654:	f100 8130 	bmi.w	8b8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2bc>
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
     658:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
     65c:	f040 0001 	orr.w	r0, r0, #1
			SPIX.CTAR0 = ctar0;
     660:	f04f 5560 	mov.w	r5, #939524096	; 0x38000000
			SPIX.CTAR1 = ctar1;
     664:	f04f 44f0 	mov.w	r4, #2013265920	; 0x78000000
		uint32_t mcr = SPIX.MCR;
		if(mcr & SPI_MCR_MDIS) {
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
     668:	6018      	str	r0, [r3, #0]
			SPIX.CTAR0 = ctar0;
     66a:	60dd      	str	r5, [r3, #12]
			SPIX.CTAR1 = ctar1;
     66c:	611c      	str	r4, [r3, #16]
			SPIX.MCR = mcr;
     66e:	601a      	str	r2, [r3, #0]
	// and likewise enabling pin 14 disables pin 13 (and vice versa)
	inline void enable_pins(void) __attribute__((always_inline)) {
		//serial_print("enable_pins\n");
		switch(_DATA_PIN) {
			case 7:
				CORE_PIN7_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
     670:	4b62      	ldr	r3, [pc, #392]	; (7fc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x200>)
			case 13:
				CORE_PIN13_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
				CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
				break;
			case 14:
				CORE_PIN14_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
     672:	4d61      	ldr	r5, [pc, #388]	; (7f8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1fc>)
				CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     674:	4c63      	ldr	r4, [pc, #396]	; (804 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x208>)
	inline void enable_pins(void) __attribute__((always_inline)) {
		//serial_print("enable_pins\n");
		switch(_DATA_PIN) {
			case 7:
				CORE_PIN7_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
				CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     676:	4e62      	ldr	r6, [pc, #392]	; (800 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x204>)
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     678:	485e      	ldr	r0, [pc, #376]	; (7f4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
	// and likewise enabling pin 14 disables pin 13 (and vice versa)
	inline void enable_pins(void) __attribute__((always_inline)) {
		//serial_print("enable_pins\n");
		switch(_DATA_PIN) {
			case 7:
				CORE_PIN7_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
     67a:	f44f 7210 	mov.w	r2, #576	; 0x240
     67e:	601a      	str	r2, [r3, #0]
				CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     680:	f44f 73a2 	mov.w	r3, #324	; 0x144
     684:	6033      	str	r3, [r6, #0]
			case 13:
				CORE_PIN13_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
				CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
				break;
			case 14:
				CORE_PIN14_CONFIG = PORT_PCR_DSE | PORT_PCR_MUX(2);
     686:	602a      	str	r2, [r5, #0]
				CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     688:	6023      	str	r3, [r4, #0]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
     68a:	7d0c      	ldrb	r4, [r1, #20]
     68c:	7ccd      	ldrb	r5, [r1, #19]
     68e:	f891 b012 	ldrb.w	fp, [r1, #18]
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     692:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
     694:	4b57      	ldr	r3, [pc, #348]	; (7f4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     696:	0457      	lsls	r7, r2, #17
     698:	d4fb      	bmi.n	692 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x96>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     69a:	b672      	cpsid	i
     69c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     6a0:	635a      	str	r2, [r3, #52]	; 0x34
     6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     6a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
     6a8:	62da      	str	r2, [r3, #44]	; 0x2c
     6aa:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     6ae:	4851      	ldr	r0, [pc, #324]	; (7f4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     6b0:	0456      	lsls	r6, r2, #17
     6b2:	d4fb      	bmi.n	6ac <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xb0>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     6b4:	b672      	cpsid	i
     6b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     6ba:	6343      	str	r3, [r0, #52]	; 0x34
     6bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     6be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     6c2:	62c3      	str	r3, [r0, #44]	; 0x2c
     6c4:	b662      	cpsie	i
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
     6c6:	688b      	ldr	r3, [r1, #8]
     6c8:	2b00      	cmp	r3, #0
     6ca:	dd5a      	ble.n	782 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x186>
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     6cc:	4603      	mov	r3, r0
     6ce:	1c68      	adds	r0, r5, #1
     6d0:	4607      	mov	r7, r0
     6d2:	1c60      	adds	r0, r4, #1
     6d4:	4604      	mov	r4, r0
     6d6:	680a      	ldr	r2, [r1, #0]
     6d8:	f8cd 8004 	str.w	r8, [sp, #4]
     6dc:	f10b 0b01 	add.w	fp, fp, #1
     6e0:	4618      	mov	r0, r3
     6e2:	46a2      	mov	sl, r4
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
     6e4:	698c      	ldr	r4, [r1, #24]
     6e6:	1915      	adds	r5, r2, r4
     6e8:	5d14      	ldrb	r4, [r2, r4]
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
     6ea:	78ae      	ldrb	r6, [r5, #2]
     6ec:	786a      	ldrb	r2, [r5, #1]
     6ee:	fb0a f606 	mul.w	r6, sl, r6
     6f2:	fb0b f404 	mul.w	r4, fp, r4
     6f6:	f3c6 2607 	ubfx	r6, r6, #8, #8
     6fa:	fb07 f202 	mul.w	r2, r7, r2
     6fe:	1224      	asrs	r4, r4, #8
     700:	f446 467f 	orr.w	r6, r6, #65280	; 0xff00
     704:	1215      	asrs	r5, r2, #8
     706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     708:	0452      	lsls	r2, r2, #17
     70a:	d4fc      	bmi.n	706 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x10a>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     70c:	b672      	cpsid	i
     70e:	f046 5280 	orr.w	r2, r6, #268435456	; 0x10000000
     712:	6342      	str	r2, [r0, #52]	; 0x34
     714:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
     716:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
     71a:	62c2      	str	r2, [r0, #44]	; 0x2c
     71c:	b662      	cpsie	i
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
     71e:	022a      	lsls	r2, r5, #8
     720:	b292      	uxth	r2, r2
		w |= b2;
     722:	4322      	orrs	r2, r4
     724:	b294      	uxth	r4, r2
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     728:	0452      	lsls	r2, r2, #17
     72a:	d4fc      	bmi.n	726 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x12a>
			sei();
			if(WAIT_STATE == POST) { wait(); }
		}
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     72c:	b672      	cpsid	i
     72e:	f044 5280 	orr.w	r2, r4, #268435456	; 0x10000000
     732:	6342      	str	r2, [r0, #52]	; 0x34
     734:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
     736:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
     73a:	62c2      	str	r2, [r0, #44]	; 0x2c
     73c:	b662      	cpsie	i

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     73e:	688c      	ldr	r4, [r1, #8]
     740:	9400      	str	r4, [sp, #0]
     742:	f991 2015 	ldrsb.w	r2, [r1, #21]
     746:	680c      	ldr	r4, [r1, #0]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     748:	f891 900c 	ldrb.w	r9, [r1, #12]
                d[1] = e[1] - d[1];
     74c:	7b4e      	ldrb	r6, [r1, #13]
                d[2] = e[2] - d[2];
     74e:	7b8d      	ldrb	r5, [r1, #14]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     750:	f891 e00f 	ldrb.w	lr, [r1, #15]
                d[1] = e[1] - d[1];
     754:	f891 8010 	ldrb.w	r8, [r1, #16]
                d[2] = e[2] - d[2];
     758:	f891 c011 	ldrb.w	ip, [r1, #17]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     75c:	4422      	add	r2, r4
     75e:	9c00      	ldr	r4, [sp, #0]
     760:	600a      	str	r2, [r1, #0]
     762:	3c01      	subs	r4, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     764:	ebc9 0e0e 	rsb	lr, r9, lr
                d[1] = e[1] - d[1];
     768:	ebc6 0608 	rsb	r6, r6, r8
                d[2] = e[2] - d[2];
     76c:	ebc5 050c 	rsb	r5, r5, ip
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
     770:	2c00      	cmp	r4, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
     772:	f881 e00c 	strb.w	lr, [r1, #12]
                d[1] = e[1] - d[1];
     776:	734e      	strb	r6, [r1, #13]
                d[2] = e[2] - d[2];
     778:	738d      	strb	r5, [r1, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
     77a:	608c      	str	r4, [r1, #8]
     77c:	dcb2      	bgt.n	6e4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe8>
     77e:	f8dd 8004 	ldr.w	r8, [sp, #4]
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
     782:	6848      	ldr	r0, [r1, #4]
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     784:	4a1b      	ldr	r2, [pc, #108]	; (7f4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     786:	2800      	cmp	r0, #0
     788:	bfb8      	it	lt
     78a:	301f      	addlt	r0, #31
     78c:	1140      	asrs	r0, r0, #5
     78e:	4611      	mov	r1, r2
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     790:	24ff      	movs	r4, #255	; 0xff
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     792:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     794:	045e      	lsls	r6, r3, #17
     796:	d4fc      	bmi.n	792 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x196>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     798:	b672      	cpsid	i
     79a:	634c      	str	r4, [r1, #52]	; 0x34
     79c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     79e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     7a2:	62cb      	str	r3, [r1, #44]	; 0x2c
     7a4:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     7a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     7a8:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
     7ac:	d1fb      	bne.n	7a6 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1aa>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     7ae:	b672      	cpsid	i
     7b0:	634b      	str	r3, [r1, #52]	; 0x34
     7b2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     7b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     7b8:	62cb      	str	r3, [r1, #44]	; 0x2c
     7ba:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     7bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     7be:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
     7c2:	d1fb      	bne.n	7bc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1c0>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     7c4:	b672      	cpsid	i
     7c6:	634b      	str	r3, [r1, #52]	; 0x34
     7c8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     7ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     7ce:	62cb      	str	r3, [r1, #44]	; 0x2c
     7d0:	b662      	cpsie	i
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
	}

	static bool needwait() __attribute__((always_inline)) { return (SPIX.SR & 0x4000); }
	static void wait() __attribute__((always_inline)) { while( (SPIX.SR & 0x4000) );  }
     7d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     7d4:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
     7d8:	d1fb      	bne.n	7d2 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1d6>
	};

	static void writeWord(uint16_t w) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }
	static void writeWordNoWait(uint16_t w) __attribute__((always_inline)) { cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(1) | (w & 0xFFFF); SPIX.SR |= SPI_SR_TCF; sei(); }

	static void writeByte(uint8_t b) __attribute__((always_inline)) { wait(); cli(); SPIX.PUSHR = SPI_PUSHR_CTAS(0) | (b & 0xFF); SPIX.SR |= SPI_SR_TCF; sei(); }
     7da:	b672      	cpsid	i
     7dc:	634b      	str	r3, [r1, #52]	; 0x34
     7de:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     7e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     7e4:	62cb      	str	r3, [r1, #44]	; 0x2c
     7e6:	b662      	cpsie	i
     7e8:	f110 30ff 	adds.w	r0, r0, #4294967295
     7ec:	d2d1      	bcs.n	792 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x196>
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
			cli();
			if ((SPIX.SR & 0xF000) > 0) {
     7ee:	4a01      	ldr	r2, [pc, #4]	; (7f4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1f8>)
     7f0:	e013      	b.n	81a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x21e>
     7f2:	bf00      	nop
     7f4:	4002c000 	.word	0x4002c000
     7f8:	4004c004 	.word	0x4004c004
     7fc:	4004c008 	.word	0x4004c008
     800:	4004b018 	.word	0x4004b018
     804:	4004b014 	.word	0x4004b014
     808:	00000475 	.word	0x00000475
				// reset the TCF flag
				SPIX.SR |= SPI_SR_TCF;
     80c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     80e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     812:	62d3      	str	r3, [r2, #44]	; 0x2c
     814:	2300      	movs	r3, #0
			} else {
				empty = true;
			}
			sei();
     816:	b662      	cpsie	i

	static void waitFully() __attribute__((always_inline)) {
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
     818:	b943      	cbnz	r3, 82c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x230>
			cli();
     81a:	b672      	cpsid	i
			if ((SPIX.SR & 0xF000) > 0) {
     81c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     81e:	f413 4f70 	tst.w	r3, #61440	; 0xf000
     822:	d1f3      	bne.n	80c <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x210>
				// reset the TCF flag
				SPIX.SR |= SPI_SR_TCF;
			} else {
				empty = true;
     824:	2301      	movs	r3, #1
			}
			sei();
     826:	b662      	cpsie	i

	static void waitFully() __attribute__((always_inline)) {
		// Wait for the last byte to get shifted into the register
		bool empty = false;

		do {
     828:	2b00      	cmp	r3, #0
     82a:	d0f6      	beq.n	81a <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x21e>
			}
			sei();
		} while (!empty);

		// wait for the TCF flag to get set
		while (!(SPIX.SR & SPI_SR_TCF));
     82c:	492f      	ldr	r1, [pc, #188]	; (8ec <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
     82e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     830:	4a2e      	ldr	r2, [pc, #184]	; (8ec <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
     832:	2b00      	cmp	r3, #0
     834:	dafb      	bge.n	82e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x232>
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
     836:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
     838:	4e2d      	ldr	r6, [pc, #180]	; (8f0 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f4>)
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
     83a:	f8d8 0018 	ldr.w	r0, [r8, #24]
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
     83e:	4d2d      	ldr	r5, [pc, #180]	; (8f4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f8>)
			case 11: CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN7_CONFIG = gState.pins[0]; break;
		}

		switch(_CLOCK_PIN) {
			case 13: CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN14_CONFIG = gState.pins[3]; break;
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
     840:	4c2d      	ldr	r4, [pc, #180]	; (8f8 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2fc>)
     842:	492e      	ldr	r1, [pc, #184]	; (8fc <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x300>)
			sei();
		} while (!empty);

		// wait for the TCF flag to get set
		while (!(SPIX.SR & SPI_SR_TCF));
		SPIX.SR |= (SPI_SR_TCF | SPI_SR_EOQF);
     844:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
     848:	62d3      	str	r3, [r2, #44]	; 0x2c
	}

	// Borrowed from the teensy3 SPSR emulation code.  We disable the pins that we're using, and restore the state on the pins that we aren't using
	inline void disable_pins(void) __attribute__((always_inline)) {
		switch(_DATA_PIN) {
			case 7: CORE_PIN7_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN11_CONFIG = gState.pins[1]; break;
     84a:	f44f 73a2 	mov.w	r3, #324	; 0x144
     84e:	6033      	str	r3, [r6, #0]
     850:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
     854:	602a      	str	r2, [r5, #0]
			case 11: CORE_PIN11_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN7_CONFIG = gState.pins[0]; break;
		}

		switch(_CLOCK_PIN) {
			case 13: CORE_PIN13_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN14_CONFIG = gState.pins[3]; break;
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
     856:	6023      	str	r3, [r4, #0]
     858:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
     85c:	600b      	str	r3, [r1, #0]
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
     85e:	b150      	cbz	r0, 876 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x27a>
     860:	6803      	ldr	r3, [r0, #0]
     862:	4a27      	ldr	r2, [pc, #156]	; (900 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x304>)
     864:	685b      	ldr	r3, [r3, #4]
     866:	4293      	cmp	r3, r2
     868:	d13d      	bne.n	8e6 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2ea>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     86a:	6842      	ldr	r2, [r0, #4]
     86c:	7b01      	ldrb	r1, [r0, #12]
     86e:	7813      	ldrb	r3, [r2, #0]
     870:	ea23 0301 	bic.w	r3, r3, r1
     874:	7013      	strb	r3, [r2, #0]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     876:	4b1d      	ldr	r3, [pc, #116]	; (8ec <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
		gState.pins[3] = CORE_PIN14_CONFIG;
	}

	void inline restore_spi_state() __attribute__ ((always_inline)) {
		// restore ctar data
		update_ctars(gState._ctar0,gState._ctar1);
     878:	f8d8 201c 	ldr.w	r2, [r8, #28]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     87c:	68d9      	ldr	r1, [r3, #12]
		gState.pins[3] = CORE_PIN14_CONFIG;
	}

	void inline restore_spi_state() __attribute__ ((always_inline)) {
		// restore ctar data
		update_ctars(gState._ctar0,gState._ctar1);
     87e:	f8d8 0020 	ldr.w	r0, [r8, #32]
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     882:	428a      	cmp	r2, r1
     884:	d01f      	beq.n	8c6 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2ca>
		uint32_t mcr = SPIX.MCR;
     886:	4b19      	ldr	r3, [pc, #100]	; (8ec <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
     888:	6819      	ldr	r1, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
     88a:	044c      	lsls	r4, r1, #17
     88c:	d422      	bmi.n	8d4 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2d8>
			SPIX.CTAR0 = ctar0;
			SPIX.CTAR1 = ctar1;
		} else {
			SPIX.MCR = mcr | SPI_MCR_MDIS | SPI_MCR_HALT;
     88e:	f441 4480 	orr.w	r4, r1, #16384	; 0x4000
     892:	f044 0401 	orr.w	r4, r4, #1
     896:	601c      	str	r4, [r3, #0]
			SPIX.CTAR0 = ctar0;
     898:	60da      	str	r2, [r3, #12]
			SPIX.CTAR1 = ctar1;
     89a:	6118      	str	r0, [r3, #16]
			SPIX.MCR = mcr;
     89c:	6019      	str	r1, [r3, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
     89e:	b003      	add	sp, #12
     8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     8a4:	691b      	ldr	r3, [r3, #16]
     8a6:	f1b3 4ff0 	cmp.w	r3, #2013265920	; 0x78000000
     8aa:	f43f aee1 	beq.w	670 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x74>
		uint32_t mcr = SPIX.MCR;
     8ae:	4b0f      	ldr	r3, [pc, #60]	; (8ec <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
     8b0:	681a      	ldr	r2, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
     8b2:	0455      	lsls	r5, r2, #17
     8b4:	f57f aed0 	bpl.w	658 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x5c>
			SPIX.CTAR0 = ctar0;
     8b8:	f04f 5060 	mov.w	r0, #939524096	; 0x38000000
			SPIX.CTAR1 = ctar1;
     8bc:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
		uint32_t mcr = SPIX.MCR;
		if(mcr & SPI_MCR_MDIS) {
			SPIX.CTAR0 = ctar0;
     8c0:	60d8      	str	r0, [r3, #12]
			SPIX.CTAR1 = ctar1;
     8c2:	611a      	str	r2, [r3, #16]
     8c4:	e6d4      	b.n	670 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x74>
			case 14: CORE_PIN14_CONFIG = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1); CORE_PIN13_CONFIG = gState.pins[2]; break;
		}
	}

	static inline void update_ctars(uint32_t ctar0, uint32_t ctar1) __attribute__((always_inline)) {
		if(SPIX.CTAR0 == ctar0 && SPIX.CTAR1 == ctar1) return;
     8c6:	691b      	ldr	r3, [r3, #16]
     8c8:	4298      	cmp	r0, r3
     8ca:	d0e8      	beq.n	89e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2a2>
		uint32_t mcr = SPIX.MCR;
     8cc:	4b07      	ldr	r3, [pc, #28]	; (8ec <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x2f0>)
     8ce:	6819      	ldr	r1, [r3, #0]
		if(mcr & SPI_MCR_MDIS) {
     8d0:	044c      	lsls	r4, r1, #17
     8d2:	d5dc      	bpl.n	88e <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x292>
			SPIX.CTAR0 = ctar0;
     8d4:	60da      	str	r2, [r3, #12]
			SPIX.CTAR1 = ctar1;
     8d6:	6118      	str	r0, [r3, #16]
     8d8:	b003      	add	sp, #12
     8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8de:	9100      	str	r1, [sp, #0]
		update_ctar1(ctar1_save);
	}

	void inline select() __attribute__((always_inline)) {
		save_spi_state();
		if(m_pSelect != NULL) { m_pSelect->select(); }
     8e0:	4798      	blx	r3
     8e2:	9900      	ldr	r1, [sp, #0]
     8e4:	e6ad      	b.n	642 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x46>
		enable_pins();
	}

	void inline release() __attribute__((always_inline)) {
		disable_pins();
		if(m_pSelect != NULL) { m_pSelect->release(); }
     8e6:	4798      	blx	r3
     8e8:	e7c5      	b.n	876 <APA102Controller<(unsigned char)7, (unsigned char)14, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x27a>
     8ea:	bf00      	nop
     8ec:	4002c000 	.word	0x4002c000
     8f0:	4004c008 	.word	0x4004c008
     8f4:	4004b018 	.word	0x4004b018
     8f8:	4004c004 	.word	0x4004c004
     8fc:	4004b014 	.word	0x4004b014
     900:	00000481 	.word	0x00000481

00000904 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     904:	b5f0      	push	{r4, r5, r6, r7, lr}
     906:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     908:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     90a:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     90c:	789b      	ldrb	r3, [r3, #2]
     90e:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     910:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     912:	9101      	str	r1, [sp, #4]
     914:	9202      	str	r2, [sp, #8]
     916:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     918:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     91c:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     920:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     924:	d016      	beq.n	954 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     926:	2300      	movs	r3, #0
     928:	f88d 3015 	strb.w	r3, [sp, #21]
     92c:	f88d 3014 	strb.w	r3, [sp, #20]
     930:	f88d 3013 	strb.w	r3, [sp, #19]
     934:	f88d 3012 	strb.w	r3, [sp, #18]
     938:	f88d 3011 	strb.w	r3, [sp, #17]
     93c:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     940:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     942:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     944:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     946:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     94a:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     94c:	a901      	add	r1, sp, #4
     94e:	4790      	blx	r2
  }
     950:	b009      	add	sp, #36	; 0x24
     952:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     954:	4a1b      	ldr	r2, [pc, #108]	; (9c4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     956:	7813      	ldrb	r3, [r2, #0]
     958:	3301      	adds	r3, #1
     95a:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     95e:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     962:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     964:	bf14      	ite	ne
     966:	2280      	movne	r2, #128	; 0x80
     968:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     96a:	0799      	lsls	r1, r3, #30
     96c:	bf44      	itt	mi
     96e:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     972:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     974:	075b      	lsls	r3, r3, #29
     976:	bf48      	it	mi
     978:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     97c:	3210      	adds	r2, #16
     97e:	b2d2      	uxtb	r2, r2
     980:	f10d 0313 	add.w	r3, sp, #19
     984:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     988:	f44f 7e80 	mov.w	lr, #256	; 0x100
     98c:	b1ac      	cbz	r4, 9ba <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     98e:	fb9e f4f4 	sdiv	r4, lr, r4
     992:	b2e4      	uxtb	r4, r4
     994:	1c61      	adds	r1, r4, #1
     996:	b2c9      	uxtb	r1, r1
     998:	fb01 2502 	mla	r5, r1, r2, r2
     99c:	122d      	asrs	r5, r5, #8
     99e:	7019      	strb	r1, [r3, #0]
     9a0:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     9a2:	b105      	cbz	r5, 9a6 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     9a4:	3e01      	subs	r6, #1
     9a6:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     9aa:	b101      	cbz	r1, 9ae <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     9ac:	701c      	strb	r4, [r3, #0]
     9ae:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     9b0:	42bb      	cmp	r3, r7
     9b2:	d0c5      	beq.n	940 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     9b4:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     9b6:	2c00      	cmp	r4, #0
     9b8:	d1e9      	bne.n	98e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     9ba:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     9bc:	f803 4c03 	strb.w	r4, [r3, #-3]
     9c0:	e7f5      	b.n	9ae <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     9c2:	bf00      	nop
     9c4:	1fff8858 	.word	0x1fff8858

000009c8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ca:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9cc:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     9ce:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     9d0:	789b      	ldrb	r3, [r3, #2]
     9d2:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     9d4:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     9d6:	9101      	str	r1, [sp, #4]
     9d8:	9202      	str	r2, [sp, #8]
     9da:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9dc:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     9e0:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     9e4:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     9e8:	d017      	beq.n	a1a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     9ea:	2300      	movs	r3, #0
     9ec:	f88d 3015 	strb.w	r3, [sp, #21]
     9f0:	f88d 3014 	strb.w	r3, [sp, #20]
     9f4:	f88d 3013 	strb.w	r3, [sp, #19]
     9f8:	f88d 3012 	strb.w	r3, [sp, #18]
     9fc:	f88d 3011 	strb.w	r3, [sp, #17]
     a00:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     a04:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     a06:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     a08:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     a0a:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     a0c:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     a10:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     a12:	a901      	add	r1, sp, #4
     a14:	4798      	blx	r3
  }
     a16:	b009      	add	sp, #36	; 0x24
     a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     a1a:	4a1b      	ldr	r2, [pc, #108]	; (a88 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     a1c:	7813      	ldrb	r3, [r2, #0]
     a1e:	3301      	adds	r3, #1
     a20:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     a24:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     a28:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     a2a:	bf14      	ite	ne
     a2c:	2280      	movne	r2, #128	; 0x80
     a2e:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     a30:	0799      	lsls	r1, r3, #30
     a32:	bf44      	itt	mi
     a34:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     a38:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     a3a:	075b      	lsls	r3, r3, #29
     a3c:	bf48      	it	mi
     a3e:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     a42:	3210      	adds	r2, #16
     a44:	b2d2      	uxtb	r2, r2
     a46:	f10d 0313 	add.w	r3, sp, #19
     a4a:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     a4e:	f44f 7e80 	mov.w	lr, #256	; 0x100
     a52:	b1ac      	cbz	r4, a80 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     a54:	fb9e f4f4 	sdiv	r4, lr, r4
     a58:	b2e4      	uxtb	r4, r4
     a5a:	1c61      	adds	r1, r4, #1
     a5c:	b2c9      	uxtb	r1, r1
     a5e:	fb01 2502 	mla	r5, r1, r2, r2
     a62:	122d      	asrs	r5, r5, #8
     a64:	7019      	strb	r1, [r3, #0]
     a66:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     a68:	b105      	cbz	r5, a6c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     a6a:	3e01      	subs	r6, #1
     a6c:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     a70:	b101      	cbz	r1, a74 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     a72:	701c      	strb	r4, [r3, #0]
     a74:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     a76:	42bb      	cmp	r3, r7
     a78:	d0c4      	beq.n	a04 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     a7a:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     a7c:	2c00      	cmp	r4, #0
     a7e:	d1e9      	bne.n	a54 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     a80:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     a82:	f803 4c03 	strb.w	r4, [r3, #-3]
     a86:	e7f5      	b.n	a74 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     a88:	1fff8858 	.word	0x1fff8858

00000a8c <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     a8c:	b570      	push	{r4, r5, r6, lr}
     a8e:	4604      	mov	r4, r0
     a90:	4608      	mov	r0, r1
     a92:	460d      	mov	r5, r1
     a94:	f00c faf4 	bl	d080 <strlen>
     a98:	6823      	ldr	r3, [r4, #0]
     a9a:	4602      	mov	r2, r0
     a9c:	4629      	mov	r1, r5
     a9e:	4620      	mov	r0, r4
     aa0:	685b      	ldr	r3, [r3, #4]
     aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     aa6:	4718      	bx	r3

00000aa8 <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     aa8:	b538      	push	{r3, r4, r5, lr}
     aaa:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     aac:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     aae:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     ab0:	f00c fae6 	bl	d080 <strlen>
     ab4:	6823      	ldr	r3, [r4, #0]
     ab6:	4602      	mov	r2, r0
     ab8:	4629      	mov	r1, r5
     aba:	685b      	ldr	r3, [r3, #4]
     abc:	4620      	mov	r0, r4
     abe:	4798      	blx	r3
     ac0:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     ac2:	4620      	mov	r0, r4
     ac4:	f00a ffe4 	bl	ba90 <Print::println()>
     ac8:	4428      	add	r0, r5
     aca:	bd38      	pop	{r3, r4, r5, pc}

00000acc <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
     acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ad0:	780d      	ldrb	r5, [r1, #0]
     ad2:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
     ad4:	784d      	ldrb	r5, [r1, #1]
     ad6:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
     ad8:	7889      	ldrb	r1, [r1, #2]
     ada:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     adc:	7811      	ldrb	r1, [r2, #0]
     ade:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
     ae0:	7851      	ldrb	r1, [r2, #1]
     ae2:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
     ae4:	7892      	ldrb	r2, [r2, #2]
     ae6:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ae8:	781a      	ldrb	r2, [r3, #0]
     aea:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
     aec:	785a      	ldrb	r2, [r3, #1]
     aee:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
     af0:	789b      	ldrb	r3, [r3, #2]
     af2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
     af6:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     af8:	f89a b000 	ldrb.w	fp, [sl]
     afc:	f880 b009 	strb.w	fp, [r0, #9]
     b00:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
     b04:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
     b08:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     b0c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     b0e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     b10:	9d10      	ldr	r5, [sp, #64]	; 0x40
     b12:	9911      	ldr	r1, [sp, #68]	; 0x44
     b14:	9a12      	ldr	r2, [sp, #72]	; 0x48
     b16:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
     b18:	f89a b001 	ldrb.w	fp, [sl, #1]
     b1c:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
     b20:	f89a a002 	ldrb.w	sl, [sl, #2]
     b24:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b28:	f899 a000 	ldrb.w	sl, [r9]
     b2c:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
     b30:	f899 a001 	ldrb.w	sl, [r9, #1]
     b34:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
     b38:	f899 9002 	ldrb.w	r9, [r9, #2]
     b3c:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b40:	f898 9000 	ldrb.w	r9, [r8]
     b44:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
     b48:	f898 9001 	ldrb.w	r9, [r8, #1]
     b4c:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
     b50:	f898 8002 	ldrb.w	r8, [r8, #2]
     b54:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b58:	f89c 8000 	ldrb.w	r8, [ip]
     b5c:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
     b60:	f89c 8001 	ldrb.w	r8, [ip, #1]
     b64:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
     b68:	f89c c002 	ldrb.w	ip, [ip, #2]
     b6c:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b70:	f89e c000 	ldrb.w	ip, [lr]
     b74:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
     b78:	f89e c001 	ldrb.w	ip, [lr, #1]
     b7c:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
     b80:	f89e e002 	ldrb.w	lr, [lr, #2]
     b84:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b88:	f897 e000 	ldrb.w	lr, [r7]
     b8c:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
     b90:	f897 e001 	ldrb.w	lr, [r7, #1]
     b94:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
     b98:	78bf      	ldrb	r7, [r7, #2]
     b9a:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b9c:	7837      	ldrb	r7, [r6, #0]
     b9e:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
     ba0:	7877      	ldrb	r7, [r6, #1]
     ba2:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
     ba4:	78b6      	ldrb	r6, [r6, #2]
     ba6:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ba8:	782e      	ldrb	r6, [r5, #0]
     baa:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
     bac:	786e      	ldrb	r6, [r5, #1]
     bae:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
     bb0:	78ad      	ldrb	r5, [r5, #2]
     bb2:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bb6:	780d      	ldrb	r5, [r1, #0]
     bb8:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
     bbc:	784d      	ldrb	r5, [r1, #1]
     bbe:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
     bc2:	7889      	ldrb	r1, [r1, #2]
     bc4:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bc8:	7811      	ldrb	r1, [r2, #0]
     bca:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
     bce:	7851      	ldrb	r1, [r2, #1]
     bd0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
     bd4:	7892      	ldrb	r2, [r2, #2]
     bd6:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     bdc:	7812      	ldrb	r2, [r2, #0]
     bde:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
     be2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     be4:	7852      	ldrb	r2, [r2, #1]
     be6:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
     bea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     bec:	7892      	ldrb	r2, [r2, #2]
     bee:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bf2:	9a14      	ldr	r2, [sp, #80]	; 0x50
     bf4:	7812      	ldrb	r2, [r2, #0]
     bf6:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
     bfa:	9a14      	ldr	r2, [sp, #80]	; 0x50
     bfc:	7852      	ldrb	r2, [r2, #1]
     bfe:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
     c02:	9a14      	ldr	r2, [sp, #80]	; 0x50
     c04:	7892      	ldrb	r2, [r2, #2]
     c06:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c0a:	781a      	ldrb	r2, [r3, #0]
     c0c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
     c10:	785a      	ldrb	r2, [r3, #1]
     c12:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
     c16:	789b      	ldrb	r3, [r3, #2]
     c18:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
     c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c20 <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     c20:	4b48      	ldr	r3, [pc, #288]	; (d44 <updatePaletteIndex(LEDStruct&)+0x124>)
     c22:	781b      	ldrb	r3, [r3, #0]
     c24:	2b00      	cmp	r3, #0
     c26:	f000 808b 	beq.w	d40 <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     c2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c2e:	b09b      	sub	sp, #108	; 0x6c
     c30:	f200 13f7 	addw	r3, r0, #503	; 0x1f7
     c34:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     c36:	2300      	movs	r3, #0
     c38:	4a43      	ldr	r2, [pc, #268]	; (d48 <updatePaletteIndex(LEDStruct&)+0x128>)
     c3a:	9307      	str	r3, [sp, #28]
     c3c:	f8df 910c 	ldr.w	r9, [pc, #268]	; d4c <updatePaletteIndex(LEDStruct&)+0x12c>
     c40:	9009      	str	r0, [sp, #36]	; 0x24
     c42:	f200 2326 	addw	r3, r0, #550	; 0x226
     c46:	9208      	str	r2, [sp, #32]
     c48:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     c4a:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     c4c:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     c50:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     c52:	3701      	adds	r7, #1
        } while ( u.index != 255);
     c54:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     c56:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     c58:	d1f8      	bne.n	c4c <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     c5a:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     c5e:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     c60:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     c64:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     c68:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     c6a:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     c6e:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     c72:	2400      	movs	r4, #0
     c74:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     c76:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c7a:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     c7e:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c82:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     c86:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     c88:	b2f1      	uxtb	r1, r6
     c8a:	f3c5 6507 	ubfx	r5, r5, #24, #8
     c8e:	9103      	str	r1, [sp, #12]
     c90:	b2e9      	uxtb	r1, r5
     c92:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     c94:	fa5f f18c 	uxtb.w	r1, ip
     c98:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     c9a:	9906      	ldr	r1, [sp, #24]
     c9c:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     c9e:	aa0d      	add	r2, sp, #52	; 0x34
     ca0:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     ca2:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     ca6:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     caa:	d80c      	bhi.n	cc6 <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     cac:	9905      	ldr	r1, [sp, #20]
     cae:	458c      	cmp	ip, r1
     cb0:	dc07      	bgt.n	cc2 <updatePaletteIndex(LEDStruct&)+0xa2>
     cb2:	290f      	cmp	r1, #15
     cb4:	d005      	beq.n	cc2 <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     cb6:	3101      	adds	r1, #1
     cb8:	b2c9      	uxtb	r1, r1
     cba:	428b      	cmp	r3, r1
     cbc:	9102      	str	r1, [sp, #8]
     cbe:	bf38      	it	cc
     cc0:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     cc2:	b259      	sxtb	r1, r3
     cc4:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     cc6:	a90c      	add	r1, sp, #48	; 0x30
     cc8:	9100      	str	r1, [sp, #0]
     cca:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ccc:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
        g = rhs.g;
     cd0:	f88d e035 	strb.w	lr, [sp, #53]	; 0x35
        b = rhs.b;
     cd4:	f88d 8036 	strb.w	r8, [sp, #54]	; 0x36
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     cd8:	f88d 7030 	strb.w	r7, [sp, #48]	; 0x30
        g = rhs.g;
     cdc:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
        b = rhs.b;
     ce0:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
     ce4:	f008 fd44 	bl	9770 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     ce8:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     cea:	46d3      	mov	fp, sl
        g = rhs.g;
     cec:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     cf0:	f8dd 8010 	ldr.w	r8, [sp, #16]
     cf4:	d1bf      	bne.n	c76 <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     cf8:	aa0e      	add	r2, sp, #56	; 0x38
     cfa:	4293      	cmp	r3, r2
     cfc:	d018      	beq.n	d30 <updatePaletteIndex(LEDStruct&)+0x110>
     cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d00:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     d02:	f503 73fb 	add.w	r3, r3, #502	; 0x1f6
     d06:	e001      	b.n	d0c <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     d08:	42a3      	cmp	r3, r4
     d0a:	d011      	beq.n	d30 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     d0c:	f812 1b01 	ldrb.w	r1, [r2], #1
     d10:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     d14:	4288      	cmp	r0, r1
     d16:	d0f7      	beq.n	d08 <updatePaletteIndex(LEDStruct&)+0xe8>
     d18:	4b0a      	ldr	r3, [pc, #40]	; (d44 <updatePaletteIndex(LEDStruct&)+0x124>)
     d1a:	9a07      	ldr	r2, [sp, #28]
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	3201      	adds	r2, #1
     d20:	4293      	cmp	r3, r2
     d22:	9207      	str	r2, [sp, #28]
     d24:	dd09      	ble.n	d3a <updatePaletteIndex(LEDStruct&)+0x11a>
     d26:	9b08      	ldr	r3, [sp, #32]
     d28:	f853 9f04 	ldr.w	r9, [r3, #4]!
     d2c:	9308      	str	r3, [sp, #32]
     d2e:	e78c      	b.n	c4a <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d32:	f89d 201c 	ldrb.w	r2, [sp, #28]
     d36:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
			break;
		}
	}
}
     d3a:	b01b      	add	sp, #108	; 0x6c
     d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d40:	4770      	bx	lr
     d42:	bf00      	nop
     d44:	1fff8748 	.word	0x1fff8748
     d48:	0000dcd0 	.word	0x0000dcd0
     d4c:	0000fa1c 	.word	0x0000fa1c

00000d50 <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d54:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     d56:	2700      	movs	r7, #0
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     d58:	2196      	movs	r1, #150	; 0x96
     d5a:	4864      	ldr	r0, [pc, #400]	; (eec <initialize()+0x19c>)
     d5c:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
     d60:	aa09      	add	r2, sp, #36	; 0x24
     d62:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
     d66:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
     d6a:	f008 fcd1 	bl	9710 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
     d6e:	4b5f      	ldr	r3, [pc, #380]	; (eec <initialize()+0x19c>)
     d70:	495f      	ldr	r1, [pc, #380]	; (ef0 <initialize()+0x1a0>)
     d72:	f883 71c5 	strb.w	r7, [r3, #453]	; 0x1c5
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     d76:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     d7a:	4a5d      	ldr	r2, [pc, #372]	; (ef0 <initialize()+0x1a0>)
            count++;;
        } while ( u.index != 255);
     d7c:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     d7e:	3701      	adds	r7, #1
        } while ( u.index != 255);
     d80:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     d82:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     d84:	d1f7      	bne.n	d76 <initialize()+0x26>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     d86:	6813      	ldr	r3, [r2, #0]
     d88:	9706      	str	r7, [sp, #24]
        CRGB rgbstart( u.r, u.g, u.b);
     d8a:	f3c3 4907 	ubfx	r9, r3, #16, #8
     d8e:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     d92:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     d96:	f04f 33ff 	mov.w	r3, #4294967295
     d9a:	46ce      	mov	lr, r9
     d9c:	9305      	str	r3, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     d9e:	2400      	movs	r4, #0
     da0:	4691      	mov	r9, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     da2:	f859 5f04 	ldr.w	r5, [r9, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     da6:	4853      	ldr	r0, [pc, #332]	; (ef4 <initialize()+0x1a4>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     da8:	f3c5 2707 	ubfx	r7, r5, #8, #8
     dac:	f3c5 4607 	ubfx	r6, r5, #16, #8
     db0:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     db2:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     db6:	9103      	str	r1, [sp, #12]
     db8:	b2f1      	uxtb	r1, r6
     dba:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     dbc:	fa5f f18c 	uxtb.w	r1, ip
     dc0:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     dc2:	9906      	ldr	r1, [sp, #24]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     dc4:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     dc6:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     dc8:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     dcc:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     dce:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     dd2:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     dd6:	d80c      	bhi.n	df2 <initialize()+0xa2>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     dd8:	9905      	ldr	r1, [sp, #20]
     dda:	458c      	cmp	ip, r1
     ddc:	dc07      	bgt.n	dee <initialize()+0x9e>
     dde:	290f      	cmp	r1, #15
     de0:	d005      	beq.n	dee <initialize()+0x9e>
                    istart8 = lastSlotUsed + 1;
     de2:	3101      	adds	r1, #1
     de4:	b2c9      	uxtb	r1, r1
     de6:	428b      	cmp	r3, r1
     de8:	9102      	str	r1, [sp, #8]
     dea:	bf38      	it	cc
     dec:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     dee:	b259      	sxtb	r1, r3
     df0:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     df2:	a908      	add	r1, sp, #32
     df4:	9100      	str	r1, [sp, #0]
     df6:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     df8:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     dfc:	f88d e025 	strb.w	lr, [sp, #37]	; 0x25
        b = rhs.b;
     e00:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     e04:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     e08:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     e0c:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     e10:	f008 fcae 	bl	9770 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     e14:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     e16:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     e1a:	f8dd e010 	ldr.w	lr, [sp, #16]
        b = rhs.b;
     e1e:	46d0      	mov	r8, sl
     e20:	d1bf      	bne.n	da2 <initialize()+0x52>
     e22:	4935      	ldr	r1, [pc, #212]	; (ef8 <initialize()+0x1a8>)
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     e24:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     e26:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     e2a:	4a33      	ldr	r2, [pc, #204]	; (ef8 <initialize()+0x1a8>)
            count++;;
        } while ( u.index != 255);
     e2c:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     e2e:	3701      	adds	r7, #1
        } while ( u.index != 255);
     e30:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     e32:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     e34:	d1f7      	bne.n	e26 <initialize()+0xd6>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     e36:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     e38:	9706      	str	r7, [sp, #24]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     e3a:	ea4f 6813 	mov.w	r8, r3, lsr #24
     e3e:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     e42:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     e46:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     e4a:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     e4c:	9305      	str	r3, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     e4e:	2400      	movs	r4, #0
     e50:	4690      	mov	r8, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     e52:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     e56:	4b25      	ldr	r3, [pc, #148]	; (eec <initialize()+0x19c>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     e58:	f3c5 2707 	ubfx	r7, r5, #8, #8
     e5c:	f3c5 4607 	ubfx	r6, r5, #16, #8
     e60:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     e62:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     e66:	9103      	str	r1, [sp, #12]
     e68:	b2f1      	uxtb	r1, r6
     e6a:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     e6c:	fa5f f18c 	uxtb.w	r1, ip
     e70:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     e72:	9906      	ldr	r1, [sp, #24]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     e74:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     e76:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     e78:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     e7c:	f203 10f7 	addw	r0, r3, #503	; 0x1f7
     e80:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     e82:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     e86:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     e8a:	d80c      	bhi.n	ea6 <initialize()+0x156>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     e8c:	9905      	ldr	r1, [sp, #20]
     e8e:	458c      	cmp	ip, r1
     e90:	dc07      	bgt.n	ea2 <initialize()+0x152>
     e92:	290f      	cmp	r1, #15
     e94:	d005      	beq.n	ea2 <initialize()+0x152>
                    istart8 = lastSlotUsed + 1;
     e96:	3101      	adds	r1, #1
     e98:	b2c9      	uxtb	r1, r1
     e9a:	428b      	cmp	r3, r1
     e9c:	9102      	str	r1, [sp, #8]
     e9e:	bf38      	it	cc
     ea0:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     ea2:	b259      	sxtb	r1, r3
     ea4:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     ea6:	a908      	add	r1, sp, #32
     ea8:	9100      	str	r1, [sp, #0]
     eaa:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     eac:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     eb0:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
        b = rhs.b;
     eb4:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     eb8:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     ebc:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     ec0:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     ec4:	f008 fc54 	bl	9770 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     ec8:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     eca:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     ece:	f8dd 9010 	ldr.w	r9, [sp, #16]
        b = rhs.b;
     ed2:	46d6      	mov	lr, sl
     ed4:	d1bd      	bne.n	e52 <initialize()+0x102>
	curr_leds.current_palette	= rainbowsherbet_gp;
	curr_leds.target_palette	= Tropical_Colors_gp;
	updatePaletteIndex(curr_leds);
     ed6:	4805      	ldr	r0, [pc, #20]	; (eec <initialize()+0x19c>)
     ed8:	f7ff fea2 	bl	c20 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     edc:	4b07      	ldr	r3, [pc, #28]	; (efc <initialize()+0x1ac>)
     ede:	4a08      	ldr	r2, [pc, #32]	; (f00 <initialize()+0x1b0>)
     ee0:	7818      	ldrb	r0, [r3, #0]
     ee2:	4b02      	ldr	r3, [pc, #8]	; (eec <initialize()+0x19c>)
     ee4:	f883 022b 	strb.w	r0, [r3, #555]	; 0x22b
     ee8:	2300      	movs	r3, #0
     eea:	e00d      	b.n	f08 <initialize()+0x1b8>
     eec:	1fffa274 	.word	0x1fffa274
     ef0:	0000fdec 	.word	0x0000fdec
     ef4:	1fffa43b 	.word	0x1fffa43b
     ef8:	0000de44 	.word	0x0000de44
     efc:	1fff8741 	.word	0x1fff8741
     f00:	1fff871f 	.word	0x1fff871f
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     f04:	2b1b      	cmp	r3, #27
     f06:	d009      	beq.n	f1c <initialize()+0x1cc>
		if (leds.mode_name == ModeList[i]) {
     f08:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     f0c:	4281      	cmp	r1, r0
     f0e:	b2dc      	uxtb	r4, r3
     f10:	f103 0301 	add.w	r3, r3, #1
     f14:	d1f6      	bne.n	f04 <initialize()+0x1b4>
			leds.mode_number = i;
     f16:	4b9c      	ldr	r3, [pc, #624]	; (1188 <initialize()+0x438>)
     f18:	f883 422a 	strb.w	r4, [r3, #554]	; 0x22a
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     f1c:	4c9b      	ldr	r4, [pc, #620]	; (118c <initialize()+0x43c>)
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     f1e:	2700      	movs	r7, #0
     f20:	2196      	movs	r1, #150	; 0x96
     f22:	4620      	mov	r0, r4
     f24:	aa09      	add	r2, sp, #36	; 0x24
     f26:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
     f2a:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
     f2e:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
     f32:	f008 fbed 	bl	9710 <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     f36:	2301      	movs	r3, #1
     f38:	4995      	ldr	r1, [pc, #596]	; (1190 <initialize()+0x440>)
     f3a:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     f3e:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     f42:	4a93      	ldr	r2, [pc, #588]	; (1190 <initialize()+0x440>)
            count++;;
        } while ( u.index != 255);
     f44:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     f46:	3701      	adds	r7, #1
        } while ( u.index != 255);
     f48:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     f4a:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     f4c:	d1f7      	bne.n	f3e <initialize()+0x1ee>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     f4e:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     f50:	9706      	str	r7, [sp, #24]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     f52:	f3c3 4907 	ubfx	r9, r3, #16, #8
     f56:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     f5a:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     f5e:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     f62:	46ce      	mov	lr, r9
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     f64:	9305      	str	r3, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     f66:	2400      	movs	r4, #0
     f68:	4691      	mov	r9, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     f6a:	f859 5f04 	ldr.w	r5, [r9, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     f6e:	4889      	ldr	r0, [pc, #548]	; (1194 <initialize()+0x444>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     f70:	f3c5 2707 	ubfx	r7, r5, #8, #8
     f74:	f3c5 4607 	ubfx	r6, r5, #16, #8
     f78:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     f7a:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     f7e:	9103      	str	r1, [sp, #12]
     f80:	b2f1      	uxtb	r1, r6
     f82:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     f84:	fa5f f18c 	uxtb.w	r1, ip
     f88:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     f8a:	9906      	ldr	r1, [sp, #24]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     f8c:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     f8e:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     f90:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     f94:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     f96:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     f9a:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     f9e:	d80c      	bhi.n	fba <initialize()+0x26a>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     fa0:	9905      	ldr	r1, [sp, #20]
     fa2:	458c      	cmp	ip, r1
     fa4:	dc07      	bgt.n	fb6 <initialize()+0x266>
     fa6:	290f      	cmp	r1, #15
     fa8:	d005      	beq.n	fb6 <initialize()+0x266>
                    istart8 = lastSlotUsed + 1;
     faa:	3101      	adds	r1, #1
     fac:	b2c9      	uxtb	r1, r1
     fae:	428b      	cmp	r3, r1
     fb0:	9102      	str	r1, [sp, #8]
     fb2:	bf38      	it	cc
     fb4:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     fb6:	b259      	sxtb	r1, r3
     fb8:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     fba:	a908      	add	r1, sp, #32
     fbc:	9100      	str	r1, [sp, #0]
     fbe:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     fc0:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     fc4:	f88d e025 	strb.w	lr, [sp, #37]	; 0x25
        b = rhs.b;
     fc8:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     fcc:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     fd0:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     fd4:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     fd8:	f008 fbca 	bl	9770 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     fdc:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     fde:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     fe2:	f8dd e010 	ldr.w	lr, [sp, #16]
        b = rhs.b;
     fe6:	46d0      	mov	r8, sl
     fe8:	d1bf      	bne.n	f6a <initialize()+0x21a>
     fea:	496b      	ldr	r1, [pc, #428]	; (1198 <initialize()+0x448>)
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     fec:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     fee:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     ff2:	4a69      	ldr	r2, [pc, #420]	; (1198 <initialize()+0x448>)
            count++;;
        } while ( u.index != 255);
     ff4:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     ff6:	3701      	adds	r7, #1
        } while ( u.index != 255);
     ff8:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     ffa:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     ffc:	d1f7      	bne.n	fee <initialize()+0x29e>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     ffe:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    1000:	9706      	str	r7, [sp, #24]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    1002:	ea4f 6813 	mov.w	r8, r3, lsr #24
    1006:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    100a:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    100e:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    1012:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    1014:	9305      	str	r3, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    1016:	2400      	movs	r4, #0
    1018:	4690      	mov	r8, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    101a:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    101e:	4b5b      	ldr	r3, [pc, #364]	; (118c <initialize()+0x43c>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1020:	f3c5 2707 	ubfx	r7, r5, #8, #8
    1024:	f3c5 4607 	ubfx	r6, r5, #16, #8
    1028:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    102a:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    102e:	9103      	str	r1, [sp, #12]
    1030:	b2f1      	uxtb	r1, r6
    1032:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
    1034:	fa5f f18c 	uxtb.w	r1, ip
    1038:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
    103a:	9906      	ldr	r1, [sp, #24]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    103c:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    103e:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1040:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1044:	f203 10f7 	addw	r0, r3, #503	; 0x1f7
    1048:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    104a:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    104e:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1052:	d80c      	bhi.n	106e <initialize()+0x31e>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    1054:	9905      	ldr	r1, [sp, #20]
    1056:	458c      	cmp	ip, r1
    1058:	dc07      	bgt.n	106a <initialize()+0x31a>
    105a:	290f      	cmp	r1, #15
    105c:	d005      	beq.n	106a <initialize()+0x31a>
                    istart8 = lastSlotUsed + 1;
    105e:	3101      	adds	r1, #1
    1060:	b2c9      	uxtb	r1, r1
    1062:	428b      	cmp	r3, r1
    1064:	9102      	str	r1, [sp, #8]
    1066:	bf38      	it	cc
    1068:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    106a:	b259      	sxtb	r1, r3
    106c:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    106e:	a908      	add	r1, sp, #32
    1070:	9100      	str	r1, [sp, #0]
    1072:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1074:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
    1078:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
        b = rhs.b;
    107c:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1080:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
    1084:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
    1088:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    108c:	f008 fb70 	bl	9770 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    1090:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1092:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
    1096:	f8dd 9010 	ldr.w	r9, [sp, #16]
        b = rhs.b;
    109a:	46d6      	mov	lr, sl
    109c:	d1bd      	bne.n	101a <initialize()+0x2ca>
	next_leds.current_palette	= slope_gp;
	next_leds.target_palette	= rainbow_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
    109e:	4a3b      	ldr	r2, [pc, #236]	; (118c <initialize()+0x43c>)
    10a0:	4b39      	ldr	r3, [pc, #228]	; (1188 <initialize()+0x438>)
	updatePaletteIndex(next_leds);

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
    10a2:	4c3e      	ldr	r4, [pc, #248]	; (119c <initialize()+0x44c>)
	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
	next_leds.current_palette	= slope_gp;
	next_leds.target_palette	= rainbow_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
    10a4:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
    10a8:	f882 322a 	strb.w	r3, [r2, #554]	; 0x22a
	updatePaletteIndex(next_leds);
    10ac:	4610      	mov	r0, r2
    10ae:	f7ff fdb7 	bl	c20 <updatePaletteIndex(LEDStruct&)>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    10b2:	2700      	movs	r7, #0

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
    10b4:	4620      	mov	r0, r4
    10b6:	aa09      	add	r2, sp, #36	; 0x24
    10b8:	2196      	movs	r1, #150	; 0x96
    10ba:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    10be:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    10c2:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
    10c6:	f008 fb23 	bl	9710 <fill_solid(CRGB*, int, CRGB const&)>
	curr_over_leds.array_type		= CURR_OVERLAY;
    10ca:	2302      	movs	r3, #2
    10cc:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    10d0:	4b33      	ldr	r3, [pc, #204]	; (11a0 <initialize()+0x450>)
    10d2:	4a33      	ldr	r2, [pc, #204]	; (11a0 <initialize()+0x450>)
    10d4:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    10d8:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    10da:	3701      	adds	r7, #1
        } while ( u.index != 255);
    10dc:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    10de:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    10e0:	d1f6      	bne.n	10d0 <initialize()+0x380>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    10e2:	6813      	ldr	r3, [r2, #0]
    10e4:	9307      	str	r3, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
    10e6:	f3c3 4907 	ubfx	r9, r3, #16, #8
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
    10ea:	4692      	mov	sl, r2
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    10ec:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    10f0:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    10f4:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    10f8:	46ce      	mov	lr, r9
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    10fa:	9305      	str	r3, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    10fc:	2400      	movs	r4, #0
    10fe:	9706      	str	r7, [sp, #24]
    1100:	46d1      	mov	r9, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    1102:	f859 5f04 	ldr.w	r5, [r9, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1106:	4827      	ldr	r0, [pc, #156]	; (11a4 <initialize()+0x454>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1108:	f3c5 2707 	ubfx	r7, r5, #8, #8
    110c:	f3c5 4607 	ubfx	r6, r5, #16, #8
    1110:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    1112:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1116:	9103      	str	r1, [sp, #12]
    1118:	b2f1      	uxtb	r1, r6
    111a:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
    111c:	fa5f f18c 	uxtb.w	r1, ip
    1120:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
    1122:	9906      	ldr	r1, [sp, #24]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    1124:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1126:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1128:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    112c:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    112e:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1132:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1136:	d80c      	bhi.n	1152 <initialize()+0x402>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    1138:	9905      	ldr	r1, [sp, #20]
    113a:	458c      	cmp	ip, r1
    113c:	dc07      	bgt.n	114e <initialize()+0x3fe>
    113e:	290f      	cmp	r1, #15
    1140:	d005      	beq.n	114e <initialize()+0x3fe>
                    istart8 = lastSlotUsed + 1;
    1142:	3101      	adds	r1, #1
    1144:	b2c9      	uxtb	r1, r1
    1146:	428b      	cmp	r3, r1
    1148:	9102      	str	r1, [sp, #8]
    114a:	bf38      	it	cc
    114c:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    114e:	b259      	sxtb	r1, r3
    1150:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1152:	a908      	add	r1, sp, #32
    1154:	9100      	str	r1, [sp, #0]
    1156:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1158:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
    115c:	f88d e025 	strb.w	lr, [sp, #37]	; 0x25
        b = rhs.b;
    1160:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1164:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
    1168:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
    116c:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    1170:	f008 fafe 	bl	9770 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    1174:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1176:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
    117a:	f8dd e010 	ldr.w	lr, [sp, #16]
        b = rhs.b;
    117e:	46d0      	mov	r8, sl
    1180:	d1bf      	bne.n	1102 <initialize()+0x3b2>
    1182:	9b07      	ldr	r3, [sp, #28]
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    1184:	2700      	movs	r7, #0
    1186:	e012      	b.n	11ae <initialize()+0x45e>
    1188:	1fffa274 	.word	0x1fffa274
    118c:	1fff8898 	.word	0x1fff8898
    1190:	0000fbd8 	.word	0x0000fbd8
    1194:	1fff8a5f 	.word	0x1fff8a5f
    1198:	0000dc90 	.word	0x0000dc90
    119c:	1fff91e8 	.word	0x1fff91e8
    11a0:	0000fc64 	.word	0x0000fc64
    11a4:	1fff93af 	.word	0x1fff93af
    11a8:	4b8f      	ldr	r3, [pc, #572]	; (13e8 <initialize()+0x698>)
    11aa:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);
    11ae:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    11b0:	3701      	adds	r7, #1
        } while ( u.index != 255);
    11b2:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    11b4:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    11b6:	d1f7      	bne.n	11a8 <initialize()+0x458>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    11b8:	9a07      	ldr	r2, [sp, #28]
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
    11ba:	f8df a22c 	ldr.w	sl, [pc, #556]	; 13e8 <initialize()+0x698>
        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    11be:	9706      	str	r7, [sp, #24]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    11c0:	f3c2 4907 	ubfx	r9, r2, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    11c4:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    11c8:	46ce      	mov	lr, r9
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    11ca:	f3c2 2b07 	ubfx	fp, r2, #8, #8
    11ce:	ea4f 6812 	mov.w	r8, r2, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    11d2:	9305      	str	r3, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    11d4:	2400      	movs	r4, #0
    11d6:	46d1      	mov	r9, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    11d8:	f859 5f04 	ldr.w	r5, [r9, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    11dc:	4883      	ldr	r0, [pc, #524]	; (13ec <initialize()+0x69c>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    11de:	f3c5 2707 	ubfx	r7, r5, #8, #8
    11e2:	f3c5 4607 	ubfx	r6, r5, #16, #8
    11e6:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    11e8:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    11ec:	9103      	str	r1, [sp, #12]
    11ee:	b2f1      	uxtb	r1, r6
    11f0:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
    11f2:	fa5f f18c 	uxtb.w	r1, ip
    11f6:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
    11f8:	9906      	ldr	r1, [sp, #24]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    11fa:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    11fc:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    11fe:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1202:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    1204:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1208:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    120c:	d80c      	bhi.n	1228 <initialize()+0x4d8>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    120e:	9905      	ldr	r1, [sp, #20]
    1210:	458c      	cmp	ip, r1
    1212:	dc07      	bgt.n	1224 <initialize()+0x4d4>
    1214:	290f      	cmp	r1, #15
    1216:	d005      	beq.n	1224 <initialize()+0x4d4>
                    istart8 = lastSlotUsed + 1;
    1218:	3101      	adds	r1, #1
    121a:	b2c9      	uxtb	r1, r1
    121c:	428b      	cmp	r3, r1
    121e:	9102      	str	r1, [sp, #8]
    1220:	bf38      	it	cc
    1222:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    1224:	b259      	sxtb	r1, r3
    1226:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1228:	a908      	add	r1, sp, #32
    122a:	9100      	str	r1, [sp, #0]
    122c:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    122e:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
    1232:	f88d e025 	strb.w	lr, [sp, #37]	; 0x25
        b = rhs.b;
    1236:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    123a:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
    123e:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
    1242:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    1246:	f008 fa93 	bl	9770 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    124a:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    124c:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
    1250:	f8dd e010 	ldr.w	lr, [sp, #16]
        b = rhs.b;
    1254:	46d0      	mov	r8, sl
    1256:	d1bf      	bne.n	11d8 <initialize()+0x488>
	curr_over_leds.current_palette	= cequal_gp;
	curr_over_leds.target_palette	= cequal_gp;

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
    1258:	4c65      	ldr	r4, [pc, #404]	; (13f0 <initialize()+0x6a0>)
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    125a:	2700      	movs	r7, #0
    125c:	4620      	mov	r0, r4
    125e:	aa09      	add	r2, sp, #36	; 0x24
    1260:	2196      	movs	r1, #150	; 0x96
    1262:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    1266:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
    126a:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
    126e:	f008 fa4f 	bl	9710 <fill_solid(CRGB*, int, CRGB const&)>
	next_over_leds.array_type = NEXT_OVERLAY;
    1272:	2303      	movs	r3, #3
    1274:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
    1278:	9b07      	ldr	r3, [sp, #28]
    127a:	e002      	b.n	1282 <initialize()+0x532>
    127c:	4b5a      	ldr	r3, [pc, #360]	; (13e8 <initialize()+0x698>)
    127e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);
    1282:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    1284:	3701      	adds	r7, #1
        } while ( u.index != 255);
    1286:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    1288:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    128a:	d1f7      	bne.n	127c <initialize()+0x52c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    128c:	9a07      	ldr	r2, [sp, #28]
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
    128e:	f8df a158 	ldr.w	sl, [pc, #344]	; 13e8 <initialize()+0x698>
        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    1292:	9706      	str	r7, [sp, #24]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    1294:	f3c2 4907 	ubfx	r9, r2, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    1298:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    129c:	46ce      	mov	lr, r9
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    129e:	f3c2 2b07 	ubfx	fp, r2, #8, #8
    12a2:	ea4f 6812 	mov.w	r8, r2, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    12a6:	9305      	str	r3, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    12a8:	2400      	movs	r4, #0
    12aa:	46d1      	mov	r9, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    12ac:	f859 5f04 	ldr.w	r5, [r9, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    12b0:	4850      	ldr	r0, [pc, #320]	; (13f4 <initialize()+0x6a4>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    12b2:	f3c5 2707 	ubfx	r7, r5, #8, #8
    12b6:	f3c5 4607 	ubfx	r6, r5, #16, #8
    12ba:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    12bc:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    12c0:	9103      	str	r1, [sp, #12]
    12c2:	b2f1      	uxtb	r1, r6
    12c4:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
    12c6:	fa5f f18c 	uxtb.w	r1, ip
    12ca:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
    12cc:	9906      	ldr	r1, [sp, #24]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    12ce:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    12d0:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    12d2:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    12d6:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    12d8:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    12dc:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    12e0:	d80c      	bhi.n	12fc <initialize()+0x5ac>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    12e2:	9905      	ldr	r1, [sp, #20]
    12e4:	458c      	cmp	ip, r1
    12e6:	dc07      	bgt.n	12f8 <initialize()+0x5a8>
    12e8:	290f      	cmp	r1, #15
    12ea:	d005      	beq.n	12f8 <initialize()+0x5a8>
                    istart8 = lastSlotUsed + 1;
    12ec:	3101      	adds	r1, #1
    12ee:	b2c9      	uxtb	r1, r1
    12f0:	428b      	cmp	r3, r1
    12f2:	9102      	str	r1, [sp, #8]
    12f4:	bf38      	it	cc
    12f6:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    12f8:	b259      	sxtb	r1, r3
    12fa:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    12fc:	a908      	add	r1, sp, #32
    12fe:	9100      	str	r1, [sp, #0]
    1300:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1302:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
    1306:	f88d e025 	strb.w	lr, [sp, #37]	; 0x25
        b = rhs.b;
    130a:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    130e:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
    1312:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
    1316:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    131a:	f008 fa29 	bl	9770 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    131e:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1320:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
    1324:	f8dd e010 	ldr.w	lr, [sp, #16]
        b = rhs.b;
    1328:	46d0      	mov	r8, sl
    132a:	d1bf      	bne.n	12ac <initialize()+0x55c>
    132c:	9b07      	ldr	r3, [sp, #28]
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    132e:	2700      	movs	r7, #0
    1330:	e002      	b.n	1338 <initialize()+0x5e8>
    1332:	4b2d      	ldr	r3, [pc, #180]	; (13e8 <initialize()+0x698>)
    1334:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);
    1338:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    133a:	3701      	adds	r7, #1
        } while ( u.index != 255);
    133c:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    133e:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    1340:	d1f7      	bne.n	1332 <initialize()+0x5e2>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    1342:	9a07      	ldr	r2, [sp, #28]
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
    1344:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 13e8 <initialize()+0x698>
        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    1348:	9706      	str	r7, [sp, #24]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    134a:	ea4f 6812 	mov.w	r8, r2, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    134e:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    1352:	f3c2 2b07 	ubfx	fp, r2, #8, #8
    1356:	f3c2 4907 	ubfx	r9, r2, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    135a:	9305      	str	r3, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    135c:	2400      	movs	r4, #0
    135e:	46c6      	mov	lr, r8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    1360:	f85a 5f04 	ldr.w	r5, [sl, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1364:	4824      	ldr	r0, [pc, #144]	; (13f8 <initialize()+0x6a8>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1366:	f3c5 2707 	ubfx	r7, r5, #8, #8
    136a:	f3c5 4607 	ubfx	r6, r5, #16, #8
    136e:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    1370:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1374:	9103      	str	r1, [sp, #12]
    1376:	b2f1      	uxtb	r1, r6
    1378:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
    137a:	fa5f f18c 	uxtb.w	r1, ip
    137e:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
    1380:	9906      	ldr	r1, [sp, #24]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    1382:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1384:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1386:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    138a:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    138c:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1390:	fa5f f885 	uxtb.w	r8, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1394:	d80c      	bhi.n	13b0 <initialize()+0x660>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    1396:	9905      	ldr	r1, [sp, #20]
    1398:	458c      	cmp	ip, r1
    139a:	dc07      	bgt.n	13ac <initialize()+0x65c>
    139c:	290f      	cmp	r1, #15
    139e:	d005      	beq.n	13ac <initialize()+0x65c>
                    istart8 = lastSlotUsed + 1;
    13a0:	3101      	adds	r1, #1
    13a2:	b2c9      	uxtb	r1, r1
    13a4:	428b      	cmp	r3, r1
    13a6:	9102      	str	r1, [sp, #8]
    13a8:	bf38      	it	cc
    13aa:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    13ac:	b259      	sxtb	r1, r3
    13ae:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    13b0:	a908      	add	r1, sp, #32
    13b2:	9100      	str	r1, [sp, #0]
    13b4:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    13b6:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
    13ba:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
        b = rhs.b;
    13be:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    13c2:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
    13c6:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
    13ca:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    13ce:	f008 f9cf 	bl	9770 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    13d2:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    13d4:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
    13d8:	f8dd 9010 	ldr.w	r9, [sp, #16]
        b = rhs.b;
    13dc:	46c6      	mov	lr, r8
    13de:	d1bf      	bne.n	1360 <initialize()+0x610>
	next_over_leds.current_palette = cequal_gp;
	next_over_leds.target_palette = cequal_gp;
}
    13e0:	b00b      	add	sp, #44	; 0x2c
    13e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13e6:	bf00      	nop
    13e8:	0000fc64 	.word	0x0000fc64
    13ec:	1fff93df 	.word	0x1fff93df
    13f0:	1fff9a38 	.word	0x1fff9a38
    13f4:	1fff9bff 	.word	0x1fff9bff
    13f8:	1fff9c2f 	.word	0x1fff9c2f

000013fc <global_debug()>:
		if (DEBUG) { print_palette(leds.palette_index); }
	}
}

// Debug
void global_debug() {
    13fc:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    13fe:	2112      	movs	r1, #18
    1400:	b082      	sub	sp, #8
    1402:	4834      	ldr	r0, [pc, #208]	; (14d4 <global_debug()+0xd8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1404:	4c34      	ldr	r4, [pc, #208]	; (14d8 <global_debug()+0xdc>)
    1406:	f00a f93f 	bl	b688 <usb_serial_write>
	Serial.print("(S) Change modes:\t");
	Serial.println(mode_change);
    140a:	4b34      	ldr	r3, [pc, #208]	; (14dc <global_debug()+0xe0>)
    140c:	4620      	mov	r0, r4
    140e:	7819      	ldrb	r1, [r3, #0]
    1410:	f00a fb8e 	bl	bb30 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1414:	4620      	mov	r0, r4
    1416:	f00a fb3b 	bl	ba90 <Print::println()>
    141a:	2111      	movs	r1, #17
    141c:	4830      	ldr	r0, [pc, #192]	; (14e0 <global_debug()+0xe4>)
    141e:	f00a f933 	bl	b688 <usb_serial_write>
	Serial.print("(R) Random Mode:\t");
	Serial.println(random_mode);
    1422:	4b30      	ldr	r3, [pc, #192]	; (14e4 <global_debug()+0xe8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1424:	4620      	mov	r0, r4
    1426:	7819      	ldrb	r1, [r3, #0]
    1428:	f00a fb82 	bl	bb30 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    142c:	4620      	mov	r0, r4
    142e:	f00a fb2f 	bl	ba90 <Print::println()>
    1432:	2115      	movs	r1, #21
    1434:	482c      	ldr	r0, [pc, #176]	; (14e8 <global_debug()+0xec>)
    1436:	f00a f927 	bl	b688 <usb_serial_write>
	Serial.print("(Q) Change Palettes:\t");
	Serial.println(random_palette);
    143a:	4b2c      	ldr	r3, [pc, #176]	; (14ec <global_debug()+0xf0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    143c:	4620      	mov	r0, r4
    143e:	7819      	ldrb	r1, [r3, #0]
    1440:	f00a fb76 	bl	bb30 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1444:	4620      	mov	r0, r4
    1446:	f00a fb23 	bl	ba90 <Print::println()>
    144a:	2111      	movs	r1, #17
    144c:	4828      	ldr	r0, [pc, #160]	; (14f0 <global_debug()+0xf4>)
    144e:	f00a f91b 	bl	b688 <usb_serial_write>
	Serial.print("(T) Mode Timer:\t\t");
	Serial.println(mode_change_time);
    1452:	4b28      	ldr	r3, [pc, #160]	; (14f4 <global_debug()+0xf8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1454:	4620      	mov	r0, r4
    1456:	8819      	ldrh	r1, [r3, #0]
    1458:	f00a fb6a 	bl	bb30 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    145c:	4620      	mov	r0, r4
    145e:	f00a fb17 	bl	ba90 <Print::println()>
    1462:	2114      	movs	r1, #20
    1464:	4824      	ldr	r0, [pc, #144]	; (14f8 <global_debug()+0xfc>)
    1466:	f00a f90f 	bl	b688 <usb_serial_write>
	Serial.print("Mode change number:\t");
	Serial.println(number_of_mode_changes);
    146a:	4b24      	ldr	r3, [pc, #144]	; (14fc <global_debug()+0x100>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    146c:	4620      	mov	r0, r4
    146e:	8819      	ldrh	r1, [r3, #0]
    1470:	f00a fb5e 	bl	bb30 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1474:	4620      	mov	r0, r4
    1476:	f00a fb0b 	bl	ba90 <Print::println()>
    147a:	210f      	movs	r1, #15
    147c:	4820      	ldr	r0, [pc, #128]	; (1500 <global_debug()+0x104>)
    147e:	f00a f903 	bl	b688 <usb_serial_write>
	Serial.print("Running time:\t\t");
	Serial.print(number_of_min_on);
    1482:	4b20      	ldr	r3, [pc, #128]	; (1504 <global_debug()+0x108>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1484:	4620      	mov	r0, r4
    1486:	8819      	ldrh	r1, [r3, #0]
    1488:	f00a fb52 	bl	bb30 <Print::print(long)>
    148c:	2102      	movs	r1, #2
    148e:	481e      	ldr	r0, [pc, #120]	; (1508 <global_debug()+0x10c>)
    1490:	f00a f8fa 	bl	b688 <usb_serial_write>
	Serial.print("m ");
	Serial.print(number_of_sec_on);
    1494:	4b1d      	ldr	r3, [pc, #116]	; (150c <global_debug()+0x110>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1496:	220a      	movs	r2, #10
    1498:	7819      	ldrb	r1, [r3, #0]
    149a:	4620      	mov	r0, r4
    149c:	2300      	movs	r3, #0
    149e:	f00a fb07 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    14a2:	2101      	movs	r1, #1
    14a4:	481a      	ldr	r0, [pc, #104]	; (1510 <global_debug()+0x114>)
    14a6:	f00a f8ef 	bl	b688 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    14aa:	4620      	mov	r0, r4
    14ac:	f00a faf0 	bl	ba90 <Print::println()>
    14b0:	210e      	movs	r1, #14
    14b2:	4818      	ldr	r0, [pc, #96]	; (1514 <global_debug()+0x118>)
    14b4:	f00a f8e8 	bl	b688 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14b8:	4b17      	ldr	r3, [pc, #92]	; (1518 <global_debug()+0x11c>)
    14ba:	681b      	ldr	r3, [r3, #0]
    14bc:	9301      	str	r3, [sp, #4]
	return ret;
    14be:	9901      	ldr	r1, [sp, #4]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    14c0:	2300      	movs	r3, #0
    14c2:	220a      	movs	r2, #10
    14c4:	4620      	mov	r0, r4
    14c6:	f00a faf3 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    14ca:	4620      	mov	r0, r4
    14cc:	f00a fae0 	bl	ba90 <Print::println()>
	Serial.println("s");
	Serial.print("System time:\t\t");
	Serial.println(millis());
}
    14d0:	b002      	add	sp, #8
    14d2:	bd10      	pop	{r4, pc}
    14d4:	0000e3c8 	.word	0x0000e3c8
    14d8:	1fff8788 	.word	0x1fff8788
    14dc:	1fff877f 	.word	0x1fff877f
    14e0:	0000e3dc 	.word	0x0000e3dc
    14e4:	1fff8742 	.word	0x1fff8742
    14e8:	0000e3f0 	.word	0x0000e3f0
    14ec:	1fff8754 	.word	0x1fff8754
    14f0:	0000e408 	.word	0x0000e408
    14f4:	1fff871c 	.word	0x1fff871c
    14f8:	0000e41c 	.word	0x0000e41c
    14fc:	1fff8894 	.word	0x1fff8894
    1500:	0000e434 	.word	0x0000e434
    1504:	1fff91e2 	.word	0x1fff91e2
    1508:	0000e444 	.word	0x0000e444
    150c:	1fff9141 	.word	0x1fff9141
    1510:	0000e448 	.word	0x0000e448
    1514:	0000e44c 	.word	0x0000e44c
    1518:	1ffface8 	.word	0x1ffface8

0000151c <begin_transition()>:
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    151c:	491e      	ldr	r1, [pc, #120]	; (1598 <begin_transition()+0x7c>)

// Transition functions
void begin_transition() {
	in_transition = 1;
    151e:	481f      	ldr	r0, [pc, #124]	; (159c <begin_transition()+0x80>)
    1520:	880b      	ldrh	r3, [r1, #0]
    1522:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1526:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    152a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    152e:	3319      	adds	r3, #25
    1530:	b29b      	uxth	r3, r3
    1532:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1536:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    153a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    153e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    1542:	3219      	adds	r2, #25
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
    1544:	b2db      	uxtb	r3, r3
    1546:	b292      	uxth	r2, r2
    1548:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	Serial.print("System time:\t\t");
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
    154c:	b4f0      	push	{r4, r5, r6, r7}
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
    154e:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1550:	eb02 2712 	add.w	r7, r2, r2, lsr #8
    1554:	4e12      	ldr	r6, [pc, #72]	; (15a0 <begin_transition()+0x84>)
	transition_speed = random8(3, 8);
    1556:	4d13      	ldr	r5, [pc, #76]	; (15a4 <begin_transition()+0x88>)
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
    1558:	5cf3      	ldrb	r3, [r6, r3]
    155a:	4c13      	ldr	r4, [pc, #76]	; (15a8 <begin_transition()+0x8c>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    155c:	800a      	strh	r2, [r1, #0]
	transition_speed = random8(3, 8);
    155e:	b2ff      	uxtb	r7, r7
    1560:	eb07 0787 	add.w	r7, r7, r7, lsl #2
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
    1564:	2201      	movs	r2, #1
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
    1566:	123f      	asrs	r7, r7, #8
    1568:	3703      	adds	r7, #3
	switch (transition_type) {
    156a:	4293      	cmp	r3, r2

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
    156c:	702f      	strb	r7, [r5, #0]
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
    156e:	7023      	strb	r3, [r4, #0]
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
    1570:	7002      	strb	r2, [r0, #0]
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
    1572:	d00c      	beq.n	158e <begin_transition()+0x72>
    1574:	d306      	bcc.n	1584 <begin_transition()+0x68>
    1576:	2b02      	cmp	r3, #2
    1578:	d102      	bne.n	1580 <begin_transition()+0x64>
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = NUM_LEDS - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
    157a:	4b0c      	ldr	r3, [pc, #48]	; (15ac <begin_transition()+0x90>)
    157c:	2200      	movs	r2, #0
    157e:	701a      	strb	r2, [r3, #0]
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
    1580:	bcf0      	pop	{r4, r5, r6, r7}
    1582:	4770      	bx	lr
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
    1584:	4b0a      	ldr	r3, [pc, #40]	; (15b0 <begin_transition()+0x94>)
    1586:	2200      	movs	r2, #0
    1588:	701a      	strb	r2, [r3, #0]
		case WIPEDOWN:		wipe_pos = NUM_LEDS - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
    158a:	bcf0      	pop	{r4, r5, r6, r7}
    158c:	4770      	bx	lr
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = NUM_LEDS - 1;	break;
    158e:	4b07      	ldr	r3, [pc, #28]	; (15ac <begin_transition()+0x90>)
    1590:	2295      	movs	r2, #149	; 0x95
    1592:	701a      	strb	r2, [r3, #0]
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
    1594:	bcf0      	pop	{r4, r5, r6, r7}
    1596:	4770      	bx	lr
    1598:	1fff8780 	.word	0x1fff8780
    159c:	1fff90e0 	.word	0x1fff90e0
    15a0:	1fff874c 	.word	0x1fff874c
    15a4:	1fff9a25 	.word	0x1fff9a25
    15a8:	1fff90ec 	.word	0x1fff90ec
    15ac:	1fff911c 	.word	0x1fff911c
    15b0:	1fff8896 	.word	0x1fff8896

000015b4 <finish_transition()>:

void finish_transition() {
    15b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	in_transition = 0;
    15b6:	4ce9      	ldr	r4, [pc, #932]	; (195c <finish_transition()+0x3a8>)
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    15b8:	48e9      	ldr	r0, [pc, #932]	; (1960 <finish_transition()+0x3ac>)
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
    15ba:	b083      	sub	sp, #12
	in_transition = 0;
    15bc:	2300      	movs	r3, #0
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    15be:	aa01      	add	r2, sp, #4
    15c0:	2196      	movs	r1, #150	; 0x96
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
    15c2:	7023      	strb	r3, [r4, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    15c4:	f88d 3004 	strb.w	r3, [sp, #4]
    15c8:	f88d 3005 	strb.w	r3, [sp, #5]
    15cc:	f88d 3006 	strb.w	r3, [sp, #6]
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    15d0:	f008 f89e 	bl	9710 <fill_solid(CRGB*, int, CRGB const&)>
    15d4:	4be3      	ldr	r3, [pc, #908]	; (1964 <finish_transition()+0x3b0>)
    15d6:	4ae4      	ldr	r2, [pc, #912]	; (1968 <finish_transition()+0x3b4>)
    15d8:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15dc:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
    15e0:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
    15e4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15e8:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
    15ec:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
    15f0:	f803 1c01 	strb.w	r1, [r3, #-1]
    15f4:	3303      	adds	r3, #3
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    15f6:	429d      	cmp	r5, r3
    15f8:	f102 0203 	add.w	r2, r2, #3
    15fc:	d1ee      	bne.n	15dc <finish_transition()+0x28>
    15fe:	48db      	ldr	r0, [pc, #876]	; (196c <finish_transition()+0x3b8>)
    1600:	4cd7      	ldr	r4, [pc, #860]	; (1960 <finish_transition()+0x3ac>)
    1602:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    1606:	f890 21c5 	ldrb.w	r2, [r0, #453]	; 0x1c5
    160a:	f890 31c6 	ldrb.w	r3, [r0, #454]	; 0x1c6
    160e:	f890 61c2 	ldrb.w	r6, [r0, #450]	; 0x1c2
    1612:	f890 51c3 	ldrb.w	r5, [r0, #451]	; 0x1c3
    1616:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
    161a:	f884 21c5 	strb.w	r2, [r4, #453]	; 0x1c5
    161e:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
    1622:	f884 61c2 	strb.w	r6, [r4, #450]	; 0x1c2
    1626:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    162a:	f200 13c7 	addw	r3, r0, #455	; 0x1c7
    162e:	f204 12c7 	addw	r2, r4, #455	; 0x1c7
    1632:	f200 11f7 	addw	r1, r0, #503	; 0x1f7
    1636:	681e      	ldr	r6, [r3, #0]
    1638:	685d      	ldr	r5, [r3, #4]
    163a:	6016      	str	r6, [r2, #0]
    163c:	689e      	ldr	r6, [r3, #8]
    163e:	6055      	str	r5, [r2, #4]
    1640:	68dd      	ldr	r5, [r3, #12]
    1642:	60d5      	str	r5, [r2, #12]
    1644:	3310      	adds	r3, #16
    1646:	428b      	cmp	r3, r1
    1648:	6096      	str	r6, [r2, #8]
    164a:	f102 0210 	add.w	r2, r2, #16
    164e:	d1f2      	bne.n	1636 <finish_transition()+0x82>
    1650:	4bc7      	ldr	r3, [pc, #796]	; (1970 <finish_transition()+0x3bc>)
    1652:	4ac8      	ldr	r2, [pc, #800]	; (1974 <finish_transition()+0x3c0>)
    1654:	f103 0130 	add.w	r1, r3, #48	; 0x30
    1658:	681e      	ldr	r6, [r3, #0]
    165a:	685d      	ldr	r5, [r3, #4]
    165c:	6016      	str	r6, [r2, #0]
    165e:	689e      	ldr	r6, [r3, #8]
    1660:	6055      	str	r5, [r2, #4]
    1662:	68dd      	ldr	r5, [r3, #12]
    1664:	60d5      	str	r5, [r2, #12]
    1666:	3310      	adds	r3, #16
    1668:	428b      	cmp	r3, r1
    166a:	6096      	str	r6, [r2, #8]
    166c:	f102 0210 	add.w	r2, r2, #16
    1670:	d1f2      	bne.n	1658 <finish_transition()+0xa4>
    1672:	f890 2227 	ldrb.w	r2, [r0, #551]	; 0x227
    1676:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
    167a:	f890 6229 	ldrb.w	r6, [r0, #553]	; 0x229
    167e:	f890 522a 	ldrb.w	r5, [r0, #554]	; 0x22a
    1682:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
    1686:	f884 2227 	strb.w	r2, [r4, #551]	; 0x227
    168a:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
    168e:	f890 222c 	ldrb.w	r2, [r0, #556]	; 0x22c
    1692:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    1696:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    169a:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
    169e:	f890 622e 	ldrb.w	r6, [r0, #558]	; 0x22e
    16a2:	f890 522f 	ldrb.w	r5, [r0, #559]	; 0x22f
    16a6:	f884 122b 	strb.w	r1, [r4, #555]	; 0x22b
    16aa:	f884 222c 	strb.w	r2, [r4, #556]	; 0x22c
    16ae:	f890 1230 	ldrb.w	r1, [r0, #560]	; 0x230
    16b2:	f890 2231 	ldrb.w	r2, [r0, #561]	; 0x231
    16b6:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
    16ba:	f890 3232 	ldrb.w	r3, [r0, #562]	; 0x232
    16be:	f884 622e 	strb.w	r6, [r4, #558]	; 0x22e
    16c2:	f884 522f 	strb.w	r5, [r4, #559]	; 0x22f
    16c6:	f890 6233 	ldrb.w	r6, [r0, #563]	; 0x233
    16ca:	f890 5234 	ldrb.w	r5, [r0, #564]	; 0x234
    16ce:	f884 1230 	strb.w	r1, [r4, #560]	; 0x230
    16d2:	f884 2231 	strb.w	r2, [r4, #561]	; 0x231
    16d6:	f890 1235 	ldrb.w	r1, [r0, #565]	; 0x235
    16da:	f890 2236 	ldrb.w	r2, [r0, #566]	; 0x236
    16de:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
    16e2:	4ba5      	ldr	r3, [pc, #660]	; (1978 <finish_transition()+0x3c4>)
    16e4:	f884 5234 	strb.w	r5, [r4, #564]	; 0x234
    16e8:	f884 1235 	strb.w	r1, [r4, #565]	; 0x235
    16ec:	f884 2236 	strb.w	r2, [r4, #566]	; 0x236
    16f0:	f884 6233 	strb.w	r6, [r4, #563]	; 0x233
    16f4:	4aa1      	ldr	r2, [pc, #644]	; (197c <finish_transition()+0x3c8>)
    16f6:	f890 6237 	ldrb.w	r6, [r0, #567]	; 0x237
    16fa:	f890 5238 	ldrb.w	r5, [r0, #568]	; 0x238
    16fe:	f890 1239 	ldrb.w	r1, [r0, #569]	; 0x239
    1702:	f884 6237 	strb.w	r6, [r4, #567]	; 0x237
    1706:	f103 073c 	add.w	r7, r3, #60	; 0x3c
    170a:	f884 5238 	strb.w	r5, [r4, #568]	; 0x238
    170e:	f884 1239 	strb.w	r1, [r4, #569]	; 0x239
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1712:	f812 6c03 	ldrb.w	r6, [r2, #-3]
        g = rhs.g;
    1716:	f812 5c02 	ldrb.w	r5, [r2, #-2]
        b = rhs.b;
    171a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    171e:	f803 6c03 	strb.w	r6, [r3, #-3]
        g = rhs.g;
    1722:	f803 5c02 	strb.w	r5, [r3, #-2]
        b = rhs.b;
    1726:	f803 1c01 	strb.w	r1, [r3, #-1]
    172a:	3303      	adds	r3, #3
    172c:	429f      	cmp	r7, r3
    172e:	f102 0203 	add.w	r2, r2, #3
    1732:	d1ee      	bne.n	1712 <finish_transition()+0x15e>
    1734:	f890 2276 	ldrb.w	r2, [r0, #630]	; 0x276
    1738:	f890 1277 	ldrb.w	r1, [r0, #631]	; 0x277
    173c:	f890 5278 	ldrb.w	r5, [r0, #632]	; 0x278
    1740:	4b8f      	ldr	r3, [pc, #572]	; (1980 <finish_transition()+0x3cc>)
    1742:	f884 2276 	strb.w	r2, [r4, #630]	; 0x276
    1746:	f884 1277 	strb.w	r1, [r4, #631]	; 0x277
    174a:	f890 2279 	ldrb.w	r2, [r0, #633]	; 0x279
    174e:	f890 127a 	ldrb.w	r1, [r0, #634]	; 0x27a
    1752:	f884 5278 	strb.w	r5, [r4, #632]	; 0x278
    1756:	f884 2279 	strb.w	r2, [r4, #633]	; 0x279
    175a:	f890 527b 	ldrb.w	r5, [r0, #635]	; 0x27b
    175e:	f890 227c 	ldrb.w	r2, [r0, #636]	; 0x27c
    1762:	f884 127a 	strb.w	r1, [r4, #634]	; 0x27a
    1766:	4987      	ldr	r1, [pc, #540]	; (1984 <finish_transition()+0x3d0>)
    1768:	f884 527b 	strb.w	r5, [r4, #635]	; 0x27b
    176c:	f884 227c 	strb.w	r2, [r4, #636]	; 0x27c
    1770:	f103 0596 	add.w	r5, r3, #150	; 0x96
    1774:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    1778:	f803 2b01 	strb.w	r2, [r3], #1
    177c:	42ab      	cmp	r3, r5
    177e:	4a78      	ldr	r2, [pc, #480]	; (1960 <finish_transition()+0x3ac>)
    1780:	d1f8      	bne.n	1774 <finish_transition()+0x1c0>
    1782:	f890 6313 	ldrb.w	r6, [r0, #787]	; 0x313
    1786:	f8b0 5314 	ldrh.w	r5, [r0, #788]	; 0x314
    178a:	f8b0 1316 	ldrh.w	r1, [r0, #790]	; 0x316
    178e:	f8b0 3318 	ldrh.w	r3, [r0, #792]	; 0x318
    1792:	f882 6313 	strb.w	r6, [r2, #787]	; 0x313
    1796:	f8a2 5314 	strh.w	r5, [r2, #788]	; 0x314
    179a:	f890 631a 	ldrb.w	r6, [r0, #794]	; 0x31a
    179e:	f890 531b 	ldrb.w	r5, [r0, #795]	; 0x31b
    17a2:	f8a2 1316 	strh.w	r1, [r2, #790]	; 0x316
    17a6:	f8a2 3318 	strh.w	r3, [r2, #792]	; 0x318
    17aa:	f890 131c 	ldrb.w	r1, [r0, #796]	; 0x31c
    17ae:	f890 331d 	ldrb.w	r3, [r0, #797]	; 0x31d
    17b2:	f882 631a 	strb.w	r6, [r2, #794]	; 0x31a
    17b6:	f882 531b 	strb.w	r5, [r2, #795]	; 0x31b
    17ba:	f890 631e 	ldrb.w	r6, [r0, #798]	; 0x31e
    17be:	f890 531f 	ldrb.w	r5, [r0, #799]	; 0x31f
    17c2:	f882 131c 	strb.w	r1, [r2, #796]	; 0x31c
    17c6:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
    17ca:	f8b0 1320 	ldrh.w	r1, [r0, #800]	; 0x320
    17ce:	f8b0 3322 	ldrh.w	r3, [r0, #802]	; 0x322
    17d2:	f882 631e 	strb.w	r6, [r2, #798]	; 0x31e
    17d6:	f882 531f 	strb.w	r5, [r2, #799]	; 0x31f
    17da:	f8a2 1320 	strh.w	r1, [r2, #800]	; 0x320
    17de:	f8b0 5326 	ldrh.w	r5, [r0, #806]	; 0x326
    17e2:	f8b0 1328 	ldrh.w	r1, [r0, #808]	; 0x328
    17e6:	f8a2 3322 	strh.w	r3, [r2, #802]	; 0x322
    17ea:	f8b0 6324 	ldrh.w	r6, [r0, #804]	; 0x324
    17ee:	f8b0 332a 	ldrh.w	r3, [r0, #810]	; 0x32a
    17f2:	f8a2 5326 	strh.w	r5, [r2, #806]	; 0x326
    17f6:	f8a2 1328 	strh.w	r1, [r2, #808]	; 0x328
    17fa:	f8a2 332a 	strh.w	r3, [r2, #810]	; 0x32a
    17fe:	f8a2 6324 	strh.w	r6, [r2, #804]	; 0x324
    1802:	f8b0 632c 	ldrh.w	r6, [r0, #812]	; 0x32c
    1806:	f8b0 532e 	ldrh.w	r5, [r0, #814]	; 0x32e
    180a:	f8b0 1330 	ldrh.w	r1, [r0, #816]	; 0x330
    180e:	f8b0 3332 	ldrh.w	r3, [r0, #818]	; 0x332
    1812:	f8a2 632c 	strh.w	r6, [r2, #812]	; 0x32c
    1816:	f8a2 532e 	strh.w	r5, [r2, #814]	; 0x32e
    181a:	f8b0 6334 	ldrh.w	r6, [r0, #820]	; 0x334
    181e:	f890 5336 	ldrb.w	r5, [r0, #822]	; 0x336
    1822:	f8a2 1330 	strh.w	r1, [r2, #816]	; 0x330
    1826:	f8a2 3332 	strh.w	r3, [r2, #818]	; 0x332
    182a:	f890 1337 	ldrb.w	r1, [r0, #823]	; 0x337
    182e:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
    1832:	f8a2 6334 	strh.w	r6, [r2, #820]	; 0x334
    1836:	f882 5336 	strb.w	r5, [r2, #822]	; 0x336
    183a:	f890 6339 	ldrb.w	r6, [r0, #825]	; 0x339
    183e:	f890 533a 	ldrb.w	r5, [r0, #826]	; 0x33a
    1842:	f882 1337 	strb.w	r1, [r2, #823]	; 0x337
    1846:	f882 3338 	strb.w	r3, [r2, #824]	; 0x338
    184a:	f890 133b 	ldrb.w	r1, [r0, #827]	; 0x33b
    184e:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
    1852:	f882 6339 	strb.w	r6, [r2, #825]	; 0x339
    1856:	f882 533a 	strb.w	r5, [r2, #826]	; 0x33a
    185a:	f882 133b 	strb.w	r1, [r2, #827]	; 0x33b
    185e:	f890 533e 	ldrb.w	r5, [r0, #830]	; 0x33e
    1862:	f890 133f 	ldrb.w	r1, [r0, #831]	; 0x33f
    1866:	f882 333c 	strb.w	r3, [r2, #828]	; 0x33c
    186a:	f890 633d 	ldrb.w	r6, [r0, #829]	; 0x33d
    186e:	f890 3340 	ldrb.w	r3, [r0, #832]	; 0x340
    1872:	f882 533e 	strb.w	r5, [r2, #830]	; 0x33e
    1876:	f882 133f 	strb.w	r1, [r2, #831]	; 0x33f
    187a:	f882 3340 	strb.w	r3, [r2, #832]	; 0x340
    187e:	f882 633d 	strb.w	r6, [r2, #829]	; 0x33d
    1882:	f890 6341 	ldrb.w	r6, [r0, #833]	; 0x341
    1886:	f890 5342 	ldrb.w	r5, [r0, #834]	; 0x342
    188a:	f890 3343 	ldrb.w	r3, [r0, #835]	; 0x343
    188e:	f882 6341 	strb.w	r6, [r2, #833]	; 0x341
    1892:	f882 5342 	strb.w	r5, [r2, #834]	; 0x342
    1896:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
    189a:	f890 5345 	ldrb.w	r5, [r0, #837]	; 0x345
    189e:	f882 3343 	strb.w	r3, [r2, #835]	; 0x343
    18a2:	f890 3346 	ldrb.w	r3, [r0, #838]	; 0x346
    18a6:	f882 6344 	strb.w	r6, [r2, #836]	; 0x344
    18aa:	f882 5345 	strb.w	r5, [r2, #837]	; 0x345
    18ae:	f890 6347 	ldrb.w	r6, [r0, #839]	; 0x347
    18b2:	f890 5348 	ldrb.w	r5, [r0, #840]	; 0x348
    18b6:	f882 3346 	strb.w	r3, [r2, #838]	; 0x346
    18ba:	f890 3349 	ldrb.w	r3, [r0, #841]	; 0x349
    18be:	f882 6347 	strb.w	r6, [r2, #839]	; 0x347
    18c2:	f882 5348 	strb.w	r5, [r2, #840]	; 0x348
    18c6:	f890 634a 	ldrb.w	r6, [r0, #842]	; 0x34a
    18ca:	f890 534b 	ldrb.w	r5, [r0, #843]	; 0x34b
    18ce:	f882 3349 	strb.w	r3, [r2, #841]	; 0x349
    18d2:	f890 334c 	ldrb.w	r3, [r0, #844]	; 0x34c
    18d6:	f882 634a 	strb.w	r6, [r2, #842]	; 0x34a
    18da:	f882 534b 	strb.w	r5, [r2, #843]	; 0x34b
    18de:	f882 334c 	strb.w	r3, [r2, #844]	; 0x34c
    18e2:	f8d0 6350 	ldr.w	r6, [r0, #848]	; 0x350
    18e6:	f890 3355 	ldrb.w	r3, [r0, #853]	; 0x355
    18ea:	f890 5354 	ldrb.w	r5, [r0, #852]	; 0x354
    18ee:	4926      	ldr	r1, [pc, #152]	; (1988 <finish_transition()+0x3d4>)
    18f0:	f882 3355 	strb.w	r3, [r2, #853]	; 0x355
    18f4:	f8c2 6350 	str.w	r6, [r2, #848]	; 0x350
    18f8:	f882 5354 	strb.w	r5, [r2, #852]	; 0x354
    18fc:	f502 7356 	add.w	r3, r2, #856	; 0x358
    1900:	f502 6289 	add.w	r2, r2, #1096	; 0x448
    1904:	f851 5f04 	ldr.w	r5, [r1, #4]!
    1908:	f843 5b04 	str.w	r5, [r3], #4
    190c:	4293      	cmp	r3, r2
    190e:	d1f9      	bne.n	1904 <finish_transition()+0x350>
    1910:	4a1e      	ldr	r2, [pc, #120]	; (198c <finish_transition()+0x3d8>)
    1912:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
    1916:	f852 1f04 	ldr.w	r1, [r2, #4]!
    191a:	f843 1b04 	str.w	r1, [r3], #4
    191e:	42ab      	cmp	r3, r5
    1920:	d1f9      	bne.n	1916 <finish_transition()+0x362>
    1922:	4a1b      	ldr	r2, [pc, #108]	; (1990 <finish_transition()+0x3dc>)
    1924:	f103 053c 	add.w	r5, r3, #60	; 0x3c
    1928:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    192c:	f803 1b01 	strb.w	r1, [r3], #1
    1930:	42ab      	cmp	r3, r5
    1932:	d1f9      	bne.n	1928 <finish_transition()+0x374>
    1934:	4a17      	ldr	r2, [pc, #92]	; (1994 <finish_transition()+0x3e0>)
    1936:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
    193a:	f852 1f04 	ldr.w	r1, [r2, #4]!
    193e:	f843 1b04 	str.w	r1, [r3], #4
    1942:	42ab      	cmp	r3, r5
    1944:	d1f9      	bne.n	193a <finish_transition()+0x386>
    1946:	4a14      	ldr	r2, [pc, #80]	; (1998 <finish_transition()+0x3e4>)
    1948:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
    194c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1950:	f843 1b04 	str.w	r1, [r3], #4
    1954:	42ab      	cmp	r3, r5
    1956:	4902      	ldr	r1, [pc, #8]	; (1960 <finish_transition()+0x3ac>)
    1958:	d1f8      	bne.n	194c <finish_transition()+0x398>
    195a:	e01f      	b.n	199c <finish_transition()+0x3e8>
    195c:	1fff90e0 	.word	0x1fff90e0
    1960:	1fffa274 	.word	0x1fffa274
    1964:	1fffa277 	.word	0x1fffa277
    1968:	1fff889b 	.word	0x1fff889b
    196c:	1fff8898 	.word	0x1fff8898
    1970:	1fff8a8f 	.word	0x1fff8a8f
    1974:	1fffa46b 	.word	0x1fffa46b
    1978:	1fffa4b1 	.word	0x1fffa4b1
    197c:	1fff8ad5 	.word	0x1fff8ad5
    1980:	1fffa4f1 	.word	0x1fffa4f1
    1984:	1fff8b14 	.word	0x1fff8b14
    1988:	1fff8bec 	.word	0x1fff8bec
    198c:	1fff8cdc 	.word	0x1fff8cdc
    1990:	1fff8dcf 	.word	0x1fff8dcf
    1994:	1fff8e08 	.word	0x1fff8e08
    1998:	1fff8ef8 	.word	0x1fff8ef8
    199c:	f890 3754 	ldrb.w	r3, [r0, #1876]	; 0x754
    19a0:	f8b0 2756 	ldrh.w	r2, [r0, #1878]	; 0x756
    19a4:	f8b0 6758 	ldrh.w	r6, [r0, #1880]	; 0x758
    19a8:	f8b0 575a 	ldrh.w	r5, [r0, #1882]	; 0x75a
    19ac:	f881 3754 	strb.w	r3, [r1, #1876]	; 0x754
    19b0:	f8a1 2756 	strh.w	r2, [r1, #1878]	; 0x756
    19b4:	f890 375c 	ldrb.w	r3, [r0, #1884]	; 0x75c
    19b8:	f890 275d 	ldrb.w	r2, [r0, #1885]	; 0x75d
    19bc:	f8a1 6758 	strh.w	r6, [r1, #1880]	; 0x758
    19c0:	f8a1 575a 	strh.w	r5, [r1, #1882]	; 0x75a
    19c4:	f881 375c 	strb.w	r3, [r1, #1884]	; 0x75c
    19c8:	f881 275d 	strb.w	r2, [r1, #1885]	; 0x75d
    19cc:	f890 3760 	ldrb.w	r3, [r0, #1888]	; 0x760
    19d0:	f890 675e 	ldrb.w	r6, [r0, #1886]	; 0x75e
    19d4:	f890 575f 	ldrb.w	r5, [r0, #1887]	; 0x75f
    19d8:	4a48      	ldr	r2, [pc, #288]	; (1afc <finish_transition()+0x548>)
    19da:	f881 3760 	strb.w	r3, [r1, #1888]	; 0x760
    19de:	f881 675e 	strb.w	r6, [r1, #1886]	; 0x75e
    19e2:	f881 575f 	strb.w	r5, [r1, #1887]	; 0x75f
    19e6:	f201 7364 	addw	r3, r1, #1892	; 0x764
    19ea:	f201 7184 	addw	r1, r1, #1924	; 0x784
    19ee:	f852 5f04 	ldr.w	r5, [r2, #4]!
    19f2:	f843 5b04 	str.w	r5, [r3], #4
    19f6:	428b      	cmp	r3, r1
    19f8:	d1f9      	bne.n	19ee <finish_transition()+0x43a>
    19fa:	4a41      	ldr	r2, [pc, #260]	; (1b00 <finish_transition()+0x54c>)
    19fc:	f103 0520 	add.w	r5, r3, #32
    1a00:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1a04:	f843 1b04 	str.w	r1, [r3], #4
    1a08:	42ab      	cmp	r3, r5
    1a0a:	d1f9      	bne.n	1a00 <finish_transition()+0x44c>
    1a0c:	4a3d      	ldr	r2, [pc, #244]	; (1b04 <finish_transition()+0x550>)
    1a0e:	f103 0520 	add.w	r5, r3, #32
    1a12:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1a16:	f843 1b04 	str.w	r1, [r3], #4
    1a1a:	42ab      	cmp	r3, r5
    1a1c:	d1f9      	bne.n	1a12 <finish_transition()+0x45e>
    1a1e:	4a3a      	ldr	r2, [pc, #232]	; (1b08 <finish_transition()+0x554>)
    1a20:	f103 0520 	add.w	r5, r3, #32
    1a24:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1a28:	f843 1b04 	str.w	r1, [r3], #4
    1a2c:	42ab      	cmp	r3, r5
    1a2e:	d1f9      	bne.n	1a24 <finish_transition()+0x470>
    1a30:	4a36      	ldr	r2, [pc, #216]	; (1b0c <finish_transition()+0x558>)
    1a32:	f103 0520 	add.w	r5, r3, #32
    1a36:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1a3a:	f843 1b04 	str.w	r1, [r3], #4
    1a3e:	42ab      	cmp	r3, r5
    1a40:	d1f9      	bne.n	1a36 <finish_transition()+0x482>
    1a42:	4933      	ldr	r1, [pc, #204]	; (1b10 <finish_transition()+0x55c>)
    1a44:	f103 0520 	add.w	r5, r3, #32
    1a48:	f851 2f04 	ldr.w	r2, [r1, #4]!
    1a4c:	f843 2b04 	str.w	r2, [r3], #4
    1a50:	42ab      	cmp	r3, r5
    1a52:	4a30      	ldr	r2, [pc, #192]	; (1b14 <finish_transition()+0x560>)
    1a54:	d1f8      	bne.n	1a48 <finish_transition()+0x494>
    1a56:	f890 6824 	ldrb.w	r6, [r0, #2084]	; 0x824
    1a5a:	f890 5825 	ldrb.w	r5, [r0, #2085]	; 0x825
    1a5e:	f890 1826 	ldrb.w	r1, [r0, #2086]	; 0x826
    1a62:	f882 6824 	strb.w	r6, [r2, #2084]	; 0x824
    1a66:	f882 5825 	strb.w	r5, [r2, #2085]	; 0x825
    1a6a:	f890 6827 	ldrb.w	r6, [r0, #2087]	; 0x827
    1a6e:	f8d0 5828 	ldr.w	r5, [r0, #2088]	; 0x828
    1a72:	f882 1826 	strb.w	r1, [r2, #2086]	; 0x826
    1a76:	f8d0 182c 	ldr.w	r1, [r0, #2092]	; 0x82c
    1a7a:	f882 6827 	strb.w	r6, [r2, #2087]	; 0x827
    1a7e:	f8c2 5828 	str.w	r5, [r2, #2088]	; 0x828
    1a82:	f890 6830 	ldrb.w	r6, [r0, #2096]	; 0x830
    1a86:	f890 5831 	ldrb.w	r5, [r0, #2097]	; 0x831
    1a8a:	f8c2 182c 	str.w	r1, [r2, #2092]	; 0x82c
	curr_leds = next_leds;
	if (curr_leds.use_overlay) { curr_over_leds = next_over_leds; curr_over_leds.array_type = CURR_OVERLAY; }
    1a8e:	f892 31c6 	ldrb.w	r3, [r2, #454]	; 0x1c6
    1a92:	f890 1832 	ldrb.w	r1, [r0, #2098]	; 0x832
    1a96:	f882 6830 	strb.w	r6, [r2, #2096]	; 0x830
    1a9a:	f890 7833 	ldrb.w	r7, [r0, #2099]	; 0x833
    1a9e:	f882 5831 	strb.w	r5, [r2, #2097]	; 0x831
    1aa2:	f890 6834 	ldrb.w	r6, [r0, #2100]	; 0x834
    1aa6:	f882 1832 	strb.w	r1, [r2, #2098]	; 0x832
    1aaa:	f890 5835 	ldrb.w	r5, [r0, #2101]	; 0x835
    1aae:	f890 1836 	ldrb.w	r1, [r0, #2102]	; 0x836
    1ab2:	f882 7833 	strb.w	r7, [r2, #2099]	; 0x833
    1ab6:	f882 6834 	strb.w	r6, [r2, #2100]	; 0x834
    1aba:	f882 5835 	strb.w	r5, [r2, #2101]	; 0x835
    1abe:	f882 1836 	strb.w	r1, [r2, #2102]	; 0x836
    1ac2:	bb6b      	cbnz	r3, 1b20 <finish_transition()+0x56c>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1ac4:	2500      	movs	r5, #0
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    1ac6:	aa01      	add	r2, sp, #4
    1ac8:	2196      	movs	r1, #150	; 0x96
    1aca:	4813      	ldr	r0, [pc, #76]	; (1b18 <finish_transition()+0x564>)
    1acc:	f88d 5004 	strb.w	r5, [sp, #4]
    1ad0:	f88d 5005 	strb.w	r5, [sp, #5]
    1ad4:	f88d 5006 	strb.w	r5, [sp, #6]
    1ad8:	f007 fe1a 	bl	9710 <fill_solid(CRGB*, int, CRGB const&)>
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
    1adc:	aa01      	add	r2, sp, #4
    1ade:	2196      	movs	r1, #150	; 0x96
    1ae0:	480e      	ldr	r0, [pc, #56]	; (1b1c <finish_transition()+0x568>)
    1ae2:	f88d 5004 	strb.w	r5, [sp, #4]
    1ae6:	f88d 5005 	strb.w	r5, [sp, #5]
    1aea:	f88d 5006 	strb.w	r5, [sp, #6]
    1aee:	f007 fe0f 	bl	9710 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type = CURRENT;
    1af2:	f884 51c5 	strb.w	r5, [r4, #453]	; 0x1c5
}
    1af6:	b003      	add	sp, #12
    1af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1afa:	bf00      	nop
    1afc:	1fff8ff8 	.word	0x1fff8ff8
    1b00:	1fff9018 	.word	0x1fff9018
    1b04:	1fff9038 	.word	0x1fff9038
    1b08:	1fff9058 	.word	0x1fff9058
    1b0c:	1fff9078 	.word	0x1fff9078
    1b10:	1fff9098 	.word	0x1fff9098
    1b14:	1fffa274 	.word	0x1fffa274
    1b18:	1fff8898 	.word	0x1fff8898
    1b1c:	1fff9a38 	.word	0x1fff9a38
    1b20:	4bf0      	ldr	r3, [pc, #960]	; (1ee4 <finish_transition()+0x930>)
    1b22:	4af1      	ldr	r2, [pc, #964]	; (1ee8 <finish_transition()+0x934>)
    1b24:	f503 76e1 	add.w	r6, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b28:	f812 5c03 	ldrb.w	r5, [r2, #-3]
        g = rhs.g;
    1b2c:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
    1b30:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b34:	f803 5c03 	strb.w	r5, [r3, #-3]
        g = rhs.g;
    1b38:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
    1b3c:	f803 1c01 	strb.w	r1, [r3, #-1]
    1b40:	3303      	adds	r3, #3
    1b42:	429e      	cmp	r6, r3
    1b44:	f102 0203 	add.w	r2, r2, #3
    1b48:	d1ee      	bne.n	1b28 <finish_transition()+0x574>
    1b4a:	48e8      	ldr	r0, [pc, #928]	; (1eec <finish_transition()+0x938>)
    1b4c:	f8df e3b8 	ldr.w	lr, [pc, #952]	; 1f08 <finish_transition()+0x954>
    1b50:	f890 11c3 	ldrb.w	r1, [r0, #451]	; 0x1c3
    1b54:	f890 21c4 	ldrb.w	r2, [r0, #452]	; 0x1c4
    1b58:	f890 31c6 	ldrb.w	r3, [r0, #454]	; 0x1c6
    1b5c:	f890 51c2 	ldrb.w	r5, [r0, #450]	; 0x1c2
    1b60:	f88e 11c3 	strb.w	r1, [lr, #451]	; 0x1c3
    1b64:	f88e 21c4 	strb.w	r2, [lr, #452]	; 0x1c4
    1b68:	f88e 31c6 	strb.w	r3, [lr, #454]	; 0x1c6
    1b6c:	f88e 51c2 	strb.w	r5, [lr, #450]	; 0x1c2
    1b70:	f200 13c7 	addw	r3, r0, #455	; 0x1c7
    1b74:	f20e 12c7 	addw	r2, lr, #455	; 0x1c7
    1b78:	f200 11f7 	addw	r1, r0, #503	; 0x1f7
    1b7c:	681e      	ldr	r6, [r3, #0]
    1b7e:	685d      	ldr	r5, [r3, #4]
    1b80:	6016      	str	r6, [r2, #0]
    1b82:	689e      	ldr	r6, [r3, #8]
    1b84:	6055      	str	r5, [r2, #4]
    1b86:	68dd      	ldr	r5, [r3, #12]
    1b88:	60d5      	str	r5, [r2, #12]
    1b8a:	3310      	adds	r3, #16
    1b8c:	428b      	cmp	r3, r1
    1b8e:	6096      	str	r6, [r2, #8]
    1b90:	f102 0210 	add.w	r2, r2, #16
    1b94:	d1f2      	bne.n	1b7c <finish_transition()+0x5c8>
    1b96:	4bd6      	ldr	r3, [pc, #856]	; (1ef0 <finish_transition()+0x93c>)
    1b98:	4ad6      	ldr	r2, [pc, #856]	; (1ef4 <finish_transition()+0x940>)
    1b9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
    1b9e:	681e      	ldr	r6, [r3, #0]
    1ba0:	685d      	ldr	r5, [r3, #4]
    1ba2:	6016      	str	r6, [r2, #0]
    1ba4:	689e      	ldr	r6, [r3, #8]
    1ba6:	6055      	str	r5, [r2, #4]
    1ba8:	68dd      	ldr	r5, [r3, #12]
    1baa:	60d5      	str	r5, [r2, #12]
    1bac:	3310      	adds	r3, #16
    1bae:	428b      	cmp	r3, r1
    1bb0:	6096      	str	r6, [r2, #8]
    1bb2:	f102 0210 	add.w	r2, r2, #16
    1bb6:	d1f2      	bne.n	1b9e <finish_transition()+0x5ea>
    1bb8:	f890 3227 	ldrb.w	r3, [r0, #551]	; 0x227
    1bbc:	f890 5228 	ldrb.w	r5, [r0, #552]	; 0x228
    1bc0:	f890 1229 	ldrb.w	r1, [r0, #553]	; 0x229
    1bc4:	f890 222a 	ldrb.w	r2, [r0, #554]	; 0x22a
    1bc8:	f88e 3227 	strb.w	r3, [lr, #551]	; 0x227
    1bcc:	f88e 5228 	strb.w	r5, [lr, #552]	; 0x228
    1bd0:	f890 322b 	ldrb.w	r3, [r0, #555]	; 0x22b
    1bd4:	f890 522c 	ldrb.w	r5, [r0, #556]	; 0x22c
    1bd8:	f88e 1229 	strb.w	r1, [lr, #553]	; 0x229
    1bdc:	f88e 222a 	strb.w	r2, [lr, #554]	; 0x22a
    1be0:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    1be4:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    1be8:	f88e 322b 	strb.w	r3, [lr, #555]	; 0x22b
    1bec:	f88e 522c 	strb.w	r5, [lr, #556]	; 0x22c
    1bf0:	f890 322f 	ldrb.w	r3, [r0, #559]	; 0x22f
    1bf4:	f890 5230 	ldrb.w	r5, [r0, #560]	; 0x230
    1bf8:	f88e 122d 	strb.w	r1, [lr, #557]	; 0x22d
    1bfc:	f88e 222e 	strb.w	r2, [lr, #558]	; 0x22e
    1c00:	f890 1231 	ldrb.w	r1, [r0, #561]	; 0x231
    1c04:	f890 2232 	ldrb.w	r2, [r0, #562]	; 0x232
    1c08:	f88e 322f 	strb.w	r3, [lr, #559]	; 0x22f
    1c0c:	f88e 5230 	strb.w	r5, [lr, #560]	; 0x230
    1c10:	f890 3233 	ldrb.w	r3, [r0, #563]	; 0x233
    1c14:	f890 5234 	ldrb.w	r5, [r0, #564]	; 0x234
    1c18:	f88e 1231 	strb.w	r1, [lr, #561]	; 0x231
    1c1c:	f88e 2232 	strb.w	r2, [lr, #562]	; 0x232
    1c20:	f890 1235 	ldrb.w	r1, [r0, #565]	; 0x235
    1c24:	f890 2236 	ldrb.w	r2, [r0, #566]	; 0x236
    1c28:	f88e 3233 	strb.w	r3, [lr, #563]	; 0x233
    1c2c:	f88e 1235 	strb.w	r1, [lr, #565]	; 0x235
    1c30:	f88e 2236 	strb.w	r2, [lr, #566]	; 0x236
    1c34:	4bb0      	ldr	r3, [pc, #704]	; (1ef8 <finish_transition()+0x944>)
    1c36:	f88e 5234 	strb.w	r5, [lr, #564]	; 0x234
    1c3a:	f890 5237 	ldrb.w	r5, [r0, #567]	; 0x237
    1c3e:	f890 2238 	ldrb.w	r2, [r0, #568]	; 0x238
    1c42:	f890 1239 	ldrb.w	r1, [r0, #569]	; 0x239
    1c46:	f88e 2238 	strb.w	r2, [lr, #568]	; 0x238
    1c4a:	4aac      	ldr	r2, [pc, #688]	; (1efc <finish_transition()+0x948>)
    1c4c:	f88e 5237 	strb.w	r5, [lr, #567]	; 0x237
    1c50:	f103 073c 	add.w	r7, r3, #60	; 0x3c
    1c54:	f88e 1239 	strb.w	r1, [lr, #569]	; 0x239
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1c58:	f812 6c03 	ldrb.w	r6, [r2, #-3]
        g = rhs.g;
    1c5c:	f812 5c02 	ldrb.w	r5, [r2, #-2]
        b = rhs.b;
    1c60:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1c64:	f803 6c03 	strb.w	r6, [r3, #-3]
        g = rhs.g;
    1c68:	f803 5c02 	strb.w	r5, [r3, #-2]
        b = rhs.b;
    1c6c:	f803 1c01 	strb.w	r1, [r3, #-1]
    1c70:	3303      	adds	r3, #3
    1c72:	429f      	cmp	r7, r3
    1c74:	f102 0203 	add.w	r2, r2, #3
    1c78:	d1ee      	bne.n	1c58 <finish_transition()+0x6a4>
    1c7a:	f890 1276 	ldrb.w	r1, [r0, #630]	; 0x276
    1c7e:	f890 2277 	ldrb.w	r2, [r0, #631]	; 0x277
    1c82:	f88e 1276 	strb.w	r1, [lr, #630]	; 0x276
    1c86:	f88e 2277 	strb.w	r2, [lr, #631]	; 0x277
    1c8a:	f890 1278 	ldrb.w	r1, [r0, #632]	; 0x278
    1c8e:	f890 2279 	ldrb.w	r2, [r0, #633]	; 0x279
    1c92:	4b9b      	ldr	r3, [pc, #620]	; (1f00 <finish_transition()+0x94c>)
    1c94:	f88e 1278 	strb.w	r1, [lr, #632]	; 0x278
    1c98:	f88e 2279 	strb.w	r2, [lr, #633]	; 0x279
    1c9c:	f890 127a 	ldrb.w	r1, [r0, #634]	; 0x27a
    1ca0:	f890 227b 	ldrb.w	r2, [r0, #635]	; 0x27b
    1ca4:	f88e 127a 	strb.w	r1, [lr, #634]	; 0x27a
    1ca8:	f88e 227b 	strb.w	r2, [lr, #635]	; 0x27b
    1cac:	f890 127c 	ldrb.w	r1, [r0, #636]	; 0x27c
    1cb0:	4a94      	ldr	r2, [pc, #592]	; (1f04 <finish_transition()+0x950>)
    1cb2:	f88e 127c 	strb.w	r1, [lr, #636]	; 0x27c
    1cb6:	f103 0596 	add.w	r5, r3, #150	; 0x96
    1cba:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1cbe:	f803 1b01 	strb.w	r1, [r3], #1
    1cc2:	42ab      	cmp	r3, r5
    1cc4:	4990      	ldr	r1, [pc, #576]	; (1f08 <finish_transition()+0x954>)
    1cc6:	d1f8      	bne.n	1cba <finish_transition()+0x706>
    1cc8:	f890 6313 	ldrb.w	r6, [r0, #787]	; 0x313
    1ccc:	f8b0 5314 	ldrh.w	r5, [r0, #788]	; 0x314
    1cd0:	f8b0 2316 	ldrh.w	r2, [r0, #790]	; 0x316
    1cd4:	f8b0 3318 	ldrh.w	r3, [r0, #792]	; 0x318
    1cd8:	f881 6313 	strb.w	r6, [r1, #787]	; 0x313
    1cdc:	f8a1 5314 	strh.w	r5, [r1, #788]	; 0x314
    1ce0:	f890 631a 	ldrb.w	r6, [r0, #794]	; 0x31a
    1ce4:	f890 531b 	ldrb.w	r5, [r0, #795]	; 0x31b
    1ce8:	f8a1 2316 	strh.w	r2, [r1, #790]	; 0x316
    1cec:	f8a1 3318 	strh.w	r3, [r1, #792]	; 0x318
    1cf0:	f890 231c 	ldrb.w	r2, [r0, #796]	; 0x31c
    1cf4:	f890 331d 	ldrb.w	r3, [r0, #797]	; 0x31d
    1cf8:	f881 631a 	strb.w	r6, [r1, #794]	; 0x31a
    1cfc:	f881 531b 	strb.w	r5, [r1, #795]	; 0x31b
    1d00:	f890 631e 	ldrb.w	r6, [r0, #798]	; 0x31e
    1d04:	f890 531f 	ldrb.w	r5, [r0, #799]	; 0x31f
    1d08:	f881 231c 	strb.w	r2, [r1, #796]	; 0x31c
    1d0c:	f881 331d 	strb.w	r3, [r1, #797]	; 0x31d
    1d10:	f8b0 2320 	ldrh.w	r2, [r0, #800]	; 0x320
    1d14:	f8b0 3322 	ldrh.w	r3, [r0, #802]	; 0x322
    1d18:	f881 631e 	strb.w	r6, [r1, #798]	; 0x31e
    1d1c:	f881 531f 	strb.w	r5, [r1, #799]	; 0x31f
    1d20:	f8a1 2320 	strh.w	r2, [r1, #800]	; 0x320
    1d24:	f8b0 5326 	ldrh.w	r5, [r0, #806]	; 0x326
    1d28:	f8b0 2328 	ldrh.w	r2, [r0, #808]	; 0x328
    1d2c:	f8a1 3322 	strh.w	r3, [r1, #802]	; 0x322
    1d30:	f8b0 6324 	ldrh.w	r6, [r0, #804]	; 0x324
    1d34:	f8b0 332a 	ldrh.w	r3, [r0, #810]	; 0x32a
    1d38:	f8a1 5326 	strh.w	r5, [r1, #806]	; 0x326
    1d3c:	f8a1 2328 	strh.w	r2, [r1, #808]	; 0x328
    1d40:	f8a1 332a 	strh.w	r3, [r1, #810]	; 0x32a
    1d44:	f8a1 6324 	strh.w	r6, [r1, #804]	; 0x324
    1d48:	f8b0 632c 	ldrh.w	r6, [r0, #812]	; 0x32c
    1d4c:	f8b0 532e 	ldrh.w	r5, [r0, #814]	; 0x32e
    1d50:	f8b0 2330 	ldrh.w	r2, [r0, #816]	; 0x330
    1d54:	f8b0 3332 	ldrh.w	r3, [r0, #818]	; 0x332
    1d58:	f8a1 632c 	strh.w	r6, [r1, #812]	; 0x32c
    1d5c:	f8a1 532e 	strh.w	r5, [r1, #814]	; 0x32e
    1d60:	f8b0 6334 	ldrh.w	r6, [r0, #820]	; 0x334
    1d64:	f890 5336 	ldrb.w	r5, [r0, #822]	; 0x336
    1d68:	f8a1 2330 	strh.w	r2, [r1, #816]	; 0x330
    1d6c:	f8a1 3332 	strh.w	r3, [r1, #818]	; 0x332
    1d70:	f890 2337 	ldrb.w	r2, [r0, #823]	; 0x337
    1d74:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
    1d78:	f8a1 6334 	strh.w	r6, [r1, #820]	; 0x334
    1d7c:	f881 5336 	strb.w	r5, [r1, #822]	; 0x336
    1d80:	f890 6339 	ldrb.w	r6, [r0, #825]	; 0x339
    1d84:	f890 533a 	ldrb.w	r5, [r0, #826]	; 0x33a
    1d88:	f881 2337 	strb.w	r2, [r1, #823]	; 0x337
    1d8c:	f881 3338 	strb.w	r3, [r1, #824]	; 0x338
    1d90:	f890 233b 	ldrb.w	r2, [r0, #827]	; 0x33b
    1d94:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
    1d98:	f881 6339 	strb.w	r6, [r1, #825]	; 0x339
    1d9c:	f881 533a 	strb.w	r5, [r1, #826]	; 0x33a
    1da0:	f881 233b 	strb.w	r2, [r1, #827]	; 0x33b
    1da4:	f890 533e 	ldrb.w	r5, [r0, #830]	; 0x33e
    1da8:	f890 233f 	ldrb.w	r2, [r0, #831]	; 0x33f
    1dac:	f881 333c 	strb.w	r3, [r1, #828]	; 0x33c
    1db0:	f890 633d 	ldrb.w	r6, [r0, #829]	; 0x33d
    1db4:	f890 3340 	ldrb.w	r3, [r0, #832]	; 0x340
    1db8:	f881 533e 	strb.w	r5, [r1, #830]	; 0x33e
    1dbc:	f881 233f 	strb.w	r2, [r1, #831]	; 0x33f
    1dc0:	f881 3340 	strb.w	r3, [r1, #832]	; 0x340
    1dc4:	f881 633d 	strb.w	r6, [r1, #829]	; 0x33d
    1dc8:	f890 6341 	ldrb.w	r6, [r0, #833]	; 0x341
    1dcc:	f890 5342 	ldrb.w	r5, [r0, #834]	; 0x342
    1dd0:	f890 3343 	ldrb.w	r3, [r0, #835]	; 0x343
    1dd4:	f881 6341 	strb.w	r6, [r1, #833]	; 0x341
    1dd8:	f881 5342 	strb.w	r5, [r1, #834]	; 0x342
    1ddc:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
    1de0:	f890 5345 	ldrb.w	r5, [r0, #837]	; 0x345
    1de4:	f881 3343 	strb.w	r3, [r1, #835]	; 0x343
    1de8:	f890 3346 	ldrb.w	r3, [r0, #838]	; 0x346
    1dec:	f881 6344 	strb.w	r6, [r1, #836]	; 0x344
    1df0:	f881 5345 	strb.w	r5, [r1, #837]	; 0x345
    1df4:	f890 6347 	ldrb.w	r6, [r0, #839]	; 0x347
    1df8:	f890 5348 	ldrb.w	r5, [r0, #840]	; 0x348
    1dfc:	f881 3346 	strb.w	r3, [r1, #838]	; 0x346
    1e00:	f890 3349 	ldrb.w	r3, [r0, #841]	; 0x349
    1e04:	f881 6347 	strb.w	r6, [r1, #839]	; 0x347
    1e08:	f881 5348 	strb.w	r5, [r1, #840]	; 0x348
    1e0c:	f890 634a 	ldrb.w	r6, [r0, #842]	; 0x34a
    1e10:	f890 534b 	ldrb.w	r5, [r0, #843]	; 0x34b
    1e14:	f881 3349 	strb.w	r3, [r1, #841]	; 0x349
    1e18:	f890 334c 	ldrb.w	r3, [r0, #844]	; 0x34c
    1e1c:	f881 634a 	strb.w	r6, [r1, #842]	; 0x34a
    1e20:	f881 534b 	strb.w	r5, [r1, #843]	; 0x34b
    1e24:	f881 334c 	strb.w	r3, [r1, #844]	; 0x34c
    1e28:	f8d0 6350 	ldr.w	r6, [r0, #848]	; 0x350
    1e2c:	f890 3355 	ldrb.w	r3, [r0, #853]	; 0x355
    1e30:	f890 5354 	ldrb.w	r5, [r0, #852]	; 0x354
    1e34:	4a35      	ldr	r2, [pc, #212]	; (1f0c <finish_transition()+0x958>)
    1e36:	f881 3355 	strb.w	r3, [r1, #853]	; 0x355
    1e3a:	f8c1 6350 	str.w	r6, [r1, #848]	; 0x350
    1e3e:	f881 5354 	strb.w	r5, [r1, #852]	; 0x354
    1e42:	f501 7356 	add.w	r3, r1, #856	; 0x358
    1e46:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    1e4a:	f852 5f04 	ldr.w	r5, [r2, #4]!
    1e4e:	f843 5b04 	str.w	r5, [r3], #4
    1e52:	428b      	cmp	r3, r1
    1e54:	d1f9      	bne.n	1e4a <finish_transition()+0x896>
    1e56:	4a2e      	ldr	r2, [pc, #184]	; (1f10 <finish_transition()+0x95c>)
    1e58:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
    1e5c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1e60:	f843 1b04 	str.w	r1, [r3], #4
    1e64:	42ab      	cmp	r3, r5
    1e66:	d1f9      	bne.n	1e5c <finish_transition()+0x8a8>
    1e68:	4a2a      	ldr	r2, [pc, #168]	; (1f14 <finish_transition()+0x960>)
    1e6a:	f103 053c 	add.w	r5, r3, #60	; 0x3c
    1e6e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1e72:	f803 1b01 	strb.w	r1, [r3], #1
    1e76:	42ab      	cmp	r3, r5
    1e78:	d1f9      	bne.n	1e6e <finish_transition()+0x8ba>
    1e7a:	4a27      	ldr	r2, [pc, #156]	; (1f18 <finish_transition()+0x964>)
    1e7c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
    1e80:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1e84:	f843 1b04 	str.w	r1, [r3], #4
    1e88:	42ab      	cmp	r3, r5
    1e8a:	d1f9      	bne.n	1e80 <finish_transition()+0x8cc>
    1e8c:	4a23      	ldr	r2, [pc, #140]	; (1f1c <finish_transition()+0x968>)
    1e8e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
    1e92:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1e96:	f843 1b04 	str.w	r1, [r3], #4
    1e9a:	42ab      	cmp	r3, r5
    1e9c:	491a      	ldr	r1, [pc, #104]	; (1f08 <finish_transition()+0x954>)
    1e9e:	d1f8      	bne.n	1e92 <finish_transition()+0x8de>
    1ea0:	f890 3754 	ldrb.w	r3, [r0, #1876]	; 0x754
    1ea4:	f8b0 2756 	ldrh.w	r2, [r0, #1878]	; 0x756
    1ea8:	f8b0 6758 	ldrh.w	r6, [r0, #1880]	; 0x758
    1eac:	f8b0 575a 	ldrh.w	r5, [r0, #1882]	; 0x75a
    1eb0:	f881 3754 	strb.w	r3, [r1, #1876]	; 0x754
    1eb4:	f8a1 2756 	strh.w	r2, [r1, #1878]	; 0x756
    1eb8:	f890 375c 	ldrb.w	r3, [r0, #1884]	; 0x75c
    1ebc:	f890 275d 	ldrb.w	r2, [r0, #1885]	; 0x75d
    1ec0:	f8a1 6758 	strh.w	r6, [r1, #1880]	; 0x758
    1ec4:	f8a1 575a 	strh.w	r5, [r1, #1882]	; 0x75a
    1ec8:	f881 375c 	strb.w	r3, [r1, #1884]	; 0x75c
    1ecc:	f881 275d 	strb.w	r2, [r1, #1885]	; 0x75d
    1ed0:	f890 3760 	ldrb.w	r3, [r0, #1888]	; 0x760
    1ed4:	f890 675e 	ldrb.w	r6, [r0, #1886]	; 0x75e
    1ed8:	f890 575f 	ldrb.w	r5, [r0, #1887]	; 0x75f
    1edc:	4a10      	ldr	r2, [pc, #64]	; (1f20 <finish_transition()+0x96c>)
    1ede:	f881 3760 	strb.w	r3, [r1, #1888]	; 0x760
    1ee2:	e01f      	b.n	1f24 <finish_transition()+0x970>
    1ee4:	1fff91eb 	.word	0x1fff91eb
    1ee8:	1fff9a3b 	.word	0x1fff9a3b
    1eec:	1fff9a38 	.word	0x1fff9a38
    1ef0:	1fff9c2f 	.word	0x1fff9c2f
    1ef4:	1fff93df 	.word	0x1fff93df
    1ef8:	1fff9425 	.word	0x1fff9425
    1efc:	1fff9c75 	.word	0x1fff9c75
    1f00:	1fff9465 	.word	0x1fff9465
    1f04:	1fff9cb4 	.word	0x1fff9cb4
    1f08:	1fff91e8 	.word	0x1fff91e8
    1f0c:	1fff9d8c 	.word	0x1fff9d8c
    1f10:	1fff9e7c 	.word	0x1fff9e7c
    1f14:	1fff9f6f 	.word	0x1fff9f6f
    1f18:	1fff9fa8 	.word	0x1fff9fa8
    1f1c:	1fffa098 	.word	0x1fffa098
    1f20:	1fffa198 	.word	0x1fffa198
    1f24:	f881 675e 	strb.w	r6, [r1, #1886]	; 0x75e
    1f28:	f881 575f 	strb.w	r5, [r1, #1887]	; 0x75f
    1f2c:	f201 7364 	addw	r3, r1, #1892	; 0x764
    1f30:	f201 7184 	addw	r1, r1, #1924	; 0x784
    1f34:	f852 5f04 	ldr.w	r5, [r2, #4]!
    1f38:	f843 5b04 	str.w	r5, [r3], #4
    1f3c:	428b      	cmp	r3, r1
    1f3e:	d1f9      	bne.n	1f34 <finish_transition()+0x980>
    1f40:	4a32      	ldr	r2, [pc, #200]	; (200c <finish_transition()+0xa58>)
    1f42:	f103 0520 	add.w	r5, r3, #32
    1f46:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1f4a:	f843 1b04 	str.w	r1, [r3], #4
    1f4e:	42ab      	cmp	r3, r5
    1f50:	d1f9      	bne.n	1f46 <finish_transition()+0x992>
    1f52:	4a2f      	ldr	r2, [pc, #188]	; (2010 <finish_transition()+0xa5c>)
    1f54:	f103 0520 	add.w	r5, r3, #32
    1f58:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1f5c:	f843 1b04 	str.w	r1, [r3], #4
    1f60:	42ab      	cmp	r3, r5
    1f62:	d1f9      	bne.n	1f58 <finish_transition()+0x9a4>
    1f64:	4a2b      	ldr	r2, [pc, #172]	; (2014 <finish_transition()+0xa60>)
    1f66:	f103 0520 	add.w	r5, r3, #32
    1f6a:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1f6e:	f843 1b04 	str.w	r1, [r3], #4
    1f72:	42ab      	cmp	r3, r5
    1f74:	d1f9      	bne.n	1f6a <finish_transition()+0x9b6>
    1f76:	4a28      	ldr	r2, [pc, #160]	; (2018 <finish_transition()+0xa64>)
    1f78:	f103 0520 	add.w	r5, r3, #32
    1f7c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1f80:	f843 1b04 	str.w	r1, [r3], #4
    1f84:	42ab      	cmp	r3, r5
    1f86:	d1f9      	bne.n	1f7c <finish_transition()+0x9c8>
    1f88:	4924      	ldr	r1, [pc, #144]	; (201c <finish_transition()+0xa68>)
    1f8a:	f103 0520 	add.w	r5, r3, #32
    1f8e:	f851 2f04 	ldr.w	r2, [r1, #4]!
    1f92:	f843 2b04 	str.w	r2, [r3], #4
    1f96:	42ab      	cmp	r3, r5
    1f98:	4a21      	ldr	r2, [pc, #132]	; (2020 <finish_transition()+0xa6c>)
    1f9a:	d1f8      	bne.n	1f8e <finish_transition()+0x9da>
    1f9c:	f890 3824 	ldrb.w	r3, [r0, #2084]	; 0x824
    1fa0:	f890 6825 	ldrb.w	r6, [r0, #2085]	; 0x825
    1fa4:	f890 5826 	ldrb.w	r5, [r0, #2086]	; 0x826
    1fa8:	f890 1827 	ldrb.w	r1, [r0, #2087]	; 0x827
    1fac:	f882 3824 	strb.w	r3, [r2, #2084]	; 0x824
    1fb0:	f8d0 3828 	ldr.w	r3, [r0, #2088]	; 0x828
    1fb4:	f882 6825 	strb.w	r6, [r2, #2085]	; 0x825
    1fb8:	f882 5826 	strb.w	r5, [r2, #2086]	; 0x826
    1fbc:	f8d0 682c 	ldr.w	r6, [r0, #2092]	; 0x82c
    1fc0:	f890 5830 	ldrb.w	r5, [r0, #2096]	; 0x830
    1fc4:	f882 1827 	strb.w	r1, [r2, #2087]	; 0x827
    1fc8:	f8c2 3828 	str.w	r3, [r2, #2088]	; 0x828
    1fcc:	f890 1831 	ldrb.w	r1, [r0, #2097]	; 0x831
    1fd0:	f890 3832 	ldrb.w	r3, [r0, #2098]	; 0x832
    1fd4:	f8c2 682c 	str.w	r6, [r2, #2092]	; 0x82c
    1fd8:	f890 7833 	ldrb.w	r7, [r0, #2099]	; 0x833
    1fdc:	f882 5830 	strb.w	r5, [r2, #2096]	; 0x830
    1fe0:	f890 6834 	ldrb.w	r6, [r0, #2100]	; 0x834
    1fe4:	f882 1831 	strb.w	r1, [r2, #2097]	; 0x831
    1fe8:	f890 5835 	ldrb.w	r5, [r0, #2101]	; 0x835
    1fec:	f890 1836 	ldrb.w	r1, [r0, #2102]	; 0x836
    1ff0:	f882 3832 	strb.w	r3, [r2, #2098]	; 0x832

void finish_transition() {
	in_transition = 0;
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds = next_leds;
	if (curr_leds.use_overlay) { curr_over_leds = next_over_leds; curr_over_leds.array_type = CURR_OVERLAY; }
    1ff4:	2302      	movs	r3, #2
    1ff6:	f882 7833 	strb.w	r7, [r2, #2099]	; 0x833
    1ffa:	f882 6834 	strb.w	r6, [r2, #2100]	; 0x834
    1ffe:	f882 5835 	strb.w	r5, [r2, #2101]	; 0x835
    2002:	f882 1836 	strb.w	r1, [r2, #2102]	; 0x836
    2006:	f882 31c5 	strb.w	r3, [r2, #453]	; 0x1c5
    200a:	e55b      	b.n	1ac4 <finish_transition()+0x510>
    200c:	1fffa1b8 	.word	0x1fffa1b8
    2010:	1fffa1d8 	.word	0x1fffa1d8
    2014:	1fffa1f8 	.word	0x1fffa1f8
    2018:	1fffa218 	.word	0x1fffa218
    201c:	1fffa238 	.word	0x1fffa238
    2020:	1fff91e8 	.word	0x1fff91e8

00002024 <blending()>:
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type = CURRENT;
}

void blending() {
    2024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2028:	4d2f      	ldr	r5, [pc, #188]	; (20e8 <blending()+0xc4>)
    202a:	4e30      	ldr	r6, [pc, #192]	; (20ec <blending()+0xc8>)
    202c:	4c30      	ldr	r4, [pc, #192]	; (20f0 <blending()+0xcc>)
    202e:	4f31      	ldr	r7, [pc, #196]	; (20f4 <blending()+0xd0>)
    2030:	b085      	sub	sp, #20
    2032:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    2036:	4632      	mov	r2, r6
    2038:	4629      	mov	r1, r5
    203a:	783b      	ldrb	r3, [r7, #0]
    203c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 20f4 <blending()+0xd0>
    2040:	a803      	add	r0, sp, #12
    2042:	3503      	adds	r5, #3
    2044:	f007 fc56 	bl	98f4 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2048:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    204c:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    2050:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2054:	7021      	strb	r1, [r4, #0]
    2056:	4545      	cmp	r5, r8
        g = rhs.g;
    2058:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    205a:	70a3      	strb	r3, [r4, #2]
    205c:	f106 0603 	add.w	r6, r6, #3
    2060:	f104 0403 	add.w	r4, r4, #3
    2064:	d1e7      	bne.n	2036 <blending()+0x12>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    2066:	4e24      	ldr	r6, [pc, #144]	; (20f8 <blending()+0xd4>)
    2068:	6833      	ldr	r3, [r6, #0]
    206a:	07db      	lsls	r3, r3, #31
    206c:	d51f      	bpl.n	20ae <blending()+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    206e:	4d23      	ldr	r5, [pc, #140]	; (20fc <blending()+0xd8>)
    2070:	4c23      	ldr	r4, [pc, #140]	; (2100 <blending()+0xdc>)
    2072:	682b      	ldr	r3, [r5, #0]
    2074:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    2076:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    207a:	9b03      	ldr	r3, [sp, #12]
    207c:	1a5b      	subs	r3, r3, r1
    207e:	4293      	cmp	r3, r2
    2080:	d30c      	bcc.n	209c <blending()+0x78>
    2082:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2084:	682a      	ldr	r2, [r5, #0]
    2086:	9202      	str	r2, [sp, #8]
    2088:	3301      	adds	r3, #1
	return ret;
    208a:	9a02      	ldr	r2, [sp, #8]
    208c:	6022      	str	r2, [r4, #0]
    208e:	b2db      	uxtb	r3, r3
    2090:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    2092:	2bff      	cmp	r3, #255	; 0xff
    2094:	d006      	beq.n	20a4 <blending()+0x80>
		finish_transition();
	}
}
    2096:	b005      	add	sp, #20
    2098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    209c:	f899 3000 	ldrb.w	r3, [r9]
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    20a0:	2bff      	cmp	r3, #255	; 0xff
    20a2:	d1f8      	bne.n	2096 <blending()+0x72>
		finish_transition();
    20a4:	f7ff fa86 	bl	15b4 <finish_transition()>
	}
}
    20a8:	b005      	add	sp, #20
    20aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	curr_leds.array_type = CURRENT;
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    20ae:	4630      	mov	r0, r6
    20b0:	f008 fa52 	bl	a558 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    20b4:	4d11      	ldr	r5, [pc, #68]	; (20fc <blending()+0xd8>)
    20b6:	b950      	cbnz	r0, 20ce <blending()+0xaa>
    20b8:	4c11      	ldr	r4, [pc, #68]	; (2100 <blending()+0xdc>)
    20ba:	682b      	ldr	r3, [r5, #0]
    20bc:	9303      	str	r3, [sp, #12]
    20be:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    20c2:	9b03      	ldr	r3, [sp, #12]
    20c4:	1a5b      	subs	r3, r3, r1
    20c6:	4293      	cmp	r3, r2
    20c8:	d2db      	bcs.n	2082 <blending()+0x5e>
    20ca:	783b      	ldrb	r3, [r7, #0]
    20cc:	e7e1      	b.n	2092 <blending()+0x6e>
    20ce:	4b0d      	ldr	r3, [pc, #52]	; (2104 <blending()+0xe0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    20d0:	682a      	ldr	r2, [r5, #0]
    20d2:	781b      	ldrb	r3, [r3, #0]
    20d4:	4c0a      	ldr	r4, [pc, #40]	; (2100 <blending()+0xdc>)
    20d6:	9201      	str	r2, [sp, #4]
	return ret;
    20d8:	9a01      	ldr	r2, [sp, #4]
    20da:	6022      	str	r2, [r4, #0]
    20dc:	009b      	lsls	r3, r3, #2
    20de:	4630      	mov	r0, r6
    20e0:	6063      	str	r3, [r4, #4]
    20e2:	f008 fa3f 	bl	a564 <__cxa_guard_release>
    20e6:	e7e8      	b.n	20ba <blending()+0x96>
    20e8:	1fffa274 	.word	0x1fffa274
    20ec:	1fff8898 	.word	0x1fff8898
    20f0:	1fffaaac 	.word	0x1fffaaac
    20f4:	1fff8896 	.word	0x1fff8896
    20f8:	1fff91d4 	.word	0x1fff91d4
    20fc:	1ffface8 	.word	0x1ffface8
    2100:	1fff90e4 	.word	0x1fff90e4
    2104:	1fff9a25 	.word	0x1fff9a25

00002108 <wipedown()>:
		finish_transition();
	}
}


void wipedown() {
    2108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    210c:	4d55      	ldr	r5, [pc, #340]	; (2264 <wipedown()+0x15c>)
    210e:	f895 c000 	ldrb.w	ip, [r5]
    2112:	fa1f f38c 	uxth.w	r3, ip
		finish_transition();
	}
}


void wipedown() {
    2116:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    2118:	2b00      	cmp	r3, #0
    211a:	f000 80a1 	beq.w	2260 <wipedown()+0x158>
    211e:	f103 3eff 	add.w	lr, r3, #4294967295
    2122:	fa1f fe8e 	uxth.w	lr, lr
    2126:	f10e 0e01 	add.w	lr, lr, #1
    212a:	4a4f      	ldr	r2, [pc, #316]	; (2268 <wipedown()+0x160>)
    212c:	4c4f      	ldr	r4, [pc, #316]	; (226c <wipedown()+0x164>)
    212e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    2132:	4496      	add	lr, r2
    2134:	4621      	mov	r1, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2136:	7817      	ldrb	r7, [r2, #0]
        g = rhs.g;
    2138:	7856      	ldrb	r6, [r2, #1]
        b = rhs.b;
    213a:	7890      	ldrb	r0, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    213c:	700f      	strb	r7, [r1, #0]
    213e:	3203      	adds	r2, #3
    2140:	4572      	cmp	r2, lr
        g = rhs.g;
    2142:	704e      	strb	r6, [r1, #1]
        b = rhs.b;
    2144:	7088      	strb	r0, [r1, #2]
    2146:	f101 0103 	add.w	r1, r1, #3
    214a:	d1f4      	bne.n	2136 <wipedown()+0x2e>
		master_leds[i] = curr_leds.led_data[i];
	}
	for (uint16_t j = wipe_pos; j < NUM_LEDS; j++) {
    214c:	2b95      	cmp	r3, #149	; 0x95
    214e:	d810      	bhi.n	2172 <wipedown()+0x6a>
    2150:	4e47      	ldr	r6, [pc, #284]	; (2270 <wipedown()+0x168>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2152:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    2156:	18b0      	adds	r0, r6, r2
    2158:	3301      	adds	r3, #1
    215a:	18a1      	adds	r1, r4, r2
    215c:	b29b      	uxth	r3, r3
        g = rhs.g;
    215e:	7847      	ldrb	r7, [r0, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2160:	f816 e002 	ldrb.w	lr, [r6, r2]
        g = rhs.g;
        b = rhs.b;
    2164:	7880      	ldrb	r0, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2166:	f804 e002 	strb.w	lr, [r4, r2]
    216a:	2b96      	cmp	r3, #150	; 0x96
        g = rhs.g;
    216c:	704f      	strb	r7, [r1, #1]
        b = rhs.b;
    216e:	7088      	strb	r0, [r1, #2]
    2170:	d1ef      	bne.n	2152 <wipedown()+0x4a>
		master_leds[j] = next_leds.led_data[j];
	}

	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    2172:	f10c 36ff 	add.w	r6, ip, #4294967295
    2176:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    217a:	eb04 0906 	add.w	r9, r4, r6
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    217e:	2780      	movs	r7, #128	; 0x80
    2180:	4649      	mov	r1, r9
    2182:	463b      	mov	r3, r7
    2184:	a803      	add	r0, sp, #12
    2186:	aa02      	add	r2, sp, #8
    2188:	f04f 0800 	mov.w	r8, #0
    218c:	f88d 7009 	strb.w	r7, [sp, #9]
    2190:	f88d 700a 	strb.w	r7, [sp, #10]
    2194:	f88d 8008 	strb.w	r8, [sp, #8]
    2198:	f007 fbac 	bl	98f4 <blend(CRGB const&, CRGB const&, unsigned char)>

	master_leds[wipe_pos] = CRGB::White;
    219c:	782b      	ldrb	r3, [r5, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    219e:	f89d 200c 	ldrb.w	r2, [sp, #12]
    21a2:	55a2      	strb	r2, [r4, r6]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    21a4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    21a8:	1821      	adds	r1, r4, r0
    21aa:	22ff      	movs	r2, #255	; 0xff

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    21ac:	f89d c00d 	ldrb.w	ip, [sp, #13]
        b = rhs.b;
    21b0:	f89d e00e 	ldrb.w	lr, [sp, #14]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    21b4:	f889 c001 	strb.w	ip, [r9, #1]

	if (wipe_pos < NUM_LEDS - 1) {
    21b8:	2b94      	cmp	r3, #148	; 0x94
        b = rhs.b;
    21ba:	f889 e002 	strb.w	lr, [r9, #2]
	}
	for (uint16_t j = wipe_pos; j < NUM_LEDS; j++) {
		master_leds[j] = next_leds.led_data[j];
	}

	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    21be:	4e2b      	ldr	r6, [pc, #172]	; (226c <wipedown()+0x164>)
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    21c0:	5422      	strb	r2, [r4, r0]
        g = (colorcode >>  8) & 0xFF;
    21c2:	704a      	strb	r2, [r1, #1]
        b = (colorcode >>  0) & 0xFF;
    21c4:	708a      	strb	r2, [r1, #2]

	master_leds[wipe_pos] = CRGB::White;

	if (wipe_pos < NUM_LEDS - 1) {
    21c6:	d92e      	bls.n	2226 <wipedown()+0x11e>
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    21c8:	4f2a      	ldr	r7, [pc, #168]	; (2274 <wipedown()+0x16c>)
    21ca:	683b      	ldr	r3, [r7, #0]
    21cc:	07db      	lsls	r3, r3, #31
    21ce:	d517      	bpl.n	2200 <wipedown()+0xf8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    21d0:	4e29      	ldr	r6, [pc, #164]	; (2278 <wipedown()+0x170>)
    21d2:	4c2a      	ldr	r4, [pc, #168]	; (227c <wipedown()+0x174>)
    21d4:	6833      	ldr	r3, [r6, #0]
    21d6:	9303      	str	r3, [sp, #12]
    21d8:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    21dc:	9b03      	ldr	r3, [sp, #12]
    21de:	1a5b      	subs	r3, r3, r1
    21e0:	4293      	cmp	r3, r2
    21e2:	782b      	ldrb	r3, [r5, #0]
    21e4:	d306      	bcc.n	21f4 <wipedown()+0xec>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    21e6:	6832      	ldr	r2, [r6, #0]
    21e8:	9202      	str	r2, [sp, #8]
    21ea:	3b01      	subs	r3, #1
	return ret;
    21ec:	9a02      	ldr	r2, [sp, #8]
    21ee:	6022      	str	r2, [r4, #0]
    21f0:	b2db      	uxtb	r3, r3
    21f2:	702b      	strb	r3, [r5, #0]
	if (wipe_pos == 0) {
    21f4:	b90b      	cbnz	r3, 21fa <wipedown()+0xf2>
		finish_transition();
    21f6:	f7ff f9dd 	bl	15b4 <finish_transition()>
	}
}
    21fa:	b005      	add	sp, #20
    21fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

	if (wipe_pos < NUM_LEDS - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    2200:	4638      	mov	r0, r7
    2202:	f008 f9a9 	bl	a558 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2206:	4e1c      	ldr	r6, [pc, #112]	; (2278 <wipedown()+0x170>)
    2208:	2800      	cmp	r0, #0
    220a:	d0e2      	beq.n	21d2 <wipedown()+0xca>
    220c:	4b1c      	ldr	r3, [pc, #112]	; (2280 <wipedown()+0x178>)
    220e:	6832      	ldr	r2, [r6, #0]
    2210:	781b      	ldrb	r3, [r3, #0]
    2212:	4c1a      	ldr	r4, [pc, #104]	; (227c <wipedown()+0x174>)
    2214:	9201      	str	r2, [sp, #4]
	return ret;
    2216:	9a01      	ldr	r2, [sp, #4]
    2218:	6022      	str	r2, [r4, #0]
    221a:	009b      	lsls	r3, r3, #2
    221c:	4638      	mov	r0, r7
    221e:	6063      	str	r3, [r4, #4]
    2220:	f008 f9a0 	bl	a564 <__cxa_guard_release>
    2224:	e7d6      	b.n	21d4 <wipedown()+0xcc>
	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);

	master_leds[wipe_pos] = CRGB::White;

	if (wipe_pos < NUM_LEDS - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    2226:	1c5c      	adds	r4, r3, #1
    2228:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    222c:	eb06 0904 	add.w	r9, r6, r4
    2230:	aa02      	add	r2, sp, #8
    2232:	463b      	mov	r3, r7
    2234:	4649      	mov	r1, r9
    2236:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2238:	f88d 8008 	strb.w	r8, [sp, #8]
    223c:	f88d 7009 	strb.w	r7, [sp, #9]
    2240:	f88d 700a 	strb.w	r7, [sp, #10]
    2244:	f007 fb56 	bl	98f4 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2248:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    224c:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    2250:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2254:	5531      	strb	r1, [r6, r4]
        g = rhs.g;
    2256:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    225a:	f889 3002 	strb.w	r3, [r9, #2]
    225e:	e7b3      	b.n	21c8 <wipedown()+0xc0>
    2260:	4c02      	ldr	r4, [pc, #8]	; (226c <wipedown()+0x164>)
    2262:	e775      	b.n	2150 <wipedown()+0x48>
    2264:	1fff911c 	.word	0x1fff911c
    2268:	1fffa274 	.word	0x1fffa274
    226c:	1fffaaac 	.word	0x1fffaaac
    2270:	1fff8898 	.word	0x1fff8898
    2274:	1fff91d8 	.word	0x1fff91d8
    2278:	1ffface8 	.word	0x1ffface8
    227c:	1fff90f0 	.word	0x1fff90f0
    2280:	1fff9a25 	.word	0x1fff9a25

00002284 <wipeup()>:
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    2284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    2288:	4d67      	ldr	r5, [pc, #412]	; (2428 <wipeup()+0x1a4>)
    228a:	f895 c000 	ldrb.w	ip, [r5]
    228e:	fa1f f38c 	uxth.w	r3, ip
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    2292:	b084      	sub	sp, #16
	for (uint16_t i = 0; i < wipe_pos; i++) {
    2294:	2b00      	cmp	r3, #0
    2296:	f000 80b7 	beq.w	2408 <wipeup()+0x184>
    229a:	f103 3eff 	add.w	lr, r3, #4294967295
    229e:	fa1f fe8e 	uxth.w	lr, lr
    22a2:	f10e 0e01 	add.w	lr, lr, #1
    22a6:	4a61      	ldr	r2, [pc, #388]	; (242c <wipeup()+0x1a8>)
    22a8:	4c61      	ldr	r4, [pc, #388]	; (2430 <wipeup()+0x1ac>)
    22aa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    22ae:	4496      	add	lr, r2
    22b0:	4621      	mov	r1, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    22b2:	7817      	ldrb	r7, [r2, #0]
        g = rhs.g;
    22b4:	7856      	ldrb	r6, [r2, #1]
        b = rhs.b;
    22b6:	7890      	ldrb	r0, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    22b8:	700f      	strb	r7, [r1, #0]
    22ba:	3203      	adds	r2, #3
    22bc:	4596      	cmp	lr, r2
        g = rhs.g;
    22be:	704e      	strb	r6, [r1, #1]
        b = rhs.b;
    22c0:	7088      	strb	r0, [r1, #2]
    22c2:	f101 0103 	add.w	r1, r1, #3
    22c6:	d1f4      	bne.n	22b2 <wipeup()+0x2e>
		master_leds[i] = next_leds.led_data[i];
	}
	for (uint16_t j = wipe_pos; j < NUM_LEDS; j++) {
    22c8:	2b95      	cmp	r3, #149	; 0x95
    22ca:	d810      	bhi.n	22ee <wipeup()+0x6a>
    22cc:	4e59      	ldr	r6, [pc, #356]	; (2434 <wipeup()+0x1b0>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    22ce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    22d2:	18b0      	adds	r0, r6, r2
    22d4:	3301      	adds	r3, #1
    22d6:	18a1      	adds	r1, r4, r2
    22d8:	b29b      	uxth	r3, r3
        g = rhs.g;
    22da:	7847      	ldrb	r7, [r0, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    22dc:	f816 e002 	ldrb.w	lr, [r6, r2]
        g = rhs.g;
        b = rhs.b;
    22e0:	7880      	ldrb	r0, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    22e2:	f804 e002 	strb.w	lr, [r4, r2]
    22e6:	2b96      	cmp	r3, #150	; 0x96
        g = rhs.g;
    22e8:	704f      	strb	r7, [r1, #1]
        b = rhs.b;
    22ea:	7088      	strb	r0, [r1, #2]
    22ec:	d1ef      	bne.n	22ce <wipeup()+0x4a>
		master_leds[j] = curr_leds.led_data[j];
	}

	if (wipe_pos > 0) {
    22ee:	f1bc 0f00 	cmp.w	ip, #0
    22f2:	d164      	bne.n	23be <wipeup()+0x13a>
    22f4:	af03      	add	r7, sp, #12
    22f6:	f10d 0808 	add.w	r8, sp, #8
		master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
	}

	master_leds[wipe_pos] = CRGB::White;
    22fa:	782b      	ldrb	r3, [r5, #0]

	master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    22fc:	f8df 9144 	ldr.w	r9, [pc, #324]	; 2444 <wipeup()+0x1c0>
		master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
	}

	master_leds[wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    2300:	1c5e      	adds	r6, r3, #1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2302:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2306:	eb04 0c03 	add.w	ip, r4, r3
    230a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    230e:	f04f 0eff 	mov.w	lr, #255	; 0xff
    2312:	eb04 0a06 	add.w	sl, r4, r6
    2316:	4638      	mov	r0, r7
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2318:	2780      	movs	r7, #128	; 0x80
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    231a:	f804 e003 	strb.w	lr, [r4, r3]
    231e:	4642      	mov	r2, r8
    2320:	4651      	mov	r1, sl
        g = (colorcode >>  8) & 0xFF;
    2322:	f88c e001 	strb.w	lr, [ip, #1]
        b = (colorcode >>  0) & 0xFF;
    2326:	f88c e002 	strb.w	lr, [ip, #2]
    232a:	463b      	mov	r3, r7
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    232c:	f04f 0e00 	mov.w	lr, #0
    2330:	f88d 7009 	strb.w	r7, [sp, #9]
    2334:	f88d 700a 	strb.w	r7, [sp, #10]
    2338:	f88d e008 	strb.w	lr, [sp, #8]
    233c:	f007 fada 	bl	98f4 <blend(CRGB const&, CRGB const&, unsigned char)>

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    2340:	f8d9 3000 	ldr.w	r3, [r9]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2344:	f89d 000c 	ldrb.w	r0, [sp, #12]
        g = rhs.g;
    2348:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    234c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2350:	55a0      	strb	r0, [r4, r6]
    2352:	07db      	lsls	r3, r3, #31

	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
	}

	master_leds[wipe_pos] = CRGB::White;
    2354:	4834      	ldr	r0, [pc, #208]	; (2428 <wipeup()+0x1a4>)
        g = rhs.g;
    2356:	f88a 1001 	strb.w	r1, [sl, #1]
        b = rhs.b;
    235a:	f88a 2002 	strb.w	r2, [sl, #2]

	master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    235e:	d51e      	bpl.n	239e <wipeup()+0x11a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2360:	4e35      	ldr	r6, [pc, #212]	; (2438 <wipeup()+0x1b4>)
    2362:	4c36      	ldr	r4, [pc, #216]	; (243c <wipeup()+0x1b8>)
    2364:	6833      	ldr	r3, [r6, #0]
    2366:	9303      	str	r3, [sp, #12]
    2368:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    236c:	9b03      	ldr	r3, [sp, #12]
    236e:	1a5b      	subs	r3, r3, r1
    2370:	4293      	cmp	r3, r2
    2372:	d30c      	bcc.n	238e <wipeup()+0x10a>
    2374:	782b      	ldrb	r3, [r5, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2376:	6832      	ldr	r2, [r6, #0]
    2378:	9202      	str	r2, [sp, #8]
    237a:	3301      	adds	r3, #1
	return ret;
    237c:	9a02      	ldr	r2, [sp, #8]
    237e:	6022      	str	r2, [r4, #0]
    2380:	b2db      	uxtb	r3, r3
    2382:	702b      	strb	r3, [r5, #0]
	if (wipe_pos == NUM_LEDS - 1) {
    2384:	2b95      	cmp	r3, #149	; 0x95
    2386:	d005      	beq.n	2394 <wipeup()+0x110>
		finish_transition();
	}
}
    2388:	b004      	add	sp, #16
    238a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    238e:	7803      	ldrb	r3, [r0, #0]
	master_leds[wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
	if (wipe_pos == NUM_LEDS - 1) {
    2390:	2b95      	cmp	r3, #149	; 0x95
    2392:	d1f9      	bne.n	2388 <wipeup()+0x104>
		finish_transition();
    2394:	f7ff f90e 	bl	15b4 <finish_transition()>
	}
}
    2398:	b004      	add	sp, #16
    239a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

	master_leds[wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    239e:	4648      	mov	r0, r9
    23a0:	f008 f8da 	bl	a558 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    23a4:	4e24      	ldr	r6, [pc, #144]	; (2438 <wipeup()+0x1b4>)
    23a6:	bb88      	cbnz	r0, 240c <wipeup()+0x188>
    23a8:	4c24      	ldr	r4, [pc, #144]	; (243c <wipeup()+0x1b8>)
    23aa:	6833      	ldr	r3, [r6, #0]
    23ac:	9303      	str	r3, [sp, #12]
    23ae:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    23b2:	9b03      	ldr	r3, [sp, #12]
    23b4:	1a5b      	subs	r3, r3, r1
    23b6:	4293      	cmp	r3, r2
    23b8:	d2dc      	bcs.n	2374 <wipeup()+0xf0>
    23ba:	782b      	ldrb	r3, [r5, #0]
    23bc:	e7e2      	b.n	2384 <wipeup()+0x100>
	for (uint16_t j = wipe_pos; j < NUM_LEDS; j++) {
		master_leds[j] = curr_leds.led_data[j];
	}

	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    23be:	f10c 36ff 	add.w	r6, ip, #4294967295
    23c2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    23c6:	f04f 0e80 	mov.w	lr, #128	; 0x80
    23ca:	eb04 0906 	add.w	r9, r4, r6
    23ce:	af03      	add	r7, sp, #12
    23d0:	f10d 0808 	add.w	r8, sp, #8
    23d4:	4649      	mov	r1, r9
    23d6:	4673      	mov	r3, lr
    23d8:	4642      	mov	r2, r8
    23da:	f04f 0c00 	mov.w	ip, #0
    23de:	4638      	mov	r0, r7
    23e0:	f88d e009 	strb.w	lr, [sp, #9]
    23e4:	f88d e00a 	strb.w	lr, [sp, #10]
    23e8:	f88d c008 	strb.w	ip, [sp, #8]
    23ec:	f007 fa82 	bl	98f4 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    23f0:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    23f4:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    23f8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    23fc:	55a1      	strb	r1, [r4, r6]
        g = rhs.g;
    23fe:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    2402:	f889 3002 	strb.w	r3, [r9, #2]
    2406:	e778      	b.n	22fa <wipeup()+0x76>
    2408:	4c09      	ldr	r4, [pc, #36]	; (2430 <wipeup()+0x1ac>)
    240a:	e75f      	b.n	22cc <wipeup()+0x48>

	master_leds[wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    240c:	4b0c      	ldr	r3, [pc, #48]	; (2440 <wipeup()+0x1bc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    240e:	6832      	ldr	r2, [r6, #0]
    2410:	781b      	ldrb	r3, [r3, #0]
    2412:	4c0a      	ldr	r4, [pc, #40]	; (243c <wipeup()+0x1b8>)
    2414:	9201      	str	r2, [sp, #4]
	return ret;
    2416:	9a01      	ldr	r2, [sp, #4]
    2418:	6022      	str	r2, [r4, #0]
    241a:	009b      	lsls	r3, r3, #2
    241c:	4648      	mov	r0, r9
    241e:	6063      	str	r3, [r4, #4]
    2420:	f008 f8a0 	bl	a564 <__cxa_guard_release>
    2424:	e7c1      	b.n	23aa <wipeup()+0x126>
    2426:	bf00      	nop
    2428:	1fff911c 	.word	0x1fff911c
    242c:	1fff8898 	.word	0x1fff8898
    2430:	1fffaaac 	.word	0x1fffaaac
    2434:	1fffa274 	.word	0x1fffa274
    2438:	1ffface8 	.word	0x1ffface8
    243c:	1fff9a28 	.word	0x1fff9a28
    2440:	1fff9a25 	.word	0x1fff9a25
    2444:	1fff91dc 	.word	0x1fff91dc

00002448 <switch_transition(TransitionType)>:
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 0) { finish_transition(); } }
	}
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
    2448:	2801      	cmp	r0, #1
    244a:	d006      	beq.n	245a <switch_transition(TransitionType)+0x12>
    244c:	d303      	bcc.n	2456 <switch_transition(TransitionType)+0xe>
    244e:	2802      	cmp	r0, #2
    2450:	d101      	bne.n	2456 <switch_transition(TransitionType)+0xe>
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
    2452:	f7ff bf17 	b.w	2284 <wipeup()>
		//case COLORFADE: colorfade();	break;
		default:		blending();		break;
    2456:	f7ff bde5 	b.w	2024 <blending()>
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
    245a:	f7ff be55 	b.w	2108 <wipedown()>
    245e:	bf00      	nop

00002460 <print_palette(unsigned char)>:
}



// Print palettes
void print_palette(uint8_t pn) {
    2460:	b510      	push	{r4, lr}
    2462:	2110      	movs	r1, #16
    2464:	4604      	mov	r4, r0
    2466:	4894      	ldr	r0, [pc, #592]	; (26b8 <print_palette(unsigned char)+0x258>)
    2468:	f009 f90e 	bl	b688 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    246c:	4621      	mov	r1, r4
    246e:	2300      	movs	r3, #0
    2470:	220a      	movs	r2, #10
    2472:	4892      	ldr	r0, [pc, #584]	; (26bc <print_palette(unsigned char)+0x25c>)
    2474:	f009 fb1c 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2478:	2102      	movs	r1, #2
    247a:	4891      	ldr	r0, [pc, #580]	; (26c0 <print_palette(unsigned char)+0x260>)
    247c:	f009 f904 	bl	b688 <usb_serial_write>
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    2480:	2c5c      	cmp	r4, #92	; 0x5c
    2482:	f200 8281 	bhi.w	2988 <print_palette(unsigned char)+0x528>
    2486:	e8df f014 	tbh	[pc, r4, lsl #1]
    248a:	027a      	.short	0x027a
    248c:	02700275 	.word	0x02700275
    2490:	0266026b 	.word	0x0266026b
    2494:	025c0261 	.word	0x025c0261
    2498:	02520257 	.word	0x02520257
    249c:	0248024d 	.word	0x0248024d
    24a0:	023e0243 	.word	0x023e0243
    24a4:	02340239 	.word	0x02340239
    24a8:	022a022f 	.word	0x022a022f
    24ac:	02200225 	.word	0x02200225
    24b0:	0216021b 	.word	0x0216021b
    24b4:	020c0211 	.word	0x020c0211
    24b8:	02020207 	.word	0x02020207
    24bc:	01f801fd 	.word	0x01f801fd
    24c0:	01ee01f3 	.word	0x01ee01f3
    24c4:	01e401e9 	.word	0x01e401e9
    24c8:	01da01df 	.word	0x01da01df
    24cc:	01d001d5 	.word	0x01d001d5
    24d0:	01c601cb 	.word	0x01c601cb
    24d4:	01bc01c1 	.word	0x01bc01c1
    24d8:	01b201b7 	.word	0x01b201b7
    24dc:	01a801ad 	.word	0x01a801ad
    24e0:	019e01a3 	.word	0x019e01a3
    24e4:	01940199 	.word	0x01940199
    24e8:	018a018f 	.word	0x018a018f
    24ec:	01800185 	.word	0x01800185
    24f0:	0176017b 	.word	0x0176017b
    24f4:	016c0171 	.word	0x016c0171
    24f8:	01110167 	.word	0x01110167
    24fc:	0107010c 	.word	0x0107010c
    2500:	00fd0102 	.word	0x00fd0102
    2504:	00f300f8 	.word	0x00f300f8
    2508:	00e900ee 	.word	0x00e900ee
    250c:	00df00e4 	.word	0x00df00e4
    2510:	00d500da 	.word	0x00d500da
    2514:	00cb00d0 	.word	0x00cb00d0
    2518:	00c100c6 	.word	0x00c100c6
    251c:	00b700bc 	.word	0x00b700bc
    2520:	00ad00b2 	.word	0x00ad00b2
    2524:	00a300a8 	.word	0x00a300a8
    2528:	0099009e 	.word	0x0099009e
    252c:	008f0094 	.word	0x008f0094
    2530:	0085008a 	.word	0x0085008a
    2534:	007b0080 	.word	0x007b0080
    2538:	00710076 	.word	0x00710076
    253c:	0067006c 	.word	0x0067006c
    2540:	005d0062 	.word	0x005d0062
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
    2544:	495f      	ldr	r1, [pc, #380]	; (26c4 <print_palette(unsigned char)+0x264>)
    2546:	485d      	ldr	r0, [pc, #372]	; (26bc <print_palette(unsigned char)+0x25c>)
    2548:	f7fe faae 	bl	aa8 <Print::println(char const*)>
    254c:	bd10      	pop	{r4, pc}
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
    254e:	495e      	ldr	r1, [pc, #376]	; (26c8 <print_palette(unsigned char)+0x268>)
    2550:	485a      	ldr	r0, [pc, #360]	; (26bc <print_palette(unsigned char)+0x25c>)
    2552:	f7fe faa9 	bl	aa8 <Print::println(char const*)>
    2556:	bd10      	pop	{r4, pc}
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
    2558:	495c      	ldr	r1, [pc, #368]	; (26cc <print_palette(unsigned char)+0x26c>)
    255a:	4858      	ldr	r0, [pc, #352]	; (26bc <print_palette(unsigned char)+0x25c>)
    255c:	f7fe faa4 	bl	aa8 <Print::println(char const*)>
    2560:	bd10      	pop	{r4, pc}
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
    2562:	495b      	ldr	r1, [pc, #364]	; (26d0 <print_palette(unsigned char)+0x270>)
    2564:	4855      	ldr	r0, [pc, #340]	; (26bc <print_palette(unsigned char)+0x25c>)
    2566:	f7fe fa9f 	bl	aa8 <Print::println(char const*)>
    256a:	bd10      	pop	{r4, pc}
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
    256c:	4959      	ldr	r1, [pc, #356]	; (26d4 <print_palette(unsigned char)+0x274>)
    256e:	4853      	ldr	r0, [pc, #332]	; (26bc <print_palette(unsigned char)+0x25c>)
    2570:	f7fe fa9a 	bl	aa8 <Print::println(char const*)>
    2574:	bd10      	pop	{r4, pc}
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
    2576:	4958      	ldr	r1, [pc, #352]	; (26d8 <print_palette(unsigned char)+0x278>)
    2578:	4850      	ldr	r0, [pc, #320]	; (26bc <print_palette(unsigned char)+0x25c>)
    257a:	f7fe fa95 	bl	aa8 <Print::println(char const*)>
    257e:	bd10      	pop	{r4, pc}
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
    2580:	4956      	ldr	r1, [pc, #344]	; (26dc <print_palette(unsigned char)+0x27c>)
    2582:	484e      	ldr	r0, [pc, #312]	; (26bc <print_palette(unsigned char)+0x25c>)
    2584:	f7fe fa90 	bl	aa8 <Print::println(char const*)>
    2588:	bd10      	pop	{r4, pc}
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
    258a:	4955      	ldr	r1, [pc, #340]	; (26e0 <print_palette(unsigned char)+0x280>)
    258c:	484b      	ldr	r0, [pc, #300]	; (26bc <print_palette(unsigned char)+0x25c>)
    258e:	f7fe fa8b 	bl	aa8 <Print::println(char const*)>
    2592:	bd10      	pop	{r4, pc}
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
    2594:	4953      	ldr	r1, [pc, #332]	; (26e4 <print_palette(unsigned char)+0x284>)
    2596:	4849      	ldr	r0, [pc, #292]	; (26bc <print_palette(unsigned char)+0x25c>)
    2598:	f7fe fa86 	bl	aa8 <Print::println(char const*)>
    259c:	bd10      	pop	{r4, pc}
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
    259e:	4952      	ldr	r1, [pc, #328]	; (26e8 <print_palette(unsigned char)+0x288>)
    25a0:	4846      	ldr	r0, [pc, #280]	; (26bc <print_palette(unsigned char)+0x25c>)
    25a2:	f7fe fa81 	bl	aa8 <Print::println(char const*)>
    25a6:	bd10      	pop	{r4, pc}
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
    25a8:	4950      	ldr	r1, [pc, #320]	; (26ec <print_palette(unsigned char)+0x28c>)
    25aa:	4844      	ldr	r0, [pc, #272]	; (26bc <print_palette(unsigned char)+0x25c>)
    25ac:	f7fe fa7c 	bl	aa8 <Print::println(char const*)>
    25b0:	bd10      	pop	{r4, pc}
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
    25b2:	494f      	ldr	r1, [pc, #316]	; (26f0 <print_palette(unsigned char)+0x290>)
    25b4:	4841      	ldr	r0, [pc, #260]	; (26bc <print_palette(unsigned char)+0x25c>)
    25b6:	f7fe fa77 	bl	aa8 <Print::println(char const*)>
    25ba:	bd10      	pop	{r4, pc}
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
    25bc:	494d      	ldr	r1, [pc, #308]	; (26f4 <print_palette(unsigned char)+0x294>)
    25be:	483f      	ldr	r0, [pc, #252]	; (26bc <print_palette(unsigned char)+0x25c>)
    25c0:	f7fe fa72 	bl	aa8 <Print::println(char const*)>
    25c4:	bd10      	pop	{r4, pc}
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
    25c6:	494c      	ldr	r1, [pc, #304]	; (26f8 <print_palette(unsigned char)+0x298>)
    25c8:	483c      	ldr	r0, [pc, #240]	; (26bc <print_palette(unsigned char)+0x25c>)
    25ca:	f7fe fa6d 	bl	aa8 <Print::println(char const*)>
    25ce:	bd10      	pop	{r4, pc}
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
    25d0:	494a      	ldr	r1, [pc, #296]	; (26fc <print_palette(unsigned char)+0x29c>)
    25d2:	483a      	ldr	r0, [pc, #232]	; (26bc <print_palette(unsigned char)+0x25c>)
    25d4:	f7fe fa68 	bl	aa8 <Print::println(char const*)>
    25d8:	bd10      	pop	{r4, pc}
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
    25da:	4949      	ldr	r1, [pc, #292]	; (2700 <print_palette(unsigned char)+0x2a0>)
    25dc:	4837      	ldr	r0, [pc, #220]	; (26bc <print_palette(unsigned char)+0x25c>)
    25de:	f7fe fa63 	bl	aa8 <Print::println(char const*)>
    25e2:	bd10      	pop	{r4, pc}
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
    25e4:	4947      	ldr	r1, [pc, #284]	; (2704 <print_palette(unsigned char)+0x2a4>)
    25e6:	4835      	ldr	r0, [pc, #212]	; (26bc <print_palette(unsigned char)+0x25c>)
    25e8:	f7fe fa5e 	bl	aa8 <Print::println(char const*)>
    25ec:	bd10      	pop	{r4, pc}
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
    25ee:	4946      	ldr	r1, [pc, #280]	; (2708 <print_palette(unsigned char)+0x2a8>)
    25f0:	4832      	ldr	r0, [pc, #200]	; (26bc <print_palette(unsigned char)+0x25c>)
    25f2:	f7fe fa59 	bl	aa8 <Print::println(char const*)>
    25f6:	bd10      	pop	{r4, pc}
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
    25f8:	4944      	ldr	r1, [pc, #272]	; (270c <print_palette(unsigned char)+0x2ac>)
    25fa:	4830      	ldr	r0, [pc, #192]	; (26bc <print_palette(unsigned char)+0x25c>)
    25fc:	f7fe fa54 	bl	aa8 <Print::println(char const*)>
    2600:	bd10      	pop	{r4, pc}
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
    2602:	4943      	ldr	r1, [pc, #268]	; (2710 <print_palette(unsigned char)+0x2b0>)
    2604:	482d      	ldr	r0, [pc, #180]	; (26bc <print_palette(unsigned char)+0x25c>)
    2606:	f7fe fa4f 	bl	aa8 <Print::println(char const*)>
    260a:	bd10      	pop	{r4, pc}
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
    260c:	4941      	ldr	r1, [pc, #260]	; (2714 <print_palette(unsigned char)+0x2b4>)
    260e:	482b      	ldr	r0, [pc, #172]	; (26bc <print_palette(unsigned char)+0x25c>)
    2610:	f7fe fa4a 	bl	aa8 <Print::println(char const*)>
    2614:	bd10      	pop	{r4, pc}
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
    2616:	4940      	ldr	r1, [pc, #256]	; (2718 <print_palette(unsigned char)+0x2b8>)
    2618:	4828      	ldr	r0, [pc, #160]	; (26bc <print_palette(unsigned char)+0x25c>)
    261a:	f7fe fa45 	bl	aa8 <Print::println(char const*)>
    261e:	bd10      	pop	{r4, pc}
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
    2620:	493e      	ldr	r1, [pc, #248]	; (271c <print_palette(unsigned char)+0x2bc>)
    2622:	4826      	ldr	r0, [pc, #152]	; (26bc <print_palette(unsigned char)+0x25c>)
    2624:	f7fe fa40 	bl	aa8 <Print::println(char const*)>
    2628:	bd10      	pop	{r4, pc}
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
    262a:	493d      	ldr	r1, [pc, #244]	; (2720 <print_palette(unsigned char)+0x2c0>)
    262c:	4823      	ldr	r0, [pc, #140]	; (26bc <print_palette(unsigned char)+0x25c>)
    262e:	f7fe fa3b 	bl	aa8 <Print::println(char const*)>
    2632:	bd10      	pop	{r4, pc}
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
    2634:	493b      	ldr	r1, [pc, #236]	; (2724 <print_palette(unsigned char)+0x2c4>)
    2636:	4821      	ldr	r0, [pc, #132]	; (26bc <print_palette(unsigned char)+0x25c>)
    2638:	f7fe fa36 	bl	aa8 <Print::println(char const*)>
    263c:	bd10      	pop	{r4, pc}
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
    263e:	493a      	ldr	r1, [pc, #232]	; (2728 <print_palette(unsigned char)+0x2c8>)
    2640:	481e      	ldr	r0, [pc, #120]	; (26bc <print_palette(unsigned char)+0x25c>)
    2642:	f7fe fa31 	bl	aa8 <Print::println(char const*)>
    2646:	bd10      	pop	{r4, pc}
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
    2648:	4938      	ldr	r1, [pc, #224]	; (272c <print_palette(unsigned char)+0x2cc>)
    264a:	481c      	ldr	r0, [pc, #112]	; (26bc <print_palette(unsigned char)+0x25c>)
    264c:	f7fe fa2c 	bl	aa8 <Print::println(char const*)>
    2650:	bd10      	pop	{r4, pc}
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
    2652:	4937      	ldr	r1, [pc, #220]	; (2730 <print_palette(unsigned char)+0x2d0>)
    2654:	4819      	ldr	r0, [pc, #100]	; (26bc <print_palette(unsigned char)+0x25c>)
    2656:	f7fe fa27 	bl	aa8 <Print::println(char const*)>
    265a:	bd10      	pop	{r4, pc}
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
    265c:	4935      	ldr	r1, [pc, #212]	; (2734 <print_palette(unsigned char)+0x2d4>)
    265e:	4817      	ldr	r0, [pc, #92]	; (26bc <print_palette(unsigned char)+0x25c>)
    2660:	f7fe fa22 	bl	aa8 <Print::println(char const*)>
    2664:	bd10      	pop	{r4, pc}
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
    2666:	4934      	ldr	r1, [pc, #208]	; (2738 <print_palette(unsigned char)+0x2d8>)
    2668:	4814      	ldr	r0, [pc, #80]	; (26bc <print_palette(unsigned char)+0x25c>)
    266a:	f7fe fa1d 	bl	aa8 <Print::println(char const*)>
    266e:	bd10      	pop	{r4, pc}
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
    2670:	4932      	ldr	r1, [pc, #200]	; (273c <print_palette(unsigned char)+0x2dc>)
    2672:	4812      	ldr	r0, [pc, #72]	; (26bc <print_palette(unsigned char)+0x25c>)
    2674:	f7fe fa18 	bl	aa8 <Print::println(char const*)>
    2678:	bd10      	pop	{r4, pc}
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
    267a:	4931      	ldr	r1, [pc, #196]	; (2740 <print_palette(unsigned char)+0x2e0>)
    267c:	480f      	ldr	r0, [pc, #60]	; (26bc <print_palette(unsigned char)+0x25c>)
    267e:	f7fe fa13 	bl	aa8 <Print::println(char const*)>
    2682:	bd10      	pop	{r4, pc}
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
    2684:	492f      	ldr	r1, [pc, #188]	; (2744 <print_palette(unsigned char)+0x2e4>)
    2686:	480d      	ldr	r0, [pc, #52]	; (26bc <print_palette(unsigned char)+0x25c>)
    2688:	f7fe fa0e 	bl	aa8 <Print::println(char const*)>
    268c:	bd10      	pop	{r4, pc}
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
    268e:	492e      	ldr	r1, [pc, #184]	; (2748 <print_palette(unsigned char)+0x2e8>)
    2690:	480a      	ldr	r0, [pc, #40]	; (26bc <print_palette(unsigned char)+0x25c>)
    2692:	f7fe fa09 	bl	aa8 <Print::println(char const*)>
    2696:	bd10      	pop	{r4, pc}
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
    2698:	492c      	ldr	r1, [pc, #176]	; (274c <print_palette(unsigned char)+0x2ec>)
    269a:	4808      	ldr	r0, [pc, #32]	; (26bc <print_palette(unsigned char)+0x25c>)
    269c:	f7fe fa04 	bl	aa8 <Print::println(char const*)>
    26a0:	bd10      	pop	{r4, pc}
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
    26a2:	492b      	ldr	r1, [pc, #172]	; (2750 <print_palette(unsigned char)+0x2f0>)
    26a4:	4805      	ldr	r0, [pc, #20]	; (26bc <print_palette(unsigned char)+0x25c>)
    26a6:	f7fe f9ff 	bl	aa8 <Print::println(char const*)>
    26aa:	bd10      	pop	{r4, pc}
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
    26ac:	4929      	ldr	r1, [pc, #164]	; (2754 <print_palette(unsigned char)+0x2f4>)
    26ae:	4803      	ldr	r0, [pc, #12]	; (26bc <print_palette(unsigned char)+0x25c>)
    26b0:	f7fe f9fa 	bl	aa8 <Print::println(char const*)>
    26b4:	bd10      	pop	{r4, pc}
    26b6:	bf00      	nop
    26b8:	0000e45c 	.word	0x0000e45c
    26bc:	1fff8788 	.word	0x1fff8788
    26c0:	0000e470 	.word	0x0000e470
    26c4:	0000ea04 	.word	0x0000ea04
    26c8:	0000e9f8 	.word	0x0000e9f8
    26cc:	0000e9e8 	.word	0x0000e9e8
    26d0:	0000e9d8 	.word	0x0000e9d8
    26d4:	0000e9c4 	.word	0x0000e9c4
    26d8:	0000e9ac 	.word	0x0000e9ac
    26dc:	0000e994 	.word	0x0000e994
    26e0:	0000e984 	.word	0x0000e984
    26e4:	0000e96c 	.word	0x0000e96c
    26e8:	0000e960 	.word	0x0000e960
    26ec:	0000e954 	.word	0x0000e954
    26f0:	0000e93c 	.word	0x0000e93c
    26f4:	0000e930 	.word	0x0000e930
    26f8:	0000e924 	.word	0x0000e924
    26fc:	0000e918 	.word	0x0000e918
    2700:	0000e90c 	.word	0x0000e90c
    2704:	0000e8fc 	.word	0x0000e8fc
    2708:	0000e8f0 	.word	0x0000e8f0
    270c:	0000e8dc 	.word	0x0000e8dc
    2710:	0000e8d0 	.word	0x0000e8d0
    2714:	0000e8c0 	.word	0x0000e8c0
    2718:	0000e8b4 	.word	0x0000e8b4
    271c:	0000e8a8 	.word	0x0000e8a8
    2720:	0000e8a0 	.word	0x0000e8a0
    2724:	0000e88c 	.word	0x0000e88c
    2728:	0000e87c 	.word	0x0000e87c
    272c:	0000e868 	.word	0x0000e868
    2730:	0000e85c 	.word	0x0000e85c
    2734:	0000e850 	.word	0x0000e850
    2738:	0000e844 	.word	0x0000e844
    273c:	0000e834 	.word	0x0000e834
    2740:	0000e820 	.word	0x0000e820
    2744:	0000e814 	.word	0x0000e814
    2748:	0000e804 	.word	0x0000e804
    274c:	0000e7f8 	.word	0x0000e7f8
    2750:	0000e7e8 	.word	0x0000e7e8
    2754:	0000e7dc 	.word	0x0000e7dc
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
    2758:	498e      	ldr	r1, [pc, #568]	; (2994 <print_palette(unsigned char)+0x534>)
    275a:	488f      	ldr	r0, [pc, #572]	; (2998 <print_palette(unsigned char)+0x538>)
    275c:	f7fe f9a4 	bl	aa8 <Print::println(char const*)>
    2760:	bd10      	pop	{r4, pc}
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
    2762:	498e      	ldr	r1, [pc, #568]	; (299c <print_palette(unsigned char)+0x53c>)
    2764:	488c      	ldr	r0, [pc, #560]	; (2998 <print_palette(unsigned char)+0x538>)
    2766:	f7fe f99f 	bl	aa8 <Print::println(char const*)>
    276a:	bd10      	pop	{r4, pc}
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
    276c:	498c      	ldr	r1, [pc, #560]	; (29a0 <print_palette(unsigned char)+0x540>)
    276e:	488a      	ldr	r0, [pc, #552]	; (2998 <print_palette(unsigned char)+0x538>)
    2770:	f7fe f99a 	bl	aa8 <Print::println(char const*)>
    2774:	bd10      	pop	{r4, pc}
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
    2776:	498b      	ldr	r1, [pc, #556]	; (29a4 <print_palette(unsigned char)+0x544>)
    2778:	4887      	ldr	r0, [pc, #540]	; (2998 <print_palette(unsigned char)+0x538>)
    277a:	f7fe f995 	bl	aa8 <Print::println(char const*)>
    277e:	bd10      	pop	{r4, pc}
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
    2780:	4989      	ldr	r1, [pc, #548]	; (29a8 <print_palette(unsigned char)+0x548>)
    2782:	4885      	ldr	r0, [pc, #532]	; (2998 <print_palette(unsigned char)+0x538>)
    2784:	f7fe f990 	bl	aa8 <Print::println(char const*)>
    2788:	bd10      	pop	{r4, pc}
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
    278a:	4988      	ldr	r1, [pc, #544]	; (29ac <print_palette(unsigned char)+0x54c>)
    278c:	4882      	ldr	r0, [pc, #520]	; (2998 <print_palette(unsigned char)+0x538>)
    278e:	f7fe f98b 	bl	aa8 <Print::println(char const*)>
    2792:	bd10      	pop	{r4, pc}
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
    2794:	4986      	ldr	r1, [pc, #536]	; (29b0 <print_palette(unsigned char)+0x550>)
    2796:	4880      	ldr	r0, [pc, #512]	; (2998 <print_palette(unsigned char)+0x538>)
    2798:	f7fe f986 	bl	aa8 <Print::println(char const*)>
    279c:	bd10      	pop	{r4, pc}
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
    279e:	4985      	ldr	r1, [pc, #532]	; (29b4 <print_palette(unsigned char)+0x554>)
    27a0:	487d      	ldr	r0, [pc, #500]	; (2998 <print_palette(unsigned char)+0x538>)
    27a2:	f7fe f981 	bl	aa8 <Print::println(char const*)>
    27a6:	bd10      	pop	{r4, pc}
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
    27a8:	4983      	ldr	r1, [pc, #524]	; (29b8 <print_palette(unsigned char)+0x558>)
    27aa:	487b      	ldr	r0, [pc, #492]	; (2998 <print_palette(unsigned char)+0x538>)
    27ac:	f7fe f97c 	bl	aa8 <Print::println(char const*)>
    27b0:	bd10      	pop	{r4, pc}
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
    27b2:	4982      	ldr	r1, [pc, #520]	; (29bc <print_palette(unsigned char)+0x55c>)
    27b4:	4878      	ldr	r0, [pc, #480]	; (2998 <print_palette(unsigned char)+0x538>)
    27b6:	f7fe f977 	bl	aa8 <Print::println(char const*)>
    27ba:	bd10      	pop	{r4, pc}
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
    27bc:	4980      	ldr	r1, [pc, #512]	; (29c0 <print_palette(unsigned char)+0x560>)
    27be:	4876      	ldr	r0, [pc, #472]	; (2998 <print_palette(unsigned char)+0x538>)
    27c0:	f7fe f972 	bl	aa8 <Print::println(char const*)>
    27c4:	bd10      	pop	{r4, pc}
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
    27c6:	497f      	ldr	r1, [pc, #508]	; (29c4 <print_palette(unsigned char)+0x564>)
    27c8:	4873      	ldr	r0, [pc, #460]	; (2998 <print_palette(unsigned char)+0x538>)
    27ca:	f7fe f96d 	bl	aa8 <Print::println(char const*)>
    27ce:	bd10      	pop	{r4, pc}
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
    27d0:	497d      	ldr	r1, [pc, #500]	; (29c8 <print_palette(unsigned char)+0x568>)
    27d2:	4871      	ldr	r0, [pc, #452]	; (2998 <print_palette(unsigned char)+0x538>)
    27d4:	f7fe f968 	bl	aa8 <Print::println(char const*)>
    27d8:	bd10      	pop	{r4, pc}
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
    27da:	497c      	ldr	r1, [pc, #496]	; (29cc <print_palette(unsigned char)+0x56c>)
    27dc:	486e      	ldr	r0, [pc, #440]	; (2998 <print_palette(unsigned char)+0x538>)
    27de:	f7fe f963 	bl	aa8 <Print::println(char const*)>
    27e2:	bd10      	pop	{r4, pc}
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
    27e4:	497a      	ldr	r1, [pc, #488]	; (29d0 <print_palette(unsigned char)+0x570>)
    27e6:	486c      	ldr	r0, [pc, #432]	; (2998 <print_palette(unsigned char)+0x538>)
    27e8:	f7fe f95e 	bl	aa8 <Print::println(char const*)>
    27ec:	bd10      	pop	{r4, pc}
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
    27ee:	4979      	ldr	r1, [pc, #484]	; (29d4 <print_palette(unsigned char)+0x574>)
    27f0:	4869      	ldr	r0, [pc, #420]	; (2998 <print_palette(unsigned char)+0x538>)
    27f2:	f7fe f959 	bl	aa8 <Print::println(char const*)>
    27f6:	bd10      	pop	{r4, pc}
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
    27f8:	4977      	ldr	r1, [pc, #476]	; (29d8 <print_palette(unsigned char)+0x578>)
    27fa:	4867      	ldr	r0, [pc, #412]	; (2998 <print_palette(unsigned char)+0x538>)
    27fc:	f7fe f954 	bl	aa8 <Print::println(char const*)>
    2800:	bd10      	pop	{r4, pc}
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
    2802:	4976      	ldr	r1, [pc, #472]	; (29dc <print_palette(unsigned char)+0x57c>)
    2804:	4864      	ldr	r0, [pc, #400]	; (2998 <print_palette(unsigned char)+0x538>)
    2806:	f7fe f94f 	bl	aa8 <Print::println(char const*)>
    280a:	bd10      	pop	{r4, pc}
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
    280c:	4974      	ldr	r1, [pc, #464]	; (29e0 <print_palette(unsigned char)+0x580>)
    280e:	4862      	ldr	r0, [pc, #392]	; (2998 <print_palette(unsigned char)+0x538>)
    2810:	f7fe f94a 	bl	aa8 <Print::println(char const*)>
    2814:	bd10      	pop	{r4, pc}
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
    2816:	4973      	ldr	r1, [pc, #460]	; (29e4 <print_palette(unsigned char)+0x584>)
    2818:	485f      	ldr	r0, [pc, #380]	; (2998 <print_palette(unsigned char)+0x538>)
    281a:	f7fe f945 	bl	aa8 <Print::println(char const*)>
    281e:	bd10      	pop	{r4, pc}
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
    2820:	4971      	ldr	r1, [pc, #452]	; (29e8 <print_palette(unsigned char)+0x588>)
    2822:	485d      	ldr	r0, [pc, #372]	; (2998 <print_palette(unsigned char)+0x538>)
    2824:	f7fe f940 	bl	aa8 <Print::println(char const*)>
    2828:	bd10      	pop	{r4, pc}
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
    282a:	4970      	ldr	r1, [pc, #448]	; (29ec <print_palette(unsigned char)+0x58c>)
    282c:	485a      	ldr	r0, [pc, #360]	; (2998 <print_palette(unsigned char)+0x538>)
    282e:	f7fe f93b 	bl	aa8 <Print::println(char const*)>
    2832:	bd10      	pop	{r4, pc}
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
    2834:	496e      	ldr	r1, [pc, #440]	; (29f0 <print_palette(unsigned char)+0x590>)
    2836:	4858      	ldr	r0, [pc, #352]	; (2998 <print_palette(unsigned char)+0x538>)
    2838:	f7fe f936 	bl	aa8 <Print::println(char const*)>
    283c:	bd10      	pop	{r4, pc}
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
    283e:	496d      	ldr	r1, [pc, #436]	; (29f4 <print_palette(unsigned char)+0x594>)
    2840:	4855      	ldr	r0, [pc, #340]	; (2998 <print_palette(unsigned char)+0x538>)
    2842:	f7fe f931 	bl	aa8 <Print::println(char const*)>
    2846:	bd10      	pop	{r4, pc}
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
    2848:	496b      	ldr	r1, [pc, #428]	; (29f8 <print_palette(unsigned char)+0x598>)
    284a:	4853      	ldr	r0, [pc, #332]	; (2998 <print_palette(unsigned char)+0x538>)
    284c:	f7fe f92c 	bl	aa8 <Print::println(char const*)>
    2850:	bd10      	pop	{r4, pc}
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
    2852:	496a      	ldr	r1, [pc, #424]	; (29fc <print_palette(unsigned char)+0x59c>)
    2854:	4850      	ldr	r0, [pc, #320]	; (2998 <print_palette(unsigned char)+0x538>)
    2856:	f7fe f927 	bl	aa8 <Print::println(char const*)>
    285a:	bd10      	pop	{r4, pc}
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
    285c:	4968      	ldr	r1, [pc, #416]	; (2a00 <print_palette(unsigned char)+0x5a0>)
    285e:	484e      	ldr	r0, [pc, #312]	; (2998 <print_palette(unsigned char)+0x538>)
    2860:	f7fe f922 	bl	aa8 <Print::println(char const*)>
    2864:	bd10      	pop	{r4, pc}
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
    2866:	4967      	ldr	r1, [pc, #412]	; (2a04 <print_palette(unsigned char)+0x5a4>)
    2868:	484b      	ldr	r0, [pc, #300]	; (2998 <print_palette(unsigned char)+0x538>)
    286a:	f7fe f91d 	bl	aa8 <Print::println(char const*)>
    286e:	bd10      	pop	{r4, pc}
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
    2870:	4965      	ldr	r1, [pc, #404]	; (2a08 <print_palette(unsigned char)+0x5a8>)
    2872:	4849      	ldr	r0, [pc, #292]	; (2998 <print_palette(unsigned char)+0x538>)
    2874:	f7fe f918 	bl	aa8 <Print::println(char const*)>
    2878:	bd10      	pop	{r4, pc}
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
    287a:	4964      	ldr	r1, [pc, #400]	; (2a0c <print_palette(unsigned char)+0x5ac>)
    287c:	4846      	ldr	r0, [pc, #280]	; (2998 <print_palette(unsigned char)+0x538>)
    287e:	f7fe f913 	bl	aa8 <Print::println(char const*)>
    2882:	bd10      	pop	{r4, pc}
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
    2884:	4962      	ldr	r1, [pc, #392]	; (2a10 <print_palette(unsigned char)+0x5b0>)
    2886:	4844      	ldr	r0, [pc, #272]	; (2998 <print_palette(unsigned char)+0x538>)
    2888:	f7fe f90e 	bl	aa8 <Print::println(char const*)>
    288c:	bd10      	pop	{r4, pc}
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
    288e:	4961      	ldr	r1, [pc, #388]	; (2a14 <print_palette(unsigned char)+0x5b4>)
    2890:	4841      	ldr	r0, [pc, #260]	; (2998 <print_palette(unsigned char)+0x538>)
    2892:	f7fe f909 	bl	aa8 <Print::println(char const*)>
    2896:	bd10      	pop	{r4, pc}
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
    2898:	495f      	ldr	r1, [pc, #380]	; (2a18 <print_palette(unsigned char)+0x5b8>)
    289a:	483f      	ldr	r0, [pc, #252]	; (2998 <print_palette(unsigned char)+0x538>)
    289c:	f7fe f904 	bl	aa8 <Print::println(char const*)>
    28a0:	bd10      	pop	{r4, pc}
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
    28a2:	495e      	ldr	r1, [pc, #376]	; (2a1c <print_palette(unsigned char)+0x5bc>)
    28a4:	483c      	ldr	r0, [pc, #240]	; (2998 <print_palette(unsigned char)+0x538>)
    28a6:	f7fe f8ff 	bl	aa8 <Print::println(char const*)>
    28aa:	bd10      	pop	{r4, pc}
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
    28ac:	495c      	ldr	r1, [pc, #368]	; (2a20 <print_palette(unsigned char)+0x5c0>)
    28ae:	483a      	ldr	r0, [pc, #232]	; (2998 <print_palette(unsigned char)+0x538>)
    28b0:	f7fe f8fa 	bl	aa8 <Print::println(char const*)>
    28b4:	bd10      	pop	{r4, pc}
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
    28b6:	495b      	ldr	r1, [pc, #364]	; (2a24 <print_palette(unsigned char)+0x5c4>)
    28b8:	4837      	ldr	r0, [pc, #220]	; (2998 <print_palette(unsigned char)+0x538>)
    28ba:	f7fe f8f5 	bl	aa8 <Print::println(char const*)>
    28be:	bd10      	pop	{r4, pc}
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
    28c0:	4959      	ldr	r1, [pc, #356]	; (2a28 <print_palette(unsigned char)+0x5c8>)
    28c2:	4835      	ldr	r0, [pc, #212]	; (2998 <print_palette(unsigned char)+0x538>)
    28c4:	f7fe f8f0 	bl	aa8 <Print::println(char const*)>
    28c8:	bd10      	pop	{r4, pc}
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
    28ca:	4958      	ldr	r1, [pc, #352]	; (2a2c <print_palette(unsigned char)+0x5cc>)
    28cc:	4832      	ldr	r0, [pc, #200]	; (2998 <print_palette(unsigned char)+0x538>)
    28ce:	f7fe f8eb 	bl	aa8 <Print::println(char const*)>
    28d2:	bd10      	pop	{r4, pc}
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
    28d4:	4956      	ldr	r1, [pc, #344]	; (2a30 <print_palette(unsigned char)+0x5d0>)
    28d6:	4830      	ldr	r0, [pc, #192]	; (2998 <print_palette(unsigned char)+0x538>)
    28d8:	f7fe f8e6 	bl	aa8 <Print::println(char const*)>
    28dc:	bd10      	pop	{r4, pc}
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
    28de:	4955      	ldr	r1, [pc, #340]	; (2a34 <print_palette(unsigned char)+0x5d4>)
    28e0:	482d      	ldr	r0, [pc, #180]	; (2998 <print_palette(unsigned char)+0x538>)
    28e2:	f7fe f8e1 	bl	aa8 <Print::println(char const*)>
    28e6:	bd10      	pop	{r4, pc}
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
    28e8:	4953      	ldr	r1, [pc, #332]	; (2a38 <print_palette(unsigned char)+0x5d8>)
    28ea:	482b      	ldr	r0, [pc, #172]	; (2998 <print_palette(unsigned char)+0x538>)
    28ec:	f7fe f8dc 	bl	aa8 <Print::println(char const*)>
    28f0:	bd10      	pop	{r4, pc}
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
    28f2:	4952      	ldr	r1, [pc, #328]	; (2a3c <print_palette(unsigned char)+0x5dc>)
    28f4:	4828      	ldr	r0, [pc, #160]	; (2998 <print_palette(unsigned char)+0x538>)
    28f6:	f7fe f8d7 	bl	aa8 <Print::println(char const*)>
    28fa:	bd10      	pop	{r4, pc}
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
    28fc:	4950      	ldr	r1, [pc, #320]	; (2a40 <print_palette(unsigned char)+0x5e0>)
    28fe:	4826      	ldr	r0, [pc, #152]	; (2998 <print_palette(unsigned char)+0x538>)
    2900:	f7fe f8d2 	bl	aa8 <Print::println(char const*)>
    2904:	bd10      	pop	{r4, pc}
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
    2906:	494f      	ldr	r1, [pc, #316]	; (2a44 <print_palette(unsigned char)+0x5e4>)
    2908:	4823      	ldr	r0, [pc, #140]	; (2998 <print_palette(unsigned char)+0x538>)
    290a:	f7fe f8cd 	bl	aa8 <Print::println(char const*)>
    290e:	bd10      	pop	{r4, pc}
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
    2910:	494d      	ldr	r1, [pc, #308]	; (2a48 <print_palette(unsigned char)+0x5e8>)
    2912:	4821      	ldr	r0, [pc, #132]	; (2998 <print_palette(unsigned char)+0x538>)
    2914:	f7fe f8c8 	bl	aa8 <Print::println(char const*)>
    2918:	bd10      	pop	{r4, pc}
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
    291a:	494c      	ldr	r1, [pc, #304]	; (2a4c <print_palette(unsigned char)+0x5ec>)
    291c:	481e      	ldr	r0, [pc, #120]	; (2998 <print_palette(unsigned char)+0x538>)
    291e:	f7fe f8c3 	bl	aa8 <Print::println(char const*)>
    2922:	bd10      	pop	{r4, pc}
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
    2924:	494a      	ldr	r1, [pc, #296]	; (2a50 <print_palette(unsigned char)+0x5f0>)
    2926:	481c      	ldr	r0, [pc, #112]	; (2998 <print_palette(unsigned char)+0x538>)
    2928:	f7fe f8be 	bl	aa8 <Print::println(char const*)>
    292c:	bd10      	pop	{r4, pc}
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
    292e:	4949      	ldr	r1, [pc, #292]	; (2a54 <print_palette(unsigned char)+0x5f4>)
    2930:	4819      	ldr	r0, [pc, #100]	; (2998 <print_palette(unsigned char)+0x538>)
    2932:	f7fe f8b9 	bl	aa8 <Print::println(char const*)>
    2936:	bd10      	pop	{r4, pc}
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
    2938:	4947      	ldr	r1, [pc, #284]	; (2a58 <print_palette(unsigned char)+0x5f8>)
    293a:	4817      	ldr	r0, [pc, #92]	; (2998 <print_palette(unsigned char)+0x538>)
    293c:	f7fe f8b4 	bl	aa8 <Print::println(char const*)>
    2940:	bd10      	pop	{r4, pc}
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
    2942:	4946      	ldr	r1, [pc, #280]	; (2a5c <print_palette(unsigned char)+0x5fc>)
    2944:	4814      	ldr	r0, [pc, #80]	; (2998 <print_palette(unsigned char)+0x538>)
    2946:	f7fe f8af 	bl	aa8 <Print::println(char const*)>
    294a:	bd10      	pop	{r4, pc}
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
    294c:	4944      	ldr	r1, [pc, #272]	; (2a60 <print_palette(unsigned char)+0x600>)
    294e:	4812      	ldr	r0, [pc, #72]	; (2998 <print_palette(unsigned char)+0x538>)
    2950:	f7fe f8aa 	bl	aa8 <Print::println(char const*)>
    2954:	bd10      	pop	{r4, pc}
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
    2956:	4943      	ldr	r1, [pc, #268]	; (2a64 <print_palette(unsigned char)+0x604>)
    2958:	480f      	ldr	r0, [pc, #60]	; (2998 <print_palette(unsigned char)+0x538>)
    295a:	f7fe f8a5 	bl	aa8 <Print::println(char const*)>
    295e:	bd10      	pop	{r4, pc}
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
    2960:	4941      	ldr	r1, [pc, #260]	; (2a68 <print_palette(unsigned char)+0x608>)
    2962:	480d      	ldr	r0, [pc, #52]	; (2998 <print_palette(unsigned char)+0x538>)
    2964:	f7fe f8a0 	bl	aa8 <Print::println(char const*)>
    2968:	bd10      	pop	{r4, pc}
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
    296a:	4940      	ldr	r1, [pc, #256]	; (2a6c <print_palette(unsigned char)+0x60c>)
    296c:	480a      	ldr	r0, [pc, #40]	; (2998 <print_palette(unsigned char)+0x538>)
    296e:	f7fe f89b 	bl	aa8 <Print::println(char const*)>
    2972:	bd10      	pop	{r4, pc}
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
    2974:	493e      	ldr	r1, [pc, #248]	; (2a70 <print_palette(unsigned char)+0x610>)
    2976:	4808      	ldr	r0, [pc, #32]	; (2998 <print_palette(unsigned char)+0x538>)
    2978:	f7fe f896 	bl	aa8 <Print::println(char const*)>
    297c:	bd10      	pop	{r4, pc}
void print_palette(uint8_t pn) {
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
    297e:	493d      	ldr	r1, [pc, #244]	; (2a74 <print_palette(unsigned char)+0x614>)
    2980:	4805      	ldr	r0, [pc, #20]	; (2998 <print_palette(unsigned char)+0x538>)
    2982:	f7fe f891 	bl	aa8 <Print::println(char const*)>
    2986:	bd10      	pop	{r4, pc}
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
		default:	Serial.println("Not a gradient palette");		break;
    2988:	493b      	ldr	r1, [pc, #236]	; (2a78 <print_palette(unsigned char)+0x618>)
    298a:	4803      	ldr	r0, [pc, #12]	; (2998 <print_palette(unsigned char)+0x538>)
    298c:	f7fe f88c 	bl	aa8 <Print::println(char const*)>
    2990:	bd10      	pop	{r4, pc}
    2992:	bf00      	nop
    2994:	0000e7c8 	.word	0x0000e7c8
    2998:	1fff8788 	.word	0x1fff8788
    299c:	0000e7b8 	.word	0x0000e7b8
    29a0:	0000e7ac 	.word	0x0000e7ac
    29a4:	0000e7a0 	.word	0x0000e7a0
    29a8:	0000e794 	.word	0x0000e794
    29ac:	0000e780 	.word	0x0000e780
    29b0:	0000e774 	.word	0x0000e774
    29b4:	0000e768 	.word	0x0000e768
    29b8:	0000e75c 	.word	0x0000e75c
    29bc:	0000e744 	.word	0x0000e744
    29c0:	0000e73c 	.word	0x0000e73c
    29c4:	0000e7d4 	.word	0x0000e7d4
    29c8:	0000e730 	.word	0x0000e730
    29cc:	0000e724 	.word	0x0000e724
    29d0:	0000e710 	.word	0x0000e710
    29d4:	0000e6fc 	.word	0x0000e6fc
    29d8:	0000e6ec 	.word	0x0000e6ec
    29dc:	0000e6e0 	.word	0x0000e6e0
    29e0:	0000e6d4 	.word	0x0000e6d4
    29e4:	0000e6c8 	.word	0x0000e6c8
    29e8:	0000e6bc 	.word	0x0000e6bc
    29ec:	0000e6b0 	.word	0x0000e6b0
    29f0:	0000e6a4 	.word	0x0000e6a4
    29f4:	0000e698 	.word	0x0000e698
    29f8:	0000e68c 	.word	0x0000e68c
    29fc:	0000e680 	.word	0x0000e680
    2a00:	0000e674 	.word	0x0000e674
    2a04:	0000e668 	.word	0x0000e668
    2a08:	0000e658 	.word	0x0000e658
    2a0c:	0000e644 	.word	0x0000e644
    2a10:	0000e628 	.word	0x0000e628
    2a14:	0000e610 	.word	0x0000e610
    2a18:	0000e5f4 	.word	0x0000e5f4
    2a1c:	0000e5e4 	.word	0x0000e5e4
    2a20:	0000e5d4 	.word	0x0000e5d4
    2a24:	0000e5c0 	.word	0x0000e5c0
    2a28:	0000e5b0 	.word	0x0000e5b0
    2a2c:	0000e5a8 	.word	0x0000e5a8
    2a30:	0000e5a0 	.word	0x0000e5a0
    2a34:	0000e588 	.word	0x0000e588
    2a38:	0000e578 	.word	0x0000e578
    2a3c:	0000e570 	.word	0x0000e570
    2a40:	0000e560 	.word	0x0000e560
    2a44:	0000e550 	.word	0x0000e550
    2a48:	0000e540 	.word	0x0000e540
    2a4c:	0000e52c 	.word	0x0000e52c
    2a50:	0000e518 	.word	0x0000e518
    2a54:	0000e504 	.word	0x0000e504
    2a58:	0000e4ec 	.word	0x0000e4ec
    2a5c:	0000e4d4 	.word	0x0000e4d4
    2a60:	0000e4c4 	.word	0x0000e4c4
    2a64:	0000e4b0 	.word	0x0000e4b0
    2a68:	0000e49c 	.word	0x0000e49c
    2a6c:	0000e48c 	.word	0x0000e48c
    2a70:	0000e480 	.word	0x0000e480
    2a74:	0000e474 	.word	0x0000e474
    2a78:	0000ea1c 	.word	0x0000ea1c

00002a7c <LEDDebug(LEDStruct&)>:

void print_palette(uint8_t pn); // Forward declaration


// Debugging function
void LEDDebug(LEDStruct& leds) {
    2a7c:	b538      	push	{r3, r4, r5, lr}
    2a7e:	2100      	movs	r1, #0
    2a80:	4604      	mov	r4, r0
    2a82:	4890      	ldr	r0, [pc, #576]	; (2cc4 <LEDDebug(LEDStruct&)+0x248>)
    2a84:	f008 fe00 	bl	b688 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2a88:	488f      	ldr	r0, [pc, #572]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2a8a:	f009 f801 	bl	ba90 <Print::println()>
    2a8e:	2122      	movs	r1, #34	; 0x22
    2a90:	488e      	ldr	r0, [pc, #568]	; (2ccc <LEDDebug(LEDStruct&)+0x250>)
    2a92:	f008 fdf9 	bl	b688 <usb_serial_write>
    2a96:	488c      	ldr	r0, [pc, #560]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2a98:	f008 fffa 	bl	ba90 <Print::println()>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    2a9c:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    2aa0:	2b00      	cmp	r3, #0
    2aa2:	f000 80af 	beq.w	2c04 <LEDDebug(LEDStruct&)+0x188>
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2aa6:	2b01      	cmp	r3, #1
    2aa8:	f000 8511 	beq.w	34ce <LEDDebug(LEDStruct&)+0xa52>
    2aac:	2113      	movs	r1, #19
    2aae:	4888      	ldr	r0, [pc, #544]	; (2cd0 <LEDDebug(LEDStruct&)+0x254>)
    2ab0:	f008 fdea 	bl	b688 <usb_serial_write>

	// Print Standard Variables
	Serial.print("|| (B) Brightness:\t");
	Serial.print(max_bright);
    2ab4:	4b87      	ldr	r3, [pc, #540]	; (2cd4 <LEDDebug(LEDStruct&)+0x258>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2ab6:	4884      	ldr	r0, [pc, #528]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2ab8:	7819      	ldrb	r1, [r3, #0]
    2aba:	220a      	movs	r2, #10
    2abc:	2300      	movs	r3, #0
    2abe:	f008 fff7 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2ac2:	2103      	movs	r1, #3
    2ac4:	4884      	ldr	r0, [pc, #528]	; (2cd8 <LEDDebug(LEDStruct&)+0x25c>)
    2ac6:	f008 fddf 	bl	b688 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2aca:	487f      	ldr	r0, [pc, #508]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2acc:	f008 ffe0 	bl	ba90 <Print::println()>
    2ad0:	2113      	movs	r1, #19
    2ad2:	4882      	ldr	r0, [pc, #520]	; (2cdc <LEDDebug(LEDStruct&)+0x260>)
    2ad4:	f008 fdd8 	bl	b688 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2ad8:	220a      	movs	r2, #10
    2ada:	2300      	movs	r3, #0
    2adc:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    2ae0:	4879      	ldr	r0, [pc, #484]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2ae2:	f008 ffe5 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2ae6:	2103      	movs	r1, #3
    2ae8:	487b      	ldr	r0, [pc, #492]	; (2cd8 <LEDDebug(LEDStruct&)+0x25c>)
    2aea:	f008 fdcd 	bl	b688 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2aee:	4876      	ldr	r0, [pc, #472]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2af0:	f008 ffce 	bl	ba90 <Print::println()>
    2af4:	2111      	movs	r1, #17
    2af6:	487a      	ldr	r0, [pc, #488]	; (2ce0 <LEDDebug(LEDStruct&)+0x264>)
    2af8:	f008 fdc6 	bl	b688 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2afc:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2b00:	4871      	ldr	r0, [pc, #452]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2b02:	f009 f815 	bl	bb30 <Print::print(long)>
    2b06:	2103      	movs	r1, #3
    2b08:	4873      	ldr	r0, [pc, #460]	; (2cd8 <LEDDebug(LEDStruct&)+0x25c>)
    2b0a:	f008 fdbd 	bl	b688 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2b0e:	486e      	ldr	r0, [pc, #440]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2b10:	f008 ffbe 	bl	ba90 <Print::println()>
    2b14:	2111      	movs	r1, #17
    2b16:	4873      	ldr	r0, [pc, #460]	; (2ce4 <LEDDebug(LEDStruct&)+0x268>)
    2b18:	f008 fdb6 	bl	b688 <usb_serial_write>
	Serial.println("\t||");
	Serial.print("|| (N) this_dir:\t");
	Serial.print(leds.this_dir);
	Serial.println("\t||");
	Serial.print("|| (F) blending:\t");
	if (leds.current_blending == LINEARBLEND) { Serial.print("LINEAR"); }
    2b1c:	f894 3227 	ldrb.w	r3, [r4, #551]	; 0x227
    2b20:	2b01      	cmp	r3, #1
    2b22:	bf0b      	itete	eq
    2b24:	2106      	moveq	r1, #6
    2b26:	2107      	movne	r1, #7
    2b28:	486f      	ldreq	r0, [pc, #444]	; (2ce8 <LEDDebug(LEDStruct&)+0x26c>)
    2b2a:	4870      	ldrne	r0, [pc, #448]	; (2cec <LEDDebug(LEDStruct&)+0x270>)
    2b2c:	f008 fdac 	bl	b688 <usb_serial_write>
    2b30:	2103      	movs	r1, #3
    2b32:	4869      	ldr	r0, [pc, #420]	; (2cd8 <LEDDebug(LEDStruct&)+0x25c>)
    2b34:	f008 fda8 	bl	b688 <usb_serial_write>
    2b38:	4863      	ldr	r0, [pc, #396]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2b3a:	f008 ffa9 	bl	ba90 <Print::println()>
    2b3e:	2114      	movs	r1, #20
    2b40:	486b      	ldr	r0, [pc, #428]	; (2cf0 <LEDDebug(LEDStruct&)+0x274>)
    2b42:	f008 fda1 	bl	b688 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b46:	2300      	movs	r3, #0
    2b48:	220a      	movs	r2, #10
    2b4a:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2b4e:	485e      	ldr	r0, [pc, #376]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2b50:	f008 ffae 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2b54:	2103      	movs	r1, #3
    2b56:	4860      	ldr	r0, [pc, #384]	; (2cd8 <LEDDebug(LEDStruct&)+0x25c>)
    2b58:	f008 fd96 	bl	b688 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2b5c:	485a      	ldr	r0, [pc, #360]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2b5e:	f008 ff97 	bl	ba90 <Print::println()>
    2b62:	2115      	movs	r1, #21
    2b64:	4863      	ldr	r0, [pc, #396]	; (2cf4 <LEDDebug(LEDStruct&)+0x278>)
    2b66:	f008 fd8f 	bl	b688 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b6a:	f894 122d 	ldrb.w	r1, [r4, #557]	; 0x22d
    2b6e:	4856      	ldr	r0, [pc, #344]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2b70:	f008 ffde 	bl	bb30 <Print::print(long)>
    2b74:	2103      	movs	r1, #3
    2b76:	4858      	ldr	r0, [pc, #352]	; (2cd8 <LEDDebug(LEDStruct&)+0x25c>)
    2b78:	f008 fd86 	bl	b688 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2b7c:	4852      	ldr	r0, [pc, #328]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2b7e:	f008 ff87 	bl	ba90 <Print::println()>
    2b82:	2111      	movs	r1, #17
    2b84:	485c      	ldr	r0, [pc, #368]	; (2cf8 <LEDDebug(LEDStruct&)+0x27c>)
    2b86:	f008 fd7f 	bl	b688 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b8a:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
    2b8e:	484e      	ldr	r0, [pc, #312]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2b90:	f008 ffce 	bl	bb30 <Print::print(long)>
    2b94:	2103      	movs	r1, #3
    2b96:	4850      	ldr	r0, [pc, #320]	; (2cd8 <LEDDebug(LEDStruct&)+0x25c>)
    2b98:	f008 fd76 	bl	b688 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2b9c:	484a      	ldr	r0, [pc, #296]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2b9e:	f008 ff77 	bl	ba90 <Print::println()>
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    2ba2:	f894 3229 	ldrb.w	r3, [r4, #553]	; 0x229
    2ba6:	bb43      	cbnz	r3, 2bfa <LEDDebug(LEDStruct&)+0x17e>
    2ba8:	2122      	movs	r1, #34	; 0x22
    2baa:	4848      	ldr	r0, [pc, #288]	; (2ccc <LEDDebug(LEDStruct&)+0x250>)
    2bac:	f008 fd6c 	bl	b688 <usb_serial_write>
    2bb0:	4845      	ldr	r0, [pc, #276]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2bb2:	f008 ff6d 	bl	ba90 <Print::println()>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
    2bb6:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    2bba:	2b1a      	cmp	r3, #26
    2bbc:	f200 8479 	bhi.w	34b2 <LEDDebug(LEDStruct&)+0xa36>
    2bc0:	e8df f013 	tbh	[pc, r3, lsl #1]
    2bc4:	047700ac 	.word	0x047700ac
    2bc8:	04770477 	.word	0x04770477
    2bcc:	04770477 	.word	0x04770477
    2bd0:	011c0477 	.word	0x011c0477
    2bd4:	04770477 	.word	0x04770477
    2bd8:	04770477 	.word	0x04770477
    2bdc:	0477016a 	.word	0x0477016a
    2be0:	0190018b 	.word	0x0190018b
    2be4:	019a0195 	.word	0x019a0195
    2be8:	025c01a5 	.word	0x025c01a5
    2bec:	035902fd 	.word	0x035902fd
    2bf0:	03c20477 	.word	0x03c20477
    2bf4:	04410418 	.word	0x04410418
    2bf8:	0028      	.short	0x0028
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    2bfa:	f894 0228 	ldrb.w	r0, [r4, #552]	; 0x228
    2bfe:	f7ff fc2f 	bl	2460 <print_palette(unsigned char)>
    2c02:	e7d1      	b.n	2ba8 <LEDDebug(LEDStruct&)+0x12c>
    2c04:	2122      	movs	r1, #34	; 0x22
    2c06:	483d      	ldr	r0, [pc, #244]	; (2cfc <LEDDebug(LEDStruct&)+0x280>)
    2c08:	f008 fd3e 	bl	b688 <usb_serial_write>
    2c0c:	482e      	ldr	r0, [pc, #184]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2c0e:	f008 ff3f 	bl	ba90 <Print::println()>
    2c12:	e74b      	b.n	2aac <LEDDebug(LEDStruct&)+0x30>
			Serial.print(leds.auto_select_bg_color);
			Serial.println("\t||");
			break;

		case PLASMA:
			Serial.println("=============PLASMA===============");
    2c14:	493a      	ldr	r1, [pc, #232]	; (2d00 <LEDDebug(LEDStruct&)+0x284>)
    2c16:	482c      	ldr	r0, [pc, #176]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2c18:	f7fd ff46 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c1c:	4939      	ldr	r1, [pc, #228]	; (2d04 <LEDDebug(LEDStruct&)+0x288>)
    2c1e:	482a      	ldr	r0, [pc, #168]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2c20:	f7fd ff34 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c24:	2300      	movs	r3, #0
    2c26:	220a      	movs	r2, #10
    2c28:	f894 1830 	ldrb.w	r1, [r4, #2096]	; 0x830
    2c2c:	4826      	ldr	r0, [pc, #152]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2c2e:	f008 ff3f 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) plasma_beat1:\t");
			Serial.print(leds.plasma_beat1);
			Serial.println("\t||");
    2c32:	4929      	ldr	r1, [pc, #164]	; (2cd8 <LEDDebug(LEDStruct&)+0x25c>)
    2c34:	4824      	ldr	r0, [pc, #144]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2c36:	f7fd ff37 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c3a:	4933      	ldr	r1, [pc, #204]	; (2d08 <LEDDebug(LEDStruct&)+0x28c>)
    2c3c:	4822      	ldr	r0, [pc, #136]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2c3e:	f7fd ff25 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c42:	2300      	movs	r3, #0
    2c44:	220a      	movs	r2, #10
    2c46:	f894 1831 	ldrb.w	r1, [r4, #2097]	; 0x831
    2c4a:	481f      	ldr	r0, [pc, #124]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2c4c:	f008 ff30 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) plasma_beat2:\t");
			Serial.print(leds.plasma_beat2);
			Serial.println("\t||");
    2c50:	4921      	ldr	r1, [pc, #132]	; (2cd8 <LEDDebug(LEDStruct&)+0x25c>)
    2c52:	481d      	ldr	r0, [pc, #116]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2c54:	f7fd ff28 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c58:	492c      	ldr	r1, [pc, #176]	; (2d0c <LEDDebug(LEDStruct&)+0x290>)
    2c5a:	481b      	ldr	r0, [pc, #108]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2c5c:	f7fd ff16 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c60:	2300      	movs	r3, #0
    2c62:	220a      	movs	r2, #10
    2c64:	f894 1832 	ldrb.w	r1, [r4, #2098]	; 0x832
    2c68:	4817      	ldr	r0, [pc, #92]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2c6a:	f008 ff21 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) plasma_beat3:\t");
			Serial.print(leds.plasma_beat3);
			Serial.println("\t||");
    2c6e:	491a      	ldr	r1, [pc, #104]	; (2cd8 <LEDDebug(LEDStruct&)+0x25c>)
    2c70:	4815      	ldr	r0, [pc, #84]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2c72:	f7fd ff19 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c76:	4926      	ldr	r1, [pc, #152]	; (2d10 <LEDDebug(LEDStruct&)+0x294>)
    2c78:	4813      	ldr	r0, [pc, #76]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2c7a:	f7fd ff07 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c7e:	2300      	movs	r3, #0
    2c80:	220a      	movs	r2, #10
    2c82:	f894 1835 	ldrb.w	r1, [r4, #2101]	; 0x835
    2c86:	4810      	ldr	r0, [pc, #64]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2c88:	f008 ff12 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) plasma_range1:\t");
			Serial.print(leds.plasma_range1);
			Serial.println("\t||");
    2c8c:	4912      	ldr	r1, [pc, #72]	; (2cd8 <LEDDebug(LEDStruct&)+0x25c>)
    2c8e:	480e      	ldr	r0, [pc, #56]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2c90:	f7fd ff0a 	bl	aa8 <Print::println(char const*)>
    2c94:	2116      	movs	r1, #22
    2c96:	481f      	ldr	r0, [pc, #124]	; (2d14 <LEDDebug(LEDStruct&)+0x298>)
    2c98:	f008 fcf6 	bl	b688 <usb_serial_write>
    2c9c:	f894 1836 	ldrb.w	r1, [r4, #2102]	; 0x836
    2ca0:	4809      	ldr	r0, [pc, #36]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2ca2:	2300      	movs	r3, #0
    2ca4:	220a      	movs	r2, #10
    2ca6:	f008 ff03 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) plasma_range2:\t");
			Serial.print(leds.plasma_range2);
			Serial.println("\t||");
    2caa:	490b      	ldr	r1, [pc, #44]	; (2cd8 <LEDDebug(LEDStruct&)+0x25c>)
    2cac:	4806      	ldr	r0, [pc, #24]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
    2cae:	f7fd fefb 	bl	aa8 <Print::println(char const*)>
    2cb2:	2123      	movs	r1, #35	; 0x23
    2cb4:	4818      	ldr	r0, [pc, #96]	; (2d18 <LEDDebug(LEDStruct&)+0x29c>)
    2cb6:	f008 fce7 	bl	b688 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2cba:	4803      	ldr	r0, [pc, #12]	; (2cc8 <LEDDebug(LEDStruct&)+0x24c>)
			Serial.println("==========MODE TYPE ERROR=========");
			Serial.println("");
			break;
	}
	Serial.println("==================================\n");
}
    2cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2cc0:	f008 bee6 	b.w	ba90 <Print::println()>
    2cc4:	0000ebd8 	.word	0x0000ebd8
    2cc8:	1fff8788 	.word	0x1fff8788
    2ccc:	0000ea34 	.word	0x0000ea34
    2cd0:	0000eaa0 	.word	0x0000eaa0
    2cd4:	1fff871e 	.word	0x1fff871e
    2cd8:	0000eab4 	.word	0x0000eab4
    2cdc:	0000eab8 	.word	0x0000eab8
    2ce0:	0000eacc 	.word	0x0000eacc
    2ce4:	0000eae0 	.word	0x0000eae0
    2ce8:	0000eaf4 	.word	0x0000eaf4
    2cec:	0000eafc 	.word	0x0000eafc
    2cf0:	0000eb04 	.word	0x0000eb04
    2cf4:	0000eb1c 	.word	0x0000eb1c
    2cf8:	0000eb34 	.word	0x0000eb34
    2cfc:	0000ea58 	.word	0x0000ea58
    2d00:	0000f2b8 	.word	0x0000f2b8
    2d04:	0000f2dc 	.word	0x0000f2dc
    2d08:	0000f2f4 	.word	0x0000f2f4
    2d0c:	0000f30c 	.word	0x0000f30c
    2d10:	0000f324 	.word	0x0000f324
    2d14:	0000f33c 	.word	0x0000f33c
    2d18:	0000f378 	.word	0x0000f378
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF)		{ Serial.println("============JUGGLE HALF==========="); }
    2d1c:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
    2d20:	2b04      	cmp	r3, #4
    2d22:	f000 83f0 	beq.w	3506 <LEDDebug(LEDStruct&)+0xa8a>
			else if(leds.mode_name == MULTI_JUGGLE)	{ Serial.println("===========MULTI JUGGLE==========="); }
    2d26:	2b06      	cmp	r3, #6
    2d28:	bf0c      	ite	eq
    2d2a:	49b3      	ldreq	r1, [pc, #716]	; (2ff8 <LEDDebug(LEDStruct&)+0x57c>)
			else									{ Serial.println("==============JUGGLE=============="); } // 34 characters
    2d2c:	49b3      	ldrne	r1, [pc, #716]	; (2ffc <LEDDebug(LEDStruct&)+0x580>)
    2d2e:	48b4      	ldr	r0, [pc, #720]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2d30:	f7fd feba 	bl	aa8 <Print::println(char const*)>
    2d34:	2111      	movs	r1, #17
    2d36:	48b3      	ldr	r0, [pc, #716]	; (3004 <LEDDebug(LEDStruct&)+0x588>)
    2d38:	f008 fca6 	bl	b688 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2d3c:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    2d40:	48af      	ldr	r0, [pc, #700]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2d42:	f008 fef5 	bl	bb30 <Print::print(long)>
			Serial.print("|| (b) one_dir:\t\t");
			Serial.print(leds.juggle_one_dir);
			Serial.println("\t||");
    2d46:	49b0      	ldr	r1, [pc, #704]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2d48:	48ad      	ldr	r0, [pc, #692]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2d4a:	f7fd fead 	bl	aa8 <Print::println(char const*)>
    2d4e:	2110      	movs	r1, #16
    2d50:	48ae      	ldr	r0, [pc, #696]	; (300c <LEDDebug(LEDStruct&)+0x590>)
    2d52:	f008 fc99 	bl	b688 <usb_serial_write>
    2d56:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    2d5a:	48a9      	ldr	r0, [pc, #676]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2d5c:	f008 fee8 	bl	bb30 <Print::print(long)>
			Serial.print("|| (c) phased:\t\t");
			Serial.print(leds.juggle_phased);
			Serial.println("\t||");
    2d60:	49a9      	ldr	r1, [pc, #676]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2d62:	48a7      	ldr	r0, [pc, #668]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2d64:	f7fd fea0 	bl	aa8 <Print::println(char const*)>
    2d68:	2111      	movs	r1, #17
    2d6a:	48a9      	ldr	r0, [pc, #676]	; (3010 <LEDDebug(LEDStruct&)+0x594>)
    2d6c:	f008 fc8c 	bl	b688 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d70:	2300      	movs	r3, #0
    2d72:	220a      	movs	r2, #10
    2d74:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    2d78:	48a1      	ldr	r0, [pc, #644]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2d7a:	f008 fe99 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) numdots:\t\t");
			Serial.print(leds.juggle_numdots);
			Serial.println("\t||");
    2d7e:	49a2      	ldr	r1, [pc, #648]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2d80:	489f      	ldr	r0, [pc, #636]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2d82:	f7fd fe91 	bl	aa8 <Print::println(char const*)>
    2d86:	210e      	movs	r1, #14
    2d88:	48a2      	ldr	r0, [pc, #648]	; (3014 <LEDDebug(LEDStruct&)+0x598>)
    2d8a:	f008 fc7d 	bl	b688 <usb_serial_write>
    2d8e:	2300      	movs	r3, #0
    2d90:	220a      	movs	r2, #10
    2d92:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2d96:	489a      	ldr	r0, [pc, #616]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2d98:	f008 fe8a 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) beat:\t\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2d9c:	499a      	ldr	r1, [pc, #616]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2d9e:	4898      	ldr	r0, [pc, #608]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2da0:	f7fd fe82 	bl	aa8 <Print::println(char const*)>
    2da4:	210e      	movs	r1, #14
    2da6:	489c      	ldr	r0, [pc, #624]	; (3018 <LEDDebug(LEDStruct&)+0x59c>)
    2da8:	f008 fc6e 	bl	b688 <usb_serial_write>
    2dac:	2300      	movs	r3, #0
    2dae:	220a      	movs	r2, #10
    2db0:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2db4:	4892      	ldr	r0, [pc, #584]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2db6:	f008 fe7b 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) fade:\t\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2dba:	4993      	ldr	r1, [pc, #588]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2dbc:	4890      	ldr	r0, [pc, #576]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2dbe:	f7fd fe73 	bl	aa8 <Print::println(char const*)>
    2dc2:	210e      	movs	r1, #14
    2dc4:	4895      	ldr	r0, [pc, #596]	; (301c <LEDDebug(LEDStruct&)+0x5a0>)
    2dc6:	f008 fc5f 	bl	b688 <usb_serial_write>
    2dca:	2300      	movs	r3, #0
    2dcc:	220a      	movs	r2, #10
    2dce:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2dd2:	488b      	ldr	r0, [pc, #556]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2dd4:	f008 fe6c 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) diff:\t\t");
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
    2dd8:	498b      	ldr	r1, [pc, #556]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2dda:	4889      	ldr	r0, [pc, #548]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2ddc:	f7fd fe64 	bl	aa8 <Print::println(char const*)>
    2de0:	2114      	movs	r1, #20
    2de2:	488f      	ldr	r0, [pc, #572]	; (3020 <LEDDebug(LEDStruct&)+0x5a4>)
    2de4:	f008 fc50 	bl	b688 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    2de8:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    2dec:	4884      	ldr	r0, [pc, #528]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2dee:	f008 fe9f 	bl	bb30 <Print::print(long)>
			Serial.print("|| Next explosion time:\t");
			Serial.print(leds.next_explosion_time);
			Serial.println("\t||");
			Serial.print("|| (a) use_overlay:\t");
			Serial.print(leds.use_overlay);
			Serial.println("\t||");
    2df2:	4985      	ldr	r1, [pc, #532]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2df4:	4882      	ldr	r0, [pc, #520]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2df6:	f7fd fe57 	bl	aa8 <Print::println(char const*)>
			break;
    2dfa:	e75a      	b.n	2cb2 <LEDDebug(LEDStruct&)+0x236>
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
    2dfc:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
    2e00:	2b08      	cmp	r3, #8
    2e02:	f000 8374 	beq.w	34ee <LEDDebug(LEDStruct&)+0xa72>
    2e06:	2b0a      	cmp	r3, #10
    2e08:	f000 8378 	beq.w	34fc <LEDDebug(LEDStruct&)+0xa80>
    2e0c:	2b07      	cmp	r3, #7
    2e0e:	d103      	bne.n	2e18 <LEDDebug(LEDStruct&)+0x39c>
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
    2e10:	4984      	ldr	r1, [pc, #528]	; (3024 <LEDDebug(LEDStruct&)+0x5a8>)
    2e12:	487b      	ldr	r0, [pc, #492]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2e14:	f7fd fe48 	bl	aa8 <Print::println(char const*)>
    2e18:	210f      	movs	r1, #15
    2e1a:	4883      	ldr	r0, [pc, #524]	; (3028 <LEDDebug(LEDStruct&)+0x5ac>)
    2e1c:	f008 fc34 	bl	b688 <usb_serial_write>
    2e20:	f894 127a 	ldrb.w	r1, [r4, #634]	; 0x27a
    2e24:	4876      	ldr	r0, [pc, #472]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2e26:	f008 fe83 	bl	bb30 <Print::print(long)>
				case RAINBOW_MARCH_BEAT:	Serial.println("=======RAINBOW MARCH BEAT========="); break;
				default: break;
			}
			Serial.print("|| (b) split:\t\t");
			Serial.print(leds.rainbow_split);
			Serial.println("\t||");
    2e2a:	4977      	ldr	r1, [pc, #476]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2e2c:	4874      	ldr	r0, [pc, #464]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2e2e:	f7fd fe3b 	bl	aa8 <Print::println(char const*)>
    2e32:	210e      	movs	r1, #14
    2e34:	487d      	ldr	r0, [pc, #500]	; (302c <LEDDebug(LEDStruct&)+0x5b0>)
    2e36:	f008 fc27 	bl	b688 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e3a:	2300      	movs	r3, #0
    2e3c:	220a      	movs	r2, #10
    2e3e:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    2e42:	486f      	ldr	r0, [pc, #444]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2e44:	f008 fe34 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) diff:\t\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    2e48:	496f      	ldr	r1, [pc, #444]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2e4a:	486d      	ldr	r0, [pc, #436]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2e4c:	f7fd fe2c 	bl	aa8 <Print::println(char const*)>
    2e50:	210d      	movs	r1, #13
    2e52:	4877      	ldr	r0, [pc, #476]	; (3030 <LEDDebug(LEDStruct&)+0x5b4>)
    2e54:	f008 fc18 	bl	b688 <usb_serial_write>
    2e58:	2300      	movs	r3, #0
    2e5a:	220a      	movs	r2, #10
    2e5c:	f894 1277 	ldrb.w	r1, [r4, #631]	; 0x277
    2e60:	4867      	ldr	r0, [pc, #412]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2e62:	f008 fe25 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rot:\t\t");
			Serial.print(leds.rainbow_rot);
			Serial.println("\t||");
    2e66:	4968      	ldr	r1, [pc, #416]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2e68:	4865      	ldr	r0, [pc, #404]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2e6a:	f7fd fe1d 	bl	aa8 <Print::println(char const*)>
			if (leds.mode_name == RAINBOW_MARCH_BEAT) {
    2e6e:	f894 522b 	ldrb.w	r5, [r4, #555]	; 0x22b
    2e72:	2d0a      	cmp	r5, #10
    2e74:	f47f af1d 	bne.w	2cb2 <LEDDebug(LEDStruct&)+0x236>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e78:	496e      	ldr	r1, [pc, #440]	; (3034 <LEDDebug(LEDStruct&)+0x5b8>)
    2e7a:	4861      	ldr	r0, [pc, #388]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2e7c:	f7fd fe06 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e80:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2e84:	485e      	ldr	r0, [pc, #376]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2e86:	462a      	mov	r2, r5
    2e88:	2300      	movs	r3, #0
    2e8a:	f008 fe11 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (e) juggle_beat:\t");
				Serial.print(leds.juggle_beat);
				Serial.println("\t||");
    2e8e:	495e      	ldr	r1, [pc, #376]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2e90:	485b      	ldr	r0, [pc, #364]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2e92:	f7fd fe09 	bl	aa8 <Print::println(char const*)>
    2e96:	e70c      	b.n	2cb2 <LEDDebug(LEDStruct&)+0x236>
			}
			break;

		case FIRE:
			switch (leds.mode_name) {
    2e98:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
    2e9c:	2b0c      	cmp	r3, #12
    2e9e:	f000 831c 	beq.w	34da <LEDDebug(LEDStruct&)+0xa5e>
    2ea2:	2b0d      	cmp	r3, #13
    2ea4:	d103      	bne.n	2eae <LEDDebug(LEDStruct&)+0x432>
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
    2ea6:	4964      	ldr	r1, [pc, #400]	; (3038 <LEDDebug(LEDStruct&)+0x5bc>)
    2ea8:	4855      	ldr	r0, [pc, #340]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2eaa:	f7fd fdfd 	bl	aa8 <Print::println(char const*)>
    2eae:	2111      	movs	r1, #17
    2eb0:	4862      	ldr	r0, [pc, #392]	; (303c <LEDDebug(LEDStruct&)+0x5c0>)
    2eb2:	f008 fbe9 	bl	b688 <usb_serial_write>
    2eb6:	2300      	movs	r3, #0
    2eb8:	220a      	movs	r2, #10
    2eba:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
    2ebe:	4850      	ldr	r0, [pc, #320]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2ec0:	f008 fdf6 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				default: break;
			}
			Serial.print("|| (a) sparking:\t");
			Serial.print(leds.fire_sparking);
			Serial.println("\t||");
    2ec4:	4950      	ldr	r1, [pc, #320]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2ec6:	484e      	ldr	r0, [pc, #312]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2ec8:	f7fd fdee 	bl	aa8 <Print::println(char const*)>
    2ecc:	2111      	movs	r1, #17
    2ece:	485c      	ldr	r0, [pc, #368]	; (3040 <LEDDebug(LEDStruct&)+0x5c4>)
    2ed0:	f008 fbda 	bl	b688 <usb_serial_write>
    2ed4:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    2ed8:	e6e2      	b.n	2ca0 <LEDDebug(LEDStruct&)+0x224>
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
			break;
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
    2eda:	495a      	ldr	r1, [pc, #360]	; (3044 <LEDDebug(LEDStruct&)+0x5c8>)
    2edc:	4848      	ldr	r0, [pc, #288]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2ede:	f7fd fde3 	bl	aa8 <Print::println(char const*)>
			break;
    2ee2:	e6e6      	b.n	2cb2 <LEDDebug(LEDStruct&)+0x236>

		case PRIDE:
			Serial.println("==============PRIDE===============");
    2ee4:	4958      	ldr	r1, [pc, #352]	; (3048 <LEDDebug(LEDStruct&)+0x5cc>)
    2ee6:	4846      	ldr	r0, [pc, #280]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2ee8:	f7fd fdde 	bl	aa8 <Print::println(char const*)>
			break;
    2eec:	e6e1      	b.n	2cb2 <LEDDebug(LEDStruct&)+0x236>

		case PACIFICA:
			Serial.println("=============PACIFCIA=============");
    2eee:	4957      	ldr	r1, [pc, #348]	; (304c <LEDDebug(LEDStruct&)+0x5d0>)
    2ef0:	4843      	ldr	r0, [pc, #268]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2ef2:	f7fd fdd9 	bl	aa8 <Print::println(char const*)>
			break;
    2ef6:	e6dc      	b.n	2cb2 <LEDDebug(LEDStruct&)+0x236>

		case CONFETTI:
			Serial.println("=============CONFETTI=============");
    2ef8:	4955      	ldr	r1, [pc, #340]	; (3050 <LEDDebug(LEDStruct&)+0x5d4>)
    2efa:	4841      	ldr	r0, [pc, #260]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2efc:	f7fd fdd4 	bl	aa8 <Print::println(char const*)>
    2f00:	2116      	movs	r1, #22
    2f02:	4854      	ldr	r0, [pc, #336]	; (3054 <LEDDebug(LEDStruct&)+0x5d8>)
    2f04:	f008 fbc0 	bl	b688 <usb_serial_write>
    2f08:	f894 1336 	ldrb.w	r1, [r4, #822]	; 0x336
    2f0c:	e6c8      	b.n	2ca0 <LEDDebug(LEDStruct&)+0x224>
			Serial.print(leds.use_overlay);
			Serial.println("\t||");
			break;

		case ONE_SIN:
			Serial.println("=============ONE SIN==============");
    2f0e:	4952      	ldr	r1, [pc, #328]	; (3058 <LEDDebug(LEDStruct&)+0x5dc>)
    2f10:	483b      	ldr	r0, [pc, #236]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2f12:	f7fd fdc9 	bl	aa8 <Print::println(char const*)>
    2f16:	2111      	movs	r1, #17
    2f18:	4850      	ldr	r0, [pc, #320]	; (305c <LEDDebug(LEDStruct&)+0x5e0>)
    2f1a:	f008 fbb5 	bl	b688 <usb_serial_write>
    2f1e:	2300      	movs	r3, #0
    2f20:	220a      	movs	r2, #10
    2f22:	f894 1337 	ldrb.w	r1, [r4, #823]	; 0x337
    2f26:	4836      	ldr	r0, [pc, #216]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2f28:	f008 fdc2 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_inc:\t\t");
			Serial.print(leds.sin_inc);
			Serial.println("\t||");
    2f2c:	4936      	ldr	r1, [pc, #216]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2f2e:	4834      	ldr	r0, [pc, #208]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2f30:	f7fd fdba 	bl	aa8 <Print::println(char const*)>
    2f34:	2112      	movs	r1, #18
    2f36:	484a      	ldr	r0, [pc, #296]	; (3060 <LEDDebug(LEDStruct&)+0x5e4>)
    2f38:	f008 fba6 	bl	b688 <usb_serial_write>
    2f3c:	2300      	movs	r3, #0
    2f3e:	220a      	movs	r2, #10
    2f40:	f894 1338 	ldrb.w	r1, [r4, #824]	; 0x338
    2f44:	482e      	ldr	r0, [pc, #184]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2f46:	f008 fdb3 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    2f4a:	492f      	ldr	r1, [pc, #188]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2f4c:	482c      	ldr	r0, [pc, #176]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2f4e:	f7fd fdab 	bl	aa8 <Print::println(char const*)>
    2f52:	2113      	movs	r1, #19
    2f54:	4843      	ldr	r0, [pc, #268]	; (3064 <LEDDebug(LEDStruct&)+0x5e8>)
    2f56:	f008 fb97 	bl	b688 <usb_serial_write>
    2f5a:	2300      	movs	r3, #0
    2f5c:	220a      	movs	r2, #10
    2f5e:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
    2f62:	4827      	ldr	r0, [pc, #156]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2f64:	f008 fda4 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    2f68:	4927      	ldr	r1, [pc, #156]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2f6a:	4825      	ldr	r0, [pc, #148]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2f6c:	f7fd fd9c 	bl	aa8 <Print::println(char const*)>
    2f70:	2111      	movs	r1, #17
    2f72:	483d      	ldr	r0, [pc, #244]	; (3068 <LEDDebug(LEDStruct&)+0x5ec>)
    2f74:	f008 fb88 	bl	b688 <usb_serial_write>
    2f78:	2300      	movs	r3, #0
    2f7a:	220a      	movs	r2, #10
    2f7c:	f894 133a 	ldrb.w	r1, [r4, #826]	; 0x33a
    2f80:	481f      	ldr	r0, [pc, #124]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2f82:	f008 fd95 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    2f86:	4920      	ldr	r1, [pc, #128]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2f88:	481d      	ldr	r0, [pc, #116]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2f8a:	f7fd fd8d 	bl	aa8 <Print::println(char const*)>
    2f8e:	2112      	movs	r1, #18
    2f90:	4836      	ldr	r0, [pc, #216]	; (306c <LEDDebug(LEDStruct&)+0x5f0>)
    2f92:	f008 fb79 	bl	b688 <usb_serial_write>
    2f96:	2300      	movs	r3, #0
    2f98:	220a      	movs	r2, #10
    2f9a:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    2f9e:	4818      	ldr	r0, [pc, #96]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2fa0:	f008 fd86 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    2fa4:	4918      	ldr	r1, [pc, #96]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2fa6:	4816      	ldr	r0, [pc, #88]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2fa8:	f7fd fd7e 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2fac:	4930      	ldr	r1, [pc, #192]	; (3070 <LEDDebug(LEDStruct&)+0x5f4>)
    2fae:	4814      	ldr	r0, [pc, #80]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2fb0:	f7fd fd6c 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2fb4:	2300      	movs	r3, #0
    2fb6:	220a      	movs	r2, #10
    2fb8:	f894 133b 	ldrb.w	r1, [r4, #827]	; 0x33b
    2fbc:	4810      	ldr	r0, [pc, #64]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2fbe:	f008 fd77 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) all_freq:\t");
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
    2fc2:	4911      	ldr	r1, [pc, #68]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2fc4:	480e      	ldr	r0, [pc, #56]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2fc6:	f7fd fd6f 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2fca:	492a      	ldr	r1, [pc, #168]	; (3074 <LEDDebug(LEDStruct&)+0x5f8>)
    2fcc:	480c      	ldr	r0, [pc, #48]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2fce:	f7fd fd5d 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2fd2:	2300      	movs	r3, #0
    2fd4:	220a      	movs	r2, #10
    2fd6:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
    2fda:	4809      	ldr	r0, [pc, #36]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2fdc:	f008 fd68 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) bg_clr:\t\t");
			Serial.print(leds.bg_clr);
			Serial.println("\t||");
    2fe0:	4909      	ldr	r1, [pc, #36]	; (3008 <LEDDebug(LEDStruct&)+0x58c>)
    2fe2:	4807      	ldr	r0, [pc, #28]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2fe4:	f7fd fd60 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2fe8:	4923      	ldr	r1, [pc, #140]	; (3078 <LEDDebug(LEDStruct&)+0x5fc>)
    2fea:	4805      	ldr	r0, [pc, #20]	; (3000 <LEDDebug(LEDStruct&)+0x584>)
    2fec:	f7fd fd4e 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2ff0:	f894 1348 	ldrb.w	r1, [r4, #840]	; 0x348
    2ff4:	e654      	b.n	2ca0 <LEDDebug(LEDStruct&)+0x224>
    2ff6:	bf00      	nop
    2ff8:	0000eb6c 	.word	0x0000eb6c
    2ffc:	0000eb90 	.word	0x0000eb90
    3000:	1fff8788 	.word	0x1fff8788
    3004:	0000ebb4 	.word	0x0000ebb4
    3008:	0000eab4 	.word	0x0000eab4
    300c:	0000ebc8 	.word	0x0000ebc8
    3010:	0000ebdc 	.word	0x0000ebdc
    3014:	0000ebf0 	.word	0x0000ebf0
    3018:	0000ec00 	.word	0x0000ec00
    301c:	0000ec10 	.word	0x0000ec10
    3020:	0000ec20 	.word	0x0000ec20
    3024:	0000ec38 	.word	0x0000ec38
    3028:	0000eca4 	.word	0x0000eca4
    302c:	0000ecb4 	.word	0x0000ecb4
    3030:	0000ecc4 	.word	0x0000ecc4
    3034:	0000ecd4 	.word	0x0000ecd4
    3038:	0000ed10 	.word	0x0000ed10
    303c:	0000ed34 	.word	0x0000ed34
    3040:	0000ed48 	.word	0x0000ed48
    3044:	0000ed5c 	.word	0x0000ed5c
    3048:	0000ed80 	.word	0x0000ed80
    304c:	0000eda4 	.word	0x0000eda4
    3050:	0000edc8 	.word	0x0000edc8
    3054:	0000edec 	.word	0x0000edec
    3058:	0000eed4 	.word	0x0000eed4
    305c:	0000eef8 	.word	0x0000eef8
    3060:	0000ef0c 	.word	0x0000ef0c
    3064:	0000ef20 	.word	0x0000ef20
    3068:	0000ef34 	.word	0x0000ef34
    306c:	0000ef48 	.word	0x0000ef48
    3070:	0000ef5c 	.word	0x0000ef5c
    3074:	0000ef70 	.word	0x0000ef70
    3078:	0000ef84 	.word	0x0000ef84
			Serial.print(leds.bg_bri);
			Serial.println("\t||");
			break;

		case TWO_SIN:
			Serial.println("=============TWO SIN==============");
    307c:	4997      	ldr	r1, [pc, #604]	; (32dc <LEDDebug(LEDStruct&)+0x860>)
    307e:	4898      	ldr	r0, [pc, #608]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3080:	f7fd fd12 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    3084:	4997      	ldr	r1, [pc, #604]	; (32e4 <LEDDebug(LEDStruct&)+0x868>)
    3086:	4896      	ldr	r0, [pc, #600]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3088:	f7fd fd00 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    308c:	2300      	movs	r3, #0
    308e:	220a      	movs	r2, #10
    3090:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    3094:	4892      	ldr	r0, [pc, #584]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3096:	f008 fd0b 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_hue:\t\t");
			Serial.print(leds.sin_hue);
			Serial.println("\t||");
    309a:	4993      	ldr	r1, [pc, #588]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    309c:	4890      	ldr	r0, [pc, #576]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    309e:	f7fd fd03 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    30a2:	4992      	ldr	r1, [pc, #584]	; (32ec <LEDDebug(LEDStruct&)+0x870>)
    30a4:	488e      	ldr	r0, [pc, #568]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    30a6:	f7fd fcf1 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    30aa:	2300      	movs	r3, #0
    30ac:	220a      	movs	r2, #10
    30ae:	f894 1345 	ldrb.w	r1, [r4, #837]	; 0x345
    30b2:	488b      	ldr	r0, [pc, #556]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    30b4:	f008 fcfc 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) two_hue:\t\t");
			Serial.print(leds.two_hue);
			Serial.println("\t||");
    30b8:	498b      	ldr	r1, [pc, #556]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    30ba:	4889      	ldr	r0, [pc, #548]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    30bc:	f7fd fcf4 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    30c0:	498b      	ldr	r1, [pc, #556]	; (32f0 <LEDDebug(LEDStruct&)+0x874>)
    30c2:	4887      	ldr	r0, [pc, #540]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    30c4:	f7fd fce2 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    30c8:	2300      	movs	r3, #0
    30ca:	220a      	movs	r2, #10
    30cc:	f894 1338 	ldrb.w	r1, [r4, #824]	; 0x338
    30d0:	4883      	ldr	r0, [pc, #524]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    30d2:	f008 fced 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    30d6:	4984      	ldr	r1, [pc, #528]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    30d8:	4881      	ldr	r0, [pc, #516]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    30da:	f7fd fce5 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    30de:	4985      	ldr	r1, [pc, #532]	; (32f4 <LEDDebug(LEDStruct&)+0x878>)
    30e0:	487f      	ldr	r0, [pc, #508]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    30e2:	f7fd fcd3 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    30e6:	2300      	movs	r3, #0
    30e8:	220a      	movs	r2, #10
    30ea:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    30ee:	487c      	ldr	r0, [pc, #496]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    30f0:	f008 fcde 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) two_speed:\t");
			Serial.print(leds.two_speed);
			Serial.println("\t||");
    30f4:	497c      	ldr	r1, [pc, #496]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    30f6:	487a      	ldr	r0, [pc, #488]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    30f8:	f7fd fcd6 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    30fc:	497e      	ldr	r1, [pc, #504]	; (32f8 <LEDDebug(LEDStruct&)+0x87c>)
    30fe:	4878      	ldr	r0, [pc, #480]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3100:	f7fd fcc4 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3104:	2300      	movs	r3, #0
    3106:	220a      	movs	r2, #10
    3108:	f894 133a 	ldrb.w	r1, [r4, #826]	; 0x33a
    310c:	4874      	ldr	r0, [pc, #464]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    310e:	f008 fccf 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    3112:	4975      	ldr	r1, [pc, #468]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    3114:	4872      	ldr	r0, [pc, #456]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3116:	f7fd fcc7 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    311a:	4978      	ldr	r1, [pc, #480]	; (32fc <LEDDebug(LEDStruct&)+0x880>)
    311c:	4870      	ldr	r0, [pc, #448]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    311e:	f7fd fcb5 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3122:	2300      	movs	r3, #0
    3124:	220a      	movs	r2, #10
    3126:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    312a:	486d      	ldr	r0, [pc, #436]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    312c:	f008 fcc0 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) two_rot:\t\t");
			Serial.print(leds.two_rot);
			Serial.println("\t||");
    3130:	496d      	ldr	r1, [pc, #436]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    3132:	486b      	ldr	r0, [pc, #428]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3134:	f7fd fcb8 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    3138:	4971      	ldr	r1, [pc, #452]	; (3300 <LEDDebug(LEDStruct&)+0x884>)
    313a:	4869      	ldr	r0, [pc, #420]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    313c:	f7fd fca6 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3140:	2300      	movs	r3, #0
    3142:	220a      	movs	r2, #10
    3144:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
    3148:	4865      	ldr	r0, [pc, #404]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    314a:	f008 fcb1 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    314e:	4966      	ldr	r1, [pc, #408]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    3150:	4863      	ldr	r0, [pc, #396]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3152:	f7fd fca9 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    3156:	496b      	ldr	r1, [pc, #428]	; (3304 <LEDDebug(LEDStruct&)+0x888>)
    3158:	4861      	ldr	r0, [pc, #388]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    315a:	f7fd fc97 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    315e:	2300      	movs	r3, #0
    3160:	220a      	movs	r2, #10
    3162:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    3166:	485e      	ldr	r0, [pc, #376]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3168:	f008 fca2 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (i) two_cutoff:\t");
			Serial.print(leds.two_cutoff);
			Serial.println("\t||");
    316c:	495e      	ldr	r1, [pc, #376]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    316e:	485c      	ldr	r0, [pc, #368]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3170:	f7fd fc9a 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    3174:	4964      	ldr	r1, [pc, #400]	; (3308 <LEDDebug(LEDStruct&)+0x88c>)
    3176:	485a      	ldr	r0, [pc, #360]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3178:	f7fd fc88 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    317c:	2300      	movs	r3, #0
    317e:	220a      	movs	r2, #10
    3180:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    3184:	4856      	ldr	r0, [pc, #344]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3186:	f008 fc93 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (j) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    318a:	4957      	ldr	r1, [pc, #348]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    318c:	4854      	ldr	r0, [pc, #336]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    318e:	f7fd fc8b 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    3192:	495e      	ldr	r1, [pc, #376]	; (330c <LEDDebug(LEDStruct&)+0x890>)
    3194:	4852      	ldr	r0, [pc, #328]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3196:	f7fd fc79 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    319a:	2300      	movs	r3, #0
    319c:	220a      	movs	r2, #10
    319e:	f894 1344 	ldrb.w	r1, [r4, #836]	; 0x344
    31a2:	484f      	ldr	r0, [pc, #316]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    31a4:	f008 fc84 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (k) two_phase:\t");
			Serial.print(leds.two_phase);
			Serial.println("\t||");
    31a8:	494f      	ldr	r1, [pc, #316]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    31aa:	484d      	ldr	r0, [pc, #308]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    31ac:	f7fd fc7c 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    31b0:	4957      	ldr	r1, [pc, #348]	; (3310 <LEDDebug(LEDStruct&)+0x894>)
    31b2:	484b      	ldr	r0, [pc, #300]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    31b4:	f7fd fc6a 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    31b8:	f894 133b 	ldrb.w	r1, [r4, #827]	; 0x33b
    31bc:	e570      	b.n	2ca0 <LEDDebug(LEDStruct&)+0x224>
			Serial.print(leds.confetti_fade);
			Serial.println("\t||");
			break;

		case FIREWORKS:
			Serial.println("============FIREWORKS=============");
    31be:	4955      	ldr	r1, [pc, #340]	; (3314 <LEDDebug(LEDStruct&)+0x898>)
    31c0:	4847      	ldr	r0, [pc, #284]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    31c2:	f7fd fc71 	bl	aa8 <Print::println(char const*)>
    31c6:	2112      	movs	r1, #18
    31c8:	4853      	ldr	r0, [pc, #332]	; (3318 <LEDDebug(LEDStruct&)+0x89c>)
    31ca:	f008 fa5d 	bl	b688 <usb_serial_write>
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
    31ce:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c
    31d2:	2b01      	cmp	r3, #1
    31d4:	f000 8186 	beq.w	34e4 <LEDDebug(LEDStruct&)+0xa68>
    31d8:	f0c0 818e 	bcc.w	34f8 <LEDDebug(LEDStruct&)+0xa7c>
    31dc:	2b02      	cmp	r3, #2
    31de:	d107      	bne.n	31f0 <LEDDebug(LEDStruct&)+0x774>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    31e0:	494e      	ldr	r1, [pc, #312]	; (331c <LEDDebug(LEDStruct&)+0x8a0>)
    31e2:	483f      	ldr	r0, [pc, #252]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    31e4:	f7fd fc52 	bl	a8c <Print::write(char const*)>
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
    31e8:	493f      	ldr	r1, [pc, #252]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    31ea:	483d      	ldr	r0, [pc, #244]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    31ec:	f7fd fc5c 	bl	aa8 <Print::println(char const*)>
    31f0:	2116      	movs	r1, #22
    31f2:	484b      	ldr	r0, [pc, #300]	; (3320 <LEDDebug(LEDStruct&)+0x8a4>)
    31f4:	f008 fa48 	bl	b688 <usb_serial_write>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    31f8:	2300      	movs	r3, #0
    31fa:	220a      	movs	r2, #10
    31fc:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    3200:	4837      	ldr	r0, [pc, #220]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3202:	f008 fc55 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
			}
			Serial.print("|| firework_position:\t");
			Serial.print(leds.firework_position);
			Serial.println("\t||");
    3206:	4938      	ldr	r1, [pc, #224]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    3208:	4835      	ldr	r0, [pc, #212]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    320a:	f7fd fc4d 	bl	aa8 <Print::println(char const*)>
    320e:	2115      	movs	r1, #21
    3210:	4844      	ldr	r0, [pc, #272]	; (3324 <LEDDebug(LEDStruct&)+0x8a8>)
    3212:	f008 fa39 	bl	b688 <usb_serial_write>
    3216:	2300      	movs	r3, #0
    3218:	220a      	movs	r2, #10
    321a:	f894 1355 	ldrb.w	r1, [r4, #853]	; 0x355
    321e:	4830      	ldr	r0, [pc, #192]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3220:	f008 fc46 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Number of sparks:\t");
			Serial.print(leds.number_of_sparks);
			Serial.println("\t||");
    3224:	4930      	ldr	r1, [pc, #192]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    3226:	482e      	ldr	r0, [pc, #184]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3228:	f7fd fc3e 	bl	aa8 <Print::println(char const*)>
    322c:	2114      	movs	r1, #20
    322e:	483e      	ldr	r0, [pc, #248]	; (3328 <LEDDebug(LEDStruct&)+0x8ac>)
    3230:	f008 fa2a 	bl	b688 <usb_serial_write>
    3234:	2300      	movs	r3, #0
    3236:	220a      	movs	r2, #10
    3238:	f894 1754 	ldrb.w	r1, [r4, #1876]	; 0x754
    323c:	4828      	ldr	r0, [pc, #160]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    323e:	f008 fc37 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Brightest spark:\t");
			Serial.print(leds.brightest_spark);
			Serial.println("\t||");
    3242:	4929      	ldr	r1, [pc, #164]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    3244:	4826      	ldr	r0, [pc, #152]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3246:	f7fd fc2f 	bl	aa8 <Print::println(char const*)>
    324a:	2118      	movs	r1, #24
    324c:	4837      	ldr	r0, [pc, #220]	; (332c <LEDDebug(LEDStruct&)+0x8b0>)
    324e:	f008 fa1b 	bl	b688 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    3252:	2300      	movs	r3, #0
    3254:	220a      	movs	r2, #10
    3256:	f8d4 1350 	ldr.w	r1, [r4, #848]	; 0x350
    325a:	4821      	ldr	r0, [pc, #132]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    325c:	f008 fc28 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Next explosion time:\t");
			Serial.print(leds.next_explosion_time);
			Serial.println("\t||");
    3260:	4921      	ldr	r1, [pc, #132]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    3262:	481f      	ldr	r0, [pc, #124]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3264:	f7fd fc20 	bl	aa8 <Print::println(char const*)>
    3268:	2114      	movs	r1, #20
    326a:	4831      	ldr	r0, [pc, #196]	; (3330 <LEDDebug(LEDStruct&)+0x8b4>)
    326c:	f008 fa0c 	bl	b688 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    3270:	f894 11c6 	ldrb.w	r1, [r4, #454]	; 0x1c6
    3274:	e5ba      	b.n	2dec <LEDDebug(LEDStruct&)+0x370>
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
			break;

		case NOISE:
			Serial.println("===============NOISE==============");
    3276:	492f      	ldr	r1, [pc, #188]	; (3334 <LEDDebug(LEDStruct&)+0x8b8>)
    3278:	4819      	ldr	r0, [pc, #100]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    327a:	f7fd fc15 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    327e:	492e      	ldr	r1, [pc, #184]	; (3338 <LEDDebug(LEDStruct&)+0x8bc>)
    3280:	4817      	ldr	r0, [pc, #92]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3282:	f7fd fc03 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    3286:	f8b4 1756 	ldrh.w	r1, [r4, #1878]	; 0x756
    328a:	4815      	ldr	r0, [pc, #84]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    328c:	f008 fc50 	bl	bb30 <Print::print(long)>
			Serial.print("|| (b) noise_scale:\t");
			Serial.print(leds.noise_scale);
			Serial.println("\t||");
    3290:	4915      	ldr	r1, [pc, #84]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    3292:	4813      	ldr	r0, [pc, #76]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    3294:	f7fd fc08 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    3298:	4928      	ldr	r1, [pc, #160]	; (333c <LEDDebug(LEDStruct&)+0x8c0>)
    329a:	4811      	ldr	r0, [pc, #68]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    329c:	f7fd fbf6 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    32a0:	f8b4 1758 	ldrh.w	r1, [r4, #1880]	; 0x758
    32a4:	480e      	ldr	r0, [pc, #56]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    32a6:	f008 fc43 	bl	bb30 <Print::print(long)>
			Serial.print("|| (c) noise_yscale:\t");
			Serial.print(leds.noise_yscale);
			Serial.println("\t||");
    32aa:	490f      	ldr	r1, [pc, #60]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    32ac:	480c      	ldr	r0, [pc, #48]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    32ae:	f7fd fbfb 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    32b2:	4923      	ldr	r1, [pc, #140]	; (3340 <LEDDebug(LEDStruct&)+0x8c4>)
    32b4:	480a      	ldr	r0, [pc, #40]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    32b6:	f7fd fbe9 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    32ba:	f8b4 175a 	ldrh.w	r1, [r4, #1882]	; 0x75a
    32be:	4808      	ldr	r0, [pc, #32]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    32c0:	f008 fc36 	bl	bb30 <Print::print(long)>
			Serial.print("|| (d) noise_dist:\t");
			Serial.print(leds.noise_dist);
			Serial.println("\t||");
    32c4:	4908      	ldr	r1, [pc, #32]	; (32e8 <LEDDebug(LEDStruct&)+0x86c>)
    32c6:	4806      	ldr	r0, [pc, #24]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    32c8:	f7fd fbee 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    32cc:	491d      	ldr	r1, [pc, #116]	; (3344 <LEDDebug(LEDStruct&)+0x8c8>)
    32ce:	4804      	ldr	r0, [pc, #16]	; (32e0 <LEDDebug(LEDStruct&)+0x864>)
    32d0:	f7fd fbdc 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    32d4:	f894 175d 	ldrb.w	r1, [r4, #1885]	; 0x75d
    32d8:	e4e2      	b.n	2ca0 <LEDDebug(LEDStruct&)+0x224>
    32da:	bf00      	nop
    32dc:	0000ef98 	.word	0x0000ef98
    32e0:	1fff8788 	.word	0x1fff8788
    32e4:	0000efbc 	.word	0x0000efbc
    32e8:	0000eab4 	.word	0x0000eab4
    32ec:	0000efd0 	.word	0x0000efd0
    32f0:	0000efe4 	.word	0x0000efe4
    32f4:	0000eff8 	.word	0x0000eff8
    32f8:	0000f00c 	.word	0x0000f00c
    32fc:	0000f020 	.word	0x0000f020
    3300:	0000f034 	.word	0x0000f034
    3304:	0000f048 	.word	0x0000f048
    3308:	0000f05c 	.word	0x0000f05c
    330c:	0000f070 	.word	0x0000f070
    3310:	0000f084 	.word	0x0000f084
    3314:	0000ee04 	.word	0x0000ee04
    3318:	0000ee28 	.word	0x0000ee28
    331c:	0000ee3c 	.word	0x0000ee3c
    3320:	0000ee58 	.word	0x0000ee58
    3324:	0000ee70 	.word	0x0000ee70
    3328:	0000ee88 	.word	0x0000ee88
    332c:	0000eea0 	.word	0x0000eea0
    3330:	0000eebc 	.word	0x0000eebc
    3334:	0000f098 	.word	0x0000f098
    3338:	0000f0bc 	.word	0x0000f0bc
    333c:	0000f0d4 	.word	0x0000f0d4
    3340:	0000f0ec 	.word	0x0000f0ec
    3344:	0000f100 	.word	0x0000f100
			Serial.print(leds.noise_fade);
			Serial.println("\t||");
			break;

		case BOUNCE:
			Serial.println("==============BOUNCE==============");
    3348:	4971      	ldr	r1, [pc, #452]	; (3510 <LEDDebug(LEDStruct&)+0xa94>)
    334a:	4872      	ldr	r0, [pc, #456]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    334c:	f7fd fbac 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    3350:	4971      	ldr	r1, [pc, #452]	; (3518 <LEDDebug(LEDStruct&)+0xa9c>)
    3352:	4870      	ldr	r0, [pc, #448]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    3354:	f7fd fb9a 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3358:	2300      	movs	r3, #0
    335a:	220a      	movs	r2, #10
    335c:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3360:	486c      	ldr	r0, [pc, #432]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    3362:	f008 fba5 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    3366:	496d      	ldr	r1, [pc, #436]	; (351c <LEDDebug(LEDStruct&)+0xaa0>)
    3368:	486a      	ldr	r0, [pc, #424]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    336a:	f7fd fb9d 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    336e:	496c      	ldr	r1, [pc, #432]	; (3520 <LEDDebug(LEDStruct&)+0xaa4>)
    3370:	4868      	ldr	r0, [pc, #416]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    3372:	f7fd fb8b 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3376:	2300      	movs	r3, #0
    3378:	220a      	movs	r2, #10
    337a:	f894 1239 	ldrb.w	r1, [r4, #569]	; 0x239
    337e:	4865      	ldr	r0, [pc, #404]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    3380:	f008 fb96 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) bounce_length:\t");
			Serial.print(leds.bounce_length);
			Serial.println("\t||");
    3384:	4965      	ldr	r1, [pc, #404]	; (351c <LEDDebug(LEDStruct&)+0xaa0>)
    3386:	4863      	ldr	r0, [pc, #396]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    3388:	f7fd fb8e 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    338c:	4965      	ldr	r1, [pc, #404]	; (3524 <LEDDebug(LEDStruct&)+0xaa8>)
    338e:	4861      	ldr	r0, [pc, #388]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    3390:	f7fd fb7c 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3394:	2300      	movs	r3, #0
    3396:	220a      	movs	r2, #10
    3398:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    339c:	485d      	ldr	r0, [pc, #372]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    339e:	f008 fb87 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    33a2:	495e      	ldr	r1, [pc, #376]	; (351c <LEDDebug(LEDStruct&)+0xaa0>)
    33a4:	485b      	ldr	r0, [pc, #364]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    33a6:	f7fd fb7f 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    33aa:	495f      	ldr	r1, [pc, #380]	; (3528 <LEDDebug(LEDStruct&)+0xaac>)
    33ac:	4859      	ldr	r0, [pc, #356]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    33ae:	f7fd fb6d 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    33b2:	2300      	movs	r3, #0
    33b4:	220a      	movs	r2, #10
    33b6:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    33ba:	4856      	ldr	r0, [pc, #344]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    33bc:	f008 fb78 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rainbow_diff:\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    33c0:	4956      	ldr	r1, [pc, #344]	; (351c <LEDDebug(LEDStruct&)+0xaa0>)
    33c2:	4854      	ldr	r0, [pc, #336]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    33c4:	f7fd fb70 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    33c8:	4958      	ldr	r1, [pc, #352]	; (352c <LEDDebug(LEDStruct&)+0xab0>)
    33ca:	4852      	ldr	r0, [pc, #328]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    33cc:	f7fd fb5e 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    33d0:	2300      	movs	r3, #0
    33d2:	220a      	movs	r2, #10
    33d4:	f894 1237 	ldrb.w	r1, [r4, #567]	; 0x237
    33d8:	484e      	ldr	r0, [pc, #312]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    33da:	f008 fb69 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) start_beat:\t");
			Serial.print(leds.bounce_start_beat);
			Serial.println("\t||");
    33de:	494f      	ldr	r1, [pc, #316]	; (351c <LEDDebug(LEDStruct&)+0xaa0>)
    33e0:	484c      	ldr	r0, [pc, #304]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    33e2:	f7fd fb61 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    33e6:	4952      	ldr	r1, [pc, #328]	; (3530 <LEDDebug(LEDStruct&)+0xab4>)
    33e8:	484a      	ldr	r0, [pc, #296]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    33ea:	f7fd fb4f 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    33ee:	f894 1276 	ldrb.w	r1, [r4, #630]	; 0x276
    33f2:	e4fb      	b.n	2dec <LEDDebug(LEDStruct&)+0x370>
			Serial.print(leds.bounce_rainbow);
			Serial.println("\t||");
			break;

		case BOUNCING_BALLS:
			Serial.println("==========BOUNCING BALLS==========");
    33f4:	494f      	ldr	r1, [pc, #316]	; (3534 <LEDDebug(LEDStruct&)+0xab8>)
    33f6:	4847      	ldr	r0, [pc, #284]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    33f8:	f7fd fb56 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    33fc:	494e      	ldr	r1, [pc, #312]	; (3538 <LEDDebug(LEDStruct&)+0xabc>)
    33fe:	4845      	ldr	r0, [pc, #276]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    3400:	f7fd fb44 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3404:	2300      	movs	r3, #0
    3406:	220a      	movs	r2, #10
    3408:	f894 175f 	ldrb.w	r1, [r4, #1887]	; 0x75f
    340c:	4841      	ldr	r0, [pc, #260]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    340e:	f008 fb4f 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) fade:\t\t");
			Serial.print(leds.bouncing_fade);
			Serial.println("\t||");
    3412:	4942      	ldr	r1, [pc, #264]	; (351c <LEDDebug(LEDStruct&)+0xaa0>)
    3414:	483f      	ldr	r0, [pc, #252]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    3416:	f7fd fb47 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    341a:	4948      	ldr	r1, [pc, #288]	; (353c <LEDDebug(LEDStruct&)+0xac0>)
    341c:	483d      	ldr	r0, [pc, #244]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    341e:	f7fd fb35 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3422:	2300      	movs	r3, #0
    3424:	220a      	movs	r2, #10
    3426:	f894 1760 	ldrb.w	r1, [r4, #1888]	; 0x760
    342a:	483a      	ldr	r0, [pc, #232]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    342c:	f008 fb40 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) number of balls:\t");
			Serial.print(leds.number_of_balls);
			Serial.println("\t||");
    3430:	493a      	ldr	r1, [pc, #232]	; (351c <LEDDebug(LEDStruct&)+0xaa0>)
    3432:	4838      	ldr	r0, [pc, #224]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    3434:	f7fd fb38 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    3438:	4941      	ldr	r1, [pc, #260]	; (3540 <LEDDebug(LEDStruct&)+0xac4>)
    343a:	4836      	ldr	r0, [pc, #216]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    343c:	f7fd fb26 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    3440:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
    3444:	e4d2      	b.n	2dec <LEDDebug(LEDStruct&)+0x370>
			Serial.print(leds.use_palette);
			Serial.println("\t||");
			break;

		case TWINKLE:
			Serial.println("=============TWINKLE==============");
    3446:	493f      	ldr	r1, [pc, #252]	; (3544 <LEDDebug(LEDStruct&)+0xac8>)
    3448:	4832      	ldr	r0, [pc, #200]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    344a:	f7fd fb2d 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    344e:	493e      	ldr	r1, [pc, #248]	; (3548 <LEDDebug(LEDStruct&)+0xacc>)
    3450:	4830      	ldr	r0, [pc, #192]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    3452:	f7fd fb1b 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3456:	2300      	movs	r3, #0
    3458:	220a      	movs	r2, #10
    345a:	f894 1824 	ldrb.w	r1, [r4, #2084]	; 0x824
    345e:	482d      	ldr	r0, [pc, #180]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    3460:	f008 fb26 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) twinkle_speed:\t");
			Serial.print(leds.twinkle_speed);
			Serial.println("\t||");
    3464:	492d      	ldr	r1, [pc, #180]	; (351c <LEDDebug(LEDStruct&)+0xaa0>)
    3466:	482b      	ldr	r0, [pc, #172]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    3468:	f7fd fb1e 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    346c:	4937      	ldr	r1, [pc, #220]	; (354c <LEDDebug(LEDStruct&)+0xad0>)
    346e:	4829      	ldr	r0, [pc, #164]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    3470:	f7fd fb0c 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3474:	2300      	movs	r3, #0
    3476:	220a      	movs	r2, #10
    3478:	f894 1825 	ldrb.w	r1, [r4, #2085]	; 0x825
    347c:	4825      	ldr	r0, [pc, #148]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    347e:	f008 fb17 	bl	bab0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) twinkle_density:\t");
			Serial.print(leds.twinkle_density);
			Serial.println("\t||");
    3482:	4926      	ldr	r1, [pc, #152]	; (351c <LEDDebug(LEDStruct&)+0xaa0>)
    3484:	4823      	ldr	r0, [pc, #140]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    3486:	f7fd fb0f 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    348a:	4931      	ldr	r1, [pc, #196]	; (3550 <LEDDebug(LEDStruct&)+0xad4>)
    348c:	4821      	ldr	r0, [pc, #132]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    348e:	f7fd fafd 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    3492:	f894 1826 	ldrb.w	r1, [r4, #2086]	; 0x826
    3496:	481f      	ldr	r0, [pc, #124]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    3498:	f008 fb4a 	bl	bb30 <Print::print(long)>
			Serial.print("|| (d) cool_like_incan:\t");
			Serial.print(leds.cool_like_incandescent);
			Serial.println("\t||");
    349c:	491f      	ldr	r1, [pc, #124]	; (351c <LEDDebug(LEDStruct&)+0xaa0>)
    349e:	481d      	ldr	r0, [pc, #116]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    34a0:	f7fd fb02 	bl	aa8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    34a4:	492b      	ldr	r1, [pc, #172]	; (3554 <LEDDebug(LEDStruct&)+0xad8>)
    34a6:	481b      	ldr	r0, [pc, #108]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    34a8:	f7fd faf0 	bl	a8c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    34ac:	f894 1827 	ldrb.w	r1, [r4, #2087]	; 0x827
    34b0:	e49c      	b.n	2dec <LEDDebug(LEDStruct&)+0x370>
			Serial.println("\t||");
			break;


		default:
			Serial.println("");
    34b2:	4929      	ldr	r1, [pc, #164]	; (3558 <LEDDebug(LEDStruct&)+0xadc>)
    34b4:	4817      	ldr	r0, [pc, #92]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    34b6:	f7fd faf7 	bl	aa8 <Print::println(char const*)>
			Serial.println("==========MODE TYPE ERROR=========");
    34ba:	4928      	ldr	r1, [pc, #160]	; (355c <LEDDebug(LEDStruct&)+0xae0>)
    34bc:	4815      	ldr	r0, [pc, #84]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    34be:	f7fd faf3 	bl	aa8 <Print::println(char const*)>
			Serial.println("");
    34c2:	4925      	ldr	r1, [pc, #148]	; (3558 <LEDDebug(LEDStruct&)+0xadc>)
    34c4:	4813      	ldr	r0, [pc, #76]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    34c6:	f7fd faef 	bl	aa8 <Print::println(char const*)>
			break;
    34ca:	f7ff bbf2 	b.w	2cb2 <LEDDebug(LEDStruct&)+0x236>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    34ce:	4924      	ldr	r1, [pc, #144]	; (3560 <LEDDebug(LEDStruct&)+0xae4>)
    34d0:	4810      	ldr	r0, [pc, #64]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    34d2:	f7fd fae9 	bl	aa8 <Print::println(char const*)>
    34d6:	f7ff bae9 	b.w	2aac <LEDDebug(LEDStruct&)+0x30>
			}
			break;

		case FIRE:
			switch (leds.mode_name) {
				case FIRE:				Serial.println("==============FIRE================"); break;
    34da:	4922      	ldr	r1, [pc, #136]	; (3564 <LEDDebug(LEDStruct&)+0xae8>)
    34dc:	480d      	ldr	r0, [pc, #52]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    34de:	f7fd fae3 	bl	aa8 <Print::println(char const*)>
    34e2:	e4e4      	b.n	2eae <LEDDebug(LEDStruct&)+0x432>
			Serial.println("============FIREWORKS=============");
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
    34e4:	4920      	ldr	r1, [pc, #128]	; (3568 <LEDDebug(LEDStruct&)+0xaec>)
    34e6:	480b      	ldr	r0, [pc, #44]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    34e8:	f7fd fade 	bl	aa8 <Print::println(char const*)>
    34ec:	e680      	b.n	31f0 <LEDDebug(LEDStruct&)+0x774>
			break;

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
				case RAINBOW_MARCH_SPLIT:	Serial.println("=======RAINBOW MARCH SPLIT========"); break;
    34ee:	491f      	ldr	r1, [pc, #124]	; (356c <LEDDebug(LEDStruct&)+0xaf0>)
    34f0:	4808      	ldr	r0, [pc, #32]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    34f2:	f7fd fad9 	bl	aa8 <Print::println(char const*)>
    34f6:	e48f      	b.n	2e18 <LEDDebug(LEDStruct&)+0x39c>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    34f8:	491d      	ldr	r1, [pc, #116]	; (3570 <LEDDebug(LEDStruct&)+0xaf4>)
    34fa:	e672      	b.n	31e2 <LEDDebug(LEDStruct&)+0x766>
				case RAINBOW_MARCH_BEAT:	Serial.println("=======RAINBOW MARCH BEAT========="); break;
    34fc:	491d      	ldr	r1, [pc, #116]	; (3574 <LEDDebug(LEDStruct&)+0xaf8>)
    34fe:	4805      	ldr	r0, [pc, #20]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    3500:	f7fd fad2 	bl	aa8 <Print::println(char const*)>
    3504:	e488      	b.n	2e18 <LEDDebug(LEDStruct&)+0x39c>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF)		{ Serial.println("============JUGGLE HALF==========="); }
    3506:	491c      	ldr	r1, [pc, #112]	; (3578 <LEDDebug(LEDStruct&)+0xafc>)
    3508:	4802      	ldr	r0, [pc, #8]	; (3514 <LEDDebug(LEDStruct&)+0xa98>)
    350a:	f7fd facd 	bl	aa8 <Print::println(char const*)>
    350e:	e411      	b.n	2d34 <LEDDebug(LEDStruct&)+0x2b8>
    3510:	0000f114 	.word	0x0000f114
    3514:	1fff8788 	.word	0x1fff8788
    3518:	0000f138 	.word	0x0000f138
    351c:	0000eab4 	.word	0x0000eab4
    3520:	0000f150 	.word	0x0000f150
    3524:	0000f168 	.word	0x0000f168
    3528:	0000f180 	.word	0x0000f180
    352c:	0000f198 	.word	0x0000f198
    3530:	0000f1ac 	.word	0x0000f1ac
    3534:	0000f1c4 	.word	0x0000f1c4
    3538:	0000f1e8 	.word	0x0000f1e8
    353c:	0000f1f8 	.word	0x0000f1f8
    3540:	0000f214 	.word	0x0000f214
    3544:	0000f22c 	.word	0x0000f22c
    3548:	0000f250 	.word	0x0000f250
    354c:	0000f268 	.word	0x0000f268
    3550:	0000f284 	.word	0x0000f284
    3554:	0000f2a0 	.word	0x0000f2a0
    3558:	0000ebd8 	.word	0x0000ebd8
    355c:	0000f354 	.word	0x0000f354
    3560:	0000ea7c 	.word	0x0000ea7c
    3564:	0000ecec 	.word	0x0000ecec
    3568:	0000ee4c 	.word	0x0000ee4c
    356c:	0000ec5c 	.word	0x0000ec5c
    3570:	0000ee44 	.word	0x0000ee44
    3574:	0000ec80 	.word	0x0000ec80
    3578:	0000eb48 	.word	0x0000eb48

0000357c <change_palette(LEDStruct&) [clone .part.11]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    357c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3580:	b08d      	sub	sp, #52	; 0x34
    3582:	2134      	movs	r1, #52	; 0x34
    3584:	4605      	mov	r5, r0
    3586:	9009      	str	r0, [sp, #36]	; 0x24
    3588:	4846      	ldr	r0, [pc, #280]	; (36a4 <change_palette(LEDStruct&) [clone .part.11]+0x128>)
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
    358a:	4c47      	ldr	r4, [pc, #284]	; (36a8 <change_palette(LEDStruct&) [clone .part.11]+0x12c>)
    358c:	f008 f87c 	bl	b688 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3590:	4846      	ldr	r0, [pc, #280]	; (36ac <change_palette(LEDStruct&) [clone .part.11]+0x130>)
    3592:	f008 fa7d 	bl	ba90 <Print::println()>
    3596:	2133      	movs	r1, #51	; 0x33
    3598:	4845      	ldr	r0, [pc, #276]	; (36b0 <change_palette(LEDStruct&) [clone .part.11]+0x134>)
    359a:	f008 f875 	bl	b688 <usb_serial_write>
    359e:	4843      	ldr	r0, [pc, #268]	; (36ac <change_palette(LEDStruct&) [clone .part.11]+0x130>)
    35a0:	f008 fa76 	bl	ba90 <Print::println()>
    35a4:	2133      	movs	r1, #51	; 0x33
    35a6:	4843      	ldr	r0, [pc, #268]	; (36b4 <change_palette(LEDStruct&) [clone .part.11]+0x138>)
    35a8:	f008 f86e 	bl	b688 <usb_serial_write>
    35ac:	483f      	ldr	r0, [pc, #252]	; (36ac <change_palette(LEDStruct&) [clone .part.11]+0x130>)
    35ae:	f008 fa6f 	bl	ba90 <Print::println()>
    35b2:	4841      	ldr	r0, [pc, #260]	; (36b8 <change_palette(LEDStruct&) [clone .part.11]+0x13c>)
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    35b4:	4a41      	ldr	r2, [pc, #260]	; (36bc <change_palette(LEDStruct&) [clone .part.11]+0x140>)
    35b6:	8803      	ldrh	r3, [r0, #0]
    35b8:	7811      	ldrb	r1, [r2, #0]
    35ba:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    35be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    35c2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    35c6:	3319      	adds	r3, #25
    35c8:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    35ca:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    35ce:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    35d0:	fb12 f201 	smulbb	r2, r2, r1
    35d4:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    35d6:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
    35d8:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    35dc:	f885 2228 	strb.w	r2, [r5, #552]	; 0x228
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    35e0:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    35e2:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    35e6:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    35e8:	3701      	adds	r7, #1
        } while ( u.index != 255);
    35ea:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    35ec:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    35ee:	d1f8      	bne.n	35e2 <change_palette(LEDStruct&) [clone .part.11]+0x66>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    35f0:	f8d8 3000 	ldr.w	r3, [r8]
    35f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    35f6:	9708      	str	r7, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    35f8:	ea4f 6913 	mov.w	r9, r3, lsr #24
    35fc:	f202 12f7 	addw	r2, r2, #503	; 0x1f7
    3600:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    3604:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    3608:	f04f 33ff 	mov.w	r3, #4294967295
    360c:	9207      	str	r2, [sp, #28]
    360e:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    3610:	2400      	movs	r4, #0
    3612:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    3614:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3618:	9807      	ldr	r0, [sp, #28]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    361a:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    361e:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3622:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    3626:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    3628:	b2f9      	uxtb	r1, r7
    362a:	f3c5 6507 	ubfx	r5, r5, #24, #8
    362e:	9104      	str	r1, [sp, #16]
    3630:	b2e9      	uxtb	r1, r5
    3632:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    3634:	fa5f f18c 	uxtb.w	r1, ip
    3638:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    363a:	9908      	ldr	r1, [sp, #32]
    363c:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    363e:	aa0b      	add	r2, sp, #44	; 0x2c
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    3640:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3644:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    3648:	d80c      	bhi.n	3664 <change_palette(LEDStruct&) [clone .part.11]+0xe8>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    364a:	9906      	ldr	r1, [sp, #24]
    364c:	458c      	cmp	ip, r1
    364e:	dc07      	bgt.n	3660 <change_palette(LEDStruct&) [clone .part.11]+0xe4>
    3650:	290f      	cmp	r1, #15
    3652:	d005      	beq.n	3660 <change_palette(LEDStruct&) [clone .part.11]+0xe4>
                    istart8 = lastSlotUsed + 1;
    3654:	3101      	adds	r1, #1
    3656:	b2c9      	uxtb	r1, r1
    3658:	428b      	cmp	r3, r1
    365a:	9103      	str	r1, [sp, #12]
    365c:	bf38      	it	cc
    365e:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    3660:	b259      	sxtb	r1, r3
    3662:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3664:	a90a      	add	r1, sp, #40	; 0x28
    3666:	9100      	str	r1, [sp, #0]
    3668:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    366a:	f88d b02c 	strb.w	fp, [sp, #44]	; 0x2c
        g = rhs.g;
    366e:	f88d a02d 	strb.w	sl, [sp, #45]	; 0x2d
        b = rhs.b;
    3672:	f88d e02e 	strb.w	lr, [sp, #46]	; 0x2e
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3676:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
        g = rhs.g;
    367a:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
        b = rhs.b;
    367e:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
    3682:	f006 f875 	bl	9770 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    3686:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3688:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    368c:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3690:	46ca      	mov	sl, r9
    3692:	d1bf      	bne.n	3614 <change_palette(LEDStruct&) [clone .part.11]+0x98>
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    3694:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3696:	f893 0228 	ldrb.w	r0, [r3, #552]	; 0x228
    369a:	f7fe fee1 	bl	2460 <print_palette(unsigned char)>
	}
}
    369e:	b00d      	add	sp, #52	; 0x34
    36a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36a4:	0000f39c 	.word	0x0000f39c
    36a8:	0000dcd0 	.word	0x0000dcd0
    36ac:	1fff8788 	.word	0x1fff8788
    36b0:	0000f3d4 	.word	0x0000f3d4
    36b4:	0000f408 	.word	0x0000f408
    36b8:	1fff8780 	.word	0x1fff8780
    36bc:	1fff8748 	.word	0x1fff8748

000036c0 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool)>:
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2)) {
    36c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    36c2:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
    36c6:	f89d 701c 	ldrb.w	r7, [sp, #28]
    36ca:	f89d 5014 	ldrb.w	r5, [sp, #20]
    36ce:	f89d 4018 	ldrb.w	r4, [sp, #24]
    36d2:	f89d 3020 	ldrb.w	r3, [sp, #32]
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    36d6:	f880 1234 	strb.w	r1, [r0, #564]	; 0x234
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    36da:	f04f 0e00 	mov.w	lr, #0
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    36de:	f880 2235 	strb.w	r2, [r0, #565]	; 0x235
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    36e2:	210f      	movs	r1, #15
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2)) {
	leds.mode_initialized	= 1;
    36e4:	2201      	movs	r2, #1
	leds.mode_type			= JUGGLE;
    36e6:	f880 e22c 	strb.w	lr, [r0, #556]	; 0x22c
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    36ea:	f880 11c3 	strb.w	r1, [r0, #451]	; 0x1c3

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    36ee:	f880 7231 	strb.w	r7, [r0, #561]	; 0x231
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2)) {
	leds.mode_initialized	= 1;
    36f2:	f880 222d 	strb.w	r2, [r0, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    36f6:	f880 2229 	strb.w	r2, [r0, #553]	; 0x229
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    36fa:	f880 522f 	strb.w	r5, [r0, #559]	; 0x22f
	leds.juggle_beat		 = jb;
    36fe:	f880 4230 	strb.w	r4, [r0, #560]	; 0x230
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    3702:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
	leds.juggle_index_reset  = jir;
    3706:	f880 6233 	strb.w	r6, [r0, #563]	; 0x233
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    370a:	b126      	cbz	r6, 3716 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0x56>
    370c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3710:	4093      	lsls	r3, r2
    3712:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    3716:	f890 322b 	ldrb.w	r3, [r0, #555]	; 0x22b
    371a:	2b06      	cmp	r3, #6
    371c:	d019      	beq.n	3752 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0x92>
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
    371e:	2b04      	cmp	r3, #4
    3720:	d116      	bne.n	3750 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0x90>
    3722:	490f      	ldr	r1, [pc, #60]	; (3760 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0xa0>)
    3724:	880b      	ldrh	r3, [r1, #0]
    3726:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    372a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    372e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3732:	3319      	adds	r3, #25
    3734:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3736:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    373a:	b2d2      	uxtb	r2, r2
    373c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3740:	3404      	adds	r4, #4
    3742:	eb05 15e2 	add.w	r5, r5, r2, asr #7
    3746:	f880 4230 	strb.w	r4, [r0, #560]	; 0x230
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    374a:	800b      	strh	r3, [r1, #0]
    374c:	f880 522f 	strb.w	r5, [r0, #559]	; 0x22f
    3750:	bdf0      	pop	{r4, r5, r6, r7, pc}
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    3752:	3437      	adds	r4, #55	; 0x37
    3754:	230f      	movs	r3, #15
    3756:	f880 4230 	strb.w	r4, [r0, #560]	; 0x230
    375a:	f880 322f 	strb.w	r3, [r0, #559]	; 0x22f
    375e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3760:	1fff8780 	.word	0x1fff8780

00003764 <juggle_update(LEDStruct&)>:
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    3764:	4b20      	ldr	r3, [pc, #128]	; (37e8 <juggle_update(LEDStruct&)+0x84>)
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    3766:	4a21      	ldr	r2, [pc, #132]	; (37ec <juggle_update(LEDStruct&)+0x88>)
	switch (update_var) {
    3768:	781b      	ldrb	r3, [r3, #0]
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    376a:	2100      	movs	r1, #0
	switch (update_var) {
    376c:	3b01      	subs	r3, #1
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    376e:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    3770:	2b06      	cmp	r3, #6
    3772:	d809      	bhi.n	3788 <juggle_update(LEDStruct&)+0x24>
    3774:	e8df f003 	tbb	[pc, r3]
    3778:	2b251c13 	.word	0x2b251c13
    377c:	3104      	.short	0x3104
    377e:	0a          	.byte	0x0a
    377f:	00          	.byte	0x00
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
    3780:	4b1b      	ldr	r3, [pc, #108]	; (37f0 <juggle_update(LEDStruct&)+0x8c>)
    3782:	881b      	ldrh	r3, [r3, #0]
    3784:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    3788:	f7ff b978 	b.w	2a7c <LEDDebug(LEDStruct&)>
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
    378c:	4b18      	ldr	r3, [pc, #96]	; (37f0 <juggle_update(LEDStruct&)+0x8c>)
    378e:	881b      	ldrh	r3, [r3, #0]
    3790:	3300      	adds	r3, #0
    3792:	bf18      	it	ne
    3794:	2301      	movne	r3, #1
    3796:	f880 3233 	strb.w	r3, [r0, #563]	; 0x233
			default:	break;
	}
	LEDDebug(leds);
    379a:	f7ff b96f 	b.w	2a7c <LEDDebug(LEDStruct&)>
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
    379e:	4b14      	ldr	r3, [pc, #80]	; (37f0 <juggle_update(LEDStruct&)+0x8c>)
    37a0:	881b      	ldrh	r3, [r3, #0]
    37a2:	3300      	adds	r3, #0
    37a4:	bf18      	it	ne
    37a6:	2301      	movne	r3, #1
    37a8:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    37ac:	f7ff b966 	b.w	2a7c <LEDDebug(LEDStruct&)>

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
    37b0:	4b0f      	ldr	r3, [pc, #60]	; (37f0 <juggle_update(LEDStruct&)+0x8c>)
    37b2:	881b      	ldrh	r3, [r3, #0]
    37b4:	3300      	adds	r3, #0
    37b6:	bf18      	it	ne
    37b8:	2301      	movne	r3, #1
    37ba:	f880 3235 	strb.w	r3, [r0, #565]	; 0x235
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    37be:	f7ff b95d 	b.w	2a7c <LEDDebug(LEDStruct&)>
void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
    37c2:	4b0b      	ldr	r3, [pc, #44]	; (37f0 <juggle_update(LEDStruct&)+0x8c>)
    37c4:	881b      	ldrh	r3, [r3, #0]
    37c6:	f880 322f 	strb.w	r3, [r0, #559]	; 0x22f
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    37ca:	f7ff b957 	b.w	2a7c <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
    37ce:	4b08      	ldr	r3, [pc, #32]	; (37f0 <juggle_update(LEDStruct&)+0x8c>)
    37d0:	881b      	ldrh	r3, [r3, #0]
    37d2:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    37d6:	f7ff b951 	b.w	2a7c <LEDDebug(LEDStruct&)>
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
    37da:	4b05      	ldr	r3, [pc, #20]	; (37f0 <juggle_update(LEDStruct&)+0x8c>)
    37dc:	881b      	ldrh	r3, [r3, #0]
    37de:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    37e2:	f7ff b94b 	b.w	2a7c <LEDDebug(LEDStruct&)>
    37e6:	bf00      	nop
    37e8:	1fff9a24 	.word	0x1fff9a24
    37ec:	1fff91e1 	.word	0x1fff91e1
    37f0:	1fff90e2 	.word	0x1fff90e2

000037f4 <juggle(LEDStruct&)>:



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    37f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    37f8:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    37fc:	b08f      	sub	sp, #60	; 0x3c
    37fe:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3800:	2b00      	cmp	r3, #0
    3802:	f000 8245 	beq.w	3c90 <juggle(LEDStruct&)+0x49c>
	if (keyboard_update) { juggle_update(leds); }
    3806:	4ba3      	ldr	r3, [pc, #652]	; (3a94 <juggle(LEDStruct&)+0x2a0>)
    3808:	781b      	ldrb	r3, [r3, #0]
    380a:	2b00      	cmp	r3, #0
    380c:	f040 823c 	bne.w	3c88 <juggle(LEDStruct&)+0x494>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { 
    3810:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    3814:	b1d3      	cbz	r3, 384c <juggle(LEDStruct&)+0x58>
    3816:	4ba0      	ldr	r3, [pc, #640]	; (3a98 <juggle(LEDStruct&)+0x2a4>)
    3818:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
		leds.juggle_index = 0; 
    381c:	2200      	movs	r2, #0
    381e:	f103 0027 	add.w	r0, r3, #39	; 0x27
    3822:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
    3826:	e001      	b.n	382c <juggle(LEDStruct&)+0x38>
		default:	Serial.println("Not a gradient palette");		break;
	}
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
    3828:	4298      	cmp	r0, r3
    382a:	d00f      	beq.n	384c <juggle(LEDStruct&)+0x58>
		if (leds.palette_index == bad_juggle_palettes[i]) {
    382c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3830:	428a      	cmp	r2, r1
    3832:	d1f9      	bne.n	3828 <juggle(LEDStruct&)+0x34>
			leds.juggle_index_reset = 0;
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    3834:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
    3838:	4a98      	ldr	r2, [pc, #608]	; (3a9c <juggle(LEDStruct&)+0x2a8>)
    383a:	fba2 2303 	umull	r2, r3, r2, r3
    383e:	08db      	lsrs	r3, r3, #3
    3840:	3301      	adds	r3, #1
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    3842:	2200      	movs	r2, #0
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    3844:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    3848:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
		palette_check(leds);
	}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    384c:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3850:	2196      	movs	r1, #150	; 0x96
    3852:	4620      	mov	r0, r4
    3854:	f006 f81e 	bl	9894 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    3858:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
		if (leds.juggle_phased) {
    385c:	f894 6235 	ldrb.w	r6, [r4, #565]	; 0x235

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    3860:	2b00      	cmp	r3, #0
    3862:	d173      	bne.n	394c <juggle(LEDStruct&)+0x158>
		if (leds.juggle_phased) {
    3864:	2e00      	cmp	r6, #0
    3866:	f000 81a0 	beq.w	3baa <juggle(LEDStruct&)+0x3b6>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    386a:	f894 022f 	ldrb.w	r0, [r4, #559]	; 0x22f
    386e:	2800      	cmp	r0, #0
    3870:	d069      	beq.n	3946 <juggle(LEDStruct&)+0x152>
    3872:	4f8b      	ldr	r7, [pc, #556]	; (3aa0 <juggle(LEDStruct&)+0x2ac>)
    3874:	498b      	ldr	r1, [pc, #556]	; (3aa4 <juggle(LEDStruct&)+0x2b0>)
    3876:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    387a:	f8df 822c 	ldr.w	r8, [pc, #556]	; 3aa8 <juggle(LEDStruct&)+0x2b4>
    387e:	9106      	str	r1, [sp, #24]
    3880:	461e      	mov	r6, r3
    3882:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    3886:	f10d 0934 	add.w	r9, sp, #52	; 0x34
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    388a:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    388e:	9707      	str	r7, [sp, #28]
				leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
    3890:	f894 5230 	ldrb.w	r5, [r4, #560]	; 0x230
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3894:	f8d8 3000 	ldr.w	r3, [r8]
    3898:	9308      	str	r3, [sp, #32]
    389a:	1981      	adds	r1, r0, r6
    389c:	4429      	add	r1, r5

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    389e:	29ff      	cmp	r1, #255	; 0xff
	return ret;
    38a0:	9b08      	ldr	r3, [sp, #32]
    38a2:	bf9c      	itt	ls
    38a4:	0209      	lslls	r1, r1, #8
    38a6:	b289      	uxthls	r1, r1
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    38a8:	fb0a f303 	mul.w	r3, sl, r3
    38ac:	fb01 f303 	mul.w	r3, r1, r3
    38b0:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    38b2:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    38b4:	f3c3 05ca 	ubfx	r5, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    38b8:	d503      	bpl.n	38c2 <juggle(LEDStruct&)+0xce>
    38ba:	f5c5 65ff 	rsb	r5, r5, #2040	; 0x7f8
    38be:	3507      	adds	r5, #7
    38c0:	b2ad      	uxth	r5, r5
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    38c2:	f3c5 0146 	ubfx	r1, r5, #1, #7

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    38c6:	0a28      	lsrs	r0, r5, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    38c8:	9f06      	ldr	r7, [sp, #24]
    38ca:	9d07      	ldr	r5, [sp, #28]
    38cc:	5c2d      	ldrb	r5, [r5, r0]
    38ce:	f837 0010 	ldrh.w	r0, [r7, r0, lsl #1]
    38d2:	fb05 0501 	mla	r5, r5, r1, r0
    38d6:	b2ad      	uxth	r5, r5

    if( theta & 0x8000 ) y = -y;
    38d8:	0419      	lsls	r1, r3, #16
    38da:	bf48      	it	mi
    38dc:	426d      	negmi	r5, r5
    38de:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    38e2:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    38e6:	9100      	str	r1, [sp, #0]
    38e8:	4648      	mov	r0, r9
    38ea:	4659      	mov	r1, fp
    38ec:	b22d      	sxth	r5, r5
    38ee:	f006 f831 	bl	9954 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    38f2:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    38f6:	2296      	movs	r2, #150	; 0x96
    38f8:	b29b      	uxth	r3, r3
    38fa:	fb02 f303 	mul.w	r3, r2, r3
    38fe:	0c1b      	lsrs	r3, r3, #16
    3900:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3904:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    3906:	5ce2      	ldrb	r2, [r4, r3]
    3908:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    390c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3910:	54e2      	strb	r2, [r4, r3]
    3912:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    3916:	784a      	ldrb	r2, [r1, #1]
    3918:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    391c:	704a      	strb	r2, [r1, #1]
    391e:	788b      	ldrb	r3, [r1, #2]
    3920:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    3924:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3928:	708b      	strb	r3, [r1, #2]
				leds.juggle_index += leds.juggle_diff;
    392a:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    392e:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3932:	f894 022f 	ldrb.w	r0, [r4, #559]	; 0x22f
    3936:	3601      	adds	r6, #1
				leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				leds.juggle_index += leds.juggle_diff;
    3938:	441a      	add	r2, r3
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    393a:	b2f6      	uxtb	r6, r6
				leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				leds.juggle_index += leds.juggle_diff;
    393c:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    393e:	42b0      	cmp	r0, r6
				leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				leds.juggle_index += leds.juggle_diff;
    3940:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3944:	d8a4      	bhi.n	3890 <juggle(LEDStruct&)+0x9c>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    3946:	b00f      	add	sp, #60	; 0x3c
    3948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    394c:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    3950:	2e00      	cmp	r6, #0
    3952:	f000 808e 	beq.w	3a72 <juggle(LEDStruct&)+0x27e>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3956:	2b00      	cmp	r3, #0
    3958:	d0f5      	beq.n	3946 <juggle(LEDStruct&)+0x152>
    395a:	4b52      	ldr	r3, [pc, #328]	; (3aa4 <juggle(LEDStruct&)+0x2b0>)
    395c:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    3960:	f8df 8144 	ldr.w	r8, [pc, #324]	; 3aa8 <juggle(LEDStruct&)+0x2b4>
    3964:	4f4e      	ldr	r7, [pc, #312]	; (3aa0 <juggle(LEDStruct&)+0x2ac>)
    3966:	9306      	str	r3, [sp, #24]
    3968:	2600      	movs	r6, #0
    396a:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    396e:	f10d 0934 	add.w	r9, sp, #52	; 0x34
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3972:	f44f 7afa 	mov.w	sl, #500	; 0x1f4
    3976:	e05f      	b.n	3a38 <juggle(LEDStruct&)+0x244>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3978:	f8d8 3000 	ldr.w	r3, [r8]
    397c:	930a      	str	r3, [sp, #40]	; 0x28
				if (leds.this_dir) {
					leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
    397e:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
	return ret;
    3982:	980a      	ldr	r0, [sp, #40]	; 0x28
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3984:	0219      	lsls	r1, r3, #8
    3986:	f44f 738c 	mov.w	r3, #280	; 0x118
    398a:	fb03 f301 	mul.w	r3, r3, r1
    398e:	fb0a 0016 	mls	r0, sl, r6, r0
    3992:	fb03 f300 	mul.w	r3, r3, r0
    3996:	f3c3 430e 	ubfx	r3, r3, #16, #15
    399a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    399e:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    39a0:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    39a4:	d503      	bpl.n	39ae <juggle(LEDStruct&)+0x1ba>
    39a6:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    39aa:	3107      	adds	r1, #7
    39ac:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    39ae:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    39b2:	f3c1 0046 	ubfx	r0, r1, #1, #7
    39b6:	9906      	ldr	r1, [sp, #24]
    39b8:	f817 500e 	ldrb.w	r5, [r7, lr]
    39bc:	f831 101e 	ldrh.w	r1, [r1, lr, lsl #1]
    39c0:	fb05 1100 	mla	r1, r5, r0, r1

    if( theta & 0x8000 ) y = -y;
    39c4:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    39c6:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    39c8:	bf4c      	ite	mi
    39ca:	424d      	negmi	r5, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    39cc:	b20d      	sxthpl	r5, r1
				}
				else {
					leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
    39ce:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    39d2:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    39d6:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    39d8:	bf48      	it	mi
    39da:	b22d      	sxthmi	r5, r5
    39dc:	4659      	mov	r1, fp
    39de:	4648      	mov	r0, r9
    39e0:	f005 ffb8 	bl	9954 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    39e4:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    39e8:	2296      	movs	r2, #150	; 0x96
    39ea:	b29b      	uxth	r3, r3
    39ec:	fb02 f303 	mul.w	r3, r2, r3
    39f0:	0c1b      	lsrs	r3, r3, #16
    39f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    39f6:	18e1      	adds	r1, r4, r3
    39f8:	5ce2      	ldrb	r2, [r4, r3]
    39fa:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    39fe:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3a02:	54e2      	strb	r2, [r4, r3]
    3a04:	784a      	ldrb	r2, [r1, #1]
    3a06:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    3a0a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3a0e:	704a      	strb	r2, [r1, #1]
    3a10:	788b      	ldrb	r3, [r1, #2]
    3a12:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    3a16:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3a1a:	708b      	strb	r3, [r1, #2]
				}
				leds.juggle_index += leds.juggle_diff;
    3a1c:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    3a20:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3a24:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3a28:	3601      	adds	r6, #1
					leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				}
				else {
					leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				}
				leds.juggle_index += leds.juggle_diff;
    3a2a:	441a      	add	r2, r3
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3a2c:	b2f6      	uxtb	r6, r6
					leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				}
				else {
					leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				}
				leds.juggle_index += leds.juggle_diff;
    3a2e:	b2d2      	uxtb	r2, r2
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3a30:	42b1      	cmp	r1, r6
					leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				}
				else {
					leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				}
				leds.juggle_index += leds.juggle_diff;
    3a32:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3a36:	d986      	bls.n	3946 <juggle(LEDStruct&)+0x152>
				if (leds.this_dir) {
    3a38:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	d19b      	bne.n	3978 <juggle(LEDStruct&)+0x184>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3a40:	f8d8 3000 	ldr.w	r3, [r8]
    3a44:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    3a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				}
				else {
					leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
    3a48:	f894 0230 	ldrb.w	r0, [r4, #560]	; 0x230
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3a4c:	fb0a 3116 	mls	r1, sl, r6, r3
    3a50:	0200      	lsls	r0, r0, #8
    3a52:	f44f 738c 	mov.w	r3, #280	; 0x118
    3a56:	fb03 f300 	mul.w	r3, r3, r0
    3a5a:	fb01 f303 	mul.w	r3, r1, r3
    3a5e:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3a62:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3a66:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3a68:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3a6a:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3a6e:	d59e      	bpl.n	39ae <juggle(LEDStruct&)+0x1ba>
    3a70:	e799      	b.n	39a6 <juggle(LEDStruct&)+0x1b2>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3a72:	2b00      	cmp	r3, #0
    3a74:	f43f af67 	beq.w	3946 <juggle(LEDStruct&)+0x152>
    3a78:	490a      	ldr	r1, [pc, #40]	; (3aa4 <juggle(LEDStruct&)+0x2b0>)
    3a7a:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    3a7e:	f8df 8028 	ldr.w	r8, [pc, #40]	; 3aa8 <juggle(LEDStruct&)+0x2b4>
    3a82:	4f07      	ldr	r7, [pc, #28]	; (3aa0 <juggle(LEDStruct&)+0x2ac>)
    3a84:	9106      	str	r1, [sp, #24]
    3a86:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    3a8a:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    3a8e:	f04f 0996 	mov.w	r9, #150	; 0x96
    3a92:	e06c      	b.n	3b6e <juggle(LEDStruct&)+0x37a>
    3a94:	1fff91e1 	.word	0x1fff91e1
    3a98:	1fff8757 	.word	0x1fff8757
    3a9c:	cccccccd 	.word	0xcccccccd
    3aa0:	0000dee8 	.word	0x0000dee8
    3aa4:	0000d718 	.word	0x0000d718
    3aa8:	1ffface8 	.word	0x1ffface8
				if (leds.this_dir) {
					leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
    3aac:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    3ab0:	4433      	add	r3, r6
    3ab2:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ab4:	f8d8 1000 	ldr.w	r1, [r8]
    3ab8:	910c      	str	r1, [sp, #48]	; 0x30

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3aba:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3abc:	990c      	ldr	r1, [sp, #48]	; 0x30
    3abe:	bf9c      	itt	ls
    3ac0:	021b      	lslls	r3, r3, #8
    3ac2:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3ac4:	fb0a f101 	mul.w	r1, sl, r1
    3ac8:	fb03 f301 	mul.w	r3, r3, r1
    3acc:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3ad0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    3ad4:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3ad6:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3ada:	d503      	bpl.n	3ae4 <juggle(LEDStruct&)+0x2f0>
    3adc:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3ae0:	3107      	adds	r1, #7
    3ae2:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3ae4:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ae8:	f3c1 0046 	ubfx	r0, r1, #1, #7
    3aec:	9906      	ldr	r1, [sp, #24]
    3aee:	f817 500e 	ldrb.w	r5, [r7, lr]
    3af2:	f831 101e 	ldrh.w	r1, [r1, lr, lsl #1]
    3af6:	fb05 1100 	mla	r1, r5, r0, r1

    if( theta & 0x8000 ) y = -y;
    3afa:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3afc:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3afe:	bf4c      	ite	mi
    3b00:	424d      	negmi	r5, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b02:	b20d      	sxthpl	r5, r1
				}
				else {
					leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
    3b04:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    3b08:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3b0c:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3b0e:	bf48      	it	mi
    3b10:	b22d      	sxthmi	r5, r5
    3b12:	4659      	mov	r1, fp
    3b14:	a80b      	add	r0, sp, #44	; 0x2c
    3b16:	f005 ff1d 	bl	9954 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3b1a:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3b1e:	b29b      	uxth	r3, r3
    3b20:	fb09 f303 	mul.w	r3, r9, r3
    3b24:	0c1b      	lsrs	r3, r3, #16
    3b26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b2a:	18e1      	adds	r1, r4, r3
    3b2c:	5ce2      	ldrb	r2, [r4, r3]
    3b2e:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3b32:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3b36:	54e2      	strb	r2, [r4, r3]
    3b38:	784a      	ldrb	r2, [r1, #1]
    3b3a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3b3e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3b42:	704a      	strb	r2, [r1, #1]
    3b44:	788b      	ldrb	r3, [r1, #2]
    3b46:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3b4a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3b4e:	708b      	strb	r3, [r1, #2]
				}
				leds.juggle_index += leds.juggle_diff;
    3b50:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    3b54:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3b58:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    3b5c:	3601      	adds	r6, #1
					leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				}
				else {
					leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				}
				leds.juggle_index += leds.juggle_diff;
    3b5e:	440a      	add	r2, r1
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3b60:	b2f6      	uxtb	r6, r6
					leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				}
				else {
					leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				}
				leds.juggle_index += leds.juggle_diff;
    3b62:	b2d2      	uxtb	r2, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3b64:	42b3      	cmp	r3, r6
					leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				}
				else {
					leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				}
				leds.juggle_index += leds.juggle_diff;
    3b66:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3b6a:	f67f aeec 	bls.w	3946 <juggle(LEDStruct&)+0x152>
				if (leds.this_dir) {
    3b6e:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    3b72:	2900      	cmp	r1, #0
    3b74:	d19a      	bne.n	3aac <juggle(LEDStruct&)+0x2b8>
					leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				}
				else {
					leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
    3b76:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    3b7a:	4433      	add	r3, r6
    3b7c:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3b7e:	f8d8 1000 	ldr.w	r1, [r8]
    3b82:	910d      	str	r1, [sp, #52]	; 0x34
    3b84:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3b86:	990d      	ldr	r1, [sp, #52]	; 0x34
    3b88:	bf9c      	itt	ls
    3b8a:	021b      	lslls	r3, r3, #8
    3b8c:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3b8e:	fb0a f101 	mul.w	r1, sl, r1
    3b92:	fb03 f301 	mul.w	r3, r3, r1
    3b96:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3b9a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3b9e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3ba0:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3ba2:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3ba6:	d59d      	bpl.n	3ae4 <juggle(LEDStruct&)+0x2f0>
    3ba8:	e798      	b.n	3adc <juggle(LEDStruct&)+0x2e8>
				leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3baa:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    3bae:	2b00      	cmp	r3, #0
    3bb0:	f43f aec9 	beq.w	3946 <juggle(LEDStruct&)+0x152>
    3bb4:	4f78      	ldr	r7, [pc, #480]	; (3d98 <juggle(LEDStruct&)+0x5a4>)
    3bb6:	4b79      	ldr	r3, [pc, #484]	; (3d9c <juggle(LEDStruct&)+0x5a8>)
    3bb8:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    3bbc:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 3da0 <juggle(LEDStruct&)+0x5ac>
    3bc0:	9306      	str	r3, [sp, #24]
    3bc2:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    3bc6:	f10d 0934 	add.w	r9, sp, #52	; 0x34
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    3bca:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    3bce:	9707      	str	r7, [sp, #28]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3bd0:	f8d8 3000 	ldr.w	r3, [r8]
    3bd4:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    3bd6:	9809      	ldr	r0, [sp, #36]	; 0x24
				leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
    3bd8:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3bdc:	fb0a f000 	mul.w	r0, sl, r0
    3be0:	021b      	lsls	r3, r3, #8
    3be2:	fb00 f303 	mul.w	r3, r0, r3
    3be6:	0371      	lsls	r1, r6, #13
    3be8:	eb01 4113 	add.w	r1, r1, r3, lsr #16
    3bec:	b289      	uxth	r1, r1
    3bee:	044b      	lsls	r3, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3bf0:	f3c1 05ca 	ubfx	r5, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3bf4:	d503      	bpl.n	3bfe <juggle(LEDStruct&)+0x40a>
    3bf6:	f5c5 65ff 	rsb	r5, r5, #2040	; 0x7f8
    3bfa:	3507      	adds	r5, #7
    3bfc:	b2ad      	uxth	r5, r5
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3bfe:	9f06      	ldr	r7, [sp, #24]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3c00:	0a28      	lsrs	r0, r5, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3c02:	f3c5 0346 	ubfx	r3, r5, #1, #7
    3c06:	9d07      	ldr	r5, [sp, #28]
    3c08:	5c2d      	ldrb	r5, [r5, r0]
    3c0a:	f837 0010 	ldrh.w	r0, [r7, r0, lsl #1]
    3c0e:	fb05 0503 	mla	r5, r5, r3, r0

    if( theta & 0x8000 ) y = -y;
    3c12:	040f      	lsls	r7, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3c14:	b2ad      	uxth	r5, r5
    3c16:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    3c1a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3c1e:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3c20:	bf48      	it	mi
    3c22:	426d      	negmi	r5, r5
    3c24:	4659      	mov	r1, fp
    3c26:	4648      	mov	r0, r9
    3c28:	b22d      	sxth	r5, r5
    3c2a:	f005 fe93 	bl	9954 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3c2e:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3c32:	2296      	movs	r2, #150	; 0x96
    3c34:	b29b      	uxth	r3, r3
    3c36:	fb02 f303 	mul.w	r3, r2, r3
    3c3a:	0c1b      	lsrs	r3, r3, #16
    3c3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3c40:	18e1      	adds	r1, r4, r3
    3c42:	5ce2      	ldrb	r2, [r4, r3]
    3c44:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    3c48:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3c4c:	54e2      	strb	r2, [r4, r3]
    3c4e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    3c52:	784a      	ldrb	r2, [r1, #1]
    3c54:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3c58:	704a      	strb	r2, [r1, #1]
    3c5a:	788b      	ldrb	r3, [r1, #2]
    3c5c:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    3c60:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3c64:	708b      	strb	r3, [r1, #2]
				leds.juggle_index += leds.juggle_diff;
    3c66:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    3c6a:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
				leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3c6e:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3c72:	3601      	adds	r6, #1
				leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				leds.juggle_index += leds.juggle_diff;
    3c74:	441a      	add	r2, r3
				leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3c76:	b2f6      	uxtb	r6, r6
				leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				leds.juggle_index += leds.juggle_diff;
    3c78:	b2d2      	uxtb	r2, r2
				leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3c7a:	42b1      	cmp	r1, r6
				leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				leds.juggle_index += leds.juggle_diff;
    3c7c:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); 
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3c80:	d8a6      	bhi.n	3bd0 <juggle(LEDStruct&)+0x3dc>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    3c82:	b00f      	add	sp, #60	; 0x3c
    3c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3c88:	4620      	mov	r0, r4
    3c8a:	f7ff fd6b 	bl	3764 <juggle_update(LEDStruct&)>
    3c8e:	e5bf      	b.n	3810 <juggle(LEDStruct&)+0x1c>
    3c90:	f8df c110 	ldr.w	ip, [pc, #272]	; 3da4 <juggle(LEDStruct&)+0x5b0>
    3c94:	f8bc 3000 	ldrh.w	r3, [ip]
    3c98:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3c9c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3ca0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3ca4:	3319      	adds	r3, #25
    3ca6:	b29b      	uxth	r3, r3
    3ca8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3cac:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3cb0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3cb4:	3219      	adds	r2, #25
    3cb6:	b292      	uxth	r2, r2
    3cb8:	eb02 2842 	add.w	r8, r2, r2, lsl #9
    3cbc:	eb02 0888 	add.w	r8, r2, r8, lsl #2
    3cc0:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    3cc4:	f108 0819 	add.w	r8, r8, #25
    3cc8:	fa1f f888 	uxth.w	r8, r8
    3ccc:	eb08 2748 	add.w	r7, r8, r8, lsl #9
    3cd0:	eb08 0787 	add.w	r7, r8, r7, lsl #2
    3cd4:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    3cd8:	3719      	adds	r7, #25
    3cda:	b2bf      	uxth	r7, r7
    3cdc:	eb07 2647 	add.w	r6, r7, r7, lsl #9
    3ce0:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    3ce4:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3ce8:	3619      	adds	r6, #25
    3cea:	b2b6      	uxth	r6, r6
    3cec:	eb06 2546 	add.w	r5, r6, r6, lsl #9
    3cf0:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    3cf4:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3cf8:	3519      	adds	r5, #25
    3cfa:	b2ad      	uxth	r5, r5
    3cfc:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    3d00:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
    3d04:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3d08:	f10e 0e19 	add.w	lr, lr, #25
    3d0c:	fa1f fe8e 	uxth.w	lr, lr
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3d10:	eb05 2515 	add.w	r5, r5, r5, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    3d14:	eb0e 214e 	add.w	r1, lr, lr, lsl #9

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3d18:	b2ed      	uxtb	r5, r5
    3d1a:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3d1e:	eb07 2717 	add.w	r7, r7, r7, lsr #8
    3d22:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    3d26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3d2a:	b2ff      	uxtb	r7, r7
    3d2c:	b2f6      	uxtb	r6, r6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    3d2e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3d32:	112d      	asrs	r5, r5, #4
    3d34:	3119      	adds	r1, #25
    3d36:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    3d3a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3d3e:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    3d42:	3520      	adds	r5, #32
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    3d44:	fa1f f981 	uxth.w	r9, r1
    3d48:	b2ed      	uxtb	r5, r5
    3d4a:	123f      	asrs	r7, r7, #8
    3d4c:	11f6      	asrs	r6, r6, #7
    3d4e:	f3ce 1ec0 	ubfx	lr, lr, #7, #1
    3d52:	9502      	str	r5, [sp, #8]
    3d54:	3701      	adds	r7, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3d56:	eb09 2519 	add.w	r5, r9, r9, lsr #8
    3d5a:	360a      	adds	r6, #10
    3d5c:	f10e 0e01 	add.w	lr, lr, #1
    3d60:	eb03 2113 	add.w	r1, r3, r3, lsr #8
    3d64:	eb08 2818 	add.w	r8, r8, r8, lsr #8
    3d68:	b2ff      	uxtb	r7, r7
    3d6a:	b2f6      	uxtb	r6, r6
    3d6c:	fa5f fe8e 	uxtb.w	lr, lr
    3d70:	f3c5 15c0 	ubfx	r5, r5, #7, #1
    3d74:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3d78:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    3d7c:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    3d80:	f3c8 13c0 	ubfx	r3, r8, #7, #1
    3d84:	9700      	str	r7, [sp, #0]
    3d86:	9601      	str	r6, [sp, #4]
    3d88:	9504      	str	r5, [sp, #16]
    3d8a:	f8cd e00c 	str.w	lr, [sp, #12]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    3d8e:	f8ac 9000 	strh.w	r9, [ip]
    3d92:	f7ff fc95 	bl	36c0 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool)>
    3d96:	e536      	b.n	3806 <juggle(LEDStruct&)+0x12>
    3d98:	0000dee8 	.word	0x0000dee8
    3d9c:	0000d718 	.word	0x0000d718
    3da0:	1ffface8 	.word	0x1ffface8
    3da4:	1fff8780 	.word	0x1fff8780

00003da8 <juggle_half(LEDStruct&)>:
	}
}



void juggle_half(LEDStruct& leds) {
    3da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3dac:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	}
}



void juggle_half(LEDStruct& leds) {
    3db0:	b08b      	sub	sp, #44	; 0x2c
    3db2:	4605      	mov	r5, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3db4:	2b00      	cmp	r3, #0
    3db6:	f000 81bf 	beq.w	4138 <juggle_half(LEDStruct&)+0x390>
	if (keyboard_update) { juggle_update(leds); }
    3dba:	4b72      	ldr	r3, [pc, #456]	; (3f84 <juggle_half(LEDStruct&)+0x1dc>)
    3dbc:	781b      	ldrb	r3, [r3, #0]
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	f040 81b6 	bne.w	4130 <juggle_half(LEDStruct&)+0x388>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    3dc4:	f895 3233 	ldrb.w	r3, [r5, #563]	; 0x233
    3dc8:	b113      	cbz	r3, 3dd0 <juggle_half(LEDStruct&)+0x28>
    3dca:	2300      	movs	r3, #0
    3dcc:	f885 322e 	strb.w	r3, [r5, #558]	; 0x22e

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    3dd0:	f895 2231 	ldrb.w	r2, [r5, #561]	; 0x231
    3dd4:	2196      	movs	r1, #150	; 0x96
    3dd6:	4628      	mov	r0, r5
    3dd8:	f005 fd5c 	bl	9894 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	if (leds.this_dir) {
    3ddc:	f895 71c4 	ldrb.w	r7, [r5, #452]	; 0x1c4
    3de0:	2f00      	cmp	r7, #0
    3de2:	f040 80d7 	bne.w	3f94 <juggle_half(LEDStruct&)+0x1ec>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3de6:	f895 122f 	ldrb.w	r1, [r5, #559]	; 0x22f
    3dea:	2900      	cmp	r1, #0
    3dec:	f000 80c7 	beq.w	3f7e <juggle_half(LEDStruct&)+0x1d6>
    3df0:	f895 222e 	ldrb.w	r2, [r5, #558]	; 0x22e
    3df4:	f8df a190 	ldr.w	sl, [pc, #400]	; 3f88 <juggle_half(LEDStruct&)+0x1e0>
    3df8:	f8df 9190 	ldr.w	r9, [pc, #400]	; 3f8c <juggle_half(LEDStruct&)+0x1e4>
    3dfc:	f8df 8190 	ldr.w	r8, [pc, #400]	; 3f90 <juggle_half(LEDStruct&)+0x1e8>
    3e00:	f205 1bc7 	addw	fp, r5, #455	; 0x1c7
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, NUM_LEDS / 2, NUM_LEDS - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3e04:	f895 0230 	ldrb.w	r0, [r5, #560]	; 0x230
    3e08:	b2bc      	uxth	r4, r7
    3e0a:	190b      	adds	r3, r1, r4
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e0c:	f8da 1000 	ldr.w	r1, [sl]
    3e10:	9109      	str	r1, [sp, #36]	; 0x24
    3e12:	4403      	add	r3, r0

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3e14:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3e16:	9909      	ldr	r1, [sp, #36]	; 0x24
    3e18:	bf98      	it	ls
    3e1a:	021b      	lslls	r3, r3, #8
    3e1c:	f44f 708c 	mov.w	r0, #280	; 0x118
    3e20:	bf98      	it	ls
    3e22:	b29b      	uxthls	r3, r3
    3e24:	fb00 f101 	mul.w	r1, r0, r1
    3e28:	fb03 f301 	mul.w	r3, r3, r1
    3e2c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3e30:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3e34:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e36:	044e      	lsls	r6, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3e38:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e3c:	d503      	bpl.n	3e46 <juggle_half(LEDStruct&)+0x9e>
    3e3e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3e42:	3307      	adds	r3, #7
    3e44:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3e46:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e4a:	f3c3 0046 	ubfx	r0, r3, #1, #7
    3e4e:	f819 600e 	ldrb.w	r6, [r9, lr]
    3e52:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    3e56:	fb06 3300 	mla	r3, r6, r0, r3
    3e5a:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3e5c:	0408      	lsls	r0, r1, #16
    3e5e:	bf48      	it	mi
    3e60:	425b      	negmi	r3, r3
    3e62:	f895 1227 	ldrb.w	r1, [r5, #551]	; 0x227
    3e66:	b21e      	sxth	r6, r3
    3e68:	a807      	add	r0, sp, #28
    3e6a:	f895 31c2 	ldrb.w	r3, [r5, #450]	; 0x1c2
    3e6e:	9100      	str	r1, [sp, #0]
    3e70:	4659      	mov	r1, fp
    3e72:	f005 fd6f 	bl	9954 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3e76:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3e7a:	b29b      	uxth	r3, r3
    3e7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3e80:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3e84:	0c1b      	lsrs	r3, r3, #16
    3e86:	334b      	adds	r3, #75	; 0x4b
    3e88:	b29b      	uxth	r3, r3
    3e8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3e8e:	18e9      	adds	r1, r5, r3
    3e90:	5cea      	ldrb	r2, [r5, r3]
    3e92:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3e96:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3e9a:	54ea      	strb	r2, [r5, r3]
    3e9c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3ea0:	784a      	ldrb	r2, [r1, #1]
    3ea2:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3ea6:	704a      	strb	r2, [r1, #1]
    3ea8:	788b      	ldrb	r3, [r1, #2]
    3eaa:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3eae:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3eb2:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3eb4:	f895 3230 	ldrb.w	r3, [r5, #560]	; 0x230
    3eb8:	f895 222f 	ldrb.w	r2, [r5, #559]	; 0x22f
    3ebc:	441c      	add	r4, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ebe:	f8da 3000 	ldr.w	r3, [sl]
    3ec2:	9308      	str	r3, [sp, #32]
    3ec4:	4414      	add	r4, r2
    3ec6:	2cff      	cmp	r4, #255	; 0xff
	return ret;
    3ec8:	9b08      	ldr	r3, [sp, #32]
    3eca:	bf98      	it	ls
    3ecc:	0224      	lslls	r4, r4, #8
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3ece:	f44f 728c 	mov.w	r2, #280	; 0x118
    3ed2:	bf98      	it	ls
    3ed4:	b2a4      	uxthls	r4, r4
    3ed6:	fb02 f303 	mul.w	r3, r2, r3
    3eda:	fb04 f303 	mul.w	r3, r4, r3
    3ede:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3ee2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3ee6:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3ee8:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3eec:	d503      	bpl.n	3ef6 <juggle_half(LEDStruct&)+0x14e>
    3eee:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3ef2:	3207      	adds	r2, #7
    3ef4:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3ef6:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ef8:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3efc:	f819 4000 	ldrb.w	r4, [r9, r0]
    3f00:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    3f04:	fb04 2201 	mla	r2, r4, r1, r2

    if( theta & 0x8000 ) y = -y;
    3f08:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3f0a:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3f0c:	bf48      	it	mi
    3f0e:	4252      	negmi	r2, r2
    3f10:	f895 1227 	ldrb.w	r1, [r5, #551]	; 0x227
    3f14:	f895 31c2 	ldrb.w	r3, [r5, #450]	; 0x1c2
    3f18:	b214      	sxth	r4, r2
    3f1a:	a807      	add	r0, sp, #28
    3f1c:	f895 222e 	ldrb.w	r2, [r5, #558]	; 0x22e
    3f20:	9100      	str	r1, [sp, #0]
    3f22:	4659      	mov	r1, fp
    3f24:	f005 fd16 	bl	9954 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3f28:	f5a4 4300 	sub.w	r3, r4, #32768	; 0x8000
    3f2c:	224c      	movs	r2, #76	; 0x4c
    3f2e:	b29b      	uxth	r3, r3
    3f30:	fb02 f303 	mul.w	r3, r2, r3
    3f34:	0c1b      	lsrs	r3, r3, #16
    3f36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f3a:	18e9      	adds	r1, r5, r3
    3f3c:	5cea      	ldrb	r2, [r5, r3]
    3f3e:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3f42:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3f46:	54ea      	strb	r2, [r5, r3]
    3f48:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3f4c:	784a      	ldrb	r2, [r1, #1]
    3f4e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3f52:	704a      	strb	r2, [r1, #1]
    3f54:	788b      	ldrb	r3, [r1, #2]
    3f56:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3f5a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3f5e:	708b      	strb	r3, [r1, #2]
			leds.juggle_index += leds.juggle_diff;
    3f60:	f895 222e 	ldrb.w	r2, [r5, #558]	; 0x22e
    3f64:	f895 3232 	ldrb.w	r3, [r5, #562]	; 0x232
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f68:	f895 122f 	ldrb.w	r1, [r5, #559]	; 0x22f
    3f6c:	3701      	adds	r7, #1
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, NUM_LEDS / 2, NUM_LEDS - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3f6e:	441a      	add	r2, r3
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f70:	b2ff      	uxtb	r7, r7
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, NUM_LEDS / 2, NUM_LEDS - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3f72:	b2d2      	uxtb	r2, r2
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f74:	42b9      	cmp	r1, r7
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, NUM_LEDS / 2, NUM_LEDS - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3f76:	f885 222e 	strb.w	r2, [r5, #558]	; 0x22e
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f7a:	f63f af43 	bhi.w	3e04 <juggle_half(LEDStruct&)+0x5c>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, NUM_LEDS / 2, NUM_LEDS - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}	
}
    3f7e:	b00b      	add	sp, #44	; 0x2c
    3f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f84:	1fff91e1 	.word	0x1fff91e1
    3f88:	1ffface8 	.word	0x1ffface8
    3f8c:	0000dee8 	.word	0x0000dee8
    3f90:	0000d718 	.word	0x0000d718

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f94:	f895 022f 	ldrb.w	r0, [r5, #559]	; 0x22f
    3f98:	2800      	cmp	r0, #0
    3f9a:	d0f0      	beq.n	3f7e <juggle_half(LEDStruct&)+0x1d6>
    3f9c:	f895 222e 	ldrb.w	r2, [r5, #558]	; 0x22e
    3fa0:	f8df a29c 	ldr.w	sl, [pc, #668]	; 4240 <juggle_half(LEDStruct&)+0x498>
    3fa4:	f8df 929c 	ldr.w	r9, [pc, #668]	; 4244 <juggle_half(LEDStruct&)+0x49c>
    3fa8:	f8df 829c 	ldr.w	r8, [pc, #668]	; 4248 <juggle_half(LEDStruct&)+0x4a0>
    3fac:	f205 1bc7 	addw	fp, r5, #455	; 0x1c7
    3fb0:	2700      	movs	r7, #0
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, NUM_LEDS / 2, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3fb2:	f895 6230 	ldrb.w	r6, [r5, #560]	; 0x230
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3fb6:	f8da 1000 	ldr.w	r1, [sl]
    3fba:	9107      	str	r1, [sp, #28]
    3fbc:	b2bc      	uxth	r4, r7
    3fbe:	1903      	adds	r3, r0, r4
    3fc0:	4433      	add	r3, r6
    3fc2:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3fc4:	9907      	ldr	r1, [sp, #28]
    3fc6:	bf98      	it	ls
    3fc8:	021b      	lslls	r3, r3, #8
    3fca:	f44f 708c 	mov.w	r0, #280	; 0x118
    3fce:	bf98      	it	ls
    3fd0:	b29b      	uxthls	r3, r3
    3fd2:	fb00 f101 	mul.w	r1, r0, r1
    3fd6:	fb03 f101 	mul.w	r1, r3, r1
    3fda:	f3c1 410e 	ubfx	r1, r1, #16, #15
    3fde:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3fe2:	044e      	lsls	r6, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3fe4:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3fe8:	d503      	bpl.n	3ff2 <juggle_half(LEDStruct&)+0x24a>
    3fea:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3fee:	3307      	adds	r3, #7
    3ff0:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3ff2:	0a1e      	lsrs	r6, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ff4:	f3c3 0046 	ubfx	r0, r3, #1, #7
    3ff8:	f819 e006 	ldrb.w	lr, [r9, r6]
    3ffc:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    4000:	fb0e 3300 	mla	r3, lr, r0, r3
    4004:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    4006:	0408      	lsls	r0, r1, #16
    4008:	bf48      	it	mi
    400a:	425b      	negmi	r3, r3
    400c:	f895 1227 	ldrb.w	r1, [r5, #551]	; 0x227
    4010:	b21e      	sxth	r6, r3
    4012:	a809      	add	r0, sp, #36	; 0x24
    4014:	f895 31c2 	ldrb.w	r3, [r5, #450]	; 0x1c2
    4018:	9100      	str	r1, [sp, #0]
    401a:	4659      	mov	r1, fp
    401c:	f005 fc9a 	bl	9954 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4020:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    4024:	b29b      	uxth	r3, r3
    4026:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    402a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    402e:	0c1b      	lsrs	r3, r3, #16
    4030:	334b      	adds	r3, #75	; 0x4b
    4032:	b29b      	uxth	r3, r3
    4034:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4038:	18e9      	adds	r1, r5, r3
    403a:	5cea      	ldrb	r2, [r5, r3]
    403c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    4040:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4044:	54ea      	strb	r2, [r5, r3]
    4046:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    404a:	784a      	ldrb	r2, [r1, #1]
    404c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4050:	704a      	strb	r2, [r1, #1]
    4052:	788b      	ldrb	r3, [r1, #2]
    4054:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    4058:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    405c:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    405e:	f895 2230 	ldrb.w	r2, [r5, #560]	; 0x230
    4062:	f895 322f 	ldrb.w	r3, [r5, #559]	; 0x22f
    4066:	4414      	add	r4, r2
    4068:	441c      	add	r4, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    406a:	f8da 3000 	ldr.w	r3, [sl]
    406e:	9306      	str	r3, [sp, #24]
    4070:	2cff      	cmp	r4, #255	; 0xff
	return ret;
    4072:	9b06      	ldr	r3, [sp, #24]
    4074:	bf98      	it	ls
    4076:	0224      	lslls	r4, r4, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    4078:	f44f 728c 	mov.w	r2, #280	; 0x118
    407c:	bf98      	it	ls
    407e:	b2a4      	uxthls	r4, r4
    4080:	fb02 f303 	mul.w	r3, r2, r3
    4084:	fb04 f303 	mul.w	r3, r4, r3
    4088:	f3c3 430e 	ubfx	r3, r3, #16, #15
    408c:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    4090:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4092:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4094:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4098:	d503      	bpl.n	40a2 <juggle_half(LEDStruct&)+0x2fa>
    409a:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    409e:	3207      	adds	r2, #7
    40a0:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    40a2:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    40a4:	f3c2 0146 	ubfx	r1, r2, #1, #7
    40a8:	f819 4000 	ldrb.w	r4, [r9, r0]
    40ac:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    40b0:	fb04 2201 	mla	r2, r4, r1, r2

    if( theta & 0x8000 ) y = -y;
    40b4:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    40b6:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    40b8:	bf48      	it	mi
    40ba:	4252      	negmi	r2, r2
    40bc:	f895 1227 	ldrb.w	r1, [r5, #551]	; 0x227
    40c0:	f895 31c2 	ldrb.w	r3, [r5, #450]	; 0x1c2
    40c4:	b214      	sxth	r4, r2
    40c6:	a809      	add	r0, sp, #36	; 0x24
    40c8:	f895 222e 	ldrb.w	r2, [r5, #558]	; 0x22e
    40cc:	9100      	str	r1, [sp, #0]
    40ce:	4659      	mov	r1, fp
    40d0:	f005 fc40 	bl	9954 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    40d4:	f5a4 4300 	sub.w	r3, r4, #32768	; 0x8000
    40d8:	224c      	movs	r2, #76	; 0x4c
    40da:	b29b      	uxth	r3, r3
    40dc:	fb02 f303 	mul.w	r3, r2, r3
    40e0:	0c1b      	lsrs	r3, r3, #16
    40e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    40e6:	18e9      	adds	r1, r5, r3
    40e8:	5cea      	ldrb	r2, [r5, r3]
    40ea:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    40ee:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    40f2:	54ea      	strb	r2, [r5, r3]
    40f4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    40f8:	784a      	ldrb	r2, [r1, #1]
    40fa:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    40fe:	704a      	strb	r2, [r1, #1]
    4100:	788b      	ldrb	r3, [r1, #2]
    4102:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    4106:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    410a:	708b      	strb	r3, [r1, #2]
			leds.juggle_index += leds.juggle_diff;
    410c:	f895 222e 	ldrb.w	r2, [r5, #558]	; 0x22e
    4110:	f895 3232 	ldrb.w	r3, [r5, #562]	; 0x232

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4114:	f895 022f 	ldrb.w	r0, [r5, #559]	; 0x22f
    4118:	3701      	adds	r7, #1
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, NUM_LEDS / 2, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    411a:	441a      	add	r2, r3

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    411c:	b2ff      	uxtb	r7, r7
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, NUM_LEDS / 2, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    411e:	b2d2      	uxtb	r2, r2

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4120:	42b8      	cmp	r0, r7
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, NUM_LEDS / 2, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    4122:	f885 222e 	strb.w	r2, [r5, #558]	; 0x22e

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4126:	f63f af44 	bhi.w	3fb2 <juggle_half(LEDStruct&)+0x20a>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, NUM_LEDS / 2, NUM_LEDS - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}	
}
    412a:	b00b      	add	sp, #44	; 0x2c
    412c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    4130:	4628      	mov	r0, r5
    4132:	f7ff fb17 	bl	3764 <juggle_update(LEDStruct&)>
    4136:	e645      	b.n	3dc4 <juggle_half(LEDStruct&)+0x1c>
    4138:	f8df c110 	ldr.w	ip, [pc, #272]	; 424c <juggle_half(LEDStruct&)+0x4a4>
    413c:	f8bc 3000 	ldrh.w	r3, [ip]
    4140:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4144:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4148:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    414c:	3319      	adds	r3, #25
    414e:	b29b      	uxth	r3, r3
    4150:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4154:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4158:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    415c:	3219      	adds	r2, #25
    415e:	b292      	uxth	r2, r2
    4160:	eb02 2842 	add.w	r8, r2, r2, lsl #9
    4164:	eb02 0888 	add.w	r8, r2, r8, lsl #2
    4168:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    416c:	f108 0819 	add.w	r8, r8, #25
    4170:	fa1f f888 	uxth.w	r8, r8
    4174:	eb08 2748 	add.w	r7, r8, r8, lsl #9
    4178:	eb08 0787 	add.w	r7, r8, r7, lsl #2
    417c:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    4180:	3719      	adds	r7, #25
    4182:	b2bf      	uxth	r7, r7
    4184:	eb07 2647 	add.w	r6, r7, r7, lsl #9
    4188:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    418c:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4190:	3619      	adds	r6, #25
    4192:	b2b6      	uxth	r6, r6
    4194:	eb06 2446 	add.w	r4, r6, r6, lsl #9
    4198:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    419c:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    41a0:	3419      	adds	r4, #25
    41a2:	b2a4      	uxth	r4, r4
    41a4:	eb04 2e44 	add.w	lr, r4, r4, lsl #9
    41a8:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
    41ac:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    41b0:	f10e 0e19 	add.w	lr, lr, #25
    41b4:	fa1f fe8e 	uxth.w	lr, lr
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    41b8:	eb04 2414 	add.w	r4, r4, r4, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    41bc:	eb0e 214e 	add.w	r1, lr, lr, lsl #9



void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    41c0:	b2e4      	uxtb	r4, r4
    41c2:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    41c6:	eb07 2717 	add.w	r7, r7, r7, lsr #8
    41ca:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    41ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    41d2:	b2ff      	uxtb	r7, r7
    41d4:	b2f6      	uxtb	r6, r6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    41d6:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    41da:	1124      	asrs	r4, r4, #4
    41dc:	3119      	adds	r1, #25
    41de:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    41e2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    41e6:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    41ea:	3420      	adds	r4, #32
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    41ec:	fa1f f981 	uxth.w	r9, r1
    41f0:	b2e4      	uxtb	r4, r4
    41f2:	123f      	asrs	r7, r7, #8
    41f4:	11f6      	asrs	r6, r6, #7
    41f6:	f3ce 1ec0 	ubfx	lr, lr, #7, #1
    41fa:	9402      	str	r4, [sp, #8]
    41fc:	3701      	adds	r7, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    41fe:	eb09 2419 	add.w	r4, r9, r9, lsr #8
    4202:	360a      	adds	r6, #10
    4204:	f10e 0e01 	add.w	lr, lr, #1
    4208:	eb03 2113 	add.w	r1, r3, r3, lsr #8
    420c:	eb08 2818 	add.w	r8, r8, r8, lsr #8
    4210:	b2ff      	uxtb	r7, r7
    4212:	b2f6      	uxtb	r6, r6
    4214:	fa5f fe8e 	uxtb.w	lr, lr
    4218:	f3c4 14c0 	ubfx	r4, r4, #7, #1
    421c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    4220:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    4224:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    4228:	f3c8 13c0 	ubfx	r3, r8, #7, #1
    422c:	9700      	str	r7, [sp, #0]
    422e:	9601      	str	r6, [sp, #4]
    4230:	9404      	str	r4, [sp, #16]
    4232:	f8cd e00c 	str.w	lr, [sp, #12]
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    4236:	f8ac 9000 	strh.w	r9, [ip]
    423a:	f7ff fa41 	bl	36c0 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool)>
    423e:	e5bc      	b.n	3dba <juggle_half(LEDStruct&)+0x12>
    4240:	1ffface8 	.word	0x1ffface8
    4244:	0000dee8 	.word	0x0000dee8
    4248:	0000d718 	.word	0x0000d718
    424c:	1fff8780 	.word	0x1fff8780

00004250 <multi_juggle(LEDStruct&)>:
}


// TODO: halfdown/halfup, keep beat > 30, index reset off, diff low

void multi_juggle(LEDStruct& leds) {
    4250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    4254:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
}


// TODO: halfdown/halfup, keep beat > 30, index reset off, diff low

void multi_juggle(LEDStruct& leds) {
    4258:	b08d      	sub	sp, #52	; 0x34
    425a:	4605      	mov	r5, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    425c:	2b00      	cmp	r3, #0
    425e:	f000 809f 	beq.w	43a0 <multi_juggle(LEDStruct&)+0x150>
	if (keyboard_update) { juggle_update(leds); }
    4262:	4ba3      	ldr	r3, [pc, #652]	; (44f0 <multi_juggle(LEDStruct&)+0x2a0>)
    4264:	781b      	ldrb	r3, [r3, #0]
    4266:	2b00      	cmp	r3, #0
    4268:	f040 8122 	bne.w	44b0 <multi_juggle(LEDStruct&)+0x260>

	//if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    426c:	f895 2231 	ldrb.w	r2, [r5, #561]	; 0x231
    4270:	4fa0      	ldr	r7, [pc, #640]	; (44f4 <multi_juggle(LEDStruct&)+0x2a4>)
    4272:	2196      	movs	r1, #150	; 0x96
    4274:	4628      	mov	r0, r5
    4276:	f005 fb0d 	bl	9894 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    427a:	f895 322f 	ldrb.w	r3, [r5, #559]	; 0x22f
    427e:	2b00      	cmp	r3, #0
    4280:	d074      	beq.n	436c <multi_juggle(LEDStruct&)+0x11c>
    4282:	f8df b280 	ldr.w	fp, [pc, #640]	; 4504 <multi_juggle(LEDStruct&)+0x2b4>
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4286:	9707      	str	r7, [sp, #28]
    4288:	f205 19c7 	addw	r9, r5, #455	; 0x1c7
    428c:	2200      	movs	r2, #0
		leds.led_data[beatsin16(leds.juggle_beat + i, i * (NUM_LEDS / leds.juggle_numdots), (i + 1) * (NUM_LEDS / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index + leds.juggle_diff * i, leds.brightness, leds.current_blending);
    428e:	f04f 0896 	mov.w	r8, #150	; 0x96
    4292:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    4296:	b290      	uxth	r0, r2
    4298:	1c54      	adds	r4, r2, #1
    429a:	fb98 f3f3 	sdiv	r3, r8, r3
    429e:	fb10 f603 	smulbb	r6, r0, r3
    42a2:	fb14 f303 	smulbb	r3, r4, r3
    42a6:	b299      	uxth	r1, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    42a8:	9b07      	ldr	r3, [sp, #28]
    42aa:	f895 e230 	ldrb.w	lr, [r5, #560]	; 0x230
    42ae:	681b      	ldr	r3, [r3, #0]
    42b0:	930b      	str	r3, [sp, #44]	; 0x2c
    42b2:	4470      	add	r0, lr

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    42b4:	28ff      	cmp	r0, #255	; 0xff
	return ret;
    42b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    42b8:	bf9c      	itt	ls
    42ba:	0200      	lslls	r0, r0, #8
    42bc:	b280      	uxthls	r0, r0
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    42be:	fb0a fe03 	mul.w	lr, sl, r3
    42c2:	fb00 fe0e 	mul.w	lr, r0, lr
    42c6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    42ca:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
    42ce:	b2b6      	uxth	r6, r6
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    42d0:	f3ce 00ca 	ubfx	r0, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    42d4:	d003      	beq.n	42de <multi_juggle(LEDStruct&)+0x8e>
    42d6:	f5c0 60ff 	rsb	r0, r0, #2040	; 0x7f8
    42da:	3007      	adds	r0, #7
    42dc:	b280      	uxth	r0, r0

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    42de:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    42e2:	4f85      	ldr	r7, [pc, #532]	; (44f8 <multi_juggle(LEDStruct&)+0x2a8>)
    42e4:	f81b 300c 	ldrb.w	r3, [fp, ip]
    42e8:	f837 c01c 	ldrh.w	ip, [r7, ip, lsl #1]
    42ec:	f3c0 0046 	ubfx	r0, r0, #1, #7
    42f0:	fb03 c000 	mla	r0, r3, r0, ip

    if( theta & 0x8000 ) y = -y;
    42f4:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    42f8:	b283      	uxth	r3, r0

    if( theta & 0x8000 ) y = -y;
    42fa:	bf18      	it	ne
    42fc:	425b      	negne	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    42fe:	43f0      	mvns	r0, r6
    4300:	b21b      	sxth	r3, r3
    4302:	4401      	add	r1, r0
    4304:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    4308:	f895 0232 	ldrb.w	r0, [r5, #562]	; 0x232
    430c:	f895 e22e 	ldrb.w	lr, [r5, #558]	; 0x22e
    4310:	b29b      	uxth	r3, r3
    4312:	b289      	uxth	r1, r1
    4314:	fb01 3103 	mla	r1, r1, r3, r3
    4318:	fb00 e202 	mla	r2, r0, r2, lr
    431c:	eb06 4611 	add.w	r6, r6, r1, lsr #16
    4320:	f895 1227 	ldrb.w	r1, [r5, #551]	; 0x227
    4324:	f895 31c2 	ldrb.w	r3, [r5, #450]	; 0x1c2
    4328:	9100      	str	r1, [sp, #0]
    432a:	a80a      	add	r0, sp, #40	; 0x28
    432c:	4649      	mov	r1, r9
    432e:	b2b6      	uxth	r6, r6
    4330:	b2d2      	uxtb	r2, r2
    4332:	f005 fb0f 	bl	9954 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4336:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    433a:	18e9      	adds	r1, r5, r3
    433c:	5cea      	ldrb	r2, [r5, r3]
    433e:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    4342:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4346:	54ea      	strb	r2, [r5, r3]
    4348:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    434c:	784a      	ldrb	r2, [r1, #1]
    434e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4352:	704a      	strb	r2, [r1, #1]
    4354:	788b      	ldrb	r3, [r1, #2]
    4356:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
    435a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    435e:	708b      	strb	r3, [r1, #2]

	//if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4360:	f895 322f 	ldrb.w	r3, [r5, #559]	; 0x22f
    4364:	b2e2      	uxtb	r2, r4
    4366:	4293      	cmp	r3, r2
    4368:	d895      	bhi.n	4296 <multi_juggle(LEDStruct&)+0x46>
    436a:	9f07      	ldr	r7, [sp, #28]
		leds.led_data[beatsin16(leds.juggle_beat + i, i * (NUM_LEDS / leds.juggle_numdots), (i + 1) * (NUM_LEDS / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index + leds.juggle_diff * i, leds.brightness, leds.current_blending);
		//leds.juggle_index += leds.juggle_diff;
	}
	EVERY_N_MILLIS(500) { leds.juggle_index++; }
    436c:	4c63      	ldr	r4, [pc, #396]	; (44fc <multi_juggle(LEDStruct&)+0x2ac>)
    436e:	6823      	ldr	r3, [r4, #0]
    4370:	07db      	lsls	r3, r3, #31
    4372:	f140 80a1 	bpl.w	44b8 <multi_juggle(LEDStruct&)+0x268>
    4376:	4e62      	ldr	r6, [pc, #392]	; (4500 <multi_juggle(LEDStruct&)+0x2b0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4378:	683b      	ldr	r3, [r7, #0]
    437a:	930a      	str	r3, [sp, #40]	; 0x28
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    437c:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    4380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4382:	1a5b      	subs	r3, r3, r1
    4384:	429a      	cmp	r2, r3
    4386:	d808      	bhi.n	439a <multi_juggle(LEDStruct&)+0x14a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4388:	683a      	ldr	r2, [r7, #0]
    438a:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
    438e:	9209      	str	r2, [sp, #36]	; 0x24
	return ret;
    4390:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4392:	6032      	str	r2, [r6, #0]
    4394:	3301      	adds	r3, #1
    4396:	f885 322e 	strb.w	r3, [r5, #558]	; 0x22e
}
    439a:	b00d      	add	sp, #52	; 0x34
    439c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    43a0:	f8df c164 	ldr.w	ip, [pc, #356]	; 4508 <multi_juggle(LEDStruct&)+0x2b8>
    43a4:	f8bc 3000 	ldrh.w	r3, [ip]
    43a8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    43ac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    43b0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    43b4:	3319      	adds	r3, #25
    43b6:	b29b      	uxth	r3, r3
    43b8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    43bc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    43c0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    43c4:	3219      	adds	r2, #25
    43c6:	b292      	uxth	r2, r2
    43c8:	eb02 2842 	add.w	r8, r2, r2, lsl #9
    43cc:	eb02 0888 	add.w	r8, r2, r8, lsl #2
    43d0:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    43d4:	f108 0819 	add.w	r8, r8, #25
    43d8:	fa1f f888 	uxth.w	r8, r8
    43dc:	eb08 2748 	add.w	r7, r8, r8, lsl #9
    43e0:	eb08 0787 	add.w	r7, r8, r7, lsl #2
    43e4:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    43e8:	3719      	adds	r7, #25
    43ea:	b2bf      	uxth	r7, r7
    43ec:	eb07 2647 	add.w	r6, r7, r7, lsl #9
    43f0:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    43f4:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    43f8:	3619      	adds	r6, #25
    43fa:	b2b6      	uxth	r6, r6
    43fc:	eb06 2446 	add.w	r4, r6, r6, lsl #9
    4400:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    4404:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    4408:	3419      	adds	r4, #25
    440a:	b2a4      	uxth	r4, r4
    440c:	eb04 2e44 	add.w	lr, r4, r4, lsl #9
    4410:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
    4414:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4418:	f10e 0e19 	add.w	lr, lr, #25
    441c:	fa1f fe8e 	uxth.w	lr, lr
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4420:	eb04 2414 	add.w	r4, r4, r4, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    4424:	eb0e 214e 	add.w	r1, lr, lr, lsl #9

// TODO: halfdown/halfup, keep beat > 30, index reset off, diff low

void multi_juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    4428:	b2e4      	uxtb	r4, r4
    442a:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    442e:	eb07 2717 	add.w	r7, r7, r7, lsr #8
    4432:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    4436:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    443a:	b2ff      	uxtb	r7, r7
    443c:	b2f6      	uxtb	r6, r6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    443e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4442:	1124      	asrs	r4, r4, #4
    4444:	3119      	adds	r1, #25
    4446:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    444a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    444e:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    4452:	3420      	adds	r4, #32
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    4454:	fa1f f981 	uxth.w	r9, r1
    4458:	b2e4      	uxtb	r4, r4
    445a:	123f      	asrs	r7, r7, #8
    445c:	11f6      	asrs	r6, r6, #7
    445e:	f3ce 1ec0 	ubfx	lr, lr, #7, #1
    4462:	9402      	str	r4, [sp, #8]
    4464:	3701      	adds	r7, #1
    4466:	360a      	adds	r6, #10
    4468:	f10e 0e01 	add.w	lr, lr, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    446c:	eb09 2419 	add.w	r4, r9, r9, lsr #8
    4470:	eb03 2113 	add.w	r1, r3, r3, lsr #8
    4474:	fa5f fe8e 	uxtb.w	lr, lr
    4478:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    447c:	eb08 2818 	add.w	r8, r8, r8, lsr #8
    4480:	b2ff      	uxtb	r7, r7
    4482:	b2f6      	uxtb	r6, r6
    4484:	f3c4 14c0 	ubfx	r4, r4, #7, #1
    4488:	f3c8 13c0 	ubfx	r3, r8, #7, #1
    448c:	9700      	str	r7, [sp, #0]
    448e:	9601      	str	r6, [sp, #4]
    4490:	9404      	str	r4, [sp, #16]
    4492:	f8cd e00c 	str.w	lr, [sp, #12]
    4496:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    449a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    449e:	f8ac 9000 	strh.w	r9, [ip]
    44a2:	f7ff f90d 	bl	36c0 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool)>
	if (keyboard_update) { juggle_update(leds); }
    44a6:	4b12      	ldr	r3, [pc, #72]	; (44f0 <multi_juggle(LEDStruct&)+0x2a0>)
    44a8:	781b      	ldrb	r3, [r3, #0]
    44aa:	2b00      	cmp	r3, #0
    44ac:	f43f aede 	beq.w	426c <multi_juggle(LEDStruct&)+0x1c>
    44b0:	4628      	mov	r0, r5
    44b2:	f7ff f957 	bl	3764 <juggle_update(LEDStruct&)>
    44b6:	e6d9      	b.n	426c <multi_juggle(LEDStruct&)+0x1c>

	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
		leds.led_data[beatsin16(leds.juggle_beat + i, i * (NUM_LEDS / leds.juggle_numdots), (i + 1) * (NUM_LEDS / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index + leds.juggle_diff * i, leds.brightness, leds.current_blending);
		//leds.juggle_index += leds.juggle_diff;
	}
	EVERY_N_MILLIS(500) { leds.juggle_index++; }
    44b8:	4620      	mov	r0, r4
    44ba:	f006 f84d 	bl	a558 <__cxa_guard_acquire>
    44be:	b950      	cbnz	r0, 44d6 <multi_juggle(LEDStruct&)+0x286>
    44c0:	4e0f      	ldr	r6, [pc, #60]	; (4500 <multi_juggle(LEDStruct&)+0x2b0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    44c2:	683b      	ldr	r3, [r7, #0]
    44c4:	930a      	str	r3, [sp, #40]	; 0x28
    44c6:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    44ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    44cc:	1a5b      	subs	r3, r3, r1
    44ce:	4293      	cmp	r3, r2
    44d0:	f4ff af63 	bcc.w	439a <multi_juggle(LEDStruct&)+0x14a>
    44d4:	e758      	b.n	4388 <multi_juggle(LEDStruct&)+0x138>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    44d6:	683b      	ldr	r3, [r7, #0]
    44d8:	4e09      	ldr	r6, [pc, #36]	; (4500 <multi_juggle(LEDStruct&)+0x2b0>)
    44da:	9308      	str	r3, [sp, #32]
	return ret;
    44dc:	9b08      	ldr	r3, [sp, #32]
    44de:	6033      	str	r3, [r6, #0]
    44e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    44e4:	4620      	mov	r0, r4
    44e6:	6073      	str	r3, [r6, #4]
    44e8:	f006 f83c 	bl	a564 <__cxa_guard_release>
    44ec:	e7e9      	b.n	44c2 <multi_juggle(LEDStruct&)+0x272>
    44ee:	bf00      	nop
    44f0:	1fff91e1 	.word	0x1fff91e1
    44f4:	1ffface8 	.word	0x1ffface8
    44f8:	0000d718 	.word	0x0000d718
    44fc:	1fff9a20 	.word	0x1fff9a20
    4500:	1fff910c 	.word	0x1fff910c
    4504:	0000dee8 	.word	0x0000dee8
    4508:	1fff8780 	.word	0x1fff8780

0000450c <rainbow_update(LEDStruct&)>:
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    450c:	4b13      	ldr	r3, [pc, #76]	; (455c <rainbow_update(LEDStruct&)+0x50>)
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    450e:	4a14      	ldr	r2, [pc, #80]	; (4560 <rainbow_update(LEDStruct&)+0x54>)
	switch (update_var) {
    4510:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    4512:	2100      	movs	r1, #0
	switch (update_var) {
    4514:	3b01      	subs	r3, #1
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    4516:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4518:	2b03      	cmp	r3, #3
    451a:	d807      	bhi.n	452c <rainbow_update(LEDStruct&)+0x20>
    451c:	e8df f003 	tbb	[pc, r3]
    4520:	080e0214 	.word	0x080e0214
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
    4524:	4b0f      	ldr	r3, [pc, #60]	; (4564 <rainbow_update(LEDStruct&)+0x58>)
    4526:	881b      	ldrh	r3, [r3, #0]
    4528:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    452c:	f7fe baa6 	b.w	2a7c <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
    4530:	4b0c      	ldr	r3, [pc, #48]	; (4564 <rainbow_update(LEDStruct&)+0x58>)
    4532:	881b      	ldrh	r3, [r3, #0]
    4534:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
		default:	break;
	}
	LEDDebug(leds);
    4538:	f7fe baa0 	b.w	2a7c <LEDDebug(LEDStruct&)>
void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
    453c:	4b09      	ldr	r3, [pc, #36]	; (4564 <rainbow_update(LEDStruct&)+0x58>)
    453e:	881b      	ldrh	r3, [r3, #0]
    4540:	f880 3277 	strb.w	r3, [r0, #631]	; 0x277
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4544:	f7fe ba9a 	b.w	2a7c <LEDDebug(LEDStruct&)>
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
    4548:	4b06      	ldr	r3, [pc, #24]	; (4564 <rainbow_update(LEDStruct&)+0x58>)
    454a:	881b      	ldrh	r3, [r3, #0]
    454c:	3300      	adds	r3, #0
    454e:	bf18      	it	ne
    4550:	2301      	movne	r3, #1
    4552:	f880 327a 	strb.w	r3, [r0, #634]	; 0x27a
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4556:	f7fe ba91 	b.w	2a7c <LEDDebug(LEDStruct&)>
    455a:	bf00      	nop
    455c:	1fff9a24 	.word	0x1fff9a24
    4560:	1fff91e1 	.word	0x1fff91e1
    4564:	1fff90e2 	.word	0x1fff90e2

00004568 <rainbow_march(LEDStruct&)>:
}



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    4568:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	LEDDebug(leds);
}



void rainbow_march(LEDStruct& leds) {
    456c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4570:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    4572:	2b00      	cmp	r3, #0
    4574:	d153      	bne.n	461e <rainbow_march(LEDStruct&)+0xb6>
    4576:	484d      	ldr	r0, [pc, #308]	; (46ac <rainbow_march(LEDStruct&)+0x144>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    4578:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    457c:	8803      	ldrh	r3, [r0, #0]
    457e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4582:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4586:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    458a:	3319      	adds	r3, #25
    458c:	b29b      	uxth	r3, r3
    458e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4592:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4596:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    459a:	3219      	adds	r2, #25
    459c:	b292      	uxth	r2, r2
    459e:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    45a2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    45a6:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    45aa:	3119      	adds	r1, #25
    45ac:	eb01 2541 	add.w	r5, r1, r1, lsl #9
    45b0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
    45b4:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    45b8:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    45bc:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    45be:	3119      	adds	r1, #25
    45c0:	b289      	uxth	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    45c2:	eb03 06c3 	add.w	r6, r3, r3, lsl #3
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    45c6:	eb01 2511 	add.w	r5, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    45ca:	eb03 0346 	add.w	r3, r3, r6, lsl #1
    45ce:	b2ed      	uxtb	r5, r5
    45d0:	121b      	asrs	r3, r3, #8
    45d2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    45d6:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    45d8:	2601      	movs	r6, #1
    45da:	11ed      	asrs	r5, r5, #7
    45dc:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    45de:	8001      	strh	r1, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    45e0:	3503      	adds	r5, #3
	leds.mode_type			= RAINBOW_MARCH;
    45e2:	2707      	movs	r7, #7
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    45e4:	200f      	movs	r0, #15

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    45e6:	42b3      	cmp	r3, r6
    45e8:	b2e9      	uxtb	r1, r5
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    45ea:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.rainbow_split  = rs;
    45ee:	f884 627a 	strb.w	r6, [r4, #634]	; 0x27a
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    45f2:	f884 722c 	strb.w	r7, [r4, #556]	; 0x22c
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    45f6:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    45fa:	d054      	beq.n	46a6 <rainbow_march(LEDStruct&)+0x13e>
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    45fc:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4600:	b2d2      	uxtb	r2, r2
    4602:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4606:	1212      	asrs	r2, r2, #8
    4608:	4432      	add	r2, r6
    460a:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    460c:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
    leds.rainbow_rot    = rr;
    4610:	f884 2277 	strb.w	r2, [r4, #631]	; 0x277
	
	leds.juggle_beat	= jb;
    4614:	f884 1230 	strb.w	r1, [r4, #560]	; 0x230
    if (DEBUG) { LEDDebug(leds); }
    4618:	4620      	mov	r0, r4
    461a:	f7fe fa2f 	bl	2a7c <LEDDebug(LEDStruct&)>



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    461e:	4b24      	ldr	r3, [pc, #144]	; (46b0 <rainbow_march(LEDStruct&)+0x148>)
    4620:	781b      	ldrb	r3, [r3, #0]
    4622:	2b00      	cmp	r3, #0
    4624:	d13b      	bne.n	469e <rainbow_march(LEDStruct&)+0x136>

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4626:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    462a:	bb23      	cbnz	r3, 4676 <rainbow_march(LEDStruct&)+0x10e>
    462c:	f894 2279 	ldrb.w	r2, [r4, #633]	; 0x279
    4630:	f894 3277 	ldrb.w	r3, [r4, #631]	; 0x277
    4634:	441a      	add	r2, r3

	if (!leds.rainbow_split) {
    4636:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    463a:	b2d2      	uxtb	r2, r2
    463c:	f884 2279 	strb.w	r2, [r4, #633]	; 0x279

	if (!leds.rainbow_split) {
    4640:	b32b      	cbz	r3, 468e <rainbow_march(LEDStruct&)+0x126>
		fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); 
	}
	else {
		fill_rainbow(leds.led_data, NUM_LEDS / 2, leds.rainbow_index, leds.rainbow_diff);
    4642:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    4646:	214b      	movs	r1, #75	; 0x4b
    4648:	4620      	mov	r0, r4
    464a:	f005 f871 	bl	9730 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    464e:	4620      	mov	r0, r4
    4650:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4654:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4656:	7802      	ldrb	r2, [r0, #0]
    4658:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    465c:	7842      	ldrb	r2, [r0, #1]
    465e:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4662:	7882      	ldrb	r2, [r0, #2]
    4664:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    4668:	3003      	adds	r0, #3
		for (int i = 0; i < NUM_LEDS / 2; i++) { leds.led_data[NUM_LEDS - 1 - i] = leds.led_data[i]; }
    466a:	4288      	cmp	r0, r1
    466c:	f1a3 0303 	sub.w	r3, r3, #3
    4670:	d1f1      	bne.n	4656 <rainbow_march(LEDStruct&)+0xee>
	}
}
    4672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4676:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    467a:	f894 2277 	ldrb.w	r2, [r4, #631]	; 0x277
    467e:	1a9a      	subs	r2, r3, r2

	if (!leds.rainbow_split) {
    4680:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4684:	b2d2      	uxtb	r2, r2
    4686:	f884 2279 	strb.w	r2, [r4, #633]	; 0x279

	if (!leds.rainbow_split) {
    468a:	2b00      	cmp	r3, #0
    468c:	d1d9      	bne.n	4642 <rainbow_march(LEDStruct&)+0xda>
		fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); 
    468e:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    4692:	4620      	mov	r0, r4
    4694:	2196      	movs	r1, #150	; 0x96
	}
	else {
		fill_rainbow(leds.led_data, NUM_LEDS / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < NUM_LEDS / 2; i++) { leds.led_data[NUM_LEDS - 1 - i] = leds.led_data[i]; }
	}
}
    4696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	if (!leds.rainbow_split) {
		fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); 
    469a:	f005 b849 	b.w	9730 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    469e:	4620      	mov	r0, r4
    46a0:	f7ff ff34 	bl	450c <rainbow_update(LEDStruct&)>
    46a4:	e7bf      	b.n	4626 <rainbow_march(LEDStruct&)+0xbe>
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    46a6:	461a      	mov	r2, r3
    46a8:	e7b0      	b.n	460c <rainbow_march(LEDStruct&)+0xa4>
    46aa:	bf00      	nop
    46ac:	1fff8780 	.word	0x1fff8780
    46b0:	1fff91e1 	.word	0x1fff91e1

000046b4 <rainbow_march_beat(LEDStruct&)>:
		fill_rainbow(leds.led_data, NUM_LEDS / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < NUM_LEDS / 2; i++) { leds.led_data[NUM_LEDS - 1 - i] = leds.led_data[i]; }
	}
}

void rainbow_march_beat(LEDStruct& leds) {
    46b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    46b6:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		fill_rainbow(leds.led_data, NUM_LEDS / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < NUM_LEDS / 2; i++) { leds.led_data[NUM_LEDS - 1 - i] = leds.led_data[i]; }
	}
}

void rainbow_march_beat(LEDStruct& leds) {
    46ba:	b083      	sub	sp, #12
    46bc:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    46be:	2b00      	cmp	r3, #0
    46c0:	d154      	bne.n	476c <rainbow_march_beat(LEDStruct&)+0xb8>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    46c2:	4881      	ldr	r0, [pc, #516]	; (48c8 <rainbow_march_beat(LEDStruct&)+0x214>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    46c4:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    46c8:	8803      	ldrh	r3, [r0, #0]
    46ca:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    46ce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    46d2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    46d6:	3319      	adds	r3, #25
    46d8:	b29b      	uxth	r3, r3
    46da:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    46de:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    46e2:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    46e6:	3219      	adds	r2, #25
    46e8:	b292      	uxth	r2, r2
    46ea:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    46ee:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    46f2:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    46f6:	3119      	adds	r1, #25
    46f8:	eb01 2541 	add.w	r5, r1, r1, lsl #9
    46fc:	eb01 0185 	add.w	r1, r1, r5, lsl #2
    4700:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4704:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4708:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    470a:	3119      	adds	r1, #25
    470c:	b289      	uxth	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    470e:	eb03 06c3 	add.w	r6, r3, r3, lsl #3
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4712:	eb01 2511 	add.w	r5, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4716:	eb03 0346 	add.w	r3, r3, r6, lsl #1
    471a:	b2ed      	uxtb	r5, r5
    471c:	121b      	asrs	r3, r3, #8
    471e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4722:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    4724:	2601      	movs	r6, #1
    4726:	11ed      	asrs	r5, r5, #7
    4728:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    472a:	8001      	strh	r1, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    472c:	3503      	adds	r5, #3
	leds.mode_type			= RAINBOW_MARCH;
    472e:	2707      	movs	r7, #7
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    4730:	200f      	movs	r0, #15

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4732:	42b3      	cmp	r3, r6
    4734:	b2e9      	uxtb	r1, r5
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    4736:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.rainbow_split  = rs;
    473a:	f884 627a 	strb.w	r6, [r4, #634]	; 0x27a
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    473e:	f884 722c 	strb.w	r7, [r4, #556]	; 0x22c
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    4742:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4746:	f000 80bc 	beq.w	48c2 <rainbow_march_beat(LEDStruct&)+0x20e>
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    474a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    474e:	b2d2      	uxtb	r2, r2
    4750:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4754:	1212      	asrs	r2, r2, #8
    4756:	4432      	add	r2, r6
    4758:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    475a:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
    leds.rainbow_rot    = rr;
    475e:	f884 2277 	strb.w	r2, [r4, #631]	; 0x277
	
	leds.juggle_beat	= jb;
    4762:	f884 1230 	strb.w	r1, [r4, #560]	; 0x230
    if (DEBUG) { LEDDebug(leds); }
    4766:	4620      	mov	r0, r4
    4768:	f7fe f988 	bl	2a7c <LEDDebug(LEDStruct&)>
	}
}

void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    476c:	4b57      	ldr	r3, [pc, #348]	; (48cc <rainbow_march_beat(LEDStruct&)+0x218>)
    476e:	781b      	ldrb	r3, [r3, #0]
    4770:	2b00      	cmp	r3, #0
    4772:	f040 80a2 	bne.w	48ba <rainbow_march_beat(LEDStruct&)+0x206>

	if (leds.this_dir == 0) {
    4776:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    477a:	4a55      	ldr	r2, [pc, #340]	; (48d0 <rainbow_march_beat(LEDStruct&)+0x21c>)
    477c:	2b00      	cmp	r3, #0
    477e:	d13d      	bne.n	47fc <rainbow_march_beat(LEDStruct&)+0x148>
    4780:	6812      	ldr	r2, [r2, #0]
    4782:	9200      	str	r2, [sp, #0]
	return ret;
    4784:	9900      	ldr	r1, [sp, #0]
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
    4786:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    478a:	f894 5277 	ldrb.w	r5, [r4, #631]	; 0x277
    478e:	f44f 728c 	mov.w	r2, #280	; 0x118
    4792:	fb02 f201 	mul.w	r2, r2, r1
    4796:	021b      	lsls	r3, r3, #8
    4798:	fb03 f302 	mul.w	r3, r3, r2
    479c:	0e1b      	lsrs	r3, r3, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    479e:	b2d9      	uxtb	r1, r3
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    47a0:	0648      	lsls	r0, r1, #25
    47a2:	f100 8082 	bmi.w	48aa <rainbow_march_beat(LEDStruct&)+0x1f6>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    47a6:	f001 023f 	and.w	r2, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    47aa:	f001 000f 	and.w	r0, r1, #15
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    47ae:	4949      	ldr	r1, [pc, #292]	; (48d4 <rainbow_march_beat(LEDStruct&)+0x220>)
    47b0:	1112      	asrs	r2, r2, #4
    47b2:	0052      	lsls	r2, r2, #1
    47b4:	188e      	adds	r6, r1, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    47b6:	5c89      	ldrb	r1, [r1, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    47b8:	7872      	ldrb	r2, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    47ba:	fb12 f200 	smulbb	r2, r2, r0
    47be:	eb01 1222 	add.w	r2, r1, r2, asr #4
    47c2:	b2d2      	uxtb	r2, r2
    if( theta & 0x80 ) y = -y;
    47c4:	0619      	lsls	r1, r3, #24
    47c6:	bf48      	it	mi
    47c8:	4252      	negmi	r2, r2
    47ca:	b252      	sxtb	r2, r2
    47cc:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279

    y += 128;
    47d0:	3a80      	subs	r2, #128	; 0x80
    47d2:	b2d2      	uxtb	r2, r2
    47d4:	442b      	add	r3, r5
    47d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    47da:	eb03 12e2 	add.w	r2, r3, r2, asr #7
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
    47de:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
    47e2:	b2d2      	uxtb	r2, r2
    47e4:	f884 2279 	strb.w	r2, [r4, #633]	; 0x279
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
    47e8:	2b00      	cmp	r3, #0
    47ea:	d13c      	bne.n	4866 <rainbow_march_beat(LEDStruct&)+0x1b2>
		fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff);
    47ec:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    47f0:	4620      	mov	r0, r4
    47f2:	2196      	movs	r1, #150	; 0x96
    47f4:	f004 ff9c 	bl	9730 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
	}
	else {
		fill_rainbow(leds.led_data, NUM_LEDS / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < NUM_LEDS / 2; i++) { leds.led_data[NUM_LEDS - 1 - i] = leds.led_data[i]; }
	}
}
    47f8:	b003      	add	sp, #12
    47fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    47fc:	6812      	ldr	r2, [r2, #0]
    47fe:	9201      	str	r2, [sp, #4]
	return ret;
    4800:	9901      	ldr	r1, [sp, #4]

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
    4802:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    4806:	f894 5277 	ldrb.w	r5, [r4, #631]	; 0x277
    480a:	f44f 728c 	mov.w	r2, #280	; 0x118
    480e:	fb02 f201 	mul.w	r2, r2, r1
    4812:	021b      	lsls	r3, r3, #8
    4814:	fb03 f302 	mul.w	r3, r3, r2
    4818:	0e1b      	lsrs	r3, r3, #24
    481a:	b2d9      	uxtb	r1, r3
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    481c:	064a      	lsls	r2, r1, #25
    481e:	d43c      	bmi.n	489a <rainbow_march_beat(LEDStruct&)+0x1e6>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    4820:	f001 023f 	and.w	r2, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    4824:	f001 000f 	and.w	r0, r1, #15
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    4828:	492a      	ldr	r1, [pc, #168]	; (48d4 <rainbow_march_beat(LEDStruct&)+0x220>)
    482a:	1112      	asrs	r2, r2, #4
    482c:	0052      	lsls	r2, r2, #1
    482e:	188e      	adds	r6, r1, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    4830:	5c89      	ldrb	r1, [r1, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    4832:	7872      	ldrb	r2, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    4834:	fb12 f200 	smulbb	r2, r2, r0
    4838:	eb01 1222 	add.w	r2, r1, r2, asr #4
    483c:	b2d2      	uxtb	r2, r2
    if( theta & 0x80 ) y = -y;
    483e:	061b      	lsls	r3, r3, #24
    4840:	bf48      	it	mi
    4842:	4252      	negmi	r2, r2
    4844:	b252      	sxtb	r2, r2
    4846:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279

    y += 128;
    484a:	3a80      	subs	r2, #128	; 0x80
    484c:	b2d2      	uxtb	r2, r2
    484e:	1b5b      	subs	r3, r3, r5
    4850:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4854:	eba3 12e2 	sub.w	r2, r3, r2, asr #7
	}

	if (!leds.rainbow_split) {
    4858:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
    485c:	b2d2      	uxtb	r2, r2
    485e:	f884 2279 	strb.w	r2, [r4, #633]	; 0x279
	}

	if (!leds.rainbow_split) {
    4862:	2b00      	cmp	r3, #0
    4864:	d0c2      	beq.n	47ec <rainbow_march_beat(LEDStruct&)+0x138>
		fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff);
	}
	else {
		fill_rainbow(leds.led_data, NUM_LEDS / 2, leds.rainbow_index, leds.rainbow_diff);
    4866:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    486a:	214b      	movs	r1, #75	; 0x4b
    486c:	4620      	mov	r0, r4
    486e:	f004 ff5f 	bl	9730 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4872:	4620      	mov	r0, r4
    4874:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4878:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    487a:	781a      	ldrb	r2, [r3, #0]
    487c:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    4880:	785a      	ldrb	r2, [r3, #1]
    4882:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    4886:	789a      	ldrb	r2, [r3, #2]
    4888:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    488c:	3303      	adds	r3, #3
		for (int i = 0; i < NUM_LEDS / 2; i++) { leds.led_data[NUM_LEDS - 1 - i] = leds.led_data[i]; }
    488e:	4299      	cmp	r1, r3
    4890:	f1a0 0003 	sub.w	r0, r0, #3
    4894:	d1f1      	bne.n	487a <rainbow_march_beat(LEDStruct&)+0x1c6>
	}
}
    4896:	b003      	add	sp, #12
    4898:	bdf0      	pop	{r4, r5, r6, r7, pc}
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    489a:	43c9      	mvns	r1, r1
    489c:	b2ca      	uxtb	r2, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    489e:	f002 010f 	and.w	r1, r2, #15
    if( theta & 0x40) secoffset++;
    48a2:	1c48      	adds	r0, r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    48a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    48a8:	e7be      	b.n	4828 <rainbow_march_beat(LEDStruct&)+0x174>
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    48aa:	43c9      	mvns	r1, r1
    48ac:	b2ca      	uxtb	r2, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    48ae:	f002 010f 	and.w	r1, r2, #15
    if( theta & 0x40) secoffset++;
    48b2:	1c48      	adds	r0, r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    48b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    48b8:	e779      	b.n	47ae <rainbow_march_beat(LEDStruct&)+0xfa>
	}
}

void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    48ba:	4620      	mov	r0, r4
    48bc:	f7ff fe26 	bl	450c <rainbow_update(LEDStruct&)>
    48c0:	e759      	b.n	4776 <rainbow_march_beat(LEDStruct&)+0xc2>
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    48c2:	461a      	mov	r2, r3
    48c4:	e749      	b.n	475a <rainbow_march_beat(LEDStruct&)+0xa6>
    48c6:	bf00      	nop
    48c8:	1fff8780 	.word	0x1fff8780
    48cc:	1fff91e1 	.word	0x1fff91e1
    48d0:	1ffface8 	.word	0x1ffface8
    48d4:	0000d8b8 	.word	0x0000d8b8

000048d8 <fire_update(LEDStruct&)>:
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    48d8:	4b09      	ldr	r3, [pc, #36]	; (4900 <fire_update(LEDStruct&)+0x28>)
	leds.fire_cooling		= fc;
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    48da:	4a0a      	ldr	r2, [pc, #40]	; (4904 <fire_update(LEDStruct&)+0x2c>)
	switch (update_var) {
    48dc:	781b      	ldrb	r3, [r3, #0]
	leds.fire_cooling		= fc;
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    48de:	2100      	movs	r1, #0
    48e0:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    48e2:	b13b      	cbz	r3, 48f4 <fire_update(LEDStruct&)+0x1c>
    48e4:	2b01      	cmp	r3, #1
    48e6:	d103      	bne.n	48f0 <fire_update(LEDStruct&)+0x18>
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b	
    48e8:	4b07      	ldr	r3, [pc, #28]	; (4908 <fire_update(LEDStruct&)+0x30>)
    48ea:	881b      	ldrh	r3, [r3, #0]
    48ec:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
		default:	break;
	}
	LEDDebug(leds);
    48f0:	f7fe b8c4 	b.w	2a7c <LEDDebug(LEDStruct&)>


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
    48f4:	4b04      	ldr	r3, [pc, #16]	; (4908 <fire_update(LEDStruct&)+0x30>)
    48f6:	881b      	ldrh	r3, [r3, #0]
    48f8:	f880 327b 	strb.w	r3, [r0, #635]	; 0x27b
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b	
		default:	break;
	}
	LEDDebug(leds);
    48fc:	f7fe b8be 	b.w	2a7c <LEDDebug(LEDStruct&)>
    4900:	1fff9a24 	.word	0x1fff9a24
    4904:	1fff91e1 	.word	0x1fff91e1
    4908:	1fff90e2 	.word	0x1fff90e2

0000490c <fire(LEDStruct&)>:
}

void fire(LEDStruct& leds) {
    490c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    4910:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    4914:	4e75      	ldr	r6, [pc, #468]	; (4aec <fire(LEDStruct&)+0x1e0>)
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    4916:	b082      	sub	sp, #8
    4918:	4605      	mov	r5, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    491a:	bbab      	cbnz	r3, 4988 <fire(LEDStruct&)+0x7c>

void fire_init(LEDStruct& leds, uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
	leds.use_palette		= 0; 
    491c:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    4920:	8833      	ldrh	r3, [r6, #0]
    4922:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4926:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    492a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    492e:	3319      	adds	r3, #25
    4930:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4934:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4938:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    493c:	3319      	adds	r3, #25
    493e:	b29b      	uxth	r3, r3
    4940:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4944:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4948:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    494c:	3219      	adds	r2, #25
    494e:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4950:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    4954:	eb03 2313 	add.w	r3, r3, r3, lsr #8

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    4958:	b2c9      	uxtb	r1, r1
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
	leds.use_palette		= 0; 

	leds.fire_sparking		= fs;
    495a:	b2db      	uxtb	r3, r3
	leds.fire_cooling		= fc;
    495c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
	leds.use_palette		= 0; 

	leds.fire_sparking		= fs;
    4960:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	leds.fire_cooling		= fc;
    4964:	1189      	asrs	r1, r1, #6
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
	leds.use_palette		= 0; 

	leds.fire_sparking		= fs;
    4966:	119b      	asrs	r3, r3, #6
	leds.fire_cooling		= fc;
    4968:	313c      	adds	r1, #60	; 0x3c
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
	leds.use_palette		= 0; 

	leds.fire_sparking		= fs;
    496a:	3332      	adds	r3, #50	; 0x32
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
    496c:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
    496e:	240c      	movs	r4, #12
	leds.delay_time			= 15;
    4970:	200f      	movs	r0, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    4972:	8032      	strh	r2, [r6, #0]
	leds.use_palette		= 0; 

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    4974:	f885 127c 	strb.w	r1, [r5, #636]	; 0x27c
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
	leds.use_palette		= 0; 

	leds.fire_sparking		= fs;
    4978:	f885 327b 	strb.w	r3, [r5, #635]	; 0x27b
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
    497c:	f885 722d 	strb.w	r7, [r5, #557]	; 0x22d
	leds.mode_type			= FIRE;
    4980:	f885 422c 	strb.w	r4, [r5, #556]	; 0x22c
	leds.delay_time			= 15;
    4984:	f885 01c3 	strb.w	r0, [r5, #451]	; 0x1c3
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    4988:	4b59      	ldr	r3, [pc, #356]	; (4af0 <fire(LEDStruct&)+0x1e4>)
    498a:	781b      	ldrb	r3, [r3, #0]
    498c:	2b00      	cmp	r3, #0
    498e:	f040 80a8 	bne.w	4ae2 <fire(LEDStruct&)+0x1d6>
    4992:	f895 227c 	ldrb.w	r2, [r5, #636]	; 0x27c
    4996:	4f57      	ldr	r7, [pc, #348]	; (4af4 <fire(LEDStruct&)+0x1e8>)
    4998:	8833      	ldrh	r3, [r6, #0]
    499a:	fb87 1702 	smull	r1, r7, r7, r2
    499e:	4417      	add	r7, r2
    49a0:	10ff      	asrs	r7, r7, #3
    49a2:	3702      	adds	r7, #2
    49a4:	f505 741f 	add.w	r4, r5, #636	; 0x27c
    49a8:	b2ff      	uxtb	r7, r7
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    49aa:	4620      	mov	r0, r4
    49ac:	f205 3e12 	addw	lr, r5, #786	; 0x312
    49b0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    49b4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    49b8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    49bc:	3319      	adds	r3, #25
    49be:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49c0:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    49c4:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    49c8:	b2d2      	uxtb	r2, r2
    49ca:	fb12 f207 	smulbb	r2, r2, r7
    49ce:	eba1 2212 	sub.w	r2, r1, r2, lsr #8
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < NUM_LEDS; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / NUM_LEDS) + 2));
    49d2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < NUM_LEDS; i++) {
    49d6:	4586      	cmp	lr, r0
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / NUM_LEDS) + 2));
    49d8:	7002      	strb	r2, [r0, #0]
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < NUM_LEDS; i++) {
    49da:	d1e9      	bne.n	49b0 <fire(LEDStruct&)+0xa4>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / NUM_LEDS) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = NUM_LEDS - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    49dc:	f8df c118 	ldr.w	ip, [pc, #280]	; 4af8 <fire(LEDStruct&)+0x1ec>
    49e0:	8033      	strh	r3, [r6, #0]
    49e2:	f205 310f 	addw	r1, r5, #783	; 0x30f
    49e6:	f205 3711 	addw	r7, r5, #785	; 0x311
    49ea:	f205 2e7d 	addw	lr, r5, #637	; 0x27d
    49ee:	780a      	ldrb	r2, [r1, #0]
    49f0:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
    49f4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    49f8:	fb8c 8002 	smull	r8, r0, ip, r2
    49fc:	eba0 72e2 	sub.w	r2, r0, r2, asr #31
	for (int i = 0; i < NUM_LEDS; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / NUM_LEDS) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = NUM_LEDS - 3; k >= 2; k--) {
    4a00:	458e      	cmp	lr, r1
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4a02:	f807 2d01 	strb.w	r2, [r7, #-1]!
	for (int i = 0; i < NUM_LEDS; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / NUM_LEDS) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = NUM_LEDS - 3; k >= 2; k--) {
    4a06:	d1f2      	bne.n	49ee <fire(LEDStruct&)+0xe2>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    4a08:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4a0c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4a10:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4a14:	3319      	adds	r3, #25
    4a16:	b29b      	uxth	r3, r3
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    4a18:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    4a1c:	f895 027b 	ldrb.w	r0, [r5, #635]	; 0x27b
    4a20:	8033      	strh	r3, [r6, #0]
    4a22:	b2d2      	uxtb	r2, r2
    4a24:	4290      	cmp	r0, r2
    4a26:	4931      	ldr	r1, [pc, #196]	; (4aec <fire(LEDStruct&)+0x1e0>)
    4a28:	d927      	bls.n	4a7a <fire(LEDStruct&)+0x16e>
    4a2a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4a2e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4a32:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4a36:	3319      	adds	r3, #25
    4a38:	b29b      	uxth	r3, r3
    4a3a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4a3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4a42:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4a46:	3019      	adds	r0, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4a48:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    4a4c:	b280      	uxth	r0, r0
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4a4e:	b2db      	uxtb	r3, r3
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4a50:	eb00 2210 	add.w	r2, r0, r0, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4a54:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4a58:	b2d2      	uxtb	r2, r2
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    4a5a:	eb05 2323 	add.w	r3, r5, r3, asr #8
    4a5e:	eb02 0642 	add.w	r6, r2, r2, lsl #1
    4a62:	ebc2 1246 	rsb	r2, r2, r6, lsl #5
    4a66:	f893 627d 	ldrb.w	r6, [r3, #637]	; 0x27d
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    4a6a:	8008      	strh	r0, [r1, #0]
    4a6c:	1212      	asrs	r2, r2, #8
    4a6e:	3a60      	subs	r2, #96	; 0x60
    4a70:	4631      	mov	r1, r6
    4a72:	fa81 f152 	uqadd8	r1, r1, r2
    4a76:	f883 127d 	strb.w	r1, [r3, #637]	; 0x27d
	}

	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    4a7a:	f895 31c4 	ldrb.w	r3, [r5, #452]	; 0x1c4
    4a7e:	b1b3      	cbz	r3, 4aae <fire(LEDStruct&)+0x1a2>
    4a80:	f505 77e1 	add.w	r7, r5, #450	; 0x1c2
    4a84:	ae01      	add	r6, sp, #4
		for (int j = 0; j < NUM_LEDS; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
    4a86:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    4a8a:	4630      	mov	r0, r6
    4a8c:	f004 ff40 	bl	9910 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a90:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
    4a94:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
    4a98:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a9c:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    4a9e:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4aa0:	70ab      	strb	r3, [r5, #2]
    4aa2:	3503      	adds	r5, #3
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}

	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < NUM_LEDS; j++) {
    4aa4:	42af      	cmp	r7, r5
    4aa6:	d1ee      	bne.n	4a86 <fire(LEDStruct&)+0x17a>
	else {
		for (int j = 0; j < NUM_LEDS; j++) {
			leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat[j]);
		}
	}
}
    4aa8:	b002      	add	sp, #8
    4aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4aae:	f5a5 77e1 	sub.w	r7, r5, #450	; 0x1c2
    4ab2:	ae01      	add	r6, sp, #4
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < NUM_LEDS; j++) {
			leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat[j]);
    4ab4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    4ab8:	4630      	mov	r0, r6
    4aba:	f004 ff29 	bl	9910 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4abe:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
    4ac2:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
    4ac6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4aca:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    4ace:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    4ad2:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
    4ad6:	3d03      	subs	r5, #3
		for (int j = 0; j < NUM_LEDS; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < NUM_LEDS; j++) {
    4ad8:	42af      	cmp	r7, r5
    4ada:	d1eb      	bne.n	4ab4 <fire(LEDStruct&)+0x1a8>
			leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat[j]);
		}
	}
}
    4adc:	b002      	add	sp, #8
    4ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    4ae2:	4628      	mov	r0, r5
    4ae4:	f7ff fef8 	bl	48d8 <fire_update(LEDStruct&)>
    4ae8:	e753      	b.n	4992 <fire(LEDStruct&)+0x86>
    4aea:	bf00      	nop
    4aec:	1fff8780 	.word	0x1fff8780
    4af0:	1fff91e1 	.word	0x1fff91e1
    4af4:	88888889 	.word	0x88888889
    4af8:	55555556 	.word	0x55555556

00004afc <fire_mirror(LEDStruct&)>:
}




void fire_mirror(LEDStruct& leds) {
    4afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    4b00:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    4b04:	4e8a      	ldr	r6, [pc, #552]	; (4d30 <fire_mirror(LEDStruct&)+0x234>)
}




void fire_mirror(LEDStruct& leds) {
    4b06:	b083      	sub	sp, #12
    4b08:	4605      	mov	r5, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    4b0a:	bbab      	cbnz	r3, 4b78 <fire_mirror(LEDStruct&)+0x7c>

void fire_init(LEDStruct& leds, uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
	leds.use_palette		= 0; 
    4b0c:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    4b10:	8833      	ldrh	r3, [r6, #0]
    4b12:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4b16:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4b1a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4b1e:	3319      	adds	r3, #25
    4b20:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4b24:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4b28:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4b2c:	3319      	adds	r3, #25
    4b2e:	b29b      	uxth	r3, r3
    4b30:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4b34:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4b38:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4b3c:	3219      	adds	r2, #25
    4b3e:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4b40:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    4b44:	eb03 2313 	add.w	r3, r3, r3, lsr #8

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    4b48:	b2c9      	uxtb	r1, r1
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
	leds.use_palette		= 0; 

	leds.fire_sparking		= fs;
    4b4a:	b2db      	uxtb	r3, r3
	leds.fire_cooling		= fc;
    4b4c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
	leds.use_palette		= 0; 

	leds.fire_sparking		= fs;
    4b50:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	leds.fire_cooling		= fc;
    4b54:	1189      	asrs	r1, r1, #6
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
	leds.use_palette		= 0; 

	leds.fire_sparking		= fs;
    4b56:	119b      	asrs	r3, r3, #6
	leds.fire_cooling		= fc;
    4b58:	313c      	adds	r1, #60	; 0x3c
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
	leds.use_palette		= 0; 

	leds.fire_sparking		= fs;
    4b5a:	3332      	adds	r3, #50	; 0x32
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
    4b5c:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
    4b5e:	240c      	movs	r4, #12
	leds.delay_time			= 15;
    4b60:	200f      	movs	r0, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    4b62:	8032      	strh	r2, [r6, #0]
	leds.use_palette		= 0; 

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    4b64:	f885 127c 	strb.w	r1, [r5, #636]	; 0x27c
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
	leds.use_palette		= 0; 

	leds.fire_sparking		= fs;
    4b68:	f885 327b 	strb.w	r3, [r5, #635]	; 0x27b
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
    4b6c:	f885 722d 	strb.w	r7, [r5, #557]	; 0x22d
	leds.mode_type			= FIRE;
    4b70:	f885 422c 	strb.w	r4, [r5, #556]	; 0x22c
	leds.delay_time			= 15;
    4b74:	f885 01c3 	strb.w	r0, [r5, #451]	; 0x1c3



void fire_mirror(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    4b78:	4b6e      	ldr	r3, [pc, #440]	; (4d34 <fire_mirror(LEDStruct&)+0x238>)
    4b7a:	781b      	ldrb	r3, [r3, #0]
    4b7c:	2b00      	cmp	r3, #0
    4b7e:	f040 80d3 	bne.w	4d28 <fire_mirror(LEDStruct&)+0x22c>
    4b82:	f895 227c 	ldrb.w	r2, [r5, #636]	; 0x27c
    4b86:	4f6c      	ldr	r7, [pc, #432]	; (4d38 <fire_mirror(LEDStruct&)+0x23c>)
    4b88:	8833      	ldrh	r3, [r6, #0]
    4b8a:	fb87 1702 	smull	r1, r7, r7, r2
    4b8e:	4417      	add	r7, r2
    4b90:	113f      	asrs	r7, r7, #4
    4b92:	3702      	adds	r7, #2
    4b94:	f505 741f 	add.w	r4, r5, #636	; 0x27c
    4b98:	b2ff      	uxtb	r7, r7
}




void fire_mirror(LEDStruct& leds) {
    4b9a:	4620      	mov	r0, r4
    4b9c:	f205 2ec7 	addw	lr, r5, #711	; 0x2c7
    4ba0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4ba4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4ba8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4bac:	3319      	adds	r3, #25
    4bae:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4bb0:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4bb4:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    4bb8:	b2d2      	uxtb	r2, r2
    4bba:	fb12 f207 	smulbb	r2, r2, r7
    4bbe:	eba1 2212 	sub.w	r2, r1, r2, lsr #8
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }

	for (int i = 0; i < NUM_LEDS / 2; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / NUM_LEDS / 2) + 2));
    4bc2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31

void fire_mirror(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }

	for (int i = 0; i < NUM_LEDS / 2; i++) {
    4bc6:	4586      	cmp	lr, r0
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / NUM_LEDS / 2) + 2));
    4bc8:	7002      	strb	r2, [r0, #0]

void fire_mirror(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }

	for (int i = 0; i < NUM_LEDS / 2; i++) {
    4bca:	d1e9      	bne.n	4ba0 <fire_mirror(LEDStruct&)+0xa4>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / NUM_LEDS / 2) + 2));
	}

	for (int k = NUM_LEDS / 2 - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4bcc:	f8df c16c 	ldr.w	ip, [pc, #364]	; 4d3c <fire_mirror(LEDStruct&)+0x240>
    4bd0:	8033      	strh	r3, [r6, #0]
    4bd2:	f505 7131 	add.w	r1, r5, #708	; 0x2c4
    4bd6:	f205 27c6 	addw	r7, r5, #710	; 0x2c6
    4bda:	f205 2e7d 	addw	lr, r5, #637	; 0x27d
    4bde:	780a      	ldrb	r2, [r1, #0]
    4be0:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
    4be4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    4be8:	fb8c 8002 	smull	r8, r0, ip, r2
    4bec:	eba0 72e2 	sub.w	r2, r0, r2, asr #31

	for (int i = 0; i < NUM_LEDS / 2; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / NUM_LEDS / 2) + 2));
	}

	for (int k = NUM_LEDS / 2 - 3; k >= 2; k--) {
    4bf0:	458e      	cmp	lr, r1
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4bf2:	f807 2d01 	strb.w	r2, [r7, #-1]!

	for (int i = 0; i < NUM_LEDS / 2; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / NUM_LEDS / 2) + 2));
	}

	for (int k = NUM_LEDS / 2 - 3; k >= 2; k--) {
    4bf6:	d1f2      	bne.n	4bde <fire_mirror(LEDStruct&)+0xe2>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    4bf8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4bfc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4c00:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4c04:	3319      	adds	r3, #25
    4c06:	b29b      	uxth	r3, r3
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (random8() < leds.fire_sparking) {
    4c08:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    4c0c:	f895 027b 	ldrb.w	r0, [r5, #635]	; 0x27b
    4c10:	8033      	strh	r3, [r6, #0]
    4c12:	b2d2      	uxtb	r2, r2
    4c14:	4290      	cmp	r0, r2
    4c16:	4946      	ldr	r1, [pc, #280]	; (4d30 <fire_mirror(LEDStruct&)+0x234>)
    4c18:	d927      	bls.n	4c6a <fire_mirror(LEDStruct&)+0x16e>
    4c1a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4c1e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4c22:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4c26:	3319      	adds	r3, #25
    4c28:	b29b      	uxth	r3, r3
    4c2a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4c2e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4c32:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4c36:	3019      	adds	r0, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4c38:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    4c3c:	b280      	uxth	r0, r0
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4c3e:	b2db      	uxtb	r3, r3
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4c40:	eb00 2210 	add.w	r2, r0, r0, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4c44:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4c48:	b2d2      	uxtb	r2, r2
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    4c4a:	eb05 2323 	add.w	r3, r5, r3, asr #8
    4c4e:	eb02 0642 	add.w	r6, r2, r2, lsl #1
    4c52:	ebc2 1246 	rsb	r2, r2, r6, lsl #5
    4c56:	f893 627d 	ldrb.w	r6, [r3, #637]	; 0x27d
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    4c5a:	8008      	strh	r0, [r1, #0]
    4c5c:	1212      	asrs	r2, r2, #8
    4c5e:	3a60      	subs	r2, #96	; 0x60
    4c60:	4631      	mov	r1, r6
    4c62:	fa81 f152 	uqadd8	r1, r1, r2
    4c66:	f883 127d 	strb.w	r1, [r3, #637]	; 0x27d
	}

	if (leds.this_dir) {
    4c6a:	f895 31c4 	ldrb.w	r3, [r5, #452]	; 0x1c4
    4c6e:	b34b      	cbz	r3, 4cc4 <fire_mirror(LEDStruct&)+0x1c8>
    4c70:	f105 08e1 	add.w	r8, r5, #225	; 0xe1
    4c74:	462e      	mov	r6, r5
    4c76:	af01      	add	r7, sp, #4
		for (int j = 0; j < NUM_LEDS / 2; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
    4c78:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    4c7c:	4638      	mov	r0, r7
    4c7e:	f004 fe47 	bl	9910 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4c82:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
    4c86:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
    4c8a:	f89d 3006 	ldrb.w	r3, [sp, #6]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4c8e:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    4c90:	70b3      	strb	r3, [r6, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4c92:	7031      	strb	r1, [r6, #0]
			leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat[j]);
    4c94:	7821      	ldrb	r1, [r4, #0]
    4c96:	4638      	mov	r0, r7
    4c98:	3603      	adds	r6, #3
    4c9a:	f004 fe39 	bl	9910 <HeatColor(unsigned char)>
    4c9e:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
    4ca2:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
    4ca6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4caa:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}

	if (leds.this_dir) {
		for (int j = 0; j < NUM_LEDS / 2; j++) {
    4cae:	45b0      	cmp	r8, r6
        g = rhs.g;
    4cb0:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    4cb4:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
    4cb8:	f1a5 0503 	sub.w	r5, r5, #3
    4cbc:	d1dc      	bne.n	4c78 <fire_mirror(LEDStruct&)+0x17c>
		for (int j = 0; j < NUM_LEDS / 2; j++) {
			leds.led_data[NUM_LEDS / 2 - 1 - j] = HeatColor(leds.heat[j]);
			leds.led_data[NUM_LEDS / 2 + j] = HeatColor(leds.heat[j]);
		}
	}
}
    4cbe:	b003      	add	sp, #12
    4cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (random8() < leds.fire_sparking) {
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}

	if (leds.this_dir) {
    4cc4:	4698      	mov	r8, r3
    4cc6:	462e      	mov	r6, r5
    4cc8:	46a1      	mov	r9, r4
    4cca:	af01      	add	r7, sp, #4
			leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < NUM_LEDS / 2; j++) {
			leds.led_data[NUM_LEDS / 2 - 1 - j] = HeatColor(leds.heat[j]);
    4ccc:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4cd0:	4638      	mov	r0, r7
    4cd2:	f004 fe1d 	bl	9910 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4cd6:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
    4cda:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
    4cde:	f89d 3006 	ldrb.w	r3, [sp, #6]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4ce2:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    4ce6:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4cea:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
			leds.led_data[NUM_LEDS / 2 + j] = HeatColor(leds.heat[j]);
    4cee:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    4cf2:	4638      	mov	r0, r7
			leds.led_data[j] = HeatColor(leds.heat[j]);
			leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < NUM_LEDS / 2; j++) {
    4cf4:	f108 0801 	add.w	r8, r8, #1
			leds.led_data[NUM_LEDS / 2 - 1 - j] = HeatColor(leds.heat[j]);
			leds.led_data[NUM_LEDS / 2 + j] = HeatColor(leds.heat[j]);
    4cf8:	f004 fe0a 	bl	9910 <HeatColor(unsigned char)>
    4cfc:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
    4d00:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
    4d04:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4d08:	f886 10e1 	strb.w	r1, [r6, #225]	; 0xe1
			leds.led_data[j] = HeatColor(leds.heat[j]);
			leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < NUM_LEDS / 2; j++) {
    4d0c:	f1b8 0f4b 	cmp.w	r8, #75	; 0x4b
        g = rhs.g;
    4d10:	f886 20e2 	strb.w	r2, [r6, #226]	; 0xe2
        b = rhs.b;
    4d14:	f886 30e3 	strb.w	r3, [r6, #227]	; 0xe3
    4d18:	f1a5 0503 	sub.w	r5, r5, #3
    4d1c:	f106 0603 	add.w	r6, r6, #3
    4d20:	d1d4      	bne.n	4ccc <fire_mirror(LEDStruct&)+0x1d0>
			leds.led_data[NUM_LEDS / 2 - 1 - j] = HeatColor(leds.heat[j]);
			leds.led_data[NUM_LEDS / 2 + j] = HeatColor(leds.heat[j]);
		}
	}
}
    4d22:	b003      	add	sp, #12
    4d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}



void fire_mirror(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    4d28:	4628      	mov	r0, r5
    4d2a:	f7ff fdd5 	bl	48d8 <fire_update(LEDStruct&)>
    4d2e:	e728      	b.n	4b82 <fire_mirror(LEDStruct&)+0x86>
    4d30:	1fff8780 	.word	0x1fff8780
    4d34:	1fff91e1 	.word	0x1fff91e1
    4d38:	88888889 	.word	0x88888889
    4d3c:	55555556 	.word	0x55555556

00004d40 <colorwave(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
    4d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { colorwave_init(leds); }
    4d44:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		default:	break;
	}
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
    4d48:	b08b      	sub	sp, #44	; 0x2c
    4d4a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { colorwave_init(leds); }
    4d4c:	b953      	cbnz	r3, 4d64 <colorwave(LEDStruct&)+0x24>
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds) {
	leds.mode_initialized	= 1;
    4d4e:	2301      	movs	r3, #1
	leds.use_palette		= 1;
	leds.mode_type			= COLORWAVE;
    4d50:	210e      	movs	r1, #14
	leds.delay_time			= 15;
    4d52:	220f      	movs	r2, #15
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds) {
	leds.mode_initialized	= 1;
    4d54:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
	leds.use_palette		= 1;
    4d58:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
	leds.mode_type			= COLORWAVE;
    4d5c:	f880 122c 	strb.w	r1, [r0, #556]	; 0x22c
	leds.delay_time			= 15;
    4d60:	f880 21c3 	strb.w	r2, [r0, #451]	; 0x1c3
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
	if (!leds.mode_initialized) { colorwave_init(leds); }
	if (keyboard_update) { colorwave_update(leds); }
    4d64:	4bc2      	ldr	r3, [pc, #776]	; (5070 <colorwave(LEDStruct&)+0x330>)
    4d66:	781a      	ldrb	r2, [r3, #0]
    4d68:	2a00      	cmp	r2, #0
    4d6a:	f040 817b 	bne.w	5064 <colorwave(LEDStruct&)+0x324>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4d6e:	4ac1      	ldr	r2, [pc, #772]	; (5074 <colorwave(LEDStruct&)+0x334>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4d70:	4bc1      	ldr	r3, [pc, #772]	; (5078 <colorwave(LEDStruct&)+0x338>)
    4d72:	6811      	ldr	r1, [r2, #0]
    4d74:	9109      	str	r1, [sp, #36]	; 0x24
	return ret;
    4d76:	9809      	ldr	r0, [sp, #36]	; 0x24
    4d78:	fb03 f000 	mul.w	r0, r3, r0
    4d7c:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4d7e:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4d80:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4d84:	d503      	bpl.n	4d8e <colorwave(LEDStruct&)+0x4e>
    4d86:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    4d8a:	3307      	adds	r3, #7
    4d8c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4d8e:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];
    4d90:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 5080 <colorwave(LEDStruct&)+0x340>

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4d94:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 5084 <colorwave(LEDStruct&)+0x344>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4d98:	f819 6001 	ldrb.w	r6, [r9, r1]
    4d9c:	f838 5011 	ldrh.w	r5, [r8, r1, lsl #1]
    4da0:	f3c3 0146 	ubfx	r1, r3, #1, #7
    4da4:	fb06 5301 	mla	r3, r6, r1, r5
    4da8:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    4daa:	0407      	lsls	r7, r0, #16
    4dac:	bf48      	it	mi
    4dae:	425b      	negmi	r3, r3
    4db0:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4db2:	6811      	ldr	r1, [r2, #0]
    4db4:	9108      	str	r1, [sp, #32]

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
    4db6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    4dba:	b29b      	uxth	r3, r3
    4dbc:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
	return ret;
    4dc0:	9d08      	ldr	r5, [sp, #32]
    4dc2:	0c19      	lsrs	r1, r3, #16
    4dc4:	f64d 6308 	movw	r3, #56840	; 0xde08
    4dc8:	fb03 f505 	mul.w	r5, r3, r5
    4dcc:	0c2d      	lsrs	r5, r5, #16
    4dce:	3160      	adds	r1, #96	; 0x60
    4dd0:	b2c9      	uxtb	r1, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4dd2:	046e      	lsls	r6, r5, #17
    4dd4:	f884 131a 	strb.w	r1, [r4, #794]	; 0x31a
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4dd8:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4ddc:	d503      	bpl.n	4de6 <colorwave(LEDStruct&)+0xa6>
    4dde:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    4de2:	3307      	adds	r3, #7
    4de4:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4de6:	0a1e      	lsrs	r6, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4de8:	f3c3 0046 	ubfx	r0, r3, #1, #7
    4dec:	f819 7006 	ldrb.w	r7, [r9, r6]
    4df0:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    4df4:	fb07 3300 	mla	r3, r7, r0, r3
    4df8:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    4dfa:	0428      	lsls	r0, r5, #16
    4dfc:	bf48      	it	mi
    4dfe:	425b      	negmi	r3, r3
    4e00:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4e02:	6810      	ldr	r0, [r2, #0]
    4e04:	9007      	str	r0, [sp, #28]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4e06:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    4e0a:	b29b      	uxth	r3, r3
    4e0c:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
	return ret;
    4e10:	9e07      	ldr	r6, [sp, #28]
    4e12:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4e16:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    4e1a:	fb03 f606 	mul.w	r6, r3, r6
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4e1e:	0c00      	lsrs	r0, r0, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4e20:	0c36      	lsrs	r6, r6, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4e22:	f500 50c8 	add.w	r0, r0, #6400	; 0x1900
    4e26:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4e28:	0477      	lsls	r7, r6, #17
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    4e2a:	f8a4 0320 	strh.w	r0, [r4, #800]	; 0x320
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4e2e:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4e32:	d503      	bpl.n	4e3c <colorwave(LEDStruct&)+0xfc>
    4e34:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    4e38:	3307      	adds	r3, #7
    4e3a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4e3c:	0a1f      	lsrs	r7, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4e3e:	f3c3 0546 	ubfx	r5, r3, #1, #7
    4e42:	f819 e007 	ldrb.w	lr, [r9, r7]
    4e46:	f838 3017 	ldrh.w	r3, [r8, r7, lsl #1]
    4e4a:	fb0e 3305 	mla	r3, lr, r5, r3

    if( theta & 0x8000 ) y = -y;
    4e4e:	0436      	lsls	r6, r6, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4e50:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    4e52:	bf48      	it	mi
    4e54:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4e56:	6815      	ldr	r5, [r2, #0]
    4e58:	9506      	str	r5, [sp, #24]
    4e5a:	b21b      	sxth	r3, r3
    4e5c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    4e60:	b29b      	uxth	r3, r3
    4e62:	2626      	movs	r6, #38	; 0x26
	return ret;
    4e64:	9f06      	ldr	r7, [sp, #24]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    4e66:	f8b4 e318 	ldrh.w	lr, [r4, #792]	; 0x318
    4e6a:	fb06 f603 	mul.w	r6, r6, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4e6e:	f647 3398 	movw	r3, #31640	; 0x7b98
    4e72:	fb03 f707 	mul.w	r7, r3, r7
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4e76:	0c36      	lsrs	r6, r6, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4e78:	0c3f      	lsrs	r7, r7, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4e7a:	3617      	adds	r6, #23
    4e7c:	b2b6      	uxth	r6, r6
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4e7e:	047d      	lsls	r5, r7, #17
	if (keyboard_update) { colorwave_update(leds); }

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    4e80:	f884 631b 	strb.w	r6, [r4, #795]	; 0x31b
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4e84:	f3c7 03ca 	ubfx	r3, r7, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4e88:	d503      	bpl.n	4e92 <colorwave(LEDStruct&)+0x152>
    4e8a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    4e8e:	3307      	adds	r3, #7
    4e90:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4e92:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4e96:	f3c3 0546 	ubfx	r5, r3, #1, #7
    4e9a:	f819 a00c 	ldrb.w	sl, [r9, ip]
    4e9e:	f838 301c 	ldrh.w	r3, [r8, ip, lsl #1]
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    4ea2:	f8b4 c314 	ldrh.w	ip, [r4, #788]	; 0x314
    4ea6:	fb0a 3305 	mla	r3, sl, r5, r3

    if( theta & 0x8000 ) y = -y;
    4eaa:	043f      	lsls	r7, r7, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4eac:	6815      	ldr	r5, [r2, #0]
    4eae:	9504      	str	r5, [sp, #16]
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4eb0:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    4eb2:	bf48      	it	mi
    4eb4:	425b      	negmi	r3, r3
	return ret;
    4eb6:	9f04      	ldr	r7, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4eb8:	6812      	ldr	r2, [r2, #0]

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    4eba:	f8b4 5316 	ldrh.w	r5, [r4, #790]	; 0x316
    4ebe:	9205      	str	r2, [sp, #20]
    4ec0:	b21b      	sxth	r3, r3
    4ec2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
    4ec6:	fa1f fa87 	uxth.w	sl, r7
    4eca:	f240 42b1 	movw	r2, #1201	; 0x4b1
    4ece:	b29b      	uxth	r3, r3
	return ret;
    4ed0:	f8dd b014 	ldr.w	fp, [sp, #20]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4ed4:	4f69      	ldr	r7, [pc, #420]	; (507c <colorwave(LEDStruct&)+0x33c>)
    4ed6:	f8a4 a326 	strh.w	sl, [r4, #806]	; 0x326
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4eda:	fb02 f303 	mul.w	r3, r2, r3
	leds.deltams = leds.ms - leds.sLastMillis;
    4ede:	ebc5 050a 	rsb	r5, r5, sl
    4ee2:	0c1a      	lsrs	r2, r3, #16
    4ee4:	b2ad      	uxth	r5, r5
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4ee6:	fb07 f70b 	mul.w	r7, r7, fp
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4eea:	f502 7396 	add.w	r3, r2, #300	; 0x12c
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    4eee:	fb15 cc06 	smlabb	ip, r5, r6, ip
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4ef2:	0c3f      	lsrs	r7, r7, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4ef4:	b29a      	uxth	r2, r3
    4ef6:	fa1f fc8c 	uxth.w	ip, ip
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4efa:	047e      	lsls	r6, r7, #17
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);
    4efc:	f8a4 2324 	strh.w	r2, [r4, #804]	; 0x324

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    4f00:	f8a4 5328 	strh.w	r5, [r4, #808]	; 0x328
	leds.sLastMillis = leds.ms;
    4f04:	f8a4 a316 	strh.w	sl, [r4, #790]	; 0x316
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    4f08:	f8a4 c314 	strh.w	ip, [r4, #788]	; 0x314
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4f0c:	f3c7 03ca 	ubfx	r3, r7, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4f10:	d503      	bpl.n	4f1a <colorwave(LEDStruct&)+0x1da>
    4f12:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    4f16:	3307      	adds	r3, #7
    4f18:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4f1a:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4f1e:	f3c3 0646 	ubfx	r6, r3, #1, #7
    4f22:	f819 b00a 	ldrb.w	fp, [r9, sl]
    4f26:	f838 301a 	ldrh.w	r3, [r8, sl, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    4f2a:	f8a4 c32a 	strh.w	ip, [r4, #810]	; 0x32a
    4f2e:	fb0b 3306 	mla	r3, fp, r6, r3
    4f32:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    4f34:	043e      	lsls	r6, r7, #16
    4f36:	bf48      	it	mi
    4f38:	425b      	negmi	r3, r3
    4f3a:	b21b      	sxth	r3, r3

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    4f3c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    4f40:	b29b      	uxth	r3, r3
    4f42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4f46:	0c1b      	lsrs	r3, r3, #16
    4f48:	3305      	adds	r3, #5
    4f4a:	b29b      	uxth	r3, r3
    4f4c:	fb05 e303 	mla	r3, r5, r3, lr
    4f50:	f8a4 3318 	strh.w	r3, [r4, #792]	; 0x318
    4f54:	f204 1ac7 	addw	sl, r4, #455	; 0x1c7
	leds.brightnesstheta16 = leds.sPseudotime;
    4f58:	4613      	mov	r3, r2
    4f5a:	2695      	movs	r6, #149	; 0x95

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    4f5c:	4672      	mov	r2, lr
    4f5e:	4686      	mov	lr, r0
    4f60:	eb06 0746 	add.w	r7, r6, r6, lsl #1
    4f64:	4427      	add	r7, r4
	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    4f66:	2504      	movs	r5, #4

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    4f68:	4413      	add	r3, r2
    4f6a:	b29b      	uxth	r3, r3
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    4f6c:	09d8      	lsrs	r0, r3, #7
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    4f6e:	44e6      	add	lr, ip
	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
    4f70:	f410 7f80 	tst.w	r0, #256	; 0x100
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    4f74:	fa1f fe8e 	uxth.w	lr, lr
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
    4f78:	ea6f 2b13 	mvn.w	fp, r3, lsr #8
    4f7c:	fa5f fb8b 	uxtb.w	fp, fp
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    4f80:	ea4f 2213 	mov.w	r2, r3, lsr #8
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    4f84:	bf08      	it	eq
    4f86:	ea4f 2b13 	moveq.w	fp, r3, lsr #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4f8a:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    4f8e:	f884 231c 	strb.w	r2, [r4, #796]	; 0x31c
			leds.h16_128 = leds.hue16 >> 7;
    4f92:	f8a4 032c 	strh.w	r0, [r4, #812]	; 0x32c
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    4f96:	f8a4 3322 	strh.w	r3, [r4, #802]	; 0x322
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    4f9a:	f884 b31c 	strb.w	fp, [r4, #796]	; 0x31c
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    4f9e:	f8a4 e32a 	strh.w	lr, [r4, #810]	; 0x32a
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4fa2:	f3ce 00ca 	ubfx	r0, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4fa6:	d003      	beq.n	4fb0 <colorwave(LEDStruct&)+0x270>
    4fa8:	f5c0 60ff 	rsb	r0, r0, #2040	; 0x7f8
    4fac:	3007      	adds	r0, #7
    4fae:	b280      	uxth	r0, r0

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4fb0:	0a02      	lsrs	r2, r0, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4fb2:	f3c0 0346 	ubfx	r3, r0, #1, #7
    4fb6:	f819 0002 	ldrb.w	r0, [r9, r2]
    4fba:	f838 2012 	ldrh.w	r2, [r8, r2, lsl #1]
    4fbe:	fb00 2003 	mla	r0, r0, r3, r2

    if( theta & 0x8000 ) y = -y;
    4fc2:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4fc6:	b280      	uxth	r0, r0

    if( theta & 0x8000 ) y = -y;
    4fc8:	bf18      	it	ne
    4fca:	4240      	negne	r0, r0
    4fcc:	b200      	sxth	r0, r0
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    4fce:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
    4fd2:	b280      	uxth	r0, r0

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    4fd4:	fb00 fe00 	mul.w	lr, r0, r0
    4fd8:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    4fdc:	fb0e f301 	mul.w	r3, lr, r1
    4fe0:	ebcb 120b 	rsb	r2, fp, fp, lsl #4
    4fe4:	43c9      	mvns	r1, r1
    4fe6:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    4fea:	eb0b 1202 	add.w	r2, fp, r2, lsl #4
    4fee:	b2db      	uxtb	r3, r3
    4ff0:	f3c2 2207 	ubfx	r2, r2, #8, #8

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    4ff4:	2101      	movs	r1, #1
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    4ff6:	f8a4 032e 	strh.w	r0, [r4, #814]	; 0x32e

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    4ffa:	f8a4 e330 	strh.w	lr, [r4, #816]	; 0x330
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    4ffe:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    5002:	a803      	add	r0, sp, #12
    5004:	9100      	str	r1, [sp, #0]
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);
    5006:	f884 231f 	strb.w	r2, [r4, #799]	; 0x31f

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    500a:	4651      	mov	r1, sl
    500c:	f004 fca2 	bl	9954 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    5010:	3d01      	subs	r5, #1

			leds.pixelnumber = i;
			leds.pixelnumber = (NUM_LEDS - 1) - leds.pixelnumber;
    5012:	f8a4 6332 	strh.w	r6, [r4, #818]	; 0x332

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    5016:	2280      	movs	r2, #128	; 0x80
    5018:	a903      	add	r1, sp, #12
    501a:	4638      	mov	r0, r7
    501c:	f004 fc3c 	bl	9898 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		for (byte c = 0; c < 4; c++) {
    5020:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    5024:	d00a      	beq.n	503c <colorwave(LEDStruct&)+0x2fc>
    5026:	f8b4 2322 	ldrh.w	r2, [r4, #802]	; 0x322
    502a:	f8b4 3324 	ldrh.w	r3, [r4, #804]	; 0x324
    502e:	f8b4 c32a 	ldrh.w	ip, [r4, #810]	; 0x32a
    5032:	f8b4 e320 	ldrh.w	lr, [r4, #800]	; 0x320
    5036:	f894 131a 	ldrb.w	r1, [r4, #794]	; 0x31a
    503a:	e795      	b.n	4f68 <colorwave(LEDStruct&)+0x228>
    503c:	3e01      	subs	r6, #1
    503e:	b2b6      	uxth	r6, r6
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    5040:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5044:	429e      	cmp	r6, r3
    5046:	d00a      	beq.n	505e <colorwave(LEDStruct&)+0x31e>
    5048:	f8b4 2322 	ldrh.w	r2, [r4, #802]	; 0x322
    504c:	f8b4 3324 	ldrh.w	r3, [r4, #804]	; 0x324
    5050:	f8b4 c32a 	ldrh.w	ip, [r4, #810]	; 0x32a
    5054:	f8b4 e320 	ldrh.w	lr, [r4, #800]	; 0x320
    5058:	f894 131a 	ldrb.w	r1, [r4, #794]	; 0x31a
    505c:	e780      	b.n	4f60 <colorwave(LEDStruct&)+0x220>
			leds.pixelnumber = (NUM_LEDS - 1) - leds.pixelnumber;

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
		}
	}
}
    505e:	b00b      	add	sp, #44	; 0x2c
    5060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.mode_type			= COLORWAVE;
	leds.delay_time			= 15;
}

void colorwave_update(LEDStruct& leds) {
	keyboard_update = 0;
    5064:	2200      	movs	r2, #0
	switch (update_var) {
		default:	break;
	}
	LEDDebug(leds);
    5066:	4620      	mov	r0, r4
	leds.mode_type			= COLORWAVE;
	leds.delay_time			= 15;
}

void colorwave_update(LEDStruct& leds) {
	keyboard_update = 0;
    5068:	701a      	strb	r2, [r3, #0]
	switch (update_var) {
		default:	break;
	}
	LEDDebug(leds);
    506a:	f7fd fd07 	bl	2a7c <LEDDebug(LEDStruct&)>
    506e:	e67e      	b.n	4d6e <colorwave(LEDStruct&)+0x2e>
    5070:	1fff91e1 	.word	0x1fff91e1
    5074:	1ffface8 	.word	0x1ffface8
    5078:	000174f8 	.word	0x000174f8
    507c:	0001b580 	.word	0x0001b580
    5080:	0000dee8 	.word	0x0000dee8
    5084:	0000d718 	.word	0x0000d718

00005088 <confetti_update(LEDStruct&)>:
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5088:	4b06      	ldr	r3, [pc, #24]	; (50a4 <confetti_update(LEDStruct&)+0x1c>)
	leds.delay_time			= 15;
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    508a:	4a07      	ldr	r2, [pc, #28]	; (50a8 <confetti_update(LEDStruct&)+0x20>)
	switch (update_var) {
    508c:	781b      	ldrb	r3, [r3, #0]
	leds.delay_time			= 15;
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    508e:	2100      	movs	r1, #0
	switch (update_var) {
    5090:	2b01      	cmp	r3, #1
	leds.delay_time			= 15;
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    5092:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    5094:	d103      	bne.n	509e <confetti_update(LEDStruct&)+0x16>
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
    5096:	4b05      	ldr	r3, [pc, #20]	; (50ac <confetti_update(LEDStruct&)+0x24>)
    5098:	881b      	ldrh	r3, [r3, #0]
    509a:	f880 3336 	strb.w	r3, [r0, #822]	; 0x336
		default: break;
	}
	LEDDebug(leds);
    509e:	f7fd bced 	b.w	2a7c <LEDDebug(LEDStruct&)>
    50a2:	bf00      	nop
    50a4:	1fff9a24 	.word	0x1fff9a24
    50a8:	1fff91e1 	.word	0x1fff91e1
    50ac:	1fff90e2 	.word	0x1fff90e2

000050b0 <confetti(LEDStruct&)>:
}

void confetti(LEDStruct& leds)
{
    50b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { confetti_init(leds); }
    50b2:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    50b6:	4f33      	ldr	r7, [pc, #204]	; (5184 <confetti(LEDStruct&)+0xd4>)
	}
	LEDDebug(leds);
}

void confetti(LEDStruct& leds)
{
    50b8:	b085      	sub	sp, #20
    50ba:	4606      	mov	r6, r0
	if (!leds.mode_initialized) { confetti_init(leds); }
    50bc:	b9eb      	cbnz	r3, 50fa <confetti(LEDStruct&)+0x4a>
    50be:	883b      	ldrh	r3, [r7, #0]
    50c0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    50c4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    50c8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    50cc:	3319      	adds	r3, #25
    50ce:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    50d0:	eb03 2213 	add.w	r2, r3, r3, lsr #8
void confetti_init(LEDStruct& leds, uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
	leds.delay_time			= 15;
	leds.confetti_fade		= cf;
    50d4:	b2d2      	uxtb	r2, r2
    50d6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    50da:	1212      	asrs	r2, r2, #8
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    50dc:	2101      	movs	r1, #1
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
	leds.delay_time			= 15;
	leds.confetti_fade		= cf;
    50de:	3206      	adds	r2, #6
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= CONFETTI;
    50e0:	2411      	movs	r4, #17
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    50e2:	200f      	movs	r0, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    50e4:	803b      	strh	r3, [r7, #0]
	leds.confetti_fade		= cf;
    50e6:	f886 2336 	strb.w	r2, [r6, #822]	; 0x336
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    50ea:	f886 122d 	strb.w	r1, [r6, #557]	; 0x22d
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
    50ee:	f886 1229 	strb.w	r1, [r6, #553]	; 0x229
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= CONFETTI;
    50f2:	f886 422c 	strb.w	r4, [r6, #556]	; 0x22c
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    50f6:	f886 01c3 	strb.w	r0, [r6, #451]	; 0x1c3
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    50fa:	4b23      	ldr	r3, [pc, #140]	; (5188 <confetti(LEDStruct&)+0xd8>)
    50fc:	781b      	ldrb	r3, [r3, #0]
    50fe:	b113      	cbz	r3, 5106 <confetti(LEDStruct&)+0x56>
    5100:	4630      	mov	r0, r6
    5102:	f7ff ffc1 	bl	5088 <confetti_update(LEDStruct&)>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.confetti_fade);
    5106:	f896 2336 	ldrb.w	r2, [r6, #822]	; 0x336
    510a:	4630      	mov	r0, r6
    510c:	2196      	movs	r1, #150	; 0x96
    510e:	f004 fbc1 	bl	9894 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    5112:	883b      	ldrh	r3, [r7, #0]
    5114:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    5118:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    511c:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    5120:	3419      	adds	r4, #25
    5122:	b2a4      	uxth	r4, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    5124:	eb04 2544 	add.w	r5, r4, r4, lsl #9
    5128:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    512c:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5130:	3519      	adds	r5, #25
    5132:	b2ad      	uxth	r5, r5
	int pos = random16(NUM_LEDS);
	leds.led_data[pos] += ColorFromPalette(leds.current_palette, random8());
    5134:	eb05 2215 	add.w	r2, r5, r5, lsr #8
    5138:	2301      	movs	r3, #1
    513a:	9300      	str	r3, [sp, #0]
    513c:	f206 11c7 	addw	r1, r6, #455	; 0x1c7
    5140:	b2d2      	uxtb	r2, r2
    5142:	23ff      	movs	r3, #255	; 0xff
    5144:	a803      	add	r0, sp, #12
    5146:	803d      	strh	r5, [r7, #0]
    5148:	f004 fc04 	bl	9954 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    514c:	2396      	movs	r3, #150	; 0x96
    514e:	fb03 f404 	mul.w	r4, r3, r4
    5152:	0c24      	lsrs	r4, r4, #16
    5154:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    5158:	1931      	adds	r1, r6, r4
    515a:	5d33      	ldrb	r3, [r6, r4]
    515c:	f89d 200c 	ldrb.w	r2, [sp, #12]
    5160:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5164:	5533      	strb	r3, [r6, r4]
    5166:	f89d 300d 	ldrb.w	r3, [sp, #13]
    516a:	784a      	ldrb	r2, [r1, #1]
    516c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    5170:	704a      	strb	r2, [r1, #1]
    5172:	788b      	ldrb	r3, [r1, #2]
    5174:	f89d 200e 	ldrb.w	r2, [sp, #14]
    5178:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    517c:	708b      	strb	r3, [r1, #2]
}
    517e:	b005      	add	sp, #20
    5180:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5182:	bf00      	nop
    5184:	1fff8780 	.word	0x1fff8780
    5188:	1fff91e1 	.word	0x1fff91e1

0000518c <one_sin_update(LEDStruct&)>:

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    518c:	4b22      	ldr	r3, [pc, #136]	; (5218 <one_sin_update(LEDStruct&)+0x8c>)
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    518e:	4a23      	ldr	r2, [pc, #140]	; (521c <one_sin_update(LEDStruct&)+0x90>)
	switch (update_var) {
    5190:	781b      	ldrb	r3, [r3, #0]
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5192:	2100      	movs	r1, #0
	switch (update_var) {
    5194:	3b01      	subs	r3, #1
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5196:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    5198:	2b08      	cmp	r3, #8
    519a:	d80a      	bhi.n	51b2 <one_sin_update(LEDStruct&)+0x26>
    519c:	e8df f003 	tbb	[pc, r3]
    51a0:	231d1711 	.word	0x231d1711
    51a4:	35052f29 	.word	0x35052f29
    51a8:	0b          	.byte	0x0b
    51a9:	00          	.byte	0x00
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
    51aa:	4b1d      	ldr	r3, [pc, #116]	; (5220 <one_sin_update(LEDStruct&)+0x94>)
    51ac:	881b      	ldrh	r3, [r3, #0]
    51ae:	f880 3347 	strb.w	r3, [r0, #839]	; 0x347
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    51b2:	f7fd bc63 	b.w	2a7c <LEDDebug(LEDStruct&)>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
    51b6:	4b1a      	ldr	r3, [pc, #104]	; (5220 <one_sin_update(LEDStruct&)+0x94>)
    51b8:	881b      	ldrh	r3, [r3, #0]
    51ba:	f880 333d 	strb.w	r3, [r0, #829]	; 0x33d
		default:	break;
	}
	LEDDebug(leds);
    51be:	f7fd bc5d 	b.w	2a7c <LEDDebug(LEDStruct&)>
}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
    51c2:	4b17      	ldr	r3, [pc, #92]	; (5220 <one_sin_update(LEDStruct&)+0x94>)
    51c4:	881b      	ldrh	r3, [r3, #0]
    51c6:	f880 3337 	strb.w	r3, [r0, #823]	; 0x337
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    51ca:	f7fd bc57 	b.w	2a7c <LEDDebug(LEDStruct&)>

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
    51ce:	4b14      	ldr	r3, [pc, #80]	; (5220 <one_sin_update(LEDStruct&)+0x94>)
    51d0:	881b      	ldrh	r3, [r3, #0]
    51d2:	f880 3338 	strb.w	r3, [r0, #824]	; 0x338
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    51d6:	f7fd bc51 	b.w	2a7c <LEDDebug(LEDStruct&)>
void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
    51da:	4b11      	ldr	r3, [pc, #68]	; (5220 <one_sin_update(LEDStruct&)+0x94>)
    51dc:	881b      	ldrh	r3, [r3, #0]
    51de:	f880 3339 	strb.w	r3, [r0, #825]	; 0x339
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    51e2:	f7fd bc4b 	b.w	2a7c <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
    51e6:	4b0e      	ldr	r3, [pc, #56]	; (5220 <one_sin_update(LEDStruct&)+0x94>)
    51e8:	881b      	ldrh	r3, [r3, #0]
    51ea:	f880 333a 	strb.w	r3, [r0, #826]	; 0x33a
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    51ee:	f7fd bc45 	b.w	2a7c <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
    51f2:	4b0b      	ldr	r3, [pc, #44]	; (5220 <one_sin_update(LEDStruct&)+0x94>)
    51f4:	881b      	ldrh	r3, [r3, #0]
    51f6:	f880 333e 	strb.w	r3, [r0, #830]	; 0x33e
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    51fa:	f7fd bc3f 	b.w	2a7c <LEDDebug(LEDStruct&)>
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
    51fe:	4b08      	ldr	r3, [pc, #32]	; (5220 <one_sin_update(LEDStruct&)+0x94>)
    5200:	881b      	ldrh	r3, [r3, #0]
    5202:	f880 333b 	strb.w	r3, [r0, #827]	; 0x33b
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    5206:	f7fd bc39 	b.w	2a7c <LEDDebug(LEDStruct&)>
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
    520a:	4b05      	ldr	r3, [pc, #20]	; (5220 <one_sin_update(LEDStruct&)+0x94>)
    520c:	881b      	ldrh	r3, [r3, #0]
    520e:	f880 3348 	strb.w	r3, [r0, #840]	; 0x348
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    5212:	f7fd bc33 	b.w	2a7c <LEDDebug(LEDStruct&)>
    5216:	bf00      	nop
    5218:	1fff9a24 	.word	0x1fff9a24
    521c:	1fff91e1 	.word	0x1fff91e1
    5220:	1fff90e2 	.word	0x1fff90e2

00005224 <one_sin(LEDStruct&)>:
}

void one_sin(LEDStruct& leds) {
    5224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { one_sin_init(leds); }
    5228:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    522c:	b084      	sub	sp, #16
    522e:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { one_sin_init(leds); }
    5230:	2a00      	cmp	r2, #0
    5232:	f040 80a4 	bne.w	537e <one_sin(LEDStruct&)+0x15a>
    5236:	4daa      	ldr	r5, [pc, #680]	; (54e0 <one_sin(LEDStruct&)+0x2bc>)
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
	leds.sin_start		= 0;
    5238:	f884 233d 	strb.w	r2, [r4, #829]	; 0x33d
    523c:	882b      	ldrh	r3, [r5, #0]
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
    523e:	48a9      	ldr	r0, [pc, #676]	; (54e4 <one_sin(LEDStruct&)+0x2c0>)
    5240:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    5244:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    5248:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    524c:	f10e 0e19 	add.w	lr, lr, #25
    5250:	fa1f fe8e 	uxth.w	lr, lr
    5254:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    5258:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    525c:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    5260:	3619      	adds	r6, #25
    5262:	b2b6      	uxth	r6, r6
    5264:	eb06 2c46 	add.w	ip, r6, r6, lsl #9
    5268:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
    526c:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    5270:	f10c 0c19 	add.w	ip, ip, #25
    5274:	fa1f fc8c 	uxth.w	ip, ip
    5278:	eb0c 214c 	add.w	r1, ip, ip, lsl #9
    527c:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    5280:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    5284:	3119      	adds	r1, #25
    5286:	b289      	uxth	r1, r1
    5288:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    528c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5290:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5294:	3219      	adds	r2, #25
    5296:	b292      	uxth	r2, r2
    5298:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    529c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    52a0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    52a4:	3319      	adds	r3, #25
    52a6:	b29b      	uxth	r3, r3
    52a8:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    52ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    52b0:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    52b4:	3719      	adds	r7, #25
    52b6:	b2bf      	uxth	r7, r7
    52b8:	eb07 2847 	add.w	r8, r7, r7, lsl #9
    52bc:	eb07 0888 	add.w	r8, r7, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    52c0:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    52c4:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
    52c8:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    52cc:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.sin_inc		= si;
    52d0:	fa5f fe8e 	uxtb.w	lr, lr
	leds.sin_speed		= ss + (saf/5);
	leds.sin_cutoff		= sc;
    52d4:	fa5f f98c 	uxtb.w	r9, ip
    52d8:	f108 0819 	add.w	r8, r8, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    52dc:	eb02 2212 	add.w	r2, r2, r2, lsr #8
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.sin_inc		= si;
    52e0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    52e4:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    52e6:	fa1f fc88 	uxth.w	ip, r8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    52ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    52ee:	eb06 2816 	add.w	r8, r6, r6, lsr #8
	leds.sin_speed		= ss + (saf/5);
	leds.sin_cutoff		= sc;
    52f2:	eb09 0689 	add.w	r6, r9, r9, lsl #2
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
    52f6:	fa5f f982 	uxtb.w	r9, r2
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.sin_inc		= si;
    52fa:	ea4f 222e 	mov.w	r2, lr, asr #8
    52fe:	3201      	adds	r2, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5300:	119b      	asrs	r3, r3, #6
    5302:	3314      	adds	r3, #20
	leds.sin_speed		= ss + (saf/5);
	leds.sin_cutoff		= sc;
    5304:	eb06 0686 	add.w	r6, r6, r6, lsl #2
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.sin_inc		= si;
    5308:	f884 2337 	strb.w	r2, [r4, #823]	; 0x337
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    530c:	eb0c 221c 	add.w	r2, ip, ip, lsr #8
    5310:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5314:	b2db      	uxtb	r3, r3
	leds.sin_speed		= ss + (saf/5);
	leds.sin_cutoff		= sc;
    5316:	11b6      	asrs	r6, r6, #6
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
    5318:	f3c8 1842 	ubfx	r8, r8, #5, #3
	leds.sin_cutoff		= sc;
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
    531c:	eb09 0989 	add.w	r9, r9, r9, lsl #2
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
    5320:	b2d2      	uxtb	r2, r2
	leds.delay_time			= 15;

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
	leds.sin_cutoff		= sc;
	leds.sin_rot		= sr;
    5322:	f3c1 1e81 	ubfx	lr, r1, #6, #2
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
    5326:	f108 0805 	add.w	r8, r8, #5
    532a:	fba0 1003 	umull	r1, r0, r0, r3
	leds.sin_cutoff		= sc;
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
    532e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
	leds.sin_cutoff		= sc;
    5332:	f106 0164 	add.w	r1, r6, #100	; 0x64
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
    5336:	ea4f 2629 	mov.w	r6, r9, asr #8
	leds.delay_time			= 15;

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
	leds.sin_cutoff		= sc;
	leds.sin_rot		= sr;
    533a:	f10e 0e01 	add.w	lr, lr, #1
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
    533e:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
    5342:	eb08 0090 	add.w	r0, r8, r0, lsr #2
	leds.sin_cutoff		= sc;
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
    5346:	11d2      	asrs	r2, r2, #7
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
	leds.sin_cutoff		= sc;
    5348:	f884 1339 	strb.w	r1, [r4, #825]	; 0x339
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
    534c:	f884 633e 	strb.w	r6, [r4, #830]	; 0x33e
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
    5350:	2101      	movs	r1, #1
	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
	leds.sin_cutoff		= sc;
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
    5352:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
    5356:	2612      	movs	r6, #18
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    5358:	230f      	movs	r3, #15

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
	leds.sin_cutoff		= sc;
	leds.sin_rot		= sr;
    535a:	f884 e33a 	strb.w	lr, [r4, #826]	; 0x33a
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    535e:	f8a5 c000 	strh.w	ip, [r5]
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
    5362:	f884 2348 	strb.w	r2, [r4, #840]	; 0x348
	leds.sin_speed		= ss + (saf/5);
	leds.sin_cutoff		= sc;
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
    5366:	f884 7347 	strb.w	r7, [r4, #839]	; 0x347
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
    536a:	f884 0338 	strb.w	r0, [r4, #824]	; 0x338
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
    536e:	f884 122d 	strb.w	r1, [r4, #557]	; 0x22d
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
    5372:	f884 1229 	strb.w	r1, [r4, #553]	; 0x229
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
    5376:	f884 622c 	strb.w	r6, [r4, #556]	; 0x22c
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    537a:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    537e:	4b5a      	ldr	r3, [pc, #360]	; (54e8 <one_sin(LEDStruct&)+0x2c4>)
    5380:	781b      	ldrb	r3, [r3, #0]
    5382:	2b00      	cmp	r3, #0
    5384:	f040 80a8 	bne.w	54d8 <one_sin(LEDStruct&)+0x2b4>

	leds.sin_start += leds.sin_inc;
    5388:	f894 133d 	ldrb.w	r1, [r4, #829]	; 0x33d
    538c:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
    5390:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }

	leds.sin_start += leds.sin_inc;
    5394:	440b      	add	r3, r1
    5396:	b2db      	uxtb	r3, r3
    5398:	f884 333d 	strb.w	r3, [r4, #829]	; 0x33d
	leds.sin_index = leds.sin_start;
    539c:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
	if (leds.this_dir) {
    53a0:	2a00      	cmp	r2, #0
    53a2:	f000 8090 	beq.w	54c6 <one_sin(LEDStruct&)+0x2a2>
		leds.sin_phase += leds.sin_speed;
    53a6:	f894 233e 	ldrb.w	r2, [r4, #830]	; 0x33e
    53aa:	f894 3338 	ldrb.w	r3, [r4, #824]	; 0x338
    53ae:	441a      	add	r2, r3
    53b0:	b2d2      	uxtb	r2, r2
    53b2:	f884 233e 	strb.w	r2, [r4, #830]	; 0x33e
    53b6:	f204 18c7 	addw	r8, r4, #455	; 0x1c7
    53ba:	4625      	mov	r5, r4
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    53bc:	2600      	movs	r6, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    53be:	27ff      	movs	r7, #255	; 0xff
    53c0:	e058      	b.n	5474 <one_sin(LEDStruct&)+0x250>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    53c2:	2900      	cmp	r1, #0
        in = 255 - in;
    53c4:	bfbc      	itt	lt
    53c6:	43d2      	mvnlt	r2, r2
    53c8:	b2d2      	uxtblt	r2, r2
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    53ca:	0052      	lsls	r2, r2, #1
    53cc:	b2d2      	uxtb	r2, r2
    53ce:	1c53      	adds	r3, r2, #1
    53d0:	fb03 f202 	mul.w	r2, r3, r2
    53d4:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    53d6:	fb02 f303 	mul.w	r3, r2, r3
    53da:	121b      	asrs	r3, r3, #8
    53dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    53e0:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    53e4:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    53e6:	05d3      	lsls	r3, r2, #23
    53e8:	bf54      	ite	pl
    53ea:	fa5f fa82 	uxtbpl.w	sl, r2
    53ee:	f04f 0aff 	movmi.w	sl, #255	; 0xff
    53f2:	ebc0 0a0a 	rsb	sl, r0, sl
    53f6:	fa5f fa8a 	uxtb.w	sl, sl
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < NUM_LEDS; k++) {
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
    53fa:	f894 2348 	ldrb.w	r2, [r4, #840]	; 0x348
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    53fe:	f894 3347 	ldrb.w	r3, [r4, #839]	; 0x347
    5402:	f88d 200e 	strb.w	r2, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5406:	4629      	mov	r1, r5
    5408:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    540a:	f88d 300c 	strb.w	r3, [sp, #12]
    540e:	f88d 700d 	strb.w	r7, [sp, #13]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5412:	f004 fc9b 	bl	9d4c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
    5416:	f894 333c 	ldrb.w	r3, [r4, #828]	; 0x33c
    541a:	f894 2337 	ldrb.w	r2, [r4, #823]	; 0x337
    541e:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    5422:	9100      	str	r1, [sp, #0]
    5424:	fb02 3209 	mla	r2, r2, r9, r3
    5428:	b2d2      	uxtb	r2, r2
    542a:	4653      	mov	r3, sl
    542c:	4641      	mov	r1, r8
    542e:	a803      	add	r0, sp, #12
    5430:	f004 fa90 	bl	9954 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    5434:	782b      	ldrb	r3, [r5, #0]
    5436:	f89d 200c 	ldrb.w	r2, [sp, #12]
    543a:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    543e:	702b      	strb	r3, [r5, #0]
    5440:	786a      	ldrb	r2, [r5, #1]
    5442:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5446:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    544a:	706a      	strb	r2, [r5, #1]
    544c:	78ab      	ldrb	r3, [r5, #2]
    544e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    5452:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    5456:	70ab      	strb	r3, [r5, #2]
		leds.sin_index += leds.sin_rot;
    5458:	f894 233c 	ldrb.w	r2, [r4, #828]	; 0x33c
    545c:	f894 333a 	ldrb.w	r3, [r4, #826]	; 0x33a
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < NUM_LEDS; k++) {
    5460:	3601      	adds	r6, #1
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    5462:	4413      	add	r3, r2
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < NUM_LEDS; k++) {
    5464:	2e96      	cmp	r6, #150	; 0x96
    5466:	f105 0503 	add.w	r5, r5, #3
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    546a:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < NUM_LEDS; k++) {
    546e:	d027      	beq.n	54c0 <one_sin(LEDStruct&)+0x29c>
    5470:	f894 233e 	ldrb.w	r2, [r4, #830]	; 0x33e
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    5474:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
    5478:	fa5f f986 	uxtb.w	r9, r6
    547c:	fb03 2209 	mla	r2, r3, r9, r2
    5480:	b2d2      	uxtb	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5482:	b251      	sxtb	r1, r2
    5484:	2900      	cmp	r1, #0
        in = 255 - in;
    5486:	bfba      	itte	lt
    5488:	43d3      	mvnlt	r3, r2
    548a:	b2db      	uxtblt	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    548c:	4613      	movge	r3, r2
    548e:	005b      	lsls	r3, r3, #1
    5490:	b2db      	uxtb	r3, r3
    5492:	1c58      	adds	r0, r3, #1
    5494:	fb00 f303 	mul.w	r3, r0, r3
    5498:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    549a:	fb03 f000 	mul.w	r0, r3, r0
    549e:	1200      	asrs	r0, r0, #8
    54a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    54a4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    54a8:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    54aa:	05d8      	lsls	r0, r3, #23
    54ac:	f894 0339 	ldrb.w	r0, [r4, #825]	; 0x339

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    54b0:	bf54      	ite	pl
    54b2:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    54b4:	23ff      	movmi	r3, #255	; 0xff
    54b6:	4298      	cmp	r0, r3
    54b8:	d383      	bcc.n	53c2 <one_sin(LEDStruct&)+0x19e>
    54ba:	f04f 0a00 	mov.w	sl, #0
    54be:	e79c      	b.n	53fa <one_sin(LEDStruct&)+0x1d6>
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
	}
}
    54c0:	b004      	add	sp, #16
    54c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
    54c6:	f894 333e 	ldrb.w	r3, [r4, #830]	; 0x33e
    54ca:	f894 2338 	ldrb.w	r2, [r4, #824]	; 0x338
    54ce:	1a9a      	subs	r2, r3, r2
    54d0:	b2d2      	uxtb	r2, r2
    54d2:	f884 233e 	strb.w	r2, [r4, #830]	; 0x33e
    54d6:	e76e      	b.n	53b6 <one_sin(LEDStruct&)+0x192>
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    54d8:	4620      	mov	r0, r4
    54da:	f7ff fe57 	bl	518c <one_sin_update(LEDStruct&)>
    54de:	e753      	b.n	5388 <one_sin(LEDStruct&)+0x164>
    54e0:	1fff8780 	.word	0x1fff8780
    54e4:	cccccccd 	.word	0xcccccccd
    54e8:	1fff91e1 	.word	0x1fff91e1

000054ec <pride(LEDStruct&)>:
	LEDDebug(leds);
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    54ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { pride_init(leds); }
    54f0:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	LEDDebug(leds);
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    54f4:	b08b      	sub	sp, #44	; 0x2c
    54f6:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { pride_init(leds); }
    54f8:	b99b      	cbnz	r3, 5522 <pride(LEDStruct&)+0x36>
    54fa:	49a1      	ldr	r1, [pc, #644]	; (5780 <pride(LEDStruct&)+0x294>)
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= PRIDE;
	leds.use_palette		= 0;
    54fc:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    5500:	880b      	ldrh	r3, [r1, #0]
    5502:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5506:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    550a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= PRIDE;
    550e:	220f      	movs	r2, #15
    5510:	3319      	adds	r3, #25
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    5512:	2001      	movs	r0, #1
    5514:	800b      	strh	r3, [r1, #0]
    5516:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type			= PRIDE;
    551a:	f884 222c 	strb.w	r2, [r4, #556]	; 0x22c
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    551e:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
	if (!leds.mode_initialized) { pride_init(leds); }
	if (keyboard_update) { pride_update(leds); }
    5522:	4b98      	ldr	r3, [pc, #608]	; (5784 <pride(LEDStruct&)+0x298>)
    5524:	781a      	ldrb	r2, [r3, #0]
    5526:	2a00      	cmp	r2, #0
    5528:	f040 8195 	bne.w	5856 <pride(LEDStruct&)+0x36a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    552c:	4a96      	ldr	r2, [pc, #600]	; (5788 <pride(LEDStruct&)+0x29c>)
    552e:	6813      	ldr	r3, [r2, #0]
    5530:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    5532:	9909      	ldr	r1, [sp, #36]	; 0x24
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5534:	f645 7328 	movw	r3, #24360	; 0x5f28
    5538:	fb03 f101 	mul.w	r1, r3, r1
    553c:	0c09      	lsrs	r1, r1, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    553e:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5540:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5544:	d503      	bpl.n	554e <pride(LEDStruct&)+0x62>
    5546:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    554a:	3307      	adds	r3, #7
    554c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    554e:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];
    5550:	4e8e      	ldr	r6, [pc, #568]	; (578c <pride(LEDStruct&)+0x2a0>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5552:	4d8f      	ldr	r5, [pc, #572]	; (5790 <pride(LEDStruct&)+0x2a4>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5554:	5c37      	ldrb	r7, [r6, r0]
    5556:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    555a:	f3c3 0346 	ubfx	r3, r3, #1, #7
    555e:	fb07 0303 	mla	r3, r7, r3, r0
    5562:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5564:	040f      	lsls	r7, r1, #16
    5566:	bf48      	it	mi
    5568:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    556a:	6811      	ldr	r1, [r2, #0]
    556c:	9108      	str	r1, [sp, #32]
    556e:	b21b      	sxth	r3, r3

	leds.sat8 = beatsin88(87, 220, 250);
    5570:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	return ret;
    5574:	9808      	ldr	r0, [sp, #32]
    5576:	4987      	ldr	r1, [pc, #540]	; (5794 <pride(LEDStruct&)+0x2a8>)
    5578:	b29b      	uxth	r3, r3
    557a:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    557e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    5582:	fb01 f100 	mul.w	r1, r1, r0
    5586:	0c09      	lsrs	r1, r1, #16
    5588:	f10c 0cdc 	add.w	ip, ip, #220	; 0xdc
    558c:	fa5f fc8c 	uxtb.w	ip, ip
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5590:	0448      	lsls	r0, r1, #17
    5592:	f884 c31d 	strb.w	ip, [r4, #797]	; 0x31d
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5596:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    559a:	d503      	bpl.n	55a4 <pride(LEDStruct&)+0xb8>
    559c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    55a0:	3307      	adds	r3, #7
    55a2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    55a4:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    55a6:	f3c3 0346 	ubfx	r3, r3, #1, #7
    55aa:	5c37      	ldrb	r7, [r6, r0]
    55ac:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    55b0:	fb07 0303 	mla	r3, r7, r3, r0

    if( theta & 0x8000 ) y = -y;
    55b4:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    55b6:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    55b8:	bf48      	it	mi
    55ba:	425b      	negmi	r3, r3
    55bc:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    55be:	6811      	ldr	r1, [r2, #0]
    55c0:	9107      	str	r1, [sp, #28]
	leds.brightdepth = beatsin88(341, 96, 224);
    55c2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    55c6:	b29b      	uxth	r3, r3
    55c8:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
	return ret;
    55cc:	9807      	ldr	r0, [sp, #28]
    55ce:	0c19      	lsrs	r1, r3, #16
    55d0:	f64d 6308 	movw	r3, #56840	; 0xde08
    55d4:	fb03 f000 	mul.w	r0, r3, r0
    55d8:	0c00      	lsrs	r0, r0, #16
    55da:	3160      	adds	r1, #96	; 0x60
    55dc:	b2c9      	uxtb	r1, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    55de:	0447      	lsls	r7, r0, #17
    55e0:	f884 131a 	strb.w	r1, [r4, #794]	; 0x31a
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    55e4:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    55e8:	d503      	bpl.n	55f2 <pride(LEDStruct&)+0x106>
    55ea:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    55ee:	3307      	adds	r3, #7
    55f0:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    55f2:	0a1f      	lsrs	r7, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    55f4:	f3c3 0346 	ubfx	r3, r3, #1, #7
    55f8:	f816 e007 	ldrb.w	lr, [r6, r7]
    55fc:	f835 7017 	ldrh.w	r7, [r5, r7, lsl #1]
    5600:	fb0e 7303 	mla	r3, lr, r3, r7

    if( theta & 0x8000 ) y = -y;
    5604:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5606:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5608:	bf48      	it	mi
    560a:	425b      	negmi	r3, r3
    560c:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    560e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    5612:	b29b      	uxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5614:	6810      	ldr	r0, [r2, #0]
    5616:	9006      	str	r0, [sp, #24]
    5618:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
    561c:	eb03 2000 	add.w	r0, r3, r0, lsl #8
	return ret;
    5620:	9f06      	ldr	r7, [sp, #24]
    5622:	0c00      	lsrs	r0, r0, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5624:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    5628:	fb03 f307 	mul.w	r3, r3, r7
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    562c:	f500 50c8 	add.w	r0, r0, #6400	; 0x1900
    5630:	b287      	uxth	r7, r0
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5632:	0c18      	lsrs	r0, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5634:	f410 4f80 	tst.w	r0, #16384	; 0x4000
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    5638:	f8a4 7320 	strh.w	r7, [r4, #800]	; 0x320
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    563c:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5640:	d003      	beq.n	564a <pride(LEDStruct&)+0x15e>
    5642:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5646:	3307      	adds	r3, #7
    5648:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    564a:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    564e:	f3c3 0346 	ubfx	r3, r3, #1, #7
    5652:	f816 800e 	ldrb.w	r8, [r6, lr]
    5656:	f835 e01e 	ldrh.w	lr, [r5, lr, lsl #1]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    565a:	f8b4 9318 	ldrh.w	r9, [r4, #792]	; 0x318
    565e:	fb08 e303 	mla	r3, r8, r3, lr

    if( theta & 0x8000 ) y = -y;
    5662:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5664:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5666:	bf48      	it	mi
    5668:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    566a:	6810      	ldr	r0, [r2, #0]
    566c:	9005      	str	r0, [sp, #20]
    566e:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5670:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    5674:	b29b      	uxth	r3, r3
    5676:	2026      	movs	r0, #38	; 0x26
	return ret;
    5678:	f8dd e014 	ldr.w	lr, [sp, #20]
    567c:	fb00 f003 	mul.w	r0, r0, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5680:	f647 3398 	movw	r3, #31640	; 0x7b98
    5684:	fb03 fe0e 	mul.w	lr, r3, lr
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5688:	0c00      	lsrs	r0, r0, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    568a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    568e:	3017      	adds	r0, #23
    5690:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5692:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	if (keyboard_update) { pride_update(leds); }

	leds.sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    5696:	f884 031b 	strb.w	r0, [r4, #795]	; 0x31b
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    569a:	f3ce 03ca 	ubfx	r3, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    569e:	d003      	beq.n	56a8 <pride(LEDStruct&)+0x1bc>
    56a0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    56a4:	3307      	adds	r3, #7
    56a6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    56a8:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    56ac:	f3c3 0346 	ubfx	r3, r3, #1, #7
    56b0:	f816 a008 	ldrb.w	sl, [r6, r8]
    56b4:	f835 8018 	ldrh.w	r8, [r5, r8, lsl #1]
    56b8:	fb0a 8303 	mla	r3, sl, r3, r8

    if( theta & 0x8000 ) y = -y;
    56bc:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    56c0:	b29b      	uxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    56c2:	f8d2 e000 	ldr.w	lr, [r2]
    56c6:	f8cd e00c 	str.w	lr, [sp, #12]

    if( theta & 0x8000 ) y = -y;
    56ca:	bf18      	it	ne
    56cc:	425b      	negne	r3, r3
	return ret;
    56ce:	f8dd a00c 	ldr.w	sl, [sp, #12]

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    56d2:	f8b4 8316 	ldrh.w	r8, [r4, #790]	; 0x316
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    56d6:	6812      	ldr	r2, [r2, #0]
    56d8:	9204      	str	r2, [sp, #16]
    56da:	b21b      	sxth	r3, r3
    56dc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
    56e0:	fa1f fa8a 	uxth.w	sl, sl
    56e4:	f640 32b8 	movw	r2, #3000	; 0xbb8
    56e8:	b29b      	uxth	r3, r3
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    56ea:	f8b4 e314 	ldrh.w	lr, [r4, #788]	; 0x314
	return ret;
    56ee:	f8dd b010 	ldr.w	fp, [sp, #16]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
    56f2:	f8a4 a326 	strh.w	sl, [r4, #806]	; 0x326
    56f6:	fb02 f303 	mul.w	r3, r2, r3
	leds.deltams = leds.ms - leds.sLastMillis;
    56fa:	ebc8 080a 	rsb	r8, r8, sl
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    56fe:	4a26      	ldr	r2, [pc, #152]	; (5798 <pride(LEDStruct&)+0x2ac>)
	leds.sLastMillis = leds.ms;
    5700:	f8a4 a316 	strh.w	sl, [r4, #790]	; 0x316

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    5704:	fa1f f888 	uxth.w	r8, r8
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    5708:	fb18 e000 	smlabb	r0, r8, r0, lr
    570c:	fb02 fb0b 	mul.w	fp, r2, fp
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5710:	0c1b      	lsrs	r3, r3, #16
    5712:	3301      	adds	r3, #1
    5714:	fa1f fe80 	uxth.w	lr, r0
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5718:	ea4f 401b 	mov.w	r0, fp, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    571c:	b29a      	uxth	r2, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    571e:	f410 4f80 	tst.w	r0, #16384	; 0x4000
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);
    5722:	f8a4 2324 	strh.w	r2, [r4, #804]	; 0x324

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    5726:	f8a4 8328 	strh.w	r8, [r4, #808]	; 0x328
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    572a:	f8a4 e314 	strh.w	lr, [r4, #788]	; 0x314
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    572e:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5732:	d003      	beq.n	573c <pride(LEDStruct&)+0x250>
    5734:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5738:	3307      	adds	r3, #7
    573a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    573c:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5740:	f3c3 0346 	ubfx	r3, r3, #1, #7
    5744:	f816 b00a 	ldrb.w	fp, [r6, sl]
    5748:	f835 a01a 	ldrh.w	sl, [r5, sl, lsl #1]
    574c:	fb0b a303 	mla	r3, fp, r3, sl
    5750:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5752:	0400      	lsls	r0, r0, #16
    5754:	bf48      	it	mi
    5756:	425b      	negmi	r3, r3
    5758:	b21b      	sxth	r3, r3
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    575a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    575e:	b29b      	uxth	r3, r3
    5760:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5764:	0c1b      	lsrs	r3, r3, #16
    5766:	3305      	adds	r3, #5
    5768:	b29b      	uxth	r3, r3
    576a:	fb08 9303 	mla	r3, r8, r3, r9
    576e:	f8a4 3318 	strh.w	r3, [r4, #792]	; 0x318
    5772:	4638      	mov	r0, r7
    5774:	4613      	mov	r3, r2
    5776:	f04f 0895 	mov.w	r8, #149	; 0x95
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    577a:	f64f 77ff 	movw	r7, #65535	; 0xffff
    577e:	e019      	b.n	57b4 <pride(LEDStruct&)+0x2c8>
    5780:	1fff8780 	.word	0x1fff8780
    5784:	1fff91e1 	.word	0x1fff91e1
    5788:	1ffface8 	.word	0x1ffface8
    578c:	0000dee8 	.word	0x0000dee8
    5790:	0000d718 	.word	0x0000d718
    5794:	000174f8 	.word	0x000174f8
    5798:	0001b580 	.word	0x0001b580
    579c:	f8b4 9322 	ldrh.w	r9, [r4, #802]	; 0x322
    57a0:	f8b4 3324 	ldrh.w	r3, [r4, #804]	; 0x324
    57a4:	f8b4 e32a 	ldrh.w	lr, [r4, #810]	; 0x32a
    57a8:	f8b4 0320 	ldrh.w	r0, [r4, #800]	; 0x320
    57ac:	f894 131a 	ldrb.w	r1, [r4, #794]	; 0x31a
    57b0:	f894 c31d 	ldrb.w	ip, [r4, #797]	; 0x31d
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    57b4:	4470      	add	r0, lr
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		leds.hue16 += leds.hueinc16;
    57b6:	444b      	add	r3, r9
    57b8:	b29b      	uxth	r3, r3
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    57ba:	b280      	uxth	r0, r0
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;
    57bc:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    57c0:	0442      	lsls	r2, r0, #17
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		leds.hue16 += leds.hueinc16;
    57c2:	f8a4 3322 	strh.w	r3, [r4, #802]	; 0x322
		leds.hue8 = leds.hue16 / 256;
    57c6:	f884 e31c 	strb.w	lr, [r4, #796]	; 0x31c

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    57ca:	f8a4 032a 	strh.w	r0, [r4, #810]	; 0x32a
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    57ce:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    57d2:	d503      	bpl.n	57dc <pride(LEDStruct&)+0x2f0>
    57d4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    57d8:	3307      	adds	r3, #7
    57da:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    57dc:	ea4f 2913 	mov.w	r9, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    57e0:	f3c3 0246 	ubfx	r2, r3, #1, #7
    57e4:	f816 a009 	ldrb.w	sl, [r6, r9]
    57e8:	f835 3019 	ldrh.w	r3, [r5, r9, lsl #1]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    57ec:	f88d e008 	strb.w	lr, [sp, #8]
    57f0:	fb0a 3302 	mla	r3, sl, r2, r3
    57f4:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    57f6:	0402      	lsls	r2, r0, #16
    57f8:	bf48      	it	mi
    57fa:	425b      	negmi	r3, r3
    57fc:	b21b      	sxth	r3, r3
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    57fe:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    5802:	b29b      	uxth	r3, r3

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    5804:	fb03 f003 	mul.w	r0, r3, r3
    5808:	0c00      	lsrs	r0, r0, #16
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    580a:	fb00 f201 	mul.w	r2, r0, r1
    580e:	43c9      	mvns	r1, r1
    5810:	eb01 4212 	add.w	r2, r1, r2, lsr #16
    5814:	b2d2      	uxtb	r2, r2
	for (uint16_t i = 0; i < NUM_LEDS; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    5816:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    581a:	f8a4 0330 	strh.w	r0, [r4, #816]	; 0x330
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    581e:	f884 231e 	strb.w	r2, [r4, #798]	; 0x31e
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5822:	a901      	add	r1, sp, #4
    5824:	a802      	add	r0, sp, #8
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5826:	f88d 200a 	strb.w	r2, [sp, #10]
    582a:	f88d c009 	strb.w	ip, [sp, #9]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    582e:	f004 fa8d 	bl	9d4c <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (NUM_LEDS - 1) - leds.pixelnumber;
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    5832:	eb08 0048 	add.w	r0, r8, r8, lsl #1
		leds.bri8 += (255 - leds.brightdepth);

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (NUM_LEDS - 1) - leds.pixelnumber;
    5836:	f8a4 8332 	strh.w	r8, [r4, #818]	; 0x332
    583a:	f108 38ff 	add.w	r8, r8, #4294967295
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    583e:	4420      	add	r0, r4
    5840:	2240      	movs	r2, #64	; 0x40
    5842:	a901      	add	r1, sp, #4
    5844:	fa1f f888 	uxth.w	r8, r8
    5848:	f004 f826 	bl	9898 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < NUM_LEDS; i++) {
    584c:	45b8      	cmp	r8, r7
    584e:	d1a5      	bne.n	579c <pride(LEDStruct&)+0x2b0>

		leds.pixelnumber = i;
		leds.pixelnumber = (NUM_LEDS - 1) - leds.pixelnumber;
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
	}
}
    5850:	b00b      	add	sp, #44	; 0x2c
    5852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.use_palette		= 0;
	leds.delay_time			= 15;
}

void pride_update(LEDStruct& leds) {
	keyboard_update = 0;
    5856:	2200      	movs	r2, #0
	switch (update_var) {
	default:	break;
	}
	LEDDebug(leds);
    5858:	4620      	mov	r0, r4
	leds.use_palette		= 0;
	leds.delay_time			= 15;
}

void pride_update(LEDStruct& leds) {
	keyboard_update = 0;
    585a:	701a      	strb	r2, [r3, #0]
	switch (update_var) {
	default:	break;
	}
	LEDDebug(leds);
    585c:	f7fd f90e 	bl	2a7c <LEDDebug(LEDStruct&)>
    5860:	e664      	b.n	552c <pride(LEDStruct&)+0x40>
    5862:	bf00      	nop

00005864 <fireworks_update(LEDStruct&)>:

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
    5864:	b510      	push	{r4, lr}
	keyboard_update = 0;
	switch (update_var) {
    5866:	4b0f      	ldr	r3, [pc, #60]	; (58a4 <fireworks_update(LEDStruct&)+0x40>)
	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
    5868:	4a0f      	ldr	r2, [pc, #60]	; (58a8 <fireworks_update(LEDStruct&)+0x44>)
	switch (update_var) {
    586a:	781b      	ldrb	r3, [r3, #0]
	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
    586c:	2100      	movs	r1, #0

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
    586e:	b082      	sub	sp, #8
    5870:	4604      	mov	r4, r0
	keyboard_update = 0;
    5872:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    5874:	b98b      	cbnz	r3, 589a <fireworks_update(LEDStruct&)+0x36>
		case 0:	leds.use_overlay = (bool)update_arg;	
    5876:	4a0d      	ldr	r2, [pc, #52]	; (58ac <fireworks_update(LEDStruct&)+0x48>)
			fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
    5878:	480d      	ldr	r0, [pc, #52]	; (58b0 <fireworks_update(LEDStruct&)+0x4c>)
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:	leds.use_overlay = (bool)update_arg;	
    587a:	8812      	ldrh	r2, [r2, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    587c:	f88d 3004 	strb.w	r3, [sp, #4]
    5880:	1a52      	subs	r2, r2, r1
    5882:	bf18      	it	ne
    5884:	2201      	movne	r2, #1
    5886:	f884 21c6 	strb.w	r2, [r4, #454]	; 0x1c6
			fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
    588a:	2196      	movs	r1, #150	; 0x96
    588c:	aa01      	add	r2, sp, #4
    588e:	f88d 3005 	strb.w	r3, [sp, #5]
    5892:	f88d 3006 	strb.w	r3, [sp, #6]
    5896:	f003 ff3b 	bl	9710 <fill_solid(CRGB*, int, CRGB const&)>
			break; //a
		default:	break;
	}
	LEDDebug(leds);
    589a:	4620      	mov	r0, r4
    589c:	f7fd f8ee 	bl	2a7c <LEDDebug(LEDStruct&)>
}
    58a0:	b002      	add	sp, #8
    58a2:	bd10      	pop	{r4, pc}
    58a4:	1fff9a24 	.word	0x1fff9a24
    58a8:	1fff91e1 	.word	0x1fff91e1
    58ac:	1fff90e2 	.word	0x1fff90e2
    58b0:	1fff91e8 	.word	0x1fff91e8

000058b4 <prepare_for_explosion(LEDStruct&)>:

void prepare_for_explosion(LEDStruct& leds) {
    58b4:	b570      	push	{r4, r5, r6, lr}
    58b6:	4604      	mov	r4, r0
    58b8:	b082      	sub	sp, #8
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    58ba:	4d1b      	ldr	r5, [pc, #108]	; (5928 <prepare_for_explosion(LEDStruct&)+0x74>)
	random16_add_entropy(analogRead(2));
    58bc:	2002      	movs	r0, #2
    58be:	f004 fd9d 	bl	a3fc <analogRead>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    58c2:	882b      	ldrh	r3, [r5, #0]
    58c4:	4418      	add	r0, r3
    58c6:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    58ca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    58ce:	f243 6319 	movw	r3, #13849	; 0x3619
    58d2:	4418      	add	r0, r3
    58d4:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    58d6:	eb00 2210 	add.w	r2, r0, r0, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    58da:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    58de:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	leds.firework_position = random8(3 * NUM_LEDS / 10, 7 * NUM_LEDS / 10);
    58e2:	b2d2      	uxtb	r2, r2
    58e4:	4403      	add	r3, r0
    58e6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    58ea:	b29b      	uxth	r3, r3
    58ec:	1192      	asrs	r2, r2, #6
	leds.current_stage = FADEUP;
    58ee:	2600      	movs	r6, #0
	leds.firework_hue = random8();
    58f0:	eb03 2113 	add.w	r1, r3, r3, lsr #8
	LEDDebug(leds);
}

void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(3 * NUM_LEDS / 10, 7 * NUM_LEDS / 10);
    58f4:	322d      	adds	r2, #45	; 0x2d
    58f6:	f884 2349 	strb.w	r2, [r4, #841]	; 0x349
	leds.current_stage = FADEUP;
	leds.firework_hue = random8();
    58fa:	f884 134a 	strb.w	r1, [r4, #842]	; 0x34a
}

void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(3 * NUM_LEDS / 10, 7 * NUM_LEDS / 10);
	leds.current_stage = FADEUP;
    58fe:	f884 634c 	strb.w	r6, [r4, #844]	; 0x34c
	leds.firework_hue = random8();
	leds.firework_bri = 0;
    5902:	f884 634b 	strb.w	r6, [r4, #843]	; 0x34b
	leds.exploded = false;
    5906:	f884 6354 	strb.w	r6, [r4, #852]	; 0x354
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    590a:	4620      	mov	r0, r4
    590c:	aa01      	add	r2, sp, #4
    590e:	2196      	movs	r1, #150	; 0x96
    5910:	802b      	strh	r3, [r5, #0]
    5912:	f88d 6004 	strb.w	r6, [sp, #4]
    5916:	f88d 6005 	strb.w	r6, [sp, #5]
    591a:	f88d 6006 	strb.w	r6, [sp, #6]
    591e:	f003 fef7 	bl	9710 <fill_solid(CRGB*, int, CRGB const&)>
}
    5922:	b002      	add	sp, #8
    5924:	bd70      	pop	{r4, r5, r6, pc}
    5926:	bf00      	nop
    5928:	1fff8780 	.word	0x1fff8780

0000592c <fadeup(LEDStruct&)>:

void fadeup(LEDStruct& leds) {
    592c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (leds.exploded) {
    5930:	f890 3354 	ldrb.w	r3, [r0, #852]	; 0x354
	leds.firework_bri = 0;
	leds.exploded = false;
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
}

void fadeup(LEDStruct& leds) {
    5934:	b087      	sub	sp, #28
    5936:	9002      	str	r0, [sp, #8]
	if (leds.exploded) {
    5938:	2b00      	cmp	r3, #0
    593a:	f000 8081 	beq.w	5a40 <fadeup(LEDStruct&)+0x114>
    593e:	f890 3349 	ldrb.w	r3, [r0, #841]	; 0x349
    5942:	9303      	str	r3, [sp, #12]
    5944:	4606      	mov	r6, r0
    5946:	4618      	mov	r0, r3
    5948:	4b4f      	ldr	r3, [pc, #316]	; (5a88 <fadeup(LEDStruct&)+0x15c>)
    594a:	881b      	ldrh	r3, [r3, #0]
    594c:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    5950:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5954:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    5958:	3419      	adds	r4, #25
    595a:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    595c:	eb04 2314 	add.w	r3, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5960:	b2db      	uxtb	r3, r3
    5962:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    5966:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    596a:	ea4f 2929 	mov.w	r9, r9, asr #8
    596e:	f109 0914 	add.w	r9, r9, #20
		leds.current_stage = EXPLOSION;
    5972:	2301      	movs	r3, #1
    5974:	fa5f f989 	uxtb.w	r9, r9
    5978:	f886 334c 	strb.w	r3, [r6, #844]	; 0x34c
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    597c:	f886 9355 	strb.w	r9, [r6, #853]	; 0x355
    5980:	f007 f890 	bl	caa4 <__aeabi_ui2f>
    5984:	f506 7b55 	add.w	fp, r6, #852	; 0x354
    5988:	f506 6aae 	add.w	sl, r6, #1392	; 0x570
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    598c:	465b      	mov	r3, fp
    598e:	f206 4844 	addw	r8, r6, #1092	; 0x444
    5992:	f206 5737 	addw	r7, r6, #1335	; 0x537
    5996:	46d3      	mov	fp, sl
    5998:	9001      	str	r0, [sp, #4]
    599a:	f506 66cc 	add.w	r6, r6, #1632	; 0x660
}

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    599e:	2500      	movs	r5, #0
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    59a0:	469a      	mov	sl, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    59a2:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    59a6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    59aa:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    59ae:	3419      	adds	r4, #25
    59b0:	b2a4      	uxth	r4, r4
    59b2:	2373      	movs	r3, #115	; 0x73
    59b4:	fb03 f004 	mul.w	r0, r3, r4
    59b8:	0c00      	lsrs	r0, r0, #16
void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
    59ba:	9b01      	ldr	r3, [sp, #4]
    59bc:	f84a 3f04 	str.w	r3, [sl, #4]!
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    59c0:	300a      	adds	r0, #10
    59c2:	b280      	uxth	r0, r0
    59c4:	f007 f86e 	bl	caa4 <__aeabi_ui2f>
    59c8:	4930      	ldr	r1, [pc, #192]	; (5a8c <fadeup(LEDStruct&)+0x160>)
    59ca:	f007 f977 	bl	ccbc <__aeabi_fdiv>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    59ce:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    59d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    59d6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    59da:	3319      	adds	r3, #25
    59dc:	b29b      	uxth	r3, r3
    59de:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    59e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    59e6:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    59ea:	3419      	adds	r4, #25
    59ec:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    59ee:	eb04 2114 	add.w	r1, r4, r4, lsr #8
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    59f2:	b2c9      	uxtb	r1, r1
    59f4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    59f8:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    59fc:	1209      	asrs	r1, r1, #8
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
    59fe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			leds.spark_fade[i] = random8(10, 15);
    5a02:	310a      	adds	r1, #10
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5a04:	f848 0f04 	str.w	r0, [r8, #4]!
			leds.spark_dir[i] = random8(0, 2);
    5a08:	f807 3f01 	strb.w	r3, [r7, #1]!
			leds.spark_fade[i] = random8(10, 15);
    5a0c:	b2c8      	uxtb	r0, r1
    5a0e:	f007 f849 	bl	caa4 <__aeabi_ui2f>
    5a12:	3501      	adds	r5, #1

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    5a14:	b2eb      	uxtb	r3, r5
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    5a16:	4a1e      	ldr	r2, [pc, #120]	; (5a90 <fadeup(LEDStruct&)+0x164>)
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    5a18:	f84b 0f04 	str.w	r0, [fp, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    5a1c:	4599      	cmp	r9, r3
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    5a1e:	f846 2f04 	str.w	r2, [r6, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    5a22:	d8be      	bhi.n	59a2 <fadeup(LEDStruct&)+0x76>
    5a24:	9b03      	ldr	r3, [sp, #12]
    5a26:	9802      	ldr	r0, [sp, #8]
    5a28:	4d17      	ldr	r5, [pc, #92]	; (5a88 <fadeup(LEDStruct&)+0x15c>)
    5a2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5a2e:	18c1      	adds	r1, r0, r3
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    5a30:	22ff      	movs	r2, #255	; 0xff
    5a32:	802c      	strh	r4, [r5, #0]
    5a34:	54c2      	strb	r2, [r0, r3]
        g = (colorcode >>  8) & 0xFF;
    5a36:	704a      	strb	r2, [r1, #1]
        b = (colorcode >>  0) & 0xFF;
    5a38:	708a      	strb	r2, [r1, #2]
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		if (leds.firework_bri >= 255) {
			leds.exploded = true;
		}
	}
}
    5a3a:	b007      	add	sp, #28
    5a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			leds.spark_bri[i] = 255;
		}
		leds.led_data[leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    5a40:	9c02      	ldr	r4, [sp, #8]
    5a42:	f894 334b 	ldrb.w	r3, [r4, #843]	; 0x34b
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    5a46:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5a4a:	f894 234a 	ldrb.w	r2, [r4, #842]	; 0x34a
    5a4e:	f88d 2014 	strb.w	r2, [sp, #20]
			leds.spark_bri[i] = 255;
		}
		leds.led_data[leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    5a52:	3305      	adds	r3, #5
    5a54:	b2db      	uxtb	r3, r3
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    5a56:	eb01 0141 	add.w	r1, r1, r1, lsl #1
			leds.spark_bri[i] = 255;
		}
		leds.led_data[leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    5a5a:	f884 334b 	strb.w	r3, [r4, #843]	; 0x34b
    5a5e:	22ff      	movs	r2, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5a60:	4421      	add	r1, r4
    5a62:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5a64:	f88d 3016 	strb.w	r3, [sp, #22]
    5a68:	f88d 2015 	strb.w	r2, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5a6c:	f004 f96e 	bl	9d4c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		if (leds.firework_bri >= 255) {
    5a70:	f894 334b 	ldrb.w	r3, [r4, #843]	; 0x34b
    5a74:	2bff      	cmp	r3, #255	; 0xff
    5a76:	d1e0      	bne.n	5a3a <fadeup(LEDStruct&)+0x10e>
			leds.exploded = true;
    5a78:	9a02      	ldr	r2, [sp, #8]
    5a7a:	2301      	movs	r3, #1
    5a7c:	f882 3354 	strb.w	r3, [r2, #852]	; 0x354
		}
	}
}
    5a80:	b007      	add	sp, #28
    5a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a86:	bf00      	nop
    5a88:	1fff8780 	.word	0x1fff8780
    5a8c:	42c80000 	.word	0x42c80000
    5a90:	437f0000 	.word	0x437f0000

00005a94 <explosion(LEDStruct&)>:

void explosion(LEDStruct& leds) {
    5a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    5a98:	4b61      	ldr	r3, [pc, #388]	; (5c20 <explosion(LEDStruct&)+0x18c>)
			leds.exploded = true;
		}
	}
}

void explosion(LEDStruct& leds) {
    5a9a:	4605      	mov	r5, r0
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    5a9c:	781a      	ldrb	r2, [r3, #0]
			leds.exploded = true;
		}
	}
}

void explosion(LEDStruct& leds) {
    5a9e:	b083      	sub	sp, #12
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    5aa0:	2196      	movs	r1, #150	; 0x96
    5aa2:	f003 fef7 	bl	9894 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    5aa6:	f895 3355 	ldrb.w	r3, [r5, #853]	; 0x355
	}
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
    5aaa:	2600      	movs	r6, #0
    5aac:	f885 6754 	strb.w	r6, [r5, #1876]	; 0x754
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    5ab0:	2b00      	cmp	r3, #0
    5ab2:	f000 8085 	beq.w	5bc0 <explosion(LEDStruct&)+0x12c>
    5ab6:	f8df a180 	ldr.w	sl, [pc, #384]	; 5c38 <explosion(LEDStruct&)+0x1a4>
    5aba:	f10d 0804 	add.w	r8, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5abe:	f04f 09ff 	mov.w	r9, #255	; 0xff
    5ac2:	e03b      	b.n	5b3c <explosion(LEDStruct&)+0xa8>
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    5ac4:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
    5ac8:	4658      	mov	r0, fp
    5aca:	f006 ff3b 	bl	c944 <__addsf3>
    5ace:	4607      	mov	r7, r0
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
    5ad0:	2100      	movs	r1, #0
    5ad2:	4638      	mov	r0, r7
    5ad4:	f007 f9dc 	bl	ce90 <__aeabi_fcmplt>
    5ad8:	4952      	ldr	r1, [pc, #328]	; (5c24 <explosion(LEDStruct&)+0x190>)
    5ada:	2800      	cmp	r0, #0
    5adc:	d168      	bne.n	5bb0 <explosion(LEDStruct&)+0x11c>
    5ade:	4638      	mov	r0, r7
    5ae0:	f007 f9f4 	bl	cecc <__aeabi_fcmpgt>
    5ae4:	b100      	cbz	r0, 5ae8 <explosion(LEDStruct&)+0x54>
    5ae6:	4f4f      	ldr	r7, [pc, #316]	; (5c24 <explosion(LEDStruct&)+0x190>)
    5ae8:	f8c4 7358 	str.w	r7, [r4, #856]	; 0x358
		leds.spark_vel[x] *= gravity;
    5aec:	4659      	mov	r1, fp
    5aee:	f8da 0000 	ldr.w	r0, [sl]
    5af2:	f007 f82f 	bl	cb54 <__aeabi_fmul>
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    5af6:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
		leds.spark_vel[x] *= gravity;
    5afa:	f8c4 0448 	str.w	r0, [r4, #1096]	; 0x448
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    5afe:	f8d4 0574 	ldr.w	r0, [r4, #1396]	; 0x574
    5b02:	f007 f827 	bl	cb54 <__aeabi_fmul>
    5b06:	4601      	mov	r1, r0
    5b08:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    5b0c:	f006 ff18 	bl	c940 <__aeabi_fsub>
    5b10:	f8d4 1664 	ldr.w	r1, [r4, #1636]	; 0x664
    5b14:	f007 f81e 	bl	cb54 <__aeabi_fmul>
    5b18:	f8c4 0664 	str.w	r0, [r4, #1636]	; 0x664
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    5b1c:	f007 fa06 	bl	cf2c <__aeabi_f2uiz>
    5b20:	f895 3754 	ldrb.w	r3, [r5, #1876]	; 0x754
    5b24:	b2c0      	uxtb	r0, r0
    5b26:	4283      	cmp	r3, r0
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    5b28:	f106 0601 	add.w	r6, r6, #1
    5b2c:	f895 3355 	ldrb.w	r3, [r5, #853]	; 0x355
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    5b30:	bf38      	it	cc
    5b32:	f885 0754 	strbcc.w	r0, [r5, #1876]	; 0x754
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    5b36:	b2f6      	uxtb	r6, r6
    5b38:	42b3      	cmp	r3, r6
    5b3a:	d93b      	bls.n	5bb4 <explosion(LEDStruct&)+0x120>
    5b3c:	eb05 0486 	add.w	r4, r5, r6, lsl #2
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
    5b40:	f8d4 0358 	ldr.w	r0, [r4, #856]	; 0x358
    5b44:	f007 f9cc 	bl	cee0 <__aeabi_f2iz>
    5b48:	4607      	mov	r7, r0
    5b4a:	f8d4 0664 	ldr.w	r0, [r4, #1636]	; 0x664
    5b4e:	f007 f9ed 	bl	cf2c <__aeabi_f2uiz>
    5b52:	f895 334a 	ldrb.w	r3, [r5, #842]	; 0x34a
    5b56:	f88d 0002 	strb.w	r0, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5b5a:	4641      	mov	r1, r8
    5b5c:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5b5e:	f88d 3000 	strb.w	r3, [sp]
    5b62:	f88d 9001 	strb.w	r9, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5b66:	f004 f8f1 	bl	9d4c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    5b6a:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    5b6e:	1829      	adds	r1, r5, r0
    5b70:	5c2b      	ldrb	r3, [r5, r0]
    5b72:	f89d 2004 	ldrb.w	r2, [sp, #4]
    5b76:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5b7a:	542b      	strb	r3, [r5, r0]
    5b7c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5b80:	784a      	ldrb	r2, [r1, #1]
    5b82:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    5b86:	704a      	strb	r2, [r1, #1]
    5b88:	788b      	ldrb	r3, [r1, #2]
    5b8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    5b8e:	fa83 f352 	uqadd8	r3, r3, r2

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    5b92:	19aa      	adds	r2, r5, r6
        b = qadd8( b, rhs.b);
    5b94:	708b      	strb	r3, [r1, #2]
    5b96:	f892 3538 	ldrb.w	r3, [r2, #1336]	; 0x538
    5b9a:	f8d4 b448 	ldr.w	fp, [r4, #1096]	; 0x448
    5b9e:	2b00      	cmp	r3, #0
    5ba0:	d190      	bne.n	5ac4 <explosion(LEDStruct&)+0x30>
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
    5ba2:	f8d4 0358 	ldr.w	r0, [r4, #856]	; 0x358
    5ba6:	4659      	mov	r1, fp
    5ba8:	f006 feca 	bl	c940 <__aeabi_fsub>
    5bac:	4607      	mov	r7, r0
    5bae:	e78f      	b.n	5ad0 <explosion(LEDStruct&)+0x3c>

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(NUM_LEDS - 1));
    5bb0:	2700      	movs	r7, #0
    5bb2:	e799      	b.n	5ae8 <explosion(LEDStruct&)+0x54>
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	if (leds.brightest_spark == 0 ) {
    5bb4:	f895 3754 	ldrb.w	r3, [r5, #1876]	; 0x754
    5bb8:	b123      	cbz	r3, 5bc4 <explosion(LEDStruct&)+0x130>
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    5bba:	b003      	add	sp, #12
    5bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5bc0:	f10d 0804 	add.w	r8, sp, #4
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    5bc4:	2300      	movs	r3, #0
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    5bc6:	4642      	mov	r2, r8
    5bc8:	4628      	mov	r0, r5
    5bca:	2196      	movs	r1, #150	; 0x96
    5bcc:	f88d 3004 	strb.w	r3, [sp, #4]
    5bd0:	f88d 3005 	strb.w	r3, [sp, #5]
    5bd4:	f88d 3006 	strb.w	r3, [sp, #6]
    5bd8:	f003 fd9a 	bl	9710 <fill_solid(CRGB*, int, CRGB const&)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    5bdc:	4812      	ldr	r0, [pc, #72]	; (5c28 <explosion(LEDStruct&)+0x194>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5bde:	4c13      	ldr	r4, [pc, #76]	; (5c2c <explosion(LEDStruct&)+0x198>)
    5be0:	8803      	ldrh	r3, [r0, #0]
    5be2:	6824      	ldr	r4, [r4, #0]
		leds.current_stage = WAITING;
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    5be4:	4912      	ldr	r1, [pc, #72]	; (5c30 <explosion(LEDStruct&)+0x19c>)
    5be6:	4a13      	ldr	r2, [pc, #76]	; (5c34 <explosion(LEDStruct&)+0x1a0>)
    5be8:	9401      	str	r4, [sp, #4]
    5bea:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    5bee:	8809      	ldrh	r1, [r1, #0]
    5bf0:	8812      	ldrh	r2, [r2, #0]
    5bf2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5bf6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5bfa:	440a      	add	r2, r1
    5bfc:	3319      	adds	r3, #25
    5bfe:	b29b      	uxth	r3, r3
    5c00:	b292      	uxth	r2, r2
	return ret;
    5c02:	9901      	ldr	r1, [sp, #4]
    5c04:	8003      	strh	r3, [r0, #0]
    5c06:	fb03 f302 	mul.w	r3, r3, r2
    5c0a:	eb01 4313 	add.w	r3, r1, r3, lsr #16
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    5c0e:	2202      	movs	r2, #2
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    5c10:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    5c14:	f885 234c 	strb.w	r2, [r5, #844]	; 0x34c
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    5c18:	b003      	add	sp, #12
    5c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c1e:	bf00      	nop
    5c20:	1fff8740 	.word	0x1fff8740
    5c24:	43150000 	.word	0x43150000
    5c28:	1fff8780 	.word	0x1fff8780
    5c2c:	1ffface8 	.word	0x1ffface8
    5c30:	1fff8746 	.word	0x1fff8746
    5c34:	1fff8744 	.word	0x1fff8744
    5c38:	1fff8750 	.word	0x1fff8750

00005c3c <fireworks_render(LEDStruct&)>:


void fireworks_render(LEDStruct& leds) {
    5c3c:	b510      	push	{r4, lr}
	switch (leds.current_stage) {
    5c3e:	f890 334c 	ldrb.w	r3, [r0, #844]	; 0x34c
    5c42:	2b01      	cmp	r3, #1
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}


void fireworks_render(LEDStruct& leds) {
    5c44:	b082      	sub	sp, #8
	switch (leds.current_stage) {
    5c46:	d01c      	beq.n	5c82 <fireworks_render(LEDStruct&)+0x46>
    5c48:	d317      	bcc.n	5c7a <fireworks_render(LEDStruct&)+0x3e>
    5c4a:	2b02      	cmp	r3, #2
    5c4c:	d113      	bne.n	5c76 <fireworks_render(LEDStruct&)+0x3a>
    5c4e:	2300      	movs	r3, #0
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    5c50:	aa01      	add	r2, sp, #4
    5c52:	2196      	movs	r1, #150	; 0x96
    5c54:	4604      	mov	r4, r0
    5c56:	f88d 3004 	strb.w	r3, [sp, #4]
    5c5a:	f88d 3005 	strb.w	r3, [sp, #5]
    5c5e:	f88d 3006 	strb.w	r3, [sp, #6]
    5c62:	f003 fd55 	bl	9710 <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5c66:	4a0b      	ldr	r2, [pc, #44]	; (5c94 <fireworks_render(LEDStruct&)+0x58>)
			if (millis() >= leds.next_explosion_time) {
    5c68:	f8d4 3350 	ldr.w	r3, [r4, #848]	; 0x350
    5c6c:	6812      	ldr	r2, [r2, #0]
    5c6e:	9201      	str	r2, [sp, #4]
	return ret;
    5c70:	9a01      	ldr	r2, [sp, #4]
    5c72:	429a      	cmp	r2, r3
    5c74:	d209      	bcs.n	5c8a <fireworks_render(LEDStruct&)+0x4e>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    5c76:	b002      	add	sp, #8
    5c78:	bd10      	pop	{r4, pc}
				prepare_for_explosion(leds);
			}
			break;

		case FADEUP:
			fadeup(leds);
    5c7a:	f7ff fe57 	bl	592c <fadeup(LEDStruct&)>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    5c7e:	b002      	add	sp, #8
    5c80:	bd10      	pop	{r4, pc}
		case FADEUP:
			fadeup(leds);
			break;

		case EXPLOSION:
			explosion(leds);
    5c82:	f7ff ff07 	bl	5a94 <explosion(LEDStruct&)>
			break;
	}
}
    5c86:	b002      	add	sp, #8
    5c88:	bd10      	pop	{r4, pc}
void fireworks_render(LEDStruct& leds) {
	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
			if (millis() >= leds.next_explosion_time) {
				prepare_for_explosion(leds);
    5c8a:	4620      	mov	r0, r4
    5c8c:	f7ff fe12 	bl	58b4 <prepare_for_explosion(LEDStruct&)>
    5c90:	e7f1      	b.n	5c76 <fireworks_render(LEDStruct&)+0x3a>
    5c92:	bf00      	nop
    5c94:	1ffface8 	.word	0x1ffface8

00005c98 <fireworks(LEDStruct&)>:
			explosion(leds);
			break;
	}
}

void fireworks(LEDStruct& leds) {
    5c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { fireworks_init(leds); }
    5c9a:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
			explosion(leds);
			break;
	}
}

void fireworks(LEDStruct& leds) {
    5c9e:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fireworks_init(leds); }
    5ca0:	b9fb      	cbnz	r3, 5ce2 <fireworks(LEDStruct&)+0x4a>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    5ca2:	493e      	ldr	r1, [pc, #248]	; (5d9c <fireworks(LEDStruct&)+0x104>)
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIREWORKS;
	leds.use_palette		= 0;
    5ca4:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    5ca8:	880b      	ldrh	r3, [r1, #0]
    5caa:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5cae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5cb2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5cb6:	3319      	adds	r3, #25
    5cb8:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5cba:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5cbe:	f3c2 12c0 	ubfx	r2, r2, #7, #1
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
    5cc2:	2701      	movs	r7, #1
	leds.mode_type			= FIREWORKS;
    5cc4:	2614      	movs	r6, #20
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    5cc6:	250f      	movs	r5, #15

	leds.current_stage		= WAITING;
    5cc8:	2002      	movs	r0, #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    5cca:	800b      	strh	r3, [r1, #0]

	leds.use_overlay		= uo;
    5ccc:	f884 21c6 	strb.w	r2, [r4, #454]	; 0x1c6
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
    5cd0:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
	leds.mode_type			= FIREWORKS;
    5cd4:	f884 622c 	strb.w	r6, [r4, #556]	; 0x22c
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    5cd8:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.current_stage		= WAITING;
    5cdc:	f884 034c 	strb.w	r0, [r4, #844]	; 0x34c

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
    5ce0:	b972      	cbnz	r2, 5d00 <fireworks(LEDStruct&)+0x68>
	}
}

void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }
	if (keyboard_update) { fireworks_update(leds); }
    5ce2:	4b2f      	ldr	r3, [pc, #188]	; (5da0 <fireworks(LEDStruct&)+0x108>)
    5ce4:	781b      	ldrb	r3, [r3, #0]
    5ce6:	b993      	cbnz	r3, 5d0e <fireworks(LEDStruct&)+0x76>

	fireworks_render(leds);
    5ce8:	4620      	mov	r0, r4
    5cea:	f7ff ffa7 	bl	5c3c <fireworks_render(LEDStruct&)>

	if (leds.use_overlay) {
    5cee:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    5cf2:	b123      	cbz	r3, 5cfe <fireworks(LEDStruct&)+0x66>
		if (leds.array_type == CURRENT) { 
    5cf4:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    5cf8:	b16b      	cbz	r3, 5d16 <fireworks(LEDStruct&)+0x7e>
			fireworks_render(curr_over_leds); 
			for (uint16_t i = 0; i < NUM_LEDS; i++) {
				leds.led_data[i] += curr_over_leds.led_data[i];
			}
		}
		else if (leds.array_type == NEXT) {	
    5cfa:	2b01      	cmp	r3, #1
    5cfc:	d02c      	beq.n	5d58 <fireworks(LEDStruct&)+0xc0>
    5cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	leds.delay_time			= 15;

	leds.current_stage		= WAITING;

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
    5d00:	4b28      	ldr	r3, [pc, #160]	; (5da4 <fireworks(LEDStruct&)+0x10c>)
    5d02:	f883 034c 	strb.w	r0, [r3, #844]	; 0x34c
	}
}

void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }
	if (keyboard_update) { fireworks_update(leds); }
    5d06:	4b26      	ldr	r3, [pc, #152]	; (5da0 <fireworks(LEDStruct&)+0x108>)
    5d08:	781b      	ldrb	r3, [r3, #0]
    5d0a:	2b00      	cmp	r3, #0
    5d0c:	d0ec      	beq.n	5ce8 <fireworks(LEDStruct&)+0x50>
    5d0e:	4620      	mov	r0, r4
    5d10:	f7ff fda8 	bl	5864 <fireworks_update(LEDStruct&)>
    5d14:	e7e8      	b.n	5ce8 <fireworks(LEDStruct&)+0x50>

	fireworks_render(leds);

	if (leds.use_overlay) {
		if (leds.array_type == CURRENT) { 
			fireworks_render(curr_over_leds); 
    5d16:	4824      	ldr	r0, [pc, #144]	; (5da8 <fireworks(LEDStruct&)+0x110>)
    5d18:	f7ff ff90 	bl	5c3c <fireworks_render(LEDStruct&)>
    5d1c:	4b22      	ldr	r3, [pc, #136]	; (5da8 <fireworks(LEDStruct&)+0x110>)
    5d1e:	4620      	mov	r0, r4
    5d20:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    5d24:	3401      	adds	r4, #1
    5d26:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    5d2a:	7819      	ldrb	r1, [r3, #0]
    5d2c:	fa82 f251 	uqadd8	r2, r2, r1


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5d30:	f804 2c01 	strb.w	r2, [r4, #-1]
    5d34:	7841      	ldrb	r1, [r0, #1]
    5d36:	785a      	ldrb	r2, [r3, #1]
    5d38:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    5d3c:	7041      	strb	r1, [r0, #1]
    5d3e:	7882      	ldrb	r2, [r0, #2]
    5d40:	7899      	ldrb	r1, [r3, #2]
    5d42:	fa82 f251 	uqadd8	r2, r2, r1
    5d46:	3303      	adds	r3, #3
			for (uint16_t i = 0; i < NUM_LEDS; i++) {
    5d48:	42ab      	cmp	r3, r5
        b = qadd8( b, rhs.b);
    5d4a:	7082      	strb	r2, [r0, #2]
    5d4c:	f104 0403 	add.w	r4, r4, #3
    5d50:	f100 0003 	add.w	r0, r0, #3
    5d54:	d1e7      	bne.n	5d26 <fireworks(LEDStruct&)+0x8e>
    5d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				leds.led_data[i] += curr_over_leds.led_data[i];
			}
		}
		else if (leds.array_type == NEXT) {	
			fireworks_render(next_over_leds); 
    5d58:	4812      	ldr	r0, [pc, #72]	; (5da4 <fireworks(LEDStruct&)+0x10c>)
    5d5a:	f7ff ff6f 	bl	5c3c <fireworks_render(LEDStruct&)>
    5d5e:	4b11      	ldr	r3, [pc, #68]	; (5da4 <fireworks(LEDStruct&)+0x10c>)
    5d60:	4620      	mov	r0, r4
    5d62:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    5d66:	3401      	adds	r4, #1
    5d68:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    5d6c:	7819      	ldrb	r1, [r3, #0]
    5d6e:	fa82 f251 	uqadd8	r2, r2, r1


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5d72:	f804 2c01 	strb.w	r2, [r4, #-1]
    5d76:	7841      	ldrb	r1, [r0, #1]
    5d78:	785a      	ldrb	r2, [r3, #1]
    5d7a:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    5d7e:	7041      	strb	r1, [r0, #1]
    5d80:	7882      	ldrb	r2, [r0, #2]
    5d82:	7899      	ldrb	r1, [r3, #2]
    5d84:	fa82 f251 	uqadd8	r2, r2, r1
    5d88:	3303      	adds	r3, #3
			for (uint16_t i = 0; i < NUM_LEDS; i++) {
    5d8a:	42ab      	cmp	r3, r5
        b = qadd8( b, rhs.b);
    5d8c:	7082      	strb	r2, [r0, #2]
    5d8e:	f104 0403 	add.w	r4, r4, #3
    5d92:	f100 0003 	add.w	r0, r0, #3
    5d96:	d1e7      	bne.n	5d68 <fireworks(LEDStruct&)+0xd0>
    5d98:	e7b1      	b.n	5cfe <fireworks(LEDStruct&)+0x66>
    5d9a:	bf00      	nop
    5d9c:	1fff8780 	.word	0x1fff8780
    5da0:	1fff91e1 	.word	0x1fff91e1
    5da4:	1fff9a38 	.word	0x1fff9a38
    5da8:	1fff91e8 	.word	0x1fff91e8

00005dac <two_sin_update(LEDStruct&)>:
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5dac:	4b23      	ldr	r3, [pc, #140]	; (5e3c <two_sin_update(LEDStruct&)+0x90>)
	leds.sin_all_freq	= saf;		// number of repeats
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5dae:	4a24      	ldr	r2, [pc, #144]	; (5e40 <two_sin_update(LEDStruct&)+0x94>)
	switch (update_var) {
    5db0:	781b      	ldrb	r3, [r3, #0]
	leds.sin_all_freq	= saf;		// number of repeats
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5db2:	2100      	movs	r1, #0
	switch (update_var) {
    5db4:	3b01      	subs	r3, #1
	leds.sin_all_freq	= saf;		// number of repeats
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5db6:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    5db8:	2b0a      	cmp	r3, #10
    5dba:	d80b      	bhi.n	5dd4 <two_sin_update(LEDStruct&)+0x28>
    5dbc:	e8df f003 	tbb	[pc, r3]
    5dc0:	201b1611 	.word	0x201b1611
    5dc4:	342f2a25 	.word	0x342f2a25
    5dc8:	3906      	.short	0x3906
    5dca:	0c          	.byte	0x0c
    5dcb:	00          	.byte	0x00
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
    5dcc:	4b1d      	ldr	r3, [pc, #116]	; (5e44 <two_sin_update(LEDStruct&)+0x98>)
    5dce:	881b      	ldrh	r3, [r3, #0]
    5dd0:	f880 333e 	strb.w	r3, [r0, #830]	; 0x33e
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.sin_all_freq	= (uint8_t)update_arg;	break;	//l
		default:	break;
	}
	LEDDebug(leds);
    5dd4:	f7fc be52 	b.w	2a7c <LEDDebug(LEDStruct&)>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.sin_all_freq	= (uint8_t)update_arg;	break;	//l
    5dd8:	4b1a      	ldr	r3, [pc, #104]	; (5e44 <two_sin_update(LEDStruct&)+0x98>)
    5dda:	881b      	ldrh	r3, [r3, #0]
    5ddc:	f880 333b 	strb.w	r3, [r0, #827]	; 0x33b
    5de0:	e7f8      	b.n	5dd4 <two_sin_update(LEDStruct&)+0x28>


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 1:		leds.sin_hue		= (uint8_t)update_arg;	break;	//b		
    5de2:	4b18      	ldr	r3, [pc, #96]	; (5e44 <two_sin_update(LEDStruct&)+0x98>)
    5de4:	881b      	ldrh	r3, [r3, #0]
    5de6:	f880 333f 	strb.w	r3, [r0, #831]	; 0x33f
    5dea:	e7f3      	b.n	5dd4 <two_sin_update(LEDStruct&)+0x28>
		case 2:		leds.two_hue		= (uint8_t)update_arg;	break;	//c
    5dec:	4b15      	ldr	r3, [pc, #84]	; (5e44 <two_sin_update(LEDStruct&)+0x98>)
    5dee:	881b      	ldrh	r3, [r3, #0]
    5df0:	f880 3345 	strb.w	r3, [r0, #837]	; 0x345
    5df4:	e7ee      	b.n	5dd4 <two_sin_update(LEDStruct&)+0x28>
		case 3:		leds.sin_speed		= (uint8_t)update_arg;	break;	//d
    5df6:	4b13      	ldr	r3, [pc, #76]	; (5e44 <two_sin_update(LEDStruct&)+0x98>)
    5df8:	881b      	ldrh	r3, [r3, #0]
    5dfa:	f880 3338 	strb.w	r3, [r0, #824]	; 0x338
    5dfe:	e7e9      	b.n	5dd4 <two_sin_update(LEDStruct&)+0x28>
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
    5e00:	4b10      	ldr	r3, [pc, #64]	; (5e44 <two_sin_update(LEDStruct&)+0x98>)
    5e02:	881b      	ldrh	r3, [r3, #0]
    5e04:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    5e08:	e7e4      	b.n	5dd4 <two_sin_update(LEDStruct&)+0x28>
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
    5e0a:	4b0e      	ldr	r3, [pc, #56]	; (5e44 <two_sin_update(LEDStruct&)+0x98>)
    5e0c:	881b      	ldrh	r3, [r3, #0]
    5e0e:	f880 333a 	strb.w	r3, [r0, #826]	; 0x33a
    5e12:	e7df      	b.n	5dd4 <two_sin_update(LEDStruct&)+0x28>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
    5e14:	4b0b      	ldr	r3, [pc, #44]	; (5e44 <two_sin_update(LEDStruct&)+0x98>)
    5e16:	881b      	ldrh	r3, [r3, #0]
    5e18:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    5e1c:	e7da      	b.n	5dd4 <two_sin_update(LEDStruct&)+0x28>
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
    5e1e:	4b09      	ldr	r3, [pc, #36]	; (5e44 <two_sin_update(LEDStruct&)+0x98>)
    5e20:	881b      	ldrh	r3, [r3, #0]
    5e22:	f880 3339 	strb.w	r3, [r0, #825]	; 0x339
    5e26:	e7d5      	b.n	5dd4 <two_sin_update(LEDStruct&)+0x28>
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
    5e28:	4b06      	ldr	r3, [pc, #24]	; (5e44 <two_sin_update(LEDStruct&)+0x98>)
    5e2a:	881b      	ldrh	r3, [r3, #0]
    5e2c:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    5e30:	e7d0      	b.n	5dd4 <two_sin_update(LEDStruct&)+0x28>
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
    5e32:	4b04      	ldr	r3, [pc, #16]	; (5e44 <two_sin_update(LEDStruct&)+0x98>)
    5e34:	881b      	ldrh	r3, [r3, #0]
    5e36:	f880 3344 	strb.w	r3, [r0, #836]	; 0x344
    5e3a:	e7cb      	b.n	5dd4 <two_sin_update(LEDStruct&)+0x28>
    5e3c:	1fff9a24 	.word	0x1fff9a24
    5e40:	1fff91e1 	.word	0x1fff91e1
    5e44:	1fff90e2 	.word	0x1fff90e2

00005e48 <two_sin(LEDStruct&)>:
	}
	LEDDebug(leds);
}


void two_sin(LEDStruct& leds) {
    5e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { two_sin_init(leds); }
    5e4c:	f890 c22d 	ldrb.w	ip, [r0, #557]	; 0x22d
	}
	LEDDebug(leds);
}


void two_sin(LEDStruct& leds) {
    5e50:	b082      	sub	sp, #8
    5e52:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { two_sin_init(leds); }
    5e54:	f1bc 0f00 	cmp.w	ip, #0
    5e58:	f040 80a6 	bne.w	5fa8 <two_sin(LEDStruct&)+0x160>
    5e5c:	4fd3      	ldr	r7, [pc, #844]	; (61ac <two_sin(LEDStruct&)+0x364>)
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;
    5e5e:	f880 c229 	strb.w	ip, [r0, #553]	; 0x229
    5e62:	883b      	ldrh	r3, [r7, #0]
	leds.two_speed		= ts;
	leds.sin_rot		= sr;		// changes the hue
	leds.two_rot		= tr;
	leds.sin_cutoff		= sc;		// limits the brightness
	leds.two_cutoff		= tc;
	leds.sin_phase		= 0;		// changes by speed
    5e64:	f880 c33e 	strb.w	ip, [r0, #830]	; 0x33e
    5e68:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    5e6c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    5e70:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5e74:	3519      	adds	r5, #25
    5e76:	b2ad      	uxth	r5, r5
    5e78:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    5e7c:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
    5e80:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    5e84:	f10e 0e19 	add.w	lr, lr, #25
    5e88:	fa1f fe8e 	uxth.w	lr, lr
    5e8c:	eb0e 214e 	add.w	r1, lr, lr, lsl #9
    5e90:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    5e94:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    5e98:	3119      	adds	r1, #25
    5e9a:	b289      	uxth	r1, r1
    5e9c:	eb01 2941 	add.w	r9, r1, r1, lsl #9
    5ea0:	eb01 0989 	add.w	r9, r1, r9, lsl #2
    5ea4:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    5ea8:	f109 0919 	add.w	r9, r9, #25
    5eac:	fa1f f989 	uxth.w	r9, r9
    5eb0:	eb09 2849 	add.w	r8, r9, r9, lsl #9
    5eb4:	eb09 0888 	add.w	r8, r9, r8, lsl #2
    5eb8:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    5ebc:	f108 0819 	add.w	r8, r8, #25
    5ec0:	fa1f f888 	uxth.w	r8, r8
    5ec4:	eb08 2048 	add.w	r0, r8, r8, lsl #9
    5ec8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    5ecc:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    5ed0:	3019      	adds	r0, #25
    5ed2:	b280      	uxth	r0, r0
    5ed4:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    5ed8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5edc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5ee0:	3219      	adds	r2, #25
    5ee2:	b292      	uxth	r2, r2
    5ee4:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    5ee8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5eec:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5ef0:	3319      	adds	r3, #25
    5ef2:	b29b      	uxth	r3, r3
    5ef4:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    5ef8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5efc:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    5f00:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
	leds.sin_speed		= ss;		// changes the phase
	leds.two_speed		= ts;
	leds.sin_rot		= sr;		// changes the hue
	leds.two_rot		= tr;
	leds.sin_cutoff		= sc;		// limits the brightness
	leds.two_cutoff		= tc;
    5f04:	b2db      	uxtb	r3, r3
    5f06:	3619      	adds	r6, #25
    5f08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5f0c:	b2b6      	uxth	r6, r6
    5f0e:	111b      	asrs	r3, r3, #4
    5f10:	f103 0a20 	add.w	sl, r3, #32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5f14:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    5f18:	eb06 2316 	add.w	r3, r6, r6, lsr #8
    5f1c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;

	leds.sin_hue		= sh;		// changes by rot
	leds.two_hue		= th;
	leds.sin_speed		= ss;		// changes the phase
    5f20:	b2c9      	uxtb	r1, r1
	leds.two_rot		= tr;
	leds.sin_cutoff		= sc;		// limits the brightness
	leds.two_cutoff		= tc;
	leds.sin_phase		= 0;		// changes by speed
	leds.two_phase		= 0;
	leds.sin_all_freq	= saf;		// number of repeats
    5f22:	b2db      	uxtb	r3, r3
    5f24:	eb08 2818 	add.w	r8, r8, r8, lsr #8
    5f28:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.two_hue		= th;
	leds.sin_speed		= ss;		// changes the phase
	leds.two_speed		= ts;
	leds.sin_rot		= sr;		// changes the hue
	leds.two_rot		= tr;
	leds.sin_cutoff		= sc;		// limits the brightness
    5f2c:	b2d2      	uxtb	r2, r2
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;

	leds.sin_hue		= sh;		// changes by rot
	leds.two_hue		= th;
	leds.sin_speed		= ss;		// changes the phase
    5f2e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	leds.two_rot		= tr;
	leds.sin_cutoff		= sc;		// limits the brightness
	leds.two_cutoff		= tc;
	leds.sin_phase		= 0;		// changes by speed
	leds.two_phase		= 0;
	leds.sin_all_freq	= saf;		// number of repeats
    5f32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5f36:	eb09 2919 	add.w	r9, r9, r9, lsr #8

	leds.sin_hue		= sh;		// changes by rot
	leds.two_hue		= th;
	leds.sin_speed		= ss;		// changes the phase
	leds.two_speed		= ts;
	leds.sin_rot		= sr;		// changes the hue
    5f3a:	fa5f f888 	uxtb.w	r8, r8
	leds.two_rot		= tr;
    5f3e:	b2c0      	uxtb	r0, r0
	leds.sin_cutoff		= sc;		// limits the brightness
    5f40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;

	leds.sin_hue		= sh;		// changes by rot
	leds.two_hue		= th;
	leds.sin_speed		= ss;		// changes the phase
    5f44:	1209      	asrs	r1, r1, #8
	leds.two_rot		= tr;
	leds.sin_cutoff		= sc;		// limits the brightness
	leds.two_cutoff		= tc;
	leds.sin_phase		= 0;		// changes by speed
	leds.two_phase		= 0;
	leds.sin_all_freq	= saf;		// number of repeats
    5f46:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3

	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;

	leds.sin_hue		= sh;		// changes by rot
    5f4a:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.two_hue		= th;
	leds.sin_speed		= ss;		// changes the phase
    5f4e:	3903      	subs	r1, #3
	leds.two_speed		= ts;
    5f50:	f3c9 1981 	ubfx	r9, r9, #6, #2
	leds.sin_rot		= sr;		// changes the hue
    5f54:	eb08 0848 	add.w	r8, r8, r8, lsl #1
	leds.two_rot		= tr;
    5f58:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.sin_cutoff		= sc;		// limits the brightness
    5f5c:	1112      	asrs	r2, r2, #4
	leds.two_cutoff		= tc;
	leds.sin_phase		= 0;		// changes by speed
	leds.two_phase		= 0;
	leds.sin_all_freq	= saf;		// number of repeats
    5f5e:	121b      	asrs	r3, r3, #8
	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;

	leds.sin_hue		= sh;		// changes by rot
	leds.two_hue		= th;
    5f60:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
	leds.sin_speed		= ss;		// changes the phase
	leds.two_speed		= ts;
    5f64:	f109 0901 	add.w	r9, r9, #1
	leds.sin_rot		= sr;		// changes the hue
    5f68:	ea4f 2828 	mov.w	r8, r8, asr #8
	leds.two_rot		= tr;
    5f6c:	1200      	asrs	r0, r0, #8
	leds.sin_cutoff		= sc;		// limits the brightness
    5f6e:	3220      	adds	r2, #32
	leds.two_cutoff		= tc;
	leds.sin_phase		= 0;		// changes by speed
	leds.two_phase		= 0;
	leds.sin_all_freq	= saf;		// number of repeats
    5f70:	330c      	adds	r3, #12

	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;

	leds.sin_hue		= sh;		// changes by rot
    5f72:	f884 533f 	strb.w	r5, [r4, #831]	; 0x33f
	leds.two_hue		= th;
	leds.sin_speed		= ss;		// changes the phase
    5f76:	f884 1338 	strb.w	r1, [r4, #824]	; 0x338

void two_sin_init(LEDStruct& leds, uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
    5f7a:	2501      	movs	r5, #1
	leds.mode_type			= TWO_SIN;
    5f7c:	2113      	movs	r1, #19
	leds.sin_rot		= sr;		// changes the hue
	leds.two_rot		= tr;
	leds.sin_cutoff		= sc;		// limits the brightness
	leds.two_cutoff		= tc;
	leds.sin_phase		= 0;		// changes by speed
	leds.two_phase		= 0;
    5f7e:	f884 c344 	strb.w	ip, [r4, #836]	; 0x344
	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;

	leds.sin_hue		= sh;		// changes by rot
	leds.two_hue		= th;
    5f82:	f884 e345 	strb.w	lr, [r4, #837]	; 0x345
	leds.sin_speed		= ss;		// changes the phase
	leds.two_speed		= ts;
    5f86:	f884 9341 	strb.w	r9, [r4, #833]	; 0x341
	leds.sin_rot		= sr;		// changes the hue
    5f8a:	f884 833a 	strb.w	r8, [r4, #826]	; 0x33a
	leds.two_rot		= tr;
    5f8e:	f884 0342 	strb.w	r0, [r4, #834]	; 0x342
	leds.sin_cutoff		= sc;		// limits the brightness
    5f92:	f884 2339 	strb.w	r2, [r4, #825]	; 0x339
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    5f96:	803e      	strh	r6, [r7, #0]
	leds.two_cutoff		= tc;
	leds.sin_phase		= 0;		// changes by speed
	leds.two_phase		= 0;
	leds.sin_all_freq	= saf;		// number of repeats
    5f98:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
	leds.sin_speed		= ss;		// changes the phase
	leds.two_speed		= ts;
	leds.sin_rot		= sr;		// changes the hue
	leds.two_rot		= tr;
	leds.sin_cutoff		= sc;		// limits the brightness
	leds.two_cutoff		= tc;
    5f9c:	f884 a343 	strb.w	sl, [r4, #835]	; 0x343

void two_sin_init(LEDStruct& leds, uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
    5fa0:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
	leds.mode_type			= TWO_SIN;
    5fa4:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
}


void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
    5fa8:	4b81      	ldr	r3, [pc, #516]	; (61b0 <two_sin(LEDStruct&)+0x368>)
    5faa:	781b      	ldrb	r3, [r3, #0]
    5fac:	2b00      	cmp	r3, #0
    5fae:	f040 80f9 	bne.w	61a4 <two_sin(LEDStruct&)+0x35c>
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
    5fb2:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    5fb6:	2b00      	cmp	r3, #0
    5fb8:	f040 80e1 	bne.w	617e <two_sin(LEDStruct&)+0x336>
    5fbc:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    5fc0:	f894 8344 	ldrb.w	r8, [r4, #836]	; 0x344
    5fc4:	f894 2338 	ldrb.w	r2, [r4, #824]	; 0x338
    5fc8:	f894 3341 	ldrb.w	r3, [r4, #833]	; 0x341
    5fcc:	4411      	add	r1, r2
    5fce:	4498      	add	r8, r3
    5fd0:	b2c9      	uxtb	r1, r1
    5fd2:	fa5f f888 	uxtb.w	r8, r8
    5fd6:	f884 133e 	strb.w	r1, [r4, #830]	; 0x33e
    5fda:	f884 8344 	strb.w	r8, [r4, #836]	; 0x344
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    5fde:	f894 c33f 	ldrb.w	ip, [r4, #831]	; 0x33f
    5fe2:	f894 233a 	ldrb.w	r2, [r4, #826]	; 0x33a
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    5fe6:	f894 0345 	ldrb.w	r0, [r4, #837]	; 0x345
    5fea:	f894 3342 	ldrb.w	r3, [r4, #834]	; 0x342
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    5fee:	4494      	add	ip, r2
    5ff0:	fa5f fc8c 	uxtb.w	ip, ip
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    5ff4:	4403      	add	r3, r0
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    5ff6:	f884 c33f 	strb.w	ip, [r4, #831]	; 0x33f
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    5ffa:	f884 3345 	strb.w	r3, [r4, #837]	; 0x345
    5ffe:	4626      	mov	r6, r4

	for (int k = 0; k < NUM_LEDS; k++) {
    6000:	2700      	movs	r7, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    6002:	25ff      	movs	r5, #255	; 0xff
    6004:	e08c      	b.n	6120 <two_sin(LEDStruct&)+0x2d8>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    6006:	2b00      	cmp	r3, #0
        in = 255 - in;
    6008:	bfbc      	itt	lt
    600a:	43c9      	mvnlt	r1, r1
    600c:	b2c9      	uxtblt	r1, r1
    600e:	0049      	lsls	r1, r1, #1
    6010:	b2c9      	uxtb	r1, r1
    6012:	1c4b      	adds	r3, r1, #1
    6014:	fb03 f101 	mul.w	r1, r3, r1
    6018:	1209      	asrs	r1, r1, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    601a:	fb01 f303 	mul.w	r3, r1, r3
    601e:	121b      	asrs	r3, r3, #8
    6020:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6024:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
    6028:	b289      	uxth	r1, r1
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    602a:	05cb      	lsls	r3, r1, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    602c:	bf54      	ite	pl
    602e:	fa5f fe81 	uxtbpl.w	lr, r1

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    6032:	f04f 0eff 	movmi.w	lr, #255	; 0xff
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     
    6036:	ebc9 0e0e 	rsb	lr, r9, lr
    603a:	fa5f fe8e 	uxtb.w	lr, lr
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    603e:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
    6042:	4443      	add	r3, r8
    6044:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    6046:	b259      	sxtb	r1, r3
    6048:	2900      	cmp	r1, #0
        in = 255 - in;
    604a:	bfba      	itte	lt
    604c:	43da      	mvnlt	r2, r3
    604e:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    6050:	461a      	movge	r2, r3
    6052:	0052      	lsls	r2, r2, #1
    6054:	b2d2      	uxtb	r2, r2
    6056:	1c50      	adds	r0, r2, #1
    6058:	fb00 f202 	mul.w	r2, r0, r2
    605c:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    605e:	fb02 f000 	mul.w	r0, r2, r0
    6062:	1200      	asrs	r0, r0, #8
    6064:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    6068:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
    606c:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    606e:	05d0      	lsls	r0, r2, #23
    6070:	f894 0343 	ldrb.w	r0, [r4, #835]	; 0x343

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < NUM_LEDS; k++) {
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     
    6074:	f884 e340 	strb.w	lr, [r4, #832]	; 0x340

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    6078:	bf54      	ite	pl
    607a:	b2d2      	uxtbpl	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    607c:	22ff      	movmi	r2, #255	; 0xff
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    607e:	4290      	cmp	r0, r2
    6080:	d278      	bcs.n	6174 <two_sin(LEDStruct&)+0x32c>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    6082:	2900      	cmp	r1, #0
        in = 255 - in;
    6084:	bfbc      	itt	lt
    6086:	43db      	mvnlt	r3, r3
    6088:	b2db      	uxtblt	r3, r3
    608a:	005a      	lsls	r2, r3, #1
    608c:	b2d2      	uxtb	r2, r2
    608e:	1c53      	adds	r3, r2, #1
    6090:	fb03 f202 	mul.w	r2, r3, r2
    6094:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    6096:	fb02 f303 	mul.w	r3, r2, r3
    609a:	121b      	asrs	r3, r3, #8
    609c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    60a0:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    60a4:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    60a6:	05d3      	lsls	r3, r2, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    60a8:	bf54      	ite	pl
    60aa:	b2d3      	uxtbpl	r3, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    60ac:	23ff      	movmi	r3, #255	; 0xff
    60ae:	1a1b      	subs	r3, r3, r0
    60b0:	b2db      	uxtb	r3, r3
    60b2:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    60b6:	4631      	mov	r1, r6
    60b8:	a801      	add	r0, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    60ba:	f88d c004 	strb.w	ip, [sp, #4]
    60be:	f88d e006 	strb.w	lr, [sp, #6]
    60c2:	f88d 5005 	strb.w	r5, [sp, #5]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    60c6:	f003 fe41 	bl	9d4c <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);
    60ca:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    60ce:	f894 3345 	ldrb.w	r3, [r4, #837]	; 0x345
    60d2:	f88d 2002 	strb.w	r2, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    60d6:	a901      	add	r1, sp, #4
    60d8:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    60da:	f88d 3000 	strb.w	r3, [sp]
    60de:	f88d 5001 	strb.w	r5, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    60e2:	f003 fe33 	bl	9d4c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    60e6:	7833      	ldrb	r3, [r6, #0]
    60e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    60ec:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    60f0:	7033      	strb	r3, [r6, #0]
    60f2:	7872      	ldrb	r2, [r6, #1]
    60f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    60f8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    60fc:	7072      	strb	r2, [r6, #1]
    60fe:	78b3      	ldrb	r3, [r6, #2]
    6100:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6104:	fa83 f352 	uqadd8	r3, r3, r2
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < NUM_LEDS; k++) {
    6108:	3701      	adds	r7, #1
    610a:	2f96      	cmp	r7, #150	; 0x96
        b = qadd8( b, rhs.b);
    610c:	70b3      	strb	r3, [r6, #2]
    610e:	f106 0603 	add.w	r6, r6, #3
    6112:	d031      	beq.n	6178 <two_sin(LEDStruct&)+0x330>
    6114:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    6118:	f894 8344 	ldrb.w	r8, [r4, #836]	; 0x344
    611c:	f894 c33f 	ldrb.w	ip, [r4, #831]	; 0x33f
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     
    6120:	f894 033b 	ldrb.w	r0, [r4, #827]	; 0x33b
    6124:	f894 9339 	ldrb.w	r9, [r4, #825]	; 0x339
    6128:	fb10 f007 	smulbb	r0, r0, r7
    612c:	b2c0      	uxtb	r0, r0
    612e:	4401      	add	r1, r0
    6130:	b2c9      	uxtb	r1, r1
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    6132:	b24b      	sxtb	r3, r1
    6134:	2b00      	cmp	r3, #0
        in = 255 - in;
    6136:	bfba      	itte	lt
    6138:	43ca      	mvnlt	r2, r1
    613a:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    613c:	460a      	movge	r2, r1
    613e:	0052      	lsls	r2, r2, #1
    6140:	b2d2      	uxtb	r2, r2
    6142:	f102 0e01 	add.w	lr, r2, #1
    6146:	fb0e f202 	mul.w	r2, lr, r2
    614a:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    614c:	fb02 fe0e 	mul.w	lr, r2, lr
    6150:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    6154:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    6158:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
    615c:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    615e:	f412 7f80 	tst.w	r2, #256	; 0x100

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    6162:	bf0c      	ite	eq
    6164:	b2d2      	uxtbeq	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    6166:	22ff      	movne	r2, #255	; 0xff
    6168:	4591      	cmp	r9, r2
    616a:	f4ff af4c 	bcc.w	6006 <two_sin(LEDStruct&)+0x1be>
    616e:	f04f 0e00 	mov.w	lr, #0
    6172:	e764      	b.n	603e <two_sin(LEDStruct&)+0x1f6>
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    6174:	2300      	movs	r3, #0
    6176:	e79c      	b.n	60b2 <two_sin(LEDStruct&)+0x26a>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);

	}
}
    6178:	b002      	add	sp, #8
    617a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }
    617e:	f894 233e 	ldrb.w	r2, [r4, #830]	; 0x33e
    6182:	f894 3344 	ldrb.w	r3, [r4, #836]	; 0x344
    6186:	f894 1338 	ldrb.w	r1, [r4, #824]	; 0x338
    618a:	f894 8341 	ldrb.w	r8, [r4, #833]	; 0x341
    618e:	1a51      	subs	r1, r2, r1
    6190:	ebc8 0803 	rsb	r8, r8, r3
    6194:	b2c9      	uxtb	r1, r1
    6196:	fa5f f888 	uxtb.w	r8, r8
    619a:	f884 133e 	strb.w	r1, [r4, #830]	; 0x33e
    619e:	f884 8344 	strb.w	r8, [r4, #836]	; 0x344
    61a2:	e71c      	b.n	5fde <two_sin(LEDStruct&)+0x196>
}


void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
    61a4:	4620      	mov	r0, r4
    61a6:	f7ff fe01 	bl	5dac <two_sin_update(LEDStruct&)>
    61aa:	e702      	b.n	5fb2 <two_sin(LEDStruct&)+0x16a>
    61ac:	1fff8780 	.word	0x1fff8780
    61b0:	1fff91e1 	.word	0x1fff91e1

000061b4 <noise_update(LEDStruct&)>:
	leds.noise_fade		= nf;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    61b4:	4b11      	ldr	r3, [pc, #68]	; (61fc <noise_update(LEDStruct&)+0x48>)
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    61b6:	4a12      	ldr	r2, [pc, #72]	; (6200 <noise_update(LEDStruct&)+0x4c>)
	switch (update_var) {
    61b8:	781b      	ldrb	r3, [r3, #0]
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    61ba:	2100      	movs	r1, #0
	switch (update_var) {
    61bc:	3b01      	subs	r3, #1
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    61be:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    61c0:	2b03      	cmp	r3, #3
    61c2:	d807      	bhi.n	61d4 <noise_update(LEDStruct&)+0x20>
    61c4:	e8df f003 	tbb	[pc, r3]
    61c8:	080e0214 	.word	0x080e0214
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
    61cc:	4b0d      	ldr	r3, [pc, #52]	; (6204 <noise_update(LEDStruct&)+0x50>)
    61ce:	881b      	ldrh	r3, [r3, #0]
    61d0:	f8a0 3758 	strh.w	r3, [r0, #1880]	; 0x758
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    61d4:	f7fc bc52 	b.w	2a7c <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
    61d8:	4b0a      	ldr	r3, [pc, #40]	; (6204 <noise_update(LEDStruct&)+0x50>)
    61da:	881b      	ldrh	r3, [r3, #0]
    61dc:	f880 375d 	strb.w	r3, [r0, #1885]	; 0x75d
		default:	break;
	}
	LEDDebug(leds);
    61e0:	f7fc bc4c 	b.w	2a7c <LEDDebug(LEDStruct&)>
void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
    61e4:	4b07      	ldr	r3, [pc, #28]	; (6204 <noise_update(LEDStruct&)+0x50>)
    61e6:	881b      	ldrh	r3, [r3, #0]
    61e8:	f8a0 375a 	strh.w	r3, [r0, #1882]	; 0x75a
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    61ec:	f7fc bc46 	b.w	2a7c <LEDDebug(LEDStruct&)>
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
    61f0:	4b04      	ldr	r3, [pc, #16]	; (6204 <noise_update(LEDStruct&)+0x50>)
    61f2:	881b      	ldrh	r3, [r3, #0]
    61f4:	f8a0 3756 	strh.w	r3, [r0, #1878]	; 0x756
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    61f8:	f7fc bc40 	b.w	2a7c <LEDDebug(LEDStruct&)>
    61fc:	1fff9a24 	.word	0x1fff9a24
    6200:	1fff91e1 	.word	0x1fff91e1
    6204:	1fff90e2 	.word	0x1fff90e2

00006208 <noise(LEDStruct&)>:
}

void noise(LEDStruct& leds) {
    6208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { noise_init(leds); }
    620c:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		default:	break;
	}
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
    6210:	b085      	sub	sp, #20
    6212:	4606      	mov	r6, r0
	if (!leds.mode_initialized) { noise_init(leds); }
    6214:	2b00      	cmp	r3, #0
    6216:	d14d      	bne.n	62b4 <noise(LEDStruct&)+0xac>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    6218:	4c5b      	ldr	r4, [pc, #364]	; (6388 <noise(LEDStruct&)+0x180>)
    621a:	8823      	ldrh	r3, [r4, #0]
    621c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6220:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6224:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6228:	3319      	adds	r3, #25
    622a:	b29b      	uxth	r3, r3
    622c:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    6230:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    6234:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    6238:	3519      	adds	r5, #25
    623a:	b2ad      	uxth	r5, r5
    623c:	eb05 2745 	add.w	r7, r5, r5, lsl #9
    6240:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    6244:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    6248:	3719      	adds	r7, #25
    624a:	b2bf      	uxth	r7, r7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    624c:	eb07 2147 	add.w	r1, r7, r7, lsl #9
    6250:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    6254:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    6258:	3119      	adds	r1, #25
    625a:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    625c:	eb01 2011 	add.w	r0, r1, r1, lsr #8
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.noise_scale	= s;
    6260:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
	leds.noise_yscale	= y;
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
    6264:	b2c0      	uxtb	r0, r0
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.noise_scale	= s;
	leds.noise_yscale	= y;
    6266:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
	leds.noise_dist		= d;
    626a:	f64b 7e68 	movw	lr, #49000	; 0xbf68
    626e:	fb0e f507 	mul.w	r5, lr, r7
	leds.noise_fade		= nf;
    6272:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.noise_scale	= s;
    6276:	f3c2 32cf 	ubfx	r2, r2, #15, #16
	leds.noise_yscale	= y;
    627a:	f3c3 33cf 	ubfx	r3, r3, #15, #16
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.noise_scale	= s;
    627e:	320a      	adds	r2, #10
	leds.noise_yscale	= y;
    6280:	330a      	adds	r3, #10
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
    6282:	1180      	asrs	r0, r0, #6
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.noise_scale	= s;
	leds.noise_yscale	= y;
	leds.noise_dist		= d;
    6284:	0c2d      	lsrs	r5, r5, #16
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    6286:	2701      	movs	r7, #1
	leds.delay_time			= 5;

	leds.noise_scale	= s;
	leds.noise_yscale	= y;
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
    6288:	3020      	adds	r0, #32
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.noise_scale	= s;
	leds.noise_yscale	= y;
	leds.noise_dist		= d;
    628a:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.noise_scale	= s;
    628e:	f8a6 2756 	strh.w	r2, [r6, #1878]	; 0x756
	leds.noise_yscale	= y;
    6292:	f8a6 3758 	strh.w	r3, [r6, #1880]	; 0x758
#define NOISE_H


void noise_init(LEDStruct& leds, uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
    6296:	2215      	movs	r2, #21
	leds.use_palette		= 1;
	leds.delay_time			= 5;
    6298:	2305      	movs	r3, #5
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    629a:	8021      	strh	r1, [r4, #0]

	leds.noise_scale	= s;
	leds.noise_yscale	= y;
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
    629c:	f886 075d 	strb.w	r0, [r6, #1885]	; 0x75d
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.noise_scale	= s;
	leds.noise_yscale	= y;
	leds.noise_dist		= d;
    62a0:	f8a6 575a 	strh.w	r5, [r6, #1882]	; 0x75a
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    62a4:	f886 722d 	strb.w	r7, [r6, #557]	; 0x22d
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
    62a8:	f886 7229 	strb.w	r7, [r6, #553]	; 0x229
#define NOISE_H


void noise_init(LEDStruct& leds, uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
    62ac:	f886 222c 	strb.w	r2, [r6, #556]	; 0x22c
	leds.use_palette		= 1;
	leds.delay_time			= 5;
    62b0:	f886 31c3 	strb.w	r3, [r6, #451]	; 0x1c3
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    62b4:	4b35      	ldr	r3, [pc, #212]	; (638c <noise(LEDStruct&)+0x184>)
    62b6:	781b      	ldrb	r3, [r3, #0]
    62b8:	2b00      	cmp	r3, #0
    62ba:	d160      	bne.n	637e <noise(LEDStruct&)+0x176>

	for (int i = 0; i < NUM_LEDS; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    62bc:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 6398 <noise(LEDStruct&)+0x190>
    62c0:	f206 18c7 	addw	r8, r6, #455	; 0x1c7
    62c4:	4634      	mov	r4, r6
		default:	break;
	}
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
    62c6:	2500      	movs	r5, #0
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < NUM_LEDS; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    62c8:	2701      	movs	r7, #1
void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < NUM_LEDS; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    62ca:	f8b6 0756 	ldrh.w	r0, [r6, #1878]	; 0x756
    62ce:	f8b6 175a 	ldrh.w	r1, [r6, #1882]	; 0x75a
    62d2:	fb10 f005 	smulbb	r0, r0, r5
    62d6:	b280      	uxth	r0, r0
    62d8:	4401      	add	r1, r0
    62da:	b289      	uxth	r1, r1
    62dc:	f003 fede 	bl	a09c <inoise8(unsigned short, unsigned short)>
    62e0:	fba9 3200 	umull	r3, r2, r9, r0
    62e4:	eb00 12d2 	add.w	r2, r0, r2, lsr #7
    62e8:	f002 02ff 	and.w	r2, r2, #255	; 0xff
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    62ec:	9700      	str	r7, [sp, #0]
    62ee:	23ff      	movs	r3, #255	; 0xff
void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < NUM_LEDS; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    62f0:	f886 275c 	strb.w	r2, [r6, #1884]	; 0x75c
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    62f4:	4641      	mov	r1, r8
    62f6:	a803      	add	r0, sp, #12

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < NUM_LEDS; i++) {
    62f8:	3501      	adds	r5, #1
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    62fa:	f003 fb2b 	bl	9954 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    62fe:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    6302:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    6306:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    630a:	7021      	strb	r1, [r4, #0]

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < NUM_LEDS; i++) {
    630c:	2d96      	cmp	r5, #150	; 0x96
        g = rhs.g;
    630e:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    6310:	70a3      	strb	r3, [r4, #2]
    6312:	f104 0403 	add.w	r4, r4, #3
    6316:	d1d8      	bne.n	62ca <noise(LEDStruct&)+0xc2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6318:	4b1d      	ldr	r3, [pc, #116]	; (6390 <noise(LEDStruct&)+0x188>)
    631a:	681b      	ldr	r3, [r3, #0]
    631c:	9303      	str	r3, [sp, #12]
	return ret;
    631e:	9803      	ldr	r0, [sp, #12]
    6320:	f44f 232f 	mov.w	r3, #716800	; 0xaf000
    6324:	fb03 f000 	mul.w	r0, r3, r0
    6328:	0e00      	lsrs	r0, r0, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    632a:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    632c:	0659      	lsls	r1, r3, #25
    632e:	d521      	bpl.n	6374 <noise(LEDStruct&)+0x16c>
        offset = (uint8_t)255 - offset;
    6330:	43db      	mvns	r3, r3
    6332:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6334:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    6338:	1c5a      	adds	r2, r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    633a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    633e:	110b      	asrs	r3, r1, #4
    6340:	4914      	ldr	r1, [pc, #80]	; (6394 <noise(LEDStruct&)+0x18c>)
    6342:	005b      	lsls	r3, r3, #1
    6344:	18cc      	adds	r4, r1, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6346:	5ccb      	ldrb	r3, [r1, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    6348:	7861      	ldrb	r1, [r4, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    634a:	fb11 f202 	smulbb	r2, r1, r2
    634e:	eb03 1322 	add.w	r3, r3, r2, asr #4
    6352:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    6354:	0602      	lsls	r2, r0, #24
    6356:	bf48      	it	mi
    6358:	425b      	negmi	r3, r3
    635a:	b25b      	sxtb	r3, r3

    y += 128;
    635c:	3b80      	subs	r3, #128	; 0x80
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
	}
	leds.noise_dist += beatsin8(10, 1, 4);
    635e:	f8b6 275a 	ldrh.w	r2, [r6, #1882]	; 0x75a
    6362:	f3c3 1381 	ubfx	r3, r3, #6, #2
    6366:	3301      	adds	r3, #1
    6368:	4413      	add	r3, r2
    636a:	f8a6 375a 	strh.w	r3, [r6, #1882]	; 0x75a

}
    636e:	b005      	add	sp, #20
    6370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6374:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6378:	f003 020f 	and.w	r2, r3, #15
    637c:	e7df      	b.n	633e <noise(LEDStruct&)+0x136>
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    637e:	4630      	mov	r0, r6
    6380:	f7ff ff18 	bl	61b4 <noise_update(LEDStruct&)>
    6384:	e79a      	b.n	62bc <noise(LEDStruct&)+0xb4>
    6386:	bf00      	nop
    6388:	1fff8780 	.word	0x1fff8780
    638c:	1fff91e1 	.word	0x1fff91e1
    6390:	1ffface8 	.word	0x1ffface8
    6394:	0000d8b8 	.word	0x0000d8b8
    6398:	80808081 	.word	0x80808081

0000639c <noise_mover(LEDStruct&)>:
	leds.noise_dist += beatsin8(10, 1, 4);

}


void noise_mover(LEDStruct& leds) {
    639c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { noise_init(leds); }
    639e:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	leds.noise_dist += beatsin8(10, 1, 4);

}


void noise_mover(LEDStruct& leds) {
    63a2:	b085      	sub	sp, #20
    63a4:	4605      	mov	r5, r0
	if (!leds.mode_initialized) { noise_init(leds); }
    63a6:	2b00      	cmp	r3, #0
    63a8:	d14e      	bne.n	6448 <noise_mover(LEDStruct&)+0xac>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    63aa:	4c5c      	ldr	r4, [pc, #368]	; (651c <noise_mover(LEDStruct&)+0x180>)
    63ac:	8823      	ldrh	r3, [r4, #0]
    63ae:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    63b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    63b6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    63ba:	3319      	adds	r3, #25
    63bc:	b29b      	uxth	r3, r3
    63be:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    63c2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    63c6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    63ca:	3219      	adds	r2, #25
    63cc:	b292      	uxth	r2, r2
    63ce:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    63d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    63d6:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    63da:	3619      	adds	r6, #25
    63dc:	b2b6      	uxth	r6, r6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    63de:	eb06 2146 	add.w	r1, r6, r6, lsl #9
    63e2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    63e6:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    63ea:	3119      	adds	r1, #25
    63ec:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    63ee:	eb01 2011 	add.w	r0, r1, r1, lsr #8
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.noise_scale	= s;
	leds.noise_yscale	= y;
	leds.noise_dist		= d;
    63f2:	f64b 7768 	movw	r7, #49000	; 0xbf68
	leds.noise_fade		= nf;
    63f6:	b2c0      	uxtb	r0, r0
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.noise_scale	= s;
    63f8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	leds.noise_yscale	= y;
	leds.noise_dist		= d;
    63fc:	fb07 f606 	mul.w	r6, r7, r6
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.noise_scale	= s;
	leds.noise_yscale	= y;
    6400:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
    6404:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.noise_scale	= s;
    6408:	f3c3 33cf 	ubfx	r3, r3, #15, #16
    640c:	330a      	adds	r3, #10
	leds.noise_yscale	= y;
    640e:	f3c2 32cf 	ubfx	r2, r2, #15, #16
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
    6412:	1180      	asrs	r0, r0, #6
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.noise_scale	= s;
	leds.noise_yscale	= y;
	leds.noise_dist		= d;
    6414:	0c36      	lsrs	r6, r6, #16
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    6416:	2701      	movs	r7, #1
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.noise_scale	= s;
	leds.noise_yscale	= y;
    6418:	320a      	adds	r2, #10
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
    641a:	3020      	adds	r0, #32
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.noise_scale	= s;
	leds.noise_yscale	= y;
	leds.noise_dist		= d;
    641c:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.noise_scale	= s;
    6420:	f8a5 3756 	strh.w	r3, [r5, #1878]	; 0x756
#define NOISE_H


void noise_init(LEDStruct& leds, uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
    6424:	f04f 0e15 	mov.w	lr, #21
	leds.use_palette		= 1;
	leds.delay_time			= 5;
    6428:	2305      	movs	r3, #5

	leds.noise_scale	= s;
	leds.noise_yscale	= y;
    642a:	f8a5 2758 	strh.w	r2, [r5, #1880]	; 0x758
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = APPLY_FASTLED_RAND16_2053(rand16seed) + FASTLED_RAND16_13849;
    642e:	8021      	strh	r1, [r4, #0]
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
    6430:	f885 075d 	strb.w	r0, [r5, #1885]	; 0x75d
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.noise_scale	= s;
	leds.noise_yscale	= y;
	leds.noise_dist		= d;
    6434:	f8a5 675a 	strh.w	r6, [r5, #1882]	; 0x75a
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    6438:	f885 722d 	strb.w	r7, [r5, #557]	; 0x22d
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
    643c:	f885 7229 	strb.w	r7, [r5, #553]	; 0x229
#define NOISE_H


void noise_init(LEDStruct& leds, uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
    6440:	f885 e22c 	strb.w	lr, [r5, #556]	; 0x22c
	leds.use_palette		= 1;
	leds.delay_time			= 5;
    6444:	f885 31c3 	strb.w	r3, [r5, #451]	; 0x1c3
}


void noise_mover(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    6448:	4b35      	ldr	r3, [pc, #212]	; (6520 <noise_mover(LEDStruct&)+0x184>)
    644a:	781b      	ldrb	r3, [r3, #0]
    644c:	b113      	cbz	r3, 6454 <noise_mover(LEDStruct&)+0xb8>
    644e:	4628      	mov	r0, r5
    6450:	f7ff feb0 	bl	61b4 <noise_update(LEDStruct&)>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.noise_fade);
    6454:	f895 275d 	ldrb.w	r2, [r5, #1885]	; 0x75d
	uint8_t locn = inoise8(leds.noise_scale, leds.noise_dist + leds.noise_yscale) % 255;          
    6458:	4c32      	ldr	r4, [pc, #200]	; (6524 <noise_mover(LEDStruct&)+0x188>)

void noise_mover(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.noise_fade);
    645a:	2196      	movs	r1, #150	; 0x96
    645c:	4628      	mov	r0, r5
    645e:	f003 fa19 	bl	9894 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	uint8_t locn = inoise8(leds.noise_scale, leds.noise_dist + leds.noise_yscale) % 255;          
    6462:	f8b5 3758 	ldrh.w	r3, [r5, #1880]	; 0x758
    6466:	f8b5 175a 	ldrh.w	r1, [r5, #1882]	; 0x75a
    646a:	f8b5 0756 	ldrh.w	r0, [r5, #1878]	; 0x756
    646e:	4419      	add	r1, r3
    6470:	b289      	uxth	r1, r1
    6472:	f003 fe13 	bl	a09c <inoise8(unsigned short, unsigned short)>
    6476:	fba4 3400 	umull	r3, r4, r4, r0
    647a:	eb00 10d4 	add.w	r0, r0, r4, lsr #7
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
    647e:	b2c0      	uxtb	r0, r0
    6480:	eb00 0480 	add.w	r4, r0, r0, lsl #2
    6484:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
    6488:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    648c:	1224      	asrs	r4, r4, #8
	uint8_t pixlen = map(locn, 0, 255, 0, NUM_LEDS);     
	leds.led_data[pixlen] = ColorFromPalette(leds.current_palette, pixlen, 255, LINEARBLEND);   
    648e:	2301      	movs	r3, #1
    6490:	b2e2      	uxtb	r2, r4
    6492:	9300      	str	r3, [sp, #0]
    6494:	f205 11c7 	addw	r1, r5, #455	; 0x1c7
    6498:	23ff      	movs	r3, #255	; 0xff
    649a:	a803      	add	r0, sp, #12
    649c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    64a0:	f003 fa58 	bl	9954 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    64a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    64a8:	552b      	strb	r3, [r5, r4]
    64aa:	442c      	add	r4, r5
        g = rhs.g;
    64ac:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    64b0:	f89d 200e 	ldrb.w	r2, [sp, #14]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    64b4:	4b1c      	ldr	r3, [pc, #112]	; (6528 <noise_mover(LEDStruct&)+0x18c>)

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    64b6:	7061      	strb	r1, [r4, #1]
        b = rhs.b;
    64b8:	70a2      	strb	r2, [r4, #2]
    64ba:	681b      	ldr	r3, [r3, #0]
    64bc:	9303      	str	r3, [sp, #12]
	return ret;
    64be:	9903      	ldr	r1, [sp, #12]
    64c0:	f44f 232f 	mov.w	r3, #716800	; 0xaf000
    64c4:	fb03 f101 	mul.w	r1, r3, r1
    64c8:	0e09      	lsrs	r1, r1, #24
    64ca:	b2cb      	uxtb	r3, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    64cc:	0658      	lsls	r0, r3, #25
    64ce:	d520      	bpl.n	6512 <noise_mover(LEDStruct&)+0x176>
        offset = (uint8_t)255 - offset;
    64d0:	43db      	mvns	r3, r3
    64d2:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    64d4:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    64d8:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    64da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    64de:	4813      	ldr	r0, [pc, #76]	; (652c <noise_mover(LEDStruct&)+0x190>)
    64e0:	1112      	asrs	r2, r2, #4
    64e2:	0052      	lsls	r2, r2, #1
    64e4:	1884      	adds	r4, r0, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    64e6:	5c82      	ldrb	r2, [r0, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    64e8:	7860      	ldrb	r0, [r4, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    64ea:	fb10 f303 	smulbb	r3, r0, r3
    64ee:	eb02 1323 	add.w	r3, r2, r3, asr #4
    64f2:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    64f4:	060a      	lsls	r2, r1, #24
    64f6:	bf48      	it	mi
    64f8:	425b      	negmi	r3, r3
    64fa:	b25b      	sxtb	r3, r3

    y += 128;
    64fc:	3b80      	subs	r3, #128	; 0x80

	leds.noise_dist += beatsin8(10, 1, 4);
    64fe:	f8b5 275a 	ldrh.w	r2, [r5, #1882]	; 0x75a
    6502:	f3c3 1381 	ubfx	r3, r3, #6, #2
    6506:	3301      	adds	r3, #1
    6508:	4413      	add	r3, r2
    650a:	f8a5 375a 	strh.w	r3, [r5, #1882]	; 0x75a

}
    650e:	b005      	add	sp, #20
    6510:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6512:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6516:	f003 030f 	and.w	r3, r3, #15
    651a:	e7e0      	b.n	64de <noise_mover(LEDStruct&)+0x142>
    651c:	1fff8780 	.word	0x1fff8780
    6520:	1fff91e1 	.word	0x1fff91e1
    6524:	80808081 	.word	0x80808081
    6528:	1ffface8 	.word	0x1ffface8
    652c:	0000d8b8 	.word	0x0000d8b8

00006530 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>:
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    6530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6534:	b087      	sub	sp, #28
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    6536:	085b      	lsrs	r3, r3, #1
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    6538:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
    653c:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
    6540:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 662c <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0xfc>
    6544:	4f38      	ldr	r7, [pc, #224]	; (6628 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0xf8>)
    6546:	f5a5 4edb 	sub.w	lr, r5, #28032	; 0x6d80
    654a:	f1ae 0e04 	sub.w	lr, lr, #4
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    654e:	f103 0914 	add.w	r9, r3, #20
    6552:	fa1f f38e 	uxth.w	r3, lr
    6556:	9302      	str	r3, [sp, #8]
    6558:	f109 0301 	add.w	r3, r9, #1
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    655c:	468a      	mov	sl, r1
    655e:	4614      	mov	r4, r2
    6560:	4606      	mov	r6, r0
    6562:	9303      	str	r3, [sp, #12]
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        waveangle += 250;
    6564:	35fa      	adds	r5, #250	; 0xfa
    6566:	b2ad      	uxth	r5, r5
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6568:	046a      	lsls	r2, r5, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    656a:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    656e:	d503      	bpl.n	6578 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x48>
    6570:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6574:	3307      	adds	r3, #7
    6576:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6578:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    657a:	f3c3 0246 	ubfx	r2, r3, #1, #7
    657e:	f818 0001 	ldrb.w	r0, [r8, r1]
    6582:	f837 3011 	ldrh.w	r3, [r7, r1, lsl #1]
    6586:	fb00 3302 	mla	r3, r0, r2, r3
    658a:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    658c:	0428      	lsls	r0, r5, #16
    658e:	bf48      	it	mi
    6590:	425b      	negmi	r3, r3
    6592:	b21b      	sxth	r3, r3
        uint16_t s16 = sin16(waveangle) + 32768;
        uint16_t cs = scale16(s16, wavescale_half) + wavescale_half;
        ci += cs;
    6594:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6598:	9a03      	ldr	r2, [sp, #12]
    659a:	b29b      	uxth	r3, r3
    659c:	fb02 f303 	mul.w	r3, r2, r3
    65a0:	eb09 4313 	add.w	r3, r9, r3, lsr #16
    65a4:	441c      	add	r4, r3
    65a6:	b2a4      	uxth	r4, r4
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    65a8:	0461      	lsls	r1, r4, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    65aa:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    65ae:	d503      	bpl.n	65b8 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x88>
    65b0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    65b4:	3307      	adds	r3, #7
    65b6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    65b8:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    65ba:	f3c3 0246 	ubfx	r2, r3, #1, #7
    65be:	f818 0001 	ldrb.w	r0, [r8, r1]
    65c2:	f837 3011 	ldrh.w	r3, [r7, r1, lsl #1]
    65c6:	fb00 3302 	mla	r3, r0, r2, r3
    65ca:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    65cc:	0422      	lsls	r2, r4, #16
    65ce:	bf48      	it	mi
    65d0:	425b      	negmi	r3, r3
    65d2:	b21b      	sxth	r3, r3
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
    65d4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    65d8:	b29b      	uxth	r3, r3
    65da:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
    65de:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    65e2:	2301      	movs	r3, #1
    65e4:	9300      	str	r3, [sp, #0]
    65e6:	f3c2 4207 	ubfx	r2, r2, #16, #8
    65ea:	465b      	mov	r3, fp
    65ec:	4651      	mov	r1, sl
    65ee:	a805      	add	r0, sp, #20
    65f0:	f003 f9b0 	bl	9954 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    65f4:	7833      	ldrb	r3, [r6, #0]
    65f6:	f89d 2014 	ldrb.w	r2, [sp, #20]
    65fa:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    65fe:	7033      	strb	r3, [r6, #0]
    6600:	7872      	ldrb	r2, [r6, #1]
    6602:	f89d 3015 	ldrb.w	r3, [sp, #21]
    6606:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    660a:	7072      	strb	r2, [r6, #1]
    660c:	78b3      	ldrb	r3, [r6, #2]
    660e:	f89d 2016 	ldrb.w	r2, [sp, #22]
    6612:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    6616:	70b3      	strb	r3, [r6, #2]
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
    6618:	9b02      	ldr	r3, [sp, #8]
    661a:	429d      	cmp	r5, r3
    661c:	f106 0603 	add.w	r6, r6, #3
    6620:	d1a0      	bne.n	6564 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x34>
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
        leds.led_data[i] += c;
    }
}
    6622:	b007      	add	sp, #28
    6624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6628:	0000d718 	.word	0x0000d718
    662c:	0000dee8 	.word	0x0000dee8

00006630 <pacifica_add_whitecaps(LEDStruct&)>:

// Add extra 'white' to areas where the four layers of light have lined up brightly
void pacifica_add_whitecaps(LEDStruct& leds)
{
    6630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6634:	4c56      	ldr	r4, [pc, #344]	; (6790 <pacifica_add_whitecaps(LEDStruct&)+0x160>)
    6636:	b083      	sub	sp, #12
    6638:	6823      	ldr	r3, [r4, #0]
    663a:	9301      	str	r3, [sp, #4]
	return ret;
    663c:	9a01      	ldr	r2, [sp, #4]
    663e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    6642:	ebc2 1282 	rsb	r2, r2, r2, lsl #6
    6646:	f3c2 3247 	ubfx	r2, r2, #13, #8
    664a:	b2d3      	uxtb	r3, r2
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    664c:	065e      	lsls	r6, r3, #25
    664e:	f140 8099 	bpl.w	6784 <pacifica_add_whitecaps(LEDStruct&)+0x154>
        offset = (uint8_t)255 - offset;
    6652:	43db      	mvns	r3, r3
    6654:	b2dd      	uxtb	r5, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6656:	f005 030f 	and.w	r3, r5, #15
    if( theta & 0x40) secoffset++;
    665a:	1c59      	adds	r1, r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    665c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    6660:	112b      	asrs	r3, r5, #4
    6662:	f8df 9130 	ldr.w	r9, [pc, #304]	; 6794 <pacifica_add_whitecaps(LEDStruct&)+0x164>
    6666:	005b      	lsls	r3, r3, #1
    6668:	eb09 0503 	add.w	r5, r9, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    666c:	f819 3003 	ldrb.w	r3, [r9, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    6670:	786d      	ldrb	r5, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6672:	fb15 f101 	smulbb	r1, r5, r1
    6676:	eb03 1321 	add.w	r3, r3, r1, asr #4
    667a:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    667c:	0615      	lsls	r5, r2, #24
    667e:	bf48      	it	mi
    6680:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6682:	6822      	ldr	r2, [r4, #0]
    6684:	9200      	str	r2, [sp, #0]
    6686:	b25b      	sxtb	r3, r3

    y += 128;
    6688:	3b80      	subs	r3, #128	; 0x80
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    668a:	b2db      	uxtb	r3, r3
	return ret;
    668c:	9c00      	ldr	r4, [sp, #0]
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    668e:	f44f 22f5 	mov.w	r2, #501760	; 0x7a800
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    6692:	eb03 0a83 	add.w	sl, r3, r3, lsl #2
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    6696:	fb02 f404 	mul.w	r4, r2, r4
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    669a:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    669e:	0e24      	lsrs	r4, r4, #24
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    66a0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
    66a4:	43e7      	mvns	r7, r4
    66a6:	f104 0b1a 	add.w	fp, r4, #26
    66aa:	f10a 0a37 	add.w	sl, sl, #55	; 0x37
    66ae:	b2ff      	uxtb	r7, r7
    66b0:	fa5f fb8b 	uxtb.w	fp, fp
    66b4:	fa5f fa8a 	uxtb.w	sl, sl
    66b8:	f100 0801 	add.w	r8, r0, #1
    66bc:	e058      	b.n	6770 <pacifica_add_whitecaps(LEDStruct&)+0x140>
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    66be:	f007 030f 	and.w	r3, r7, #15
    if( theta & 0x40) secoffset++;
    66c2:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    66c4:	f007 023f 	and.w	r2, r7, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    66c8:	1112      	asrs	r2, r2, #4
    66ca:	0052      	lsls	r2, r2, #1
    66cc:	eb09 0102 	add.w	r1, r9, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    66d0:	f819 2002 	ldrb.w	r2, [r9, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    66d4:	7849      	ldrb	r1, [r1, #1]
#if FASTLED_SCALE8_FIXED == 1
        const uint8_t eightyfive = 85;
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
    66d6:	f818 ec01 	ldrb.w	lr, [r8, #-1]
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    66da:	7886      	ldrb	r6, [r0, #2]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    66dc:	fb11 f303 	smulbb	r3, r1, r3
    66e0:	eb02 1323 	add.w	r3, r2, r3, asr #4
    66e4:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    66e6:	0622      	lsls	r2, r4, #24
    66e8:	7842      	ldrb	r2, [r0, #1]
    66ea:	bf48      	it	mi
    66ec:	425b      	negmi	r3, r3
    66ee:	fa0f fc8e 	sxth.w	ip, lr
    66f2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    66f6:	b25b      	sxtb	r3, r3
    66f8:	eb01 1101 	add.w	r1, r1, r1, lsl #4

    y += 128;
    66fc:	3b80      	subs	r3, #128	; 0x80
    66fe:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    6702:	440a      	add	r2, r1
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
    6704:	b2db      	uxtb	r3, r3
    6706:	eb06 0186 	add.w	r1, r6, r6, lsl #2
    670a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
    670e:	1212      	asrs	r2, r2, #8
    6710:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    6714:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6718:	4465      	add	r5, ip
    671a:	eb02 2525 	add.w	r5, r2, r5, asr #8
    671e:	440e      	add	r6, r1
    6720:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    6724:	eb0a 2323 	add.w	r3, sl, r3, asr #8
    6728:	eb05 2626 	add.w	r6, r5, r6, asr #8
    672c:	b2db      	uxtb	r3, r3
    672e:	b2f6      	uxtb	r6, r6
        wave += 7;
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    6730:	1af2      	subs	r2, r6, r3
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    6732:	3407      	adds	r4, #7
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    6734:	b2d2      	uxtb	r2, r2

    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
    6736:	42b3      	cmp	r3, r6
    6738:	4611      	mov	r1, r2
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    673a:	b2e4      	uxtb	r4, r4
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
    673c:	d210      	bcs.n	6760 <pacifica_add_whitecaps(LEDStruct&)+0x130>
    673e:	fa81 f152 	uqadd8	r1, r1, r2
    6742:	460d      	mov	r5, r1
    6744:	fa85 f551 	uqadd8	r5, r5, r1
    6748:	fa8e fe52 	uqadd8	lr, lr, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    674c:	f808 ec01 	strb.w	lr, [r8, #-1]
    6750:	7842      	ldrb	r2, [r0, #1]
    6752:	fa82 f251 	uqadd8	r2, r2, r1
    6756:	7883      	ldrb	r3, [r0, #2]
        g = qadd8( g, rhs.g);
    6758:	7042      	strb	r2, [r0, #1]
    675a:	fa83 f355 	uqadd8	r3, r3, r5
        b = qadd8( b, rhs.b);
    675e:	7083      	strb	r3, [r0, #2]
    6760:	3f07      	subs	r7, #7
void pacifica_add_whitecaps(LEDStruct& leds)
{
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < NUM_LEDS; i++) {
    6762:	455c      	cmp	r4, fp
    6764:	b2ff      	uxtb	r7, r7
    6766:	f100 0003 	add.w	r0, r0, #3
    676a:	f108 0803 	add.w	r8, r8, #3
    676e:	d006      	beq.n	677e <pacifica_add_whitecaps(LEDStruct&)+0x14e>
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    6770:	0661      	lsls	r1, r4, #25
    6772:	d4a4      	bmi.n	66be <pacifica_add_whitecaps(LEDStruct&)+0x8e>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6774:	f004 023f 	and.w	r2, r4, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6778:	f004 030f 	and.w	r3, r4, #15
    677c:	e7a4      	b.n	66c8 <pacifica_add_whitecaps(LEDStruct&)+0x98>
            uint8_t overage = l - threshold;
            uint8_t overage2 = qadd8(overage, overage);
            leds.led_data[i] += CRGB(overage, overage2, qadd8(overage2, overage2));
        }
    }
}
    677e:	b003      	add	sp, #12
    6780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6784:	f003 053f 	and.w	r5, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6788:	f003 010f 	and.w	r1, r3, #15
    678c:	e768      	b.n	6660 <pacifica_add_whitecaps(LEDStruct&)+0x30>
    678e:	bf00      	nop
    6790:	1ffface8 	.word	0x1ffface8
    6794:	0000d8b8 	.word	0x0000d8b8

00006798 <pacifica_deepen_colors(LEDStruct&)>:

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    6798:	4602      	mov	r2, r0
    679a:	b5f0      	push	{r4, r5, r6, r7, lr}
    679c:	3002      	adds	r0, #2
    679e:	f502 74e1 	add.w	r4, r2, #450	; 0x1c2
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    67a2:	2702      	movs	r7, #2
        if( rhs.g > g) g = rhs.g;
    67a4:	2605      	movs	r6, #5
        if( rhs.b > b) b = rhs.b;
    67a6:	2507      	movs	r5, #7
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    67a8:	7853      	ldrb	r3, [r2, #1]
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        leds.led_data[i].blue = scale8(leds.led_data[i].blue, 145);
    67aa:	7891      	ldrb	r1, [r2, #2]
    67ac:	eb03 1e43 	add.w	lr, r3, r3, lsl #5
    67b0:	eb03 034e 	add.w	r3, r3, lr, lsl #1
    67b4:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
    67b8:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
    67bc:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
    67c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    67c4:	11c9      	asrs	r1, r1, #7
        leds.led_data[i].green = scale8(leds.led_data[i].green, 200);
    67c6:	7053      	strb	r3, [r2, #1]

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        leds.led_data[i].blue = scale8(leds.led_data[i].blue, 145);
    67c8:	7091      	strb	r1, [r2, #2]
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    67ca:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    67ce:	2901      	cmp	r1, #1
    67d0:	bf9c      	itt	ls
    67d2:	f800 7c02 	strbls.w	r7, [r0, #-2]
    67d6:	7853      	ldrbls	r3, [r2, #1]
        if( rhs.g > g) g = rhs.g;
    67d8:	2b04      	cmp	r3, #4
        if( rhs.b > b) b = rhs.b;
    67da:	7893      	ldrb	r3, [r2, #2]

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
        if( rhs.g > g) g = rhs.g;
    67dc:	bf98      	it	ls
    67de:	7056      	strbls	r6, [r2, #1]
        if( rhs.b > b) b = rhs.b;
    67e0:	2b06      	cmp	r3, #6
    67e2:	bf98      	it	ls
    67e4:	7095      	strbls	r5, [r2, #2]
    67e6:	3203      	adds	r2, #3
}

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
    67e8:	42a2      	cmp	r2, r4
    67ea:	f100 0003 	add.w	r0, r0, #3
    67ee:	d1db      	bne.n	67a8 <pacifica_deepen_colors(LEDStruct&)+0x10>
        leds.led_data[i].blue = scale8(leds.led_data[i].blue, 145);
        leds.led_data[i].green = scale8(leds.led_data[i].green, 200);
        leds.led_data[i] |= CRGB(2, 5, 7);
    }
}
    67f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67f2:	bf00      	nop

000067f4 <pacifica(LEDStruct&)>:
    LEDDebug(leds);
}


void pacifica(LEDStruct& leds)
{
    67f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!leds.mode_initialized) { pacifica_init(leds); }
    67f8:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    LEDDebug(leds);
}


void pacifica(LEDStruct& leds)
{
    67fc:	b095      	sub	sp, #84	; 0x54
    67fe:	4605      	mov	r5, r0
    if (!leds.mode_initialized) { pacifica_init(leds); }
    6800:	b9a3      	cbnz	r3, 682c <pacifica(LEDStruct&)+0x38>
    6802:	4acb      	ldr	r2, [pc, #812]	; (6b30 <pacifica(LEDStruct&)+0x33c>)
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized   = 1;
    leds.use_palette        = 0;
    6804:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    6808:	8813      	ldrh	r3, [r2, #0]
    680a:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    680e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6812:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6816:	3319      	adds	r3, #25
        leds.led_data[i] |= CRGB(2, 5, 7);
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized   = 1;
    6818:	2401      	movs	r4, #1
    leds.use_palette        = 0;
    leds.mode_type          = PACIFICA;
    681a:	2010      	movs	r0, #16
    leds.delay_time         = 15;
    681c:	210f      	movs	r1, #15
    681e:	8013      	strh	r3, [r2, #0]
        leds.led_data[i] |= CRGB(2, 5, 7);
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized   = 1;
    6820:	f885 422d 	strb.w	r4, [r5, #557]	; 0x22d
    leds.use_palette        = 0;
    leds.mode_type          = PACIFICA;
    6824:	f885 022c 	strb.w	r0, [r5, #556]	; 0x22c
    leds.delay_time         = 15;
    6828:	f885 11c3 	strb.w	r1, [r5, #451]	; 0x1c3


void pacifica(LEDStruct& leds)
{
    if (!leds.mode_initialized) { pacifica_init(leds); }
    if (keyboard_update) { pacifica_update(leds); }
    682c:	4bc1      	ldr	r3, [pc, #772]	; (6b34 <pacifica(LEDStruct&)+0x340>)
    682e:	781a      	ldrb	r2, [r3, #0]
    6830:	b122      	cbz	r2, 683c <pacifica(LEDStruct&)+0x48>
    leds.mode_type          = PACIFICA;
    leds.delay_time         = 15;
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    6832:	2200      	movs	r2, #0
    switch (update_var) {
    default:	break;
    }
    LEDDebug(leds);
    6834:	4628      	mov	r0, r5
    leds.mode_type          = PACIFICA;
    leds.delay_time         = 15;
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    6836:	701a      	strb	r2, [r3, #0]
    switch (update_var) {
    default:	break;
    }
    LEDDebug(leds);
    6838:	f7fc f920 	bl	2a7c <LEDDebug(LEDStruct&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    683c:	4cbe      	ldr	r4, [pc, #760]	; (6b38 <pacifica(LEDStruct&)+0x344>)
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    683e:	4abf      	ldr	r2, [pc, #764]	; (6b3c <pacifica(LEDStruct&)+0x348>)
    6840:	6823      	ldr	r3, [r4, #0]
    6842:	9303      	str	r3, [sp, #12]
	return ret;
    6844:	9b03      	ldr	r3, [sp, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6846:	6821      	ldr	r1, [r4, #0]
    6848:	9113      	str	r1, [sp, #76]	; 0x4c
	return ret;
    684a:	9813      	ldr	r0, [sp, #76]	; 0x4c
    684c:	6811      	ldr	r1, [r2, #0]
    sLastms = ms;
    684e:	6013      	str	r3, [r2, #0]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6850:	f44f 3252 	mov.w	r2, #215040	; 0x34800
    6854:	fb02 f000 	mul.w	r0, r2, r0
    6858:	0c00      	lsrs	r0, r0, #16
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    685a:	ebc1 0c03 	rsb	ip, r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    685e:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6860:	f3c0 02ca 	ubfx	r2, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6864:	d503      	bpl.n	686e <pacifica(LEDStruct&)+0x7a>
    6866:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    686a:	3207      	adds	r2, #7
    686c:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    686e:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];
    6870:	4fb3      	ldr	r7, [pc, #716]	; (6b40 <pacifica(LEDStruct&)+0x34c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6872:	4eb4      	ldr	r6, [pc, #720]	; (6b44 <pacifica(LEDStruct&)+0x350>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6874:	f817 e001 	ldrb.w	lr, [r7, r1]
    6878:	f836 3011 	ldrh.w	r3, [r6, r1, lsl #1]
    687c:	f3c2 0146 	ubfx	r1, r2, #1, #7
    6880:	fb0e 3201 	mla	r2, lr, r1, r3
    6884:	b293      	uxth	r3, r2

    if( theta & 0x8000 ) y = -y;
    6886:	0402      	lsls	r2, r0, #16
    6888:	bf48      	it	mi
    688a:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    688c:	6822      	ldr	r2, [r4, #0]
    688e:	9212      	str	r2, [sp, #72]	; 0x48
    6890:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6892:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6896:	b29b      	uxth	r3, r3
    6898:	f04f 0e5b 	mov.w	lr, #91	; 0x5b
	return ret;
    689c:	9912      	ldr	r1, [sp, #72]	; 0x48
    689e:	fb0e fe03 	mul.w	lr, lr, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    68a2:	f44f 238c 	mov.w	r3, #286720	; 0x46000
    68a6:	fb03 f101 	mul.w	r1, r3, r1
    68aa:	0c09      	lsrs	r1, r1, #16
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    68ac:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    68b0:	f10e 0eb3 	add.w	lr, lr, #179	; 0xb3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    68b4:	0448      	lsls	r0, r1, #17
    68b6:	fa1f fe8e 	uxth.w	lr, lr
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    68ba:	f3c1 02ca 	ubfx	r2, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    68be:	d503      	bpl.n	68c8 <pacifica(LEDStruct&)+0xd4>
    68c0:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    68c4:	3207      	adds	r2, #7
    68c6:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    68c8:	0a13      	lsrs	r3, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    68ca:	f3c2 0046 	ubfx	r0, r2, #1, #7
    68ce:	5cfa      	ldrb	r2, [r7, r3]
    68d0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
    68d4:	fb02 3200 	mla	r2, r2, r0, r3

    if( theta & 0x8000 ) y = -y;
    68d8:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    68da:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    68dc:	bf48      	it	mi
    68de:	4252      	negmi	r2, r2
    68e0:	b212      	sxth	r2, r2
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    68e2:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    68e6:	b292      	uxth	r2, r2
    68e8:	215b      	movs	r1, #91	; 0x5b
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    68ea:	6823      	ldr	r3, [r4, #0]
    68ec:	9311      	str	r3, [sp, #68]	; 0x44
    68ee:	fb01 f102 	mul.w	r1, r1, r2
    68f2:	0c09      	lsrs	r1, r1, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    68f4:	4a94      	ldr	r2, [pc, #592]	; (6b48 <pacifica(LEDStruct&)+0x354>)
	return ret;
    68f6:	9811      	ldr	r0, [sp, #68]	; 0x44
    68f8:	31b3      	adds	r1, #179	; 0xb3
    68fa:	b289      	uxth	r1, r1
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    68fc:	fb0c fe0e 	mul.w	lr, ip, lr
    uint32_t deltams2 = (deltams * speedfactor2)